
006LED_button_ISR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006390  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b8  08006520  08006520  00016520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066d8  080066d8  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  080066d8  080066d8  000166d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080066e0  080066e0  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080066e0  080066e0  000166e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080066e4  080066e4  000166e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  080066e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002001c  2**0
                  CONTENTS
 10 .bss          00014420  2000001c  2000001c  0002001c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2001443c  2001443c  0002001c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012594  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a88  00000000  00000000  000325e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001140  00000000  00000000  00035068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fd8  00000000  00000000  000361a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023589  00000000  00000000  00037180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001307d  00000000  00000000  0005a709  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6628  00000000  00000000  0006d786  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00143dae  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004798  00000000  00000000  00143e00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000001c 	.word	0x2000001c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006508 	.word	0x08006508

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000020 	.word	0x20000020
 80001cc:	08006508 	.word	0x08006508

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012e68 	.word	0x20012e68

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295
 8000274:	f04f 30ff 	movne.w	r0, #4294967295
 8000278:	f000 b974 	b.w	8000564 <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9d08      	ldr	r5, [sp, #32]
 800029a:	4604      	mov	r4, r0
 800029c:	468e      	mov	lr, r1
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d14d      	bne.n	800033e <__udivmoddi4+0xaa>
 80002a2:	428a      	cmp	r2, r1
 80002a4:	4694      	mov	ip, r2
 80002a6:	d969      	bls.n	800037c <__udivmoddi4+0xe8>
 80002a8:	fab2 f282 	clz	r2, r2
 80002ac:	b152      	cbz	r2, 80002c4 <__udivmoddi4+0x30>
 80002ae:	fa01 f302 	lsl.w	r3, r1, r2
 80002b2:	f1c2 0120 	rsb	r1, r2, #32
 80002b6:	fa20 f101 	lsr.w	r1, r0, r1
 80002ba:	fa0c fc02 	lsl.w	ip, ip, r2
 80002be:	ea41 0e03 	orr.w	lr, r1, r3
 80002c2:	4094      	lsls	r4, r2
 80002c4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002c8:	0c21      	lsrs	r1, r4, #16
 80002ca:	fbbe f6f8 	udiv	r6, lr, r8
 80002ce:	fa1f f78c 	uxth.w	r7, ip
 80002d2:	fb08 e316 	mls	r3, r8, r6, lr
 80002d6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002da:	fb06 f107 	mul.w	r1, r6, r7
 80002de:	4299      	cmp	r1, r3
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x64>
 80002e2:	eb1c 0303 	adds.w	r3, ip, r3
 80002e6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ea:	f080 811f 	bcs.w	800052c <__udivmoddi4+0x298>
 80002ee:	4299      	cmp	r1, r3
 80002f0:	f240 811c 	bls.w	800052c <__udivmoddi4+0x298>
 80002f4:	3e02      	subs	r6, #2
 80002f6:	4463      	add	r3, ip
 80002f8:	1a5b      	subs	r3, r3, r1
 80002fa:	b2a4      	uxth	r4, r4
 80002fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000300:	fb08 3310 	mls	r3, r8, r0, r3
 8000304:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000308:	fb00 f707 	mul.w	r7, r0, r7
 800030c:	42a7      	cmp	r7, r4
 800030e:	d90a      	bls.n	8000326 <__udivmoddi4+0x92>
 8000310:	eb1c 0404 	adds.w	r4, ip, r4
 8000314:	f100 33ff 	add.w	r3, r0, #4294967295
 8000318:	f080 810a 	bcs.w	8000530 <__udivmoddi4+0x29c>
 800031c:	42a7      	cmp	r7, r4
 800031e:	f240 8107 	bls.w	8000530 <__udivmoddi4+0x29c>
 8000322:	4464      	add	r4, ip
 8000324:	3802      	subs	r0, #2
 8000326:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800032a:	1be4      	subs	r4, r4, r7
 800032c:	2600      	movs	r6, #0
 800032e:	b11d      	cbz	r5, 8000338 <__udivmoddi4+0xa4>
 8000330:	40d4      	lsrs	r4, r2
 8000332:	2300      	movs	r3, #0
 8000334:	e9c5 4300 	strd	r4, r3, [r5]
 8000338:	4631      	mov	r1, r6
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	428b      	cmp	r3, r1
 8000340:	d909      	bls.n	8000356 <__udivmoddi4+0xc2>
 8000342:	2d00      	cmp	r5, #0
 8000344:	f000 80ef 	beq.w	8000526 <__udivmoddi4+0x292>
 8000348:	2600      	movs	r6, #0
 800034a:	e9c5 0100 	strd	r0, r1, [r5]
 800034e:	4630      	mov	r0, r6
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	fab3 f683 	clz	r6, r3
 800035a:	2e00      	cmp	r6, #0
 800035c:	d14a      	bne.n	80003f4 <__udivmoddi4+0x160>
 800035e:	428b      	cmp	r3, r1
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xd4>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 80f9 	bhi.w	800055a <__udivmoddi4+0x2c6>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb61 0303 	sbc.w	r3, r1, r3
 800036e:	2001      	movs	r0, #1
 8000370:	469e      	mov	lr, r3
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e0      	beq.n	8000338 <__udivmoddi4+0xa4>
 8000376:	e9c5 4e00 	strd	r4, lr, [r5]
 800037a:	e7dd      	b.n	8000338 <__udivmoddi4+0xa4>
 800037c:	b902      	cbnz	r2, 8000380 <__udivmoddi4+0xec>
 800037e:	deff      	udf	#255	; 0xff
 8000380:	fab2 f282 	clz	r2, r2
 8000384:	2a00      	cmp	r2, #0
 8000386:	f040 8092 	bne.w	80004ae <__udivmoddi4+0x21a>
 800038a:	eba1 010c 	sub.w	r1, r1, ip
 800038e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000392:	fa1f fe8c 	uxth.w	lr, ip
 8000396:	2601      	movs	r6, #1
 8000398:	0c20      	lsrs	r0, r4, #16
 800039a:	fbb1 f3f7 	udiv	r3, r1, r7
 800039e:	fb07 1113 	mls	r1, r7, r3, r1
 80003a2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a6:	fb0e f003 	mul.w	r0, lr, r3
 80003aa:	4288      	cmp	r0, r1
 80003ac:	d908      	bls.n	80003c0 <__udivmoddi4+0x12c>
 80003ae:	eb1c 0101 	adds.w	r1, ip, r1
 80003b2:	f103 38ff 	add.w	r8, r3, #4294967295
 80003b6:	d202      	bcs.n	80003be <__udivmoddi4+0x12a>
 80003b8:	4288      	cmp	r0, r1
 80003ba:	f200 80cb 	bhi.w	8000554 <__udivmoddi4+0x2c0>
 80003be:	4643      	mov	r3, r8
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f7 	udiv	r0, r1, r7
 80003c8:	fb07 1110 	mls	r1, r7, r0, r1
 80003cc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003d0:	fb0e fe00 	mul.w	lr, lr, r0
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x156>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80003e0:	d202      	bcs.n	80003e8 <__udivmoddi4+0x154>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	f200 80bb 	bhi.w	800055e <__udivmoddi4+0x2ca>
 80003e8:	4608      	mov	r0, r1
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003f2:	e79c      	b.n	800032e <__udivmoddi4+0x9a>
 80003f4:	f1c6 0720 	rsb	r7, r6, #32
 80003f8:	40b3      	lsls	r3, r6
 80003fa:	fa22 fc07 	lsr.w	ip, r2, r7
 80003fe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000402:	fa20 f407 	lsr.w	r4, r0, r7
 8000406:	fa01 f306 	lsl.w	r3, r1, r6
 800040a:	431c      	orrs	r4, r3
 800040c:	40f9      	lsrs	r1, r7
 800040e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000412:	fa00 f306 	lsl.w	r3, r0, r6
 8000416:	fbb1 f8f9 	udiv	r8, r1, r9
 800041a:	0c20      	lsrs	r0, r4, #16
 800041c:	fa1f fe8c 	uxth.w	lr, ip
 8000420:	fb09 1118 	mls	r1, r9, r8, r1
 8000424:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000428:	fb08 f00e 	mul.w	r0, r8, lr
 800042c:	4288      	cmp	r0, r1
 800042e:	fa02 f206 	lsl.w	r2, r2, r6
 8000432:	d90b      	bls.n	800044c <__udivmoddi4+0x1b8>
 8000434:	eb1c 0101 	adds.w	r1, ip, r1
 8000438:	f108 3aff 	add.w	sl, r8, #4294967295
 800043c:	f080 8088 	bcs.w	8000550 <__udivmoddi4+0x2bc>
 8000440:	4288      	cmp	r0, r1
 8000442:	f240 8085 	bls.w	8000550 <__udivmoddi4+0x2bc>
 8000446:	f1a8 0802 	sub.w	r8, r8, #2
 800044a:	4461      	add	r1, ip
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f9 	udiv	r0, r1, r9
 8000454:	fb09 1110 	mls	r1, r9, r0, r1
 8000458:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800045c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000460:	458e      	cmp	lr, r1
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x1e2>
 8000464:	eb1c 0101 	adds.w	r1, ip, r1
 8000468:	f100 34ff 	add.w	r4, r0, #4294967295
 800046c:	d26c      	bcs.n	8000548 <__udivmoddi4+0x2b4>
 800046e:	458e      	cmp	lr, r1
 8000470:	d96a      	bls.n	8000548 <__udivmoddi4+0x2b4>
 8000472:	3802      	subs	r0, #2
 8000474:	4461      	add	r1, ip
 8000476:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800047a:	fba0 9402 	umull	r9, r4, r0, r2
 800047e:	eba1 010e 	sub.w	r1, r1, lr
 8000482:	42a1      	cmp	r1, r4
 8000484:	46c8      	mov	r8, r9
 8000486:	46a6      	mov	lr, r4
 8000488:	d356      	bcc.n	8000538 <__udivmoddi4+0x2a4>
 800048a:	d053      	beq.n	8000534 <__udivmoddi4+0x2a0>
 800048c:	b15d      	cbz	r5, 80004a6 <__udivmoddi4+0x212>
 800048e:	ebb3 0208 	subs.w	r2, r3, r8
 8000492:	eb61 010e 	sbc.w	r1, r1, lr
 8000496:	fa01 f707 	lsl.w	r7, r1, r7
 800049a:	fa22 f306 	lsr.w	r3, r2, r6
 800049e:	40f1      	lsrs	r1, r6
 80004a0:	431f      	orrs	r7, r3
 80004a2:	e9c5 7100 	strd	r7, r1, [r5]
 80004a6:	2600      	movs	r6, #0
 80004a8:	4631      	mov	r1, r6
 80004aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ae:	f1c2 0320 	rsb	r3, r2, #32
 80004b2:	40d8      	lsrs	r0, r3
 80004b4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b8:	fa21 f303 	lsr.w	r3, r1, r3
 80004bc:	4091      	lsls	r1, r2
 80004be:	4301      	orrs	r1, r0
 80004c0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c4:	fa1f fe8c 	uxth.w	lr, ip
 80004c8:	fbb3 f0f7 	udiv	r0, r3, r7
 80004cc:	fb07 3610 	mls	r6, r7, r0, r3
 80004d0:	0c0b      	lsrs	r3, r1, #16
 80004d2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004d6:	fb00 f60e 	mul.w	r6, r0, lr
 80004da:	429e      	cmp	r6, r3
 80004dc:	fa04 f402 	lsl.w	r4, r4, r2
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x260>
 80004e2:	eb1c 0303 	adds.w	r3, ip, r3
 80004e6:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ea:	d22f      	bcs.n	800054c <__udivmoddi4+0x2b8>
 80004ec:	429e      	cmp	r6, r3
 80004ee:	d92d      	bls.n	800054c <__udivmoddi4+0x2b8>
 80004f0:	3802      	subs	r0, #2
 80004f2:	4463      	add	r3, ip
 80004f4:	1b9b      	subs	r3, r3, r6
 80004f6:	b289      	uxth	r1, r1
 80004f8:	fbb3 f6f7 	udiv	r6, r3, r7
 80004fc:	fb07 3316 	mls	r3, r7, r6, r3
 8000500:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000504:	fb06 f30e 	mul.w	r3, r6, lr
 8000508:	428b      	cmp	r3, r1
 800050a:	d908      	bls.n	800051e <__udivmoddi4+0x28a>
 800050c:	eb1c 0101 	adds.w	r1, ip, r1
 8000510:	f106 38ff 	add.w	r8, r6, #4294967295
 8000514:	d216      	bcs.n	8000544 <__udivmoddi4+0x2b0>
 8000516:	428b      	cmp	r3, r1
 8000518:	d914      	bls.n	8000544 <__udivmoddi4+0x2b0>
 800051a:	3e02      	subs	r6, #2
 800051c:	4461      	add	r1, ip
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000524:	e738      	b.n	8000398 <__udivmoddi4+0x104>
 8000526:	462e      	mov	r6, r5
 8000528:	4628      	mov	r0, r5
 800052a:	e705      	b.n	8000338 <__udivmoddi4+0xa4>
 800052c:	4606      	mov	r6, r0
 800052e:	e6e3      	b.n	80002f8 <__udivmoddi4+0x64>
 8000530:	4618      	mov	r0, r3
 8000532:	e6f8      	b.n	8000326 <__udivmoddi4+0x92>
 8000534:	454b      	cmp	r3, r9
 8000536:	d2a9      	bcs.n	800048c <__udivmoddi4+0x1f8>
 8000538:	ebb9 0802 	subs.w	r8, r9, r2
 800053c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000540:	3801      	subs	r0, #1
 8000542:	e7a3      	b.n	800048c <__udivmoddi4+0x1f8>
 8000544:	4646      	mov	r6, r8
 8000546:	e7ea      	b.n	800051e <__udivmoddi4+0x28a>
 8000548:	4620      	mov	r0, r4
 800054a:	e794      	b.n	8000476 <__udivmoddi4+0x1e2>
 800054c:	4640      	mov	r0, r8
 800054e:	e7d1      	b.n	80004f4 <__udivmoddi4+0x260>
 8000550:	46d0      	mov	r8, sl
 8000552:	e77b      	b.n	800044c <__udivmoddi4+0x1b8>
 8000554:	3b02      	subs	r3, #2
 8000556:	4461      	add	r1, ip
 8000558:	e732      	b.n	80003c0 <__udivmoddi4+0x12c>
 800055a:	4630      	mov	r0, r6
 800055c:	e709      	b.n	8000372 <__udivmoddi4+0xde>
 800055e:	4464      	add	r4, ip
 8000560:	3802      	subs	r0, #2
 8000562:	e742      	b.n	80003ea <__udivmoddi4+0x156>

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b08a      	sub	sp, #40	; 0x28
 800056c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056e:	f000 fb29 	bl	8000bc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000572:	f000 f873 	bl	800065c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000576:	f000 f8db 	bl	8000730 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  SEGGER_UART_init(250000);
 800057a:	482f      	ldr	r0, [pc, #188]	; (8000638 <main+0xd0>)
 800057c:	f003 fce4 	bl	8003f48 <SEGGER_UART_init>

    DWT_CTRL |= (1 << 0);
 8000580:	4b2e      	ldr	r3, [pc, #184]	; (800063c <main+0xd4>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a2d      	ldr	r2, [pc, #180]	; (800063c <main+0xd4>)
 8000586:	f043 0301 	orr.w	r3, r3, #1
 800058a:	6013      	str	r3, [r2, #0]

    SEGGER_SYSVIEW_Conf();
 800058c:	f003 fa4a 	bl	8003a24 <SEGGER_SYSVIEW_Conf>

    status = xTaskCreate(led_blue_handler, "LED_blue_task", 200, NULL, 3, &ledblue_task_handle);
 8000590:	f107 030c 	add.w	r3, r7, #12
 8000594:	9301      	str	r3, [sp, #4]
 8000596:	2303      	movs	r3, #3
 8000598:	9300      	str	r3, [sp, #0]
 800059a:	2300      	movs	r3, #0
 800059c:	22c8      	movs	r2, #200	; 0xc8
 800059e:	4928      	ldr	r1, [pc, #160]	; (8000640 <main+0xd8>)
 80005a0:	4828      	ldr	r0, [pc, #160]	; (8000644 <main+0xdc>)
 80005a2:	f001 fe3f 	bl	8002224 <xTaskCreate>
 80005a6:	61f8      	str	r0, [r7, #28]

    configASSERT(status == pdPASS);
 80005a8:	69fb      	ldr	r3, [r7, #28]
 80005aa:	2b01      	cmp	r3, #1
 80005ac:	d00a      	beq.n	80005c4 <main+0x5c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005b2:	f383 8811 	msr	BASEPRI, r3
 80005b6:	f3bf 8f6f 	isb	sy
 80005ba:	f3bf 8f4f 	dsb	sy
 80005be:	61bb      	str	r3, [r7, #24]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005c0:	bf00      	nop
 80005c2:	e7fe      	b.n	80005c2 <main+0x5a>

    next_task_handle = ledblue_task_handle;
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	4a20      	ldr	r2, [pc, #128]	; (8000648 <main+0xe0>)
 80005c8:	6013      	str	r3, [r2, #0]

    status = xTaskCreate(led_red_handler, "LED_red_task", 200, NULL, 2, &ledred_task_handle);
 80005ca:	f107 0308 	add.w	r3, r7, #8
 80005ce:	9301      	str	r3, [sp, #4]
 80005d0:	2302      	movs	r3, #2
 80005d2:	9300      	str	r3, [sp, #0]
 80005d4:	2300      	movs	r3, #0
 80005d6:	22c8      	movs	r2, #200	; 0xc8
 80005d8:	491c      	ldr	r1, [pc, #112]	; (800064c <main+0xe4>)
 80005da:	481d      	ldr	r0, [pc, #116]	; (8000650 <main+0xe8>)
 80005dc:	f001 fe22 	bl	8002224 <xTaskCreate>
 80005e0:	61f8      	str	r0, [r7, #28]

    configASSERT(status == pdPASS);
 80005e2:	69fb      	ldr	r3, [r7, #28]
 80005e4:	2b01      	cmp	r3, #1
 80005e6:	d00a      	beq.n	80005fe <main+0x96>
        __asm volatile
 80005e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005ec:	f383 8811 	msr	BASEPRI, r3
 80005f0:	f3bf 8f6f 	isb	sy
 80005f4:	f3bf 8f4f 	dsb	sy
 80005f8:	617b      	str	r3, [r7, #20]
    }
 80005fa:	bf00      	nop
 80005fc:	e7fe      	b.n	80005fc <main+0x94>

    status = xTaskCreate(led_orange_handler, "LED_orange_task", 200, NULL,1, &ledorange_task_handle);
 80005fe:	1d3b      	adds	r3, r7, #4
 8000600:	9301      	str	r3, [sp, #4]
 8000602:	2301      	movs	r3, #1
 8000604:	9300      	str	r3, [sp, #0]
 8000606:	2300      	movs	r3, #0
 8000608:	22c8      	movs	r2, #200	; 0xc8
 800060a:	4912      	ldr	r1, [pc, #72]	; (8000654 <main+0xec>)
 800060c:	4812      	ldr	r0, [pc, #72]	; (8000658 <main+0xf0>)
 800060e:	f001 fe09 	bl	8002224 <xTaskCreate>
 8000612:	61f8      	str	r0, [r7, #28]

    configASSERT(status == pdPASS);
 8000614:	69fb      	ldr	r3, [r7, #28]
 8000616:	2b01      	cmp	r3, #1
 8000618:	d00a      	beq.n	8000630 <main+0xc8>
        __asm volatile
 800061a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800061e:	f383 8811 	msr	BASEPRI, r3
 8000622:	f3bf 8f6f 	isb	sy
 8000626:	f3bf 8f4f 	dsb	sy
 800062a:	613b      	str	r3, [r7, #16]
    }
 800062c:	bf00      	nop
 800062e:	e7fe      	b.n	800062e <main+0xc6>


    //start the freeRTOS scheduler

    vTaskStartScheduler();
 8000630:	f002 f806 	bl	8002640 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000634:	e7fe      	b.n	8000634 <main+0xcc>
 8000636:	bf00      	nop
 8000638:	0003d090 	.word	0x0003d090
 800063c:	e0001000 	.word	0xe0001000
 8000640:	08006520 	.word	0x08006520
 8000644:	08000879 	.word	0x08000879
 8000648:	20000040 	.word	0x20000040
 800064c:	08006530 	.word	0x08006530
 8000650:	080008e9 	.word	0x080008e9
 8000654:	08006540 	.word	0x08006540
 8000658:	08000959 	.word	0x08000959

0800065c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b094      	sub	sp, #80	; 0x50
 8000660:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000662:	f107 0320 	add.w	r3, r7, #32
 8000666:	2230      	movs	r2, #48	; 0x30
 8000668:	2100      	movs	r1, #0
 800066a:	4618      	mov	r0, r3
 800066c:	f005 ff44 	bl	80064f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000670:	f107 030c 	add.w	r3, r7, #12
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]
 800067e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000680:	2300      	movs	r3, #0
 8000682:	60bb      	str	r3, [r7, #8]
 8000684:	4b28      	ldr	r3, [pc, #160]	; (8000728 <SystemClock_Config+0xcc>)
 8000686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000688:	4a27      	ldr	r2, [pc, #156]	; (8000728 <SystemClock_Config+0xcc>)
 800068a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800068e:	6413      	str	r3, [r2, #64]	; 0x40
 8000690:	4b25      	ldr	r3, [pc, #148]	; (8000728 <SystemClock_Config+0xcc>)
 8000692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000694:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000698:	60bb      	str	r3, [r7, #8]
 800069a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800069c:	2300      	movs	r3, #0
 800069e:	607b      	str	r3, [r7, #4]
 80006a0:	4b22      	ldr	r3, [pc, #136]	; (800072c <SystemClock_Config+0xd0>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a21      	ldr	r2, [pc, #132]	; (800072c <SystemClock_Config+0xd0>)
 80006a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006aa:	6013      	str	r3, [r2, #0]
 80006ac:	4b1f      	ldr	r3, [pc, #124]	; (800072c <SystemClock_Config+0xd0>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006b4:	607b      	str	r3, [r7, #4]
 80006b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006b8:	2302      	movs	r3, #2
 80006ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006bc:	2301      	movs	r3, #1
 80006be:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006c0:	2310      	movs	r3, #16
 80006c2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c4:	2302      	movs	r3, #2
 80006c6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006c8:	2300      	movs	r3, #0
 80006ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006cc:	2308      	movs	r3, #8
 80006ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80006d0:	2332      	movs	r3, #50	; 0x32
 80006d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006d4:	2304      	movs	r3, #4
 80006d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006d8:	2307      	movs	r3, #7
 80006da:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006dc:	f107 0320 	add.w	r3, r7, #32
 80006e0:	4618      	mov	r0, r3
 80006e2:	f000 fd87 	bl	80011f4 <HAL_RCC_OscConfig>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006ec:	f000 f97c 	bl	80009e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f0:	230f      	movs	r3, #15
 80006f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f4:	2302      	movs	r3, #2
 80006f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f8:	2300      	movs	r3, #0
 80006fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006fc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000700:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000702:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000706:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000708:	f107 030c 	add.w	r3, r7, #12
 800070c:	2100      	movs	r1, #0
 800070e:	4618      	mov	r0, r3
 8000710:	f000 ffe8 	bl	80016e4 <HAL_RCC_ClockConfig>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800071a:	f000 f965 	bl	80009e8 <Error_Handler>
  }
}
 800071e:	bf00      	nop
 8000720:	3750      	adds	r7, #80	; 0x50
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	40023800 	.word	0x40023800
 800072c:	40007000 	.word	0x40007000

08000730 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b08a      	sub	sp, #40	; 0x28
 8000734:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000736:	f107 0314 	add.w	r3, r7, #20
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	605a      	str	r2, [r3, #4]
 8000740:	609a      	str	r2, [r3, #8]
 8000742:	60da      	str	r2, [r3, #12]
 8000744:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	613b      	str	r3, [r7, #16]
 800074a:	4b32      	ldr	r3, [pc, #200]	; (8000814 <MX_GPIO_Init+0xe4>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	4a31      	ldr	r2, [pc, #196]	; (8000814 <MX_GPIO_Init+0xe4>)
 8000750:	f043 0304 	orr.w	r3, r3, #4
 8000754:	6313      	str	r3, [r2, #48]	; 0x30
 8000756:	4b2f      	ldr	r3, [pc, #188]	; (8000814 <MX_GPIO_Init+0xe4>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	f003 0304 	and.w	r3, r3, #4
 800075e:	613b      	str	r3, [r7, #16]
 8000760:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	60fb      	str	r3, [r7, #12]
 8000766:	4b2b      	ldr	r3, [pc, #172]	; (8000814 <MX_GPIO_Init+0xe4>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	4a2a      	ldr	r2, [pc, #168]	; (8000814 <MX_GPIO_Init+0xe4>)
 800076c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000770:	6313      	str	r3, [r2, #48]	; 0x30
 8000772:	4b28      	ldr	r3, [pc, #160]	; (8000814 <MX_GPIO_Init+0xe4>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800077a:	60fb      	str	r3, [r7, #12]
 800077c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	60bb      	str	r3, [r7, #8]
 8000782:	4b24      	ldr	r3, [pc, #144]	; (8000814 <MX_GPIO_Init+0xe4>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	4a23      	ldr	r2, [pc, #140]	; (8000814 <MX_GPIO_Init+0xe4>)
 8000788:	f043 0301 	orr.w	r3, r3, #1
 800078c:	6313      	str	r3, [r2, #48]	; 0x30
 800078e:	4b21      	ldr	r3, [pc, #132]	; (8000814 <MX_GPIO_Init+0xe4>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	f003 0301 	and.w	r3, r3, #1
 8000796:	60bb      	str	r3, [r7, #8]
 8000798:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	607b      	str	r3, [r7, #4]
 800079e:	4b1d      	ldr	r3, [pc, #116]	; (8000814 <MX_GPIO_Init+0xe4>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4a1c      	ldr	r2, [pc, #112]	; (8000814 <MX_GPIO_Init+0xe4>)
 80007a4:	f043 0308 	orr.w	r3, r3, #8
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
 80007aa:	4b1a      	ldr	r3, [pc, #104]	; (8000814 <MX_GPIO_Init+0xe4>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	f003 0308 	and.w	r3, r3, #8
 80007b2:	607b      	str	r3, [r7, #4]
 80007b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80007b6:	2200      	movs	r2, #0
 80007b8:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80007bc:	4816      	ldr	r0, [pc, #88]	; (8000818 <MX_GPIO_Init+0xe8>)
 80007be:	f000 fcc1 	bl	8001144 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PushButton_Pin */
  GPIO_InitStruct.Pin = PushButton_Pin;
 80007c2:	2301      	movs	r3, #1
 80007c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007c6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80007ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	2300      	movs	r3, #0
 80007ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PushButton_GPIO_Port, &GPIO_InitStruct);
 80007d0:	f107 0314 	add.w	r3, r7, #20
 80007d4:	4619      	mov	r1, r3
 80007d6:	4811      	ldr	r0, [pc, #68]	; (800081c <MX_GPIO_Init+0xec>)
 80007d8:	f000 fb18 	bl	8000e0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80007dc:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80007e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e2:	2301      	movs	r3, #1
 80007e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e6:	2300      	movs	r3, #0
 80007e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ea:	2300      	movs	r3, #0
 80007ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007ee:	f107 0314 	add.w	r3, r7, #20
 80007f2:	4619      	mov	r1, r3
 80007f4:	4808      	ldr	r0, [pc, #32]	; (8000818 <MX_GPIO_Init+0xe8>)
 80007f6:	f000 fb09 	bl	8000e0c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 6, 0);
 80007fa:	2200      	movs	r2, #0
 80007fc:	2106      	movs	r1, #6
 80007fe:	2006      	movs	r0, #6
 8000800:	f000 fada 	bl	8000db8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000804:	2006      	movs	r0, #6
 8000806:	f000 faf3 	bl	8000df0 <HAL_NVIC_EnableIRQ>

}
 800080a:	bf00      	nop
 800080c:	3728      	adds	r7, #40	; 0x28
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	40023800 	.word	0x40023800
 8000818:	40020c00 	.word	0x40020c00
 800081c:	40020000 	.word	0x40020000

08000820 <button_interrupt_handler>:

/* USER CODE BEGIN 4 */
void button_interrupt_handler(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b084      	sub	sp, #16
 8000824:	af02      	add	r7, sp, #8
	BaseType_t pxHigherPriorityTaskWoken;

	pxHigherPriorityTaskWoken =pdFALSE;
 8000826:	2300      	movs	r3, #0
 8000828:	607b      	str	r3, [r7, #4]

	traceISR_ENTER();
 800082a:	f005 fadd 	bl	8005de8 <SEGGER_SYSVIEW_RecordEnterISR>
	xTaskNotifyFromISR(next_task_handle, 0, eNoAction, &pxHigherPriorityTaskWoken);
 800082e:	4b10      	ldr	r3, [pc, #64]	; (8000870 <button_interrupt_handler+0x50>)
 8000830:	6818      	ldr	r0, [r3, #0]
 8000832:	1d3b      	adds	r3, r7, #4
 8000834:	9301      	str	r3, [sp, #4]
 8000836:	2300      	movs	r3, #0
 8000838:	9300      	str	r3, [sp, #0]
 800083a:	2300      	movs	r3, #0
 800083c:	2200      	movs	r2, #0
 800083e:	2100      	movs	r1, #0
 8000840:	f002 fa7a 	bl	8002d38 <xTaskGenericNotifyFromISR>

	portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	2b00      	cmp	r3, #0
 8000848:	d00a      	beq.n	8000860 <button_interrupt_handler+0x40>
 800084a:	f005 fb2b 	bl	8005ea4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
 800084e:	4b09      	ldr	r3, [pc, #36]	; (8000874 <button_interrupt_handler+0x54>)
 8000850:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000854:	601a      	str	r2, [r3, #0]
 8000856:	f3bf 8f4f 	dsb	sy
 800085a:	f3bf 8f6f 	isb	sy
 800085e:	e001      	b.n	8000864 <button_interrupt_handler+0x44>
 8000860:	f005 fb04 	bl	8005e6c <SEGGER_SYSVIEW_RecordExitISR>

	traceISR_EXIT();
 8000864:	f005 fb02 	bl	8005e6c <SEGGER_SYSVIEW_RecordExitISR>
}
 8000868:	bf00      	nop
 800086a:	3708      	adds	r7, #8
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	20000040 	.word	0x20000040
 8000874:	e000ed04 	.word	0xe000ed04

08000878 <led_blue_handler>:


static void led_blue_handler(void* parameters)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b086      	sub	sp, #24
 800087c:	af02      	add	r7, sp, #8
 800087e:	6078      	str	r0, [r7, #4]
	BaseType_t status;

	while(1)
	{
		//blue PD15
		SEGGER_SYSVIEW_PrintfTarget("Toggling blue LED");
 8000880:	4814      	ldr	r0, [pc, #80]	; (80008d4 <led_blue_handler+0x5c>)
 8000882:	f005 fd59 	bl	8006338 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8000886:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800088a:	4813      	ldr	r0, [pc, #76]	; (80008d8 <led_blue_handler+0x60>)
 800088c:	f000 fc73 	bl	8001176 <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0, 0, NULL, pdMS_TO_TICKS(1000));
 8000890:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000894:	9300      	str	r3, [sp, #0]
 8000896:	2300      	movs	r3, #0
 8000898:	2200      	movs	r2, #0
 800089a:	2100      	movs	r1, #0
 800089c:	2000      	movs	r0, #0
 800089e:	f002 f9c3 	bl	8002c28 <xTaskGenericNotifyWait>
 80008a2:	60f8      	str	r0, [r7, #12]
		if(status == pdTRUE){
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	2b01      	cmp	r3, #1
 80008a8:	d1ea      	bne.n	8000880 <led_blue_handler+0x8>
			portENTER_CRITICAL(); //disables hardware interrupts
 80008aa:	f002 fd83 	bl	80033b4 <vPortEnterCritical>
			next_task_handle = ledred_task_handle;
 80008ae:	4b0b      	ldr	r3, [pc, #44]	; (80008dc <led_blue_handler+0x64>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	4a0b      	ldr	r2, [pc, #44]	; (80008e0 <led_blue_handler+0x68>)
 80008b4:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 80008b6:	2201      	movs	r2, #1
 80008b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008bc:	4806      	ldr	r0, [pc, #24]	; (80008d8 <led_blue_handler+0x60>)
 80008be:	f000 fc41 	bl	8001144 <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Delete blue Task");
 80008c2:	4808      	ldr	r0, [pc, #32]	; (80008e4 <led_blue_handler+0x6c>)
 80008c4:	f005 fd38 	bl	8006338 <SEGGER_SYSVIEW_PrintfTarget>
			portEXIT_CRITICAL(); // enable interrupts
 80008c8:	f002 fda4 	bl	8003414 <vPortExitCritical>
			vTaskDelete(NULL);
 80008cc:	2000      	movs	r0, #0
 80008ce:	f001 fe0d 	bl	80024ec <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling blue LED");
 80008d2:	e7d5      	b.n	8000880 <led_blue_handler+0x8>
 80008d4:	08006550 	.word	0x08006550
 80008d8:	40020c00 	.word	0x40020c00
 80008dc:	20000038 	.word	0x20000038
 80008e0:	20000040 	.word	0x20000040
 80008e4:	08006564 	.word	0x08006564

080008e8 <led_red_handler>:
		}
	}
}

static void led_red_handler(void* parameters)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b086      	sub	sp, #24
 80008ec:	af02      	add	r7, sp, #8
 80008ee:	6078      	str	r0, [r7, #4]
	BaseType_t status;

	while(1)
	{
		//red PD14
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 80008f0:	4814      	ldr	r0, [pc, #80]	; (8000944 <led_red_handler+0x5c>)
 80008f2:	f005 fd21 	bl	8006338 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 80008f6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008fa:	4813      	ldr	r0, [pc, #76]	; (8000948 <led_red_handler+0x60>)
 80008fc:	f000 fc3b 	bl	8001176 <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0, 0, NULL, pdMS_TO_TICKS(800));
 8000900:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000904:	9300      	str	r3, [sp, #0]
 8000906:	2300      	movs	r3, #0
 8000908:	2200      	movs	r2, #0
 800090a:	2100      	movs	r1, #0
 800090c:	2000      	movs	r0, #0
 800090e:	f002 f98b 	bl	8002c28 <xTaskGenericNotifyWait>
 8000912:	60f8      	str	r0, [r7, #12]
		if(status == pdTRUE){
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	2b01      	cmp	r3, #1
 8000918:	d1ea      	bne.n	80008f0 <led_red_handler+0x8>
			portENTER_CRITICAL(); //disables hardware interrupts
 800091a:	f002 fd4b 	bl	80033b4 <vPortEnterCritical>
			next_task_handle = ledorange_task_handle;
 800091e:	4b0b      	ldr	r3, [pc, #44]	; (800094c <led_red_handler+0x64>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	4a0b      	ldr	r2, [pc, #44]	; (8000950 <led_red_handler+0x68>)
 8000924:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000926:	2201      	movs	r2, #1
 8000928:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800092c:	4806      	ldr	r0, [pc, #24]	; (8000948 <led_red_handler+0x60>)
 800092e:	f000 fc09 	bl	8001144 <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Delete red Task");
 8000932:	4808      	ldr	r0, [pc, #32]	; (8000954 <led_red_handler+0x6c>)
 8000934:	f005 fd00 	bl	8006338 <SEGGER_SYSVIEW_PrintfTarget>
			portEXIT_CRITICAL(); // enable interrupts
 8000938:	f002 fd6c 	bl	8003414 <vPortExitCritical>
			vTaskDelete(NULL);
 800093c:	2000      	movs	r0, #0
 800093e:	f001 fdd5 	bl	80024ec <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 8000942:	e7d5      	b.n	80008f0 <led_red_handler+0x8>
 8000944:	08006578 	.word	0x08006578
 8000948:	40020c00 	.word	0x40020c00
 800094c:	2000003c 	.word	0x2000003c
 8000950:	20000040 	.word	0x20000040
 8000954:	0800658c 	.word	0x0800658c

08000958 <led_orange_handler>:
		}
	}
}

static void led_orange_handler(void* parameters)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b086      	sub	sp, #24
 800095c:	af02      	add	r7, sp, #8
 800095e:	6078      	str	r0, [r7, #4]
	BaseType_t status;

	while(1)
	{
		//orange PD13
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 8000960:	4814      	ldr	r0, [pc, #80]	; (80009b4 <led_orange_handler+0x5c>)
 8000962:	f005 fce9 	bl	8006338 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000966:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800096a:	4813      	ldr	r0, [pc, #76]	; (80009b8 <led_orange_handler+0x60>)
 800096c:	f000 fc03 	bl	8001176 <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0, 0, NULL, pdMS_TO_TICKS(400));
 8000970:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000974:	9300      	str	r3, [sp, #0]
 8000976:	2300      	movs	r3, #0
 8000978:	2200      	movs	r2, #0
 800097a:	2100      	movs	r1, #0
 800097c:	2000      	movs	r0, #0
 800097e:	f002 f953 	bl	8002c28 <xTaskGenericNotifyWait>
 8000982:	60f8      	str	r0, [r7, #12]
		if(status == pdTRUE){
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	2b01      	cmp	r3, #1
 8000988:	d1ea      	bne.n	8000960 <led_orange_handler+0x8>
			portENTER_CRITICAL(); //disables hardware interrupts
 800098a:	f002 fd13 	bl	80033b4 <vPortEnterCritical>
			next_task_handle = NULL;
 800098e:	4b0b      	ldr	r3, [pc, #44]	; (80009bc <led_orange_handler+0x64>)
 8000990:	2200      	movs	r2, #0
 8000992:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000994:	2201      	movs	r2, #1
 8000996:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800099a:	4807      	ldr	r0, [pc, #28]	; (80009b8 <led_orange_handler+0x60>)
 800099c:	f000 fbd2 	bl	8001144 <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Delete orange Task");
 80009a0:	4807      	ldr	r0, [pc, #28]	; (80009c0 <led_orange_handler+0x68>)
 80009a2:	f005 fcc9 	bl	8006338 <SEGGER_SYSVIEW_PrintfTarget>
			portEXIT_CRITICAL(); // enable interrupts
 80009a6:	f002 fd35 	bl	8003414 <vPortExitCritical>
			vTaskDelete(NULL);
 80009aa:	2000      	movs	r0, #0
 80009ac:	f001 fd9e 	bl	80024ec <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 80009b0:	e7d6      	b.n	8000960 <led_orange_handler+0x8>
 80009b2:	bf00      	nop
 80009b4:	0800659c 	.word	0x0800659c
 80009b8:	40020c00 	.word	0x40020c00
 80009bc:	20000040 	.word	0x20000040
 80009c0:	080065b0 	.word	0x080065b0

080009c4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a04      	ldr	r2, [pc, #16]	; (80009e4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d101      	bne.n	80009da <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009d6:	f000 f917 	bl	8000c08 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009da:	bf00      	nop
 80009dc:	3708      	adds	r7, #8
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	40001000 	.word	0x40001000

080009e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009ec:	b672      	cpsid	i
}
 80009ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009f0:	e7fe      	b.n	80009f0 <Error_Handler+0x8>
	...

080009f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	607b      	str	r3, [r7, #4]
 80009fe:	4b10      	ldr	r3, [pc, #64]	; (8000a40 <HAL_MspInit+0x4c>)
 8000a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a02:	4a0f      	ldr	r2, [pc, #60]	; (8000a40 <HAL_MspInit+0x4c>)
 8000a04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a08:	6453      	str	r3, [r2, #68]	; 0x44
 8000a0a:	4b0d      	ldr	r3, [pc, #52]	; (8000a40 <HAL_MspInit+0x4c>)
 8000a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a12:	607b      	str	r3, [r7, #4]
 8000a14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a16:	2300      	movs	r3, #0
 8000a18:	603b      	str	r3, [r7, #0]
 8000a1a:	4b09      	ldr	r3, [pc, #36]	; (8000a40 <HAL_MspInit+0x4c>)
 8000a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1e:	4a08      	ldr	r2, [pc, #32]	; (8000a40 <HAL_MspInit+0x4c>)
 8000a20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a24:	6413      	str	r3, [r2, #64]	; 0x40
 8000a26:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <HAL_MspInit+0x4c>)
 8000a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a2e:	603b      	str	r3, [r7, #0]
 8000a30:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  vInitPrioGroupValue();
 8000a32:	f002 fc41 	bl	80032b8 <vInitPrioGroupValue>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a36:	bf00      	nop
 8000a38:	3708      	adds	r7, #8
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	40023800 	.word	0x40023800

08000a44 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b08c      	sub	sp, #48	; 0x30
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000a50:	2300      	movs	r3, #0
 8000a52:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000a54:	2200      	movs	r2, #0
 8000a56:	6879      	ldr	r1, [r7, #4]
 8000a58:	2036      	movs	r0, #54	; 0x36
 8000a5a:	f000 f9ad 	bl	8000db8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000a5e:	2036      	movs	r0, #54	; 0x36
 8000a60:	f000 f9c6 	bl	8000df0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000a64:	2300      	movs	r3, #0
 8000a66:	60fb      	str	r3, [r7, #12]
 8000a68:	4b1f      	ldr	r3, [pc, #124]	; (8000ae8 <HAL_InitTick+0xa4>)
 8000a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6c:	4a1e      	ldr	r2, [pc, #120]	; (8000ae8 <HAL_InitTick+0xa4>)
 8000a6e:	f043 0310 	orr.w	r3, r3, #16
 8000a72:	6413      	str	r3, [r2, #64]	; 0x40
 8000a74:	4b1c      	ldr	r3, [pc, #112]	; (8000ae8 <HAL_InitTick+0xa4>)
 8000a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a78:	f003 0310 	and.w	r3, r3, #16
 8000a7c:	60fb      	str	r3, [r7, #12]
 8000a7e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a80:	f107 0210 	add.w	r2, r7, #16
 8000a84:	f107 0314 	add.w	r3, r7, #20
 8000a88:	4611      	mov	r1, r2
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f001 f836 	bl	8001afc <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000a90:	f001 f820 	bl	8001ad4 <HAL_RCC_GetPCLK1Freq>
 8000a94:	4603      	mov	r3, r0
 8000a96:	005b      	lsls	r3, r3, #1
 8000a98:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a9c:	4a13      	ldr	r2, [pc, #76]	; (8000aec <HAL_InitTick+0xa8>)
 8000a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8000aa2:	0c9b      	lsrs	r3, r3, #18
 8000aa4:	3b01      	subs	r3, #1
 8000aa6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000aa8:	4b11      	ldr	r3, [pc, #68]	; (8000af0 <HAL_InitTick+0xac>)
 8000aaa:	4a12      	ldr	r2, [pc, #72]	; (8000af4 <HAL_InitTick+0xb0>)
 8000aac:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000aae:	4b10      	ldr	r3, [pc, #64]	; (8000af0 <HAL_InitTick+0xac>)
 8000ab0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ab4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000ab6:	4a0e      	ldr	r2, [pc, #56]	; (8000af0 <HAL_InitTick+0xac>)
 8000ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aba:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000abc:	4b0c      	ldr	r3, [pc, #48]	; (8000af0 <HAL_InitTick+0xac>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ac2:	4b0b      	ldr	r3, [pc, #44]	; (8000af0 <HAL_InitTick+0xac>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000ac8:	4809      	ldr	r0, [pc, #36]	; (8000af0 <HAL_InitTick+0xac>)
 8000aca:	f001 f849 	bl	8001b60 <HAL_TIM_Base_Init>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d104      	bne.n	8000ade <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000ad4:	4806      	ldr	r0, [pc, #24]	; (8000af0 <HAL_InitTick+0xac>)
 8000ad6:	f001 f89d 	bl	8001c14 <HAL_TIM_Base_Start_IT>
 8000ada:	4603      	mov	r3, r0
 8000adc:	e000      	b.n	8000ae0 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000ade:	2301      	movs	r3, #1
}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	3730      	adds	r7, #48	; 0x30
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	40023800 	.word	0x40023800
 8000aec:	431bde83 	.word	0x431bde83
 8000af0:	20000044 	.word	0x20000044
 8000af4:	40001000 	.word	0x40001000

08000af8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000afc:	e7fe      	b.n	8000afc <NMI_Handler+0x4>

08000afe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000afe:	b480      	push	{r7}
 8000b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b02:	e7fe      	b.n	8000b02 <HardFault_Handler+0x4>

08000b04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b08:	e7fe      	b.n	8000b08 <MemManage_Handler+0x4>

08000b0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b0a:	b480      	push	{r7}
 8000b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b0e:	e7fe      	b.n	8000b0e <BusFault_Handler+0x4>

08000b10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b14:	e7fe      	b.n	8000b14 <UsageFault_Handler+0x4>

08000b16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b16:	b480      	push	{r7}
 8000b18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b1a:	bf00      	nop
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr

08000b24 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	button_interrupt_handler();
 8000b28:	f7ff fe7a 	bl	8000820 <button_interrupt_handler>

  /* USER CODE END EXTI0_IRQn 0 */

	//clear EXTI 0 pending bit in the exti pending register
	HAL_GPIO_EXTI_IRQHandler(PushButton_Pin);
 8000b2c:	2001      	movs	r0, #1
 8000b2e:	f000 fb3d 	bl	80011ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
	...

08000b38 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000b3c:	4802      	ldr	r0, [pc, #8]	; (8000b48 <TIM6_DAC_IRQHandler+0x10>)
 8000b3e:	f001 f8d9 	bl	8001cf4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	20000044 	.word	0x20000044

08000b4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b50:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <SystemInit+0x20>)
 8000b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b56:	4a05      	ldr	r2, [pc, #20]	; (8000b6c <SystemInit+0x20>)
 8000b58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b60:	bf00      	nop
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	e000ed00 	.word	0xe000ed00

08000b70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ba8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b74:	480d      	ldr	r0, [pc, #52]	; (8000bac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b76:	490e      	ldr	r1, [pc, #56]	; (8000bb0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b78:	4a0e      	ldr	r2, [pc, #56]	; (8000bb4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b7c:	e002      	b.n	8000b84 <LoopCopyDataInit>

08000b7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b82:	3304      	adds	r3, #4

08000b84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b88:	d3f9      	bcc.n	8000b7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b8a:	4a0b      	ldr	r2, [pc, #44]	; (8000bb8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b8c:	4c0b      	ldr	r4, [pc, #44]	; (8000bbc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b90:	e001      	b.n	8000b96 <LoopFillZerobss>

08000b92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b94:	3204      	adds	r2, #4

08000b96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b98:	d3fb      	bcc.n	8000b92 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b9a:	f7ff ffd7 	bl	8000b4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b9e:	f005 fc69 	bl	8006474 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ba2:	f7ff fce1 	bl	8000568 <main>
  bx  lr    
 8000ba6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ba8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bb0:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000bb4:	080066e8 	.word	0x080066e8
  ldr r2, =_sbss
 8000bb8:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000bbc:	2001443c 	.word	0x2001443c

08000bc0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bc0:	e7fe      	b.n	8000bc0 <ADC_IRQHandler>
	...

08000bc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bc8:	4b0e      	ldr	r3, [pc, #56]	; (8000c04 <HAL_Init+0x40>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a0d      	ldr	r2, [pc, #52]	; (8000c04 <HAL_Init+0x40>)
 8000bce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bd2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bd4:	4b0b      	ldr	r3, [pc, #44]	; (8000c04 <HAL_Init+0x40>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a0a      	ldr	r2, [pc, #40]	; (8000c04 <HAL_Init+0x40>)
 8000bda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bde:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000be0:	4b08      	ldr	r3, [pc, #32]	; (8000c04 <HAL_Init+0x40>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a07      	ldr	r2, [pc, #28]	; (8000c04 <HAL_Init+0x40>)
 8000be6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bec:	2003      	movs	r0, #3
 8000bee:	f000 f8d8 	bl	8000da2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bf2:	2000      	movs	r0, #0
 8000bf4:	f7ff ff26 	bl	8000a44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bf8:	f7ff fefc 	bl	80009f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bfc:	2300      	movs	r3, #0
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	40023c00 	.word	0x40023c00

08000c08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c0c:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <HAL_IncTick+0x20>)
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	461a      	mov	r2, r3
 8000c12:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <HAL_IncTick+0x24>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4413      	add	r3, r2
 8000c18:	4a04      	ldr	r2, [pc, #16]	; (8000c2c <HAL_IncTick+0x24>)
 8000c1a:	6013      	str	r3, [r2, #0]
}
 8000c1c:	bf00      	nop
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	20000008 	.word	0x20000008
 8000c2c:	2000008c 	.word	0x2000008c

08000c30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  return uwTick;
 8000c34:	4b03      	ldr	r3, [pc, #12]	; (8000c44 <HAL_GetTick+0x14>)
 8000c36:	681b      	ldr	r3, [r3, #0]
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	2000008c 	.word	0x2000008c

08000c48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b085      	sub	sp, #20
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	f003 0307 	and.w	r3, r3, #7
 8000c56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c58:	4b0c      	ldr	r3, [pc, #48]	; (8000c8c <__NVIC_SetPriorityGrouping+0x44>)
 8000c5a:	68db      	ldr	r3, [r3, #12]
 8000c5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c5e:	68ba      	ldr	r2, [r7, #8]
 8000c60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c64:	4013      	ands	r3, r2
 8000c66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c7a:	4a04      	ldr	r2, [pc, #16]	; (8000c8c <__NVIC_SetPriorityGrouping+0x44>)
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	60d3      	str	r3, [r2, #12]
}
 8000c80:	bf00      	nop
 8000c82:	3714      	adds	r7, #20
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr
 8000c8c:	e000ed00 	.word	0xe000ed00

08000c90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c94:	4b04      	ldr	r3, [pc, #16]	; (8000ca8 <__NVIC_GetPriorityGrouping+0x18>)
 8000c96:	68db      	ldr	r3, [r3, #12]
 8000c98:	0a1b      	lsrs	r3, r3, #8
 8000c9a:	f003 0307 	and.w	r3, r3, #7
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr
 8000ca8:	e000ed00 	.word	0xe000ed00

08000cac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b083      	sub	sp, #12
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	db0b      	blt.n	8000cd6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cbe:	79fb      	ldrb	r3, [r7, #7]
 8000cc0:	f003 021f 	and.w	r2, r3, #31
 8000cc4:	4907      	ldr	r1, [pc, #28]	; (8000ce4 <__NVIC_EnableIRQ+0x38>)
 8000cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cca:	095b      	lsrs	r3, r3, #5
 8000ccc:	2001      	movs	r0, #1
 8000cce:	fa00 f202 	lsl.w	r2, r0, r2
 8000cd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cd6:	bf00      	nop
 8000cd8:	370c      	adds	r7, #12
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	e000e100 	.word	0xe000e100

08000ce8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	4603      	mov	r3, r0
 8000cf0:	6039      	str	r1, [r7, #0]
 8000cf2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	db0a      	blt.n	8000d12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	b2da      	uxtb	r2, r3
 8000d00:	490c      	ldr	r1, [pc, #48]	; (8000d34 <__NVIC_SetPriority+0x4c>)
 8000d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d06:	0112      	lsls	r2, r2, #4
 8000d08:	b2d2      	uxtb	r2, r2
 8000d0a:	440b      	add	r3, r1
 8000d0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d10:	e00a      	b.n	8000d28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	b2da      	uxtb	r2, r3
 8000d16:	4908      	ldr	r1, [pc, #32]	; (8000d38 <__NVIC_SetPriority+0x50>)
 8000d18:	79fb      	ldrb	r3, [r7, #7]
 8000d1a:	f003 030f 	and.w	r3, r3, #15
 8000d1e:	3b04      	subs	r3, #4
 8000d20:	0112      	lsls	r2, r2, #4
 8000d22:	b2d2      	uxtb	r2, r2
 8000d24:	440b      	add	r3, r1
 8000d26:	761a      	strb	r2, [r3, #24]
}
 8000d28:	bf00      	nop
 8000d2a:	370c      	adds	r7, #12
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr
 8000d34:	e000e100 	.word	0xe000e100
 8000d38:	e000ed00 	.word	0xe000ed00

08000d3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b089      	sub	sp, #36	; 0x24
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	60f8      	str	r0, [r7, #12]
 8000d44:	60b9      	str	r1, [r7, #8]
 8000d46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	f003 0307 	and.w	r3, r3, #7
 8000d4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d50:	69fb      	ldr	r3, [r7, #28]
 8000d52:	f1c3 0307 	rsb	r3, r3, #7
 8000d56:	2b04      	cmp	r3, #4
 8000d58:	bf28      	it	cs
 8000d5a:	2304      	movcs	r3, #4
 8000d5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d5e:	69fb      	ldr	r3, [r7, #28]
 8000d60:	3304      	adds	r3, #4
 8000d62:	2b06      	cmp	r3, #6
 8000d64:	d902      	bls.n	8000d6c <NVIC_EncodePriority+0x30>
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	3b03      	subs	r3, #3
 8000d6a:	e000      	b.n	8000d6e <NVIC_EncodePriority+0x32>
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d70:	f04f 32ff 	mov.w	r2, #4294967295
 8000d74:	69bb      	ldr	r3, [r7, #24]
 8000d76:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7a:	43da      	mvns	r2, r3
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	401a      	ands	r2, r3
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d84:	f04f 31ff 	mov.w	r1, #4294967295
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d8e:	43d9      	mvns	r1, r3
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d94:	4313      	orrs	r3, r2
         );
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3724      	adds	r7, #36	; 0x24
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr

08000da2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000da2:	b580      	push	{r7, lr}
 8000da4:	b082      	sub	sp, #8
 8000da6:	af00      	add	r7, sp, #0
 8000da8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000daa:	6878      	ldr	r0, [r7, #4]
 8000dac:	f7ff ff4c 	bl	8000c48 <__NVIC_SetPriorityGrouping>
}
 8000db0:	bf00      	nop
 8000db2:	3708      	adds	r7, #8
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b086      	sub	sp, #24
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	60b9      	str	r1, [r7, #8]
 8000dc2:	607a      	str	r2, [r7, #4]
 8000dc4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dca:	f7ff ff61 	bl	8000c90 <__NVIC_GetPriorityGrouping>
 8000dce:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dd0:	687a      	ldr	r2, [r7, #4]
 8000dd2:	68b9      	ldr	r1, [r7, #8]
 8000dd4:	6978      	ldr	r0, [r7, #20]
 8000dd6:	f7ff ffb1 	bl	8000d3c <NVIC_EncodePriority>
 8000dda:	4602      	mov	r2, r0
 8000ddc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000de0:	4611      	mov	r1, r2
 8000de2:	4618      	mov	r0, r3
 8000de4:	f7ff ff80 	bl	8000ce8 <__NVIC_SetPriority>
}
 8000de8:	bf00      	nop
 8000dea:	3718      	adds	r7, #24
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}

08000df0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	4603      	mov	r3, r0
 8000df8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f7ff ff54 	bl	8000cac <__NVIC_EnableIRQ>
}
 8000e04:	bf00      	nop
 8000e06:	3708      	adds	r7, #8
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}

08000e0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b089      	sub	sp, #36	; 0x24
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
 8000e14:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e16:	2300      	movs	r3, #0
 8000e18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e22:	2300      	movs	r3, #0
 8000e24:	61fb      	str	r3, [r7, #28]
 8000e26:	e16b      	b.n	8001100 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e28:	2201      	movs	r2, #1
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	697a      	ldr	r2, [r7, #20]
 8000e38:	4013      	ands	r3, r2
 8000e3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e3c:	693a      	ldr	r2, [r7, #16]
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	429a      	cmp	r2, r3
 8000e42:	f040 815a 	bne.w	80010fa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	f003 0303 	and.w	r3, r3, #3
 8000e4e:	2b01      	cmp	r3, #1
 8000e50:	d005      	beq.n	8000e5e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e5a:	2b02      	cmp	r3, #2
 8000e5c:	d130      	bne.n	8000ec0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	689b      	ldr	r3, [r3, #8]
 8000e62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e64:	69fb      	ldr	r3, [r7, #28]
 8000e66:	005b      	lsls	r3, r3, #1
 8000e68:	2203      	movs	r2, #3
 8000e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6e:	43db      	mvns	r3, r3
 8000e70:	69ba      	ldr	r2, [r7, #24]
 8000e72:	4013      	ands	r3, r2
 8000e74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	68da      	ldr	r2, [r3, #12]
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	005b      	lsls	r3, r3, #1
 8000e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e82:	69ba      	ldr	r2, [r7, #24]
 8000e84:	4313      	orrs	r3, r2
 8000e86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	69ba      	ldr	r2, [r7, #24]
 8000e8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e94:	2201      	movs	r2, #1
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	43db      	mvns	r3, r3
 8000e9e:	69ba      	ldr	r2, [r7, #24]
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	091b      	lsrs	r3, r3, #4
 8000eaa:	f003 0201 	and.w	r2, r3, #1
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb4:	69ba      	ldr	r2, [r7, #24]
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	69ba      	ldr	r2, [r7, #24]
 8000ebe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	f003 0303 	and.w	r3, r3, #3
 8000ec8:	2b03      	cmp	r3, #3
 8000eca:	d017      	beq.n	8000efc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	68db      	ldr	r3, [r3, #12]
 8000ed0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	005b      	lsls	r3, r3, #1
 8000ed6:	2203      	movs	r2, #3
 8000ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8000edc:	43db      	mvns	r3, r3
 8000ede:	69ba      	ldr	r2, [r7, #24]
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	689a      	ldr	r2, [r3, #8]
 8000ee8:	69fb      	ldr	r3, [r7, #28]
 8000eea:	005b      	lsls	r3, r3, #1
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	69ba      	ldr	r2, [r7, #24]
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	69ba      	ldr	r2, [r7, #24]
 8000efa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f003 0303 	and.w	r3, r3, #3
 8000f04:	2b02      	cmp	r3, #2
 8000f06:	d123      	bne.n	8000f50 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f08:	69fb      	ldr	r3, [r7, #28]
 8000f0a:	08da      	lsrs	r2, r3, #3
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	3208      	adds	r2, #8
 8000f10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f14:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	f003 0307 	and.w	r3, r3, #7
 8000f1c:	009b      	lsls	r3, r3, #2
 8000f1e:	220f      	movs	r2, #15
 8000f20:	fa02 f303 	lsl.w	r3, r2, r3
 8000f24:	43db      	mvns	r3, r3
 8000f26:	69ba      	ldr	r2, [r7, #24]
 8000f28:	4013      	ands	r3, r2
 8000f2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	691a      	ldr	r2, [r3, #16]
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	f003 0307 	and.w	r3, r3, #7
 8000f36:	009b      	lsls	r3, r3, #2
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	69ba      	ldr	r2, [r7, #24]
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	08da      	lsrs	r2, r3, #3
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	3208      	adds	r2, #8
 8000f4a:	69b9      	ldr	r1, [r7, #24]
 8000f4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	005b      	lsls	r3, r3, #1
 8000f5a:	2203      	movs	r2, #3
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	43db      	mvns	r3, r3
 8000f62:	69ba      	ldr	r2, [r7, #24]
 8000f64:	4013      	ands	r3, r2
 8000f66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f003 0203 	and.w	r2, r3, #3
 8000f70:	69fb      	ldr	r3, [r7, #28]
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	69ba      	ldr	r2, [r7, #24]
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	f000 80b4 	beq.w	80010fa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f92:	2300      	movs	r3, #0
 8000f94:	60fb      	str	r3, [r7, #12]
 8000f96:	4b60      	ldr	r3, [pc, #384]	; (8001118 <HAL_GPIO_Init+0x30c>)
 8000f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f9a:	4a5f      	ldr	r2, [pc, #380]	; (8001118 <HAL_GPIO_Init+0x30c>)
 8000f9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fa0:	6453      	str	r3, [r2, #68]	; 0x44
 8000fa2:	4b5d      	ldr	r3, [pc, #372]	; (8001118 <HAL_GPIO_Init+0x30c>)
 8000fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fa6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000faa:	60fb      	str	r3, [r7, #12]
 8000fac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fae:	4a5b      	ldr	r2, [pc, #364]	; (800111c <HAL_GPIO_Init+0x310>)
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	089b      	lsrs	r3, r3, #2
 8000fb4:	3302      	adds	r3, #2
 8000fb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	f003 0303 	and.w	r3, r3, #3
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	220f      	movs	r2, #15
 8000fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fca:	43db      	mvns	r3, r3
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	4013      	ands	r3, r2
 8000fd0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4a52      	ldr	r2, [pc, #328]	; (8001120 <HAL_GPIO_Init+0x314>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d02b      	beq.n	8001032 <HAL_GPIO_Init+0x226>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4a51      	ldr	r2, [pc, #324]	; (8001124 <HAL_GPIO_Init+0x318>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d025      	beq.n	800102e <HAL_GPIO_Init+0x222>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4a50      	ldr	r2, [pc, #320]	; (8001128 <HAL_GPIO_Init+0x31c>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d01f      	beq.n	800102a <HAL_GPIO_Init+0x21e>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4a4f      	ldr	r2, [pc, #316]	; (800112c <HAL_GPIO_Init+0x320>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d019      	beq.n	8001026 <HAL_GPIO_Init+0x21a>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a4e      	ldr	r2, [pc, #312]	; (8001130 <HAL_GPIO_Init+0x324>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d013      	beq.n	8001022 <HAL_GPIO_Init+0x216>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4a4d      	ldr	r2, [pc, #308]	; (8001134 <HAL_GPIO_Init+0x328>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d00d      	beq.n	800101e <HAL_GPIO_Init+0x212>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4a4c      	ldr	r2, [pc, #304]	; (8001138 <HAL_GPIO_Init+0x32c>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d007      	beq.n	800101a <HAL_GPIO_Init+0x20e>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4a4b      	ldr	r2, [pc, #300]	; (800113c <HAL_GPIO_Init+0x330>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d101      	bne.n	8001016 <HAL_GPIO_Init+0x20a>
 8001012:	2307      	movs	r3, #7
 8001014:	e00e      	b.n	8001034 <HAL_GPIO_Init+0x228>
 8001016:	2308      	movs	r3, #8
 8001018:	e00c      	b.n	8001034 <HAL_GPIO_Init+0x228>
 800101a:	2306      	movs	r3, #6
 800101c:	e00a      	b.n	8001034 <HAL_GPIO_Init+0x228>
 800101e:	2305      	movs	r3, #5
 8001020:	e008      	b.n	8001034 <HAL_GPIO_Init+0x228>
 8001022:	2304      	movs	r3, #4
 8001024:	e006      	b.n	8001034 <HAL_GPIO_Init+0x228>
 8001026:	2303      	movs	r3, #3
 8001028:	e004      	b.n	8001034 <HAL_GPIO_Init+0x228>
 800102a:	2302      	movs	r3, #2
 800102c:	e002      	b.n	8001034 <HAL_GPIO_Init+0x228>
 800102e:	2301      	movs	r3, #1
 8001030:	e000      	b.n	8001034 <HAL_GPIO_Init+0x228>
 8001032:	2300      	movs	r3, #0
 8001034:	69fa      	ldr	r2, [r7, #28]
 8001036:	f002 0203 	and.w	r2, r2, #3
 800103a:	0092      	lsls	r2, r2, #2
 800103c:	4093      	lsls	r3, r2
 800103e:	69ba      	ldr	r2, [r7, #24]
 8001040:	4313      	orrs	r3, r2
 8001042:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001044:	4935      	ldr	r1, [pc, #212]	; (800111c <HAL_GPIO_Init+0x310>)
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	089b      	lsrs	r3, r3, #2
 800104a:	3302      	adds	r3, #2
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001052:	4b3b      	ldr	r3, [pc, #236]	; (8001140 <HAL_GPIO_Init+0x334>)
 8001054:	689b      	ldr	r3, [r3, #8]
 8001056:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	43db      	mvns	r3, r3
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	4013      	ands	r3, r2
 8001060:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800106a:	2b00      	cmp	r3, #0
 800106c:	d003      	beq.n	8001076 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800106e:	69ba      	ldr	r2, [r7, #24]
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	4313      	orrs	r3, r2
 8001074:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001076:	4a32      	ldr	r2, [pc, #200]	; (8001140 <HAL_GPIO_Init+0x334>)
 8001078:	69bb      	ldr	r3, [r7, #24]
 800107a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800107c:	4b30      	ldr	r3, [pc, #192]	; (8001140 <HAL_GPIO_Init+0x334>)
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	43db      	mvns	r3, r3
 8001086:	69ba      	ldr	r2, [r7, #24]
 8001088:	4013      	ands	r3, r2
 800108a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001094:	2b00      	cmp	r3, #0
 8001096:	d003      	beq.n	80010a0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	4313      	orrs	r3, r2
 800109e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010a0:	4a27      	ldr	r2, [pc, #156]	; (8001140 <HAL_GPIO_Init+0x334>)
 80010a2:	69bb      	ldr	r3, [r7, #24]
 80010a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010a6:	4b26      	ldr	r3, [pc, #152]	; (8001140 <HAL_GPIO_Init+0x334>)
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ac:	693b      	ldr	r3, [r7, #16]
 80010ae:	43db      	mvns	r3, r3
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	4013      	ands	r3, r2
 80010b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d003      	beq.n	80010ca <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010ca:	4a1d      	ldr	r2, [pc, #116]	; (8001140 <HAL_GPIO_Init+0x334>)
 80010cc:	69bb      	ldr	r3, [r7, #24]
 80010ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010d0:	4b1b      	ldr	r3, [pc, #108]	; (8001140 <HAL_GPIO_Init+0x334>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	43db      	mvns	r3, r3
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	4013      	ands	r3, r2
 80010de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d003      	beq.n	80010f4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010f4:	4a12      	ldr	r2, [pc, #72]	; (8001140 <HAL_GPIO_Init+0x334>)
 80010f6:	69bb      	ldr	r3, [r7, #24]
 80010f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	3301      	adds	r3, #1
 80010fe:	61fb      	str	r3, [r7, #28]
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	2b0f      	cmp	r3, #15
 8001104:	f67f ae90 	bls.w	8000e28 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001108:	bf00      	nop
 800110a:	bf00      	nop
 800110c:	3724      	adds	r7, #36	; 0x24
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	40023800 	.word	0x40023800
 800111c:	40013800 	.word	0x40013800
 8001120:	40020000 	.word	0x40020000
 8001124:	40020400 	.word	0x40020400
 8001128:	40020800 	.word	0x40020800
 800112c:	40020c00 	.word	0x40020c00
 8001130:	40021000 	.word	0x40021000
 8001134:	40021400 	.word	0x40021400
 8001138:	40021800 	.word	0x40021800
 800113c:	40021c00 	.word	0x40021c00
 8001140:	40013c00 	.word	0x40013c00

08001144 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	460b      	mov	r3, r1
 800114e:	807b      	strh	r3, [r7, #2]
 8001150:	4613      	mov	r3, r2
 8001152:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001154:	787b      	ldrb	r3, [r7, #1]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d003      	beq.n	8001162 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800115a:	887a      	ldrh	r2, [r7, #2]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001160:	e003      	b.n	800116a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001162:	887b      	ldrh	r3, [r7, #2]
 8001164:	041a      	lsls	r2, r3, #16
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	619a      	str	r2, [r3, #24]
}
 800116a:	bf00      	nop
 800116c:	370c      	adds	r7, #12
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr

08001176 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001176:	b480      	push	{r7}
 8001178:	b085      	sub	sp, #20
 800117a:	af00      	add	r7, sp, #0
 800117c:	6078      	str	r0, [r7, #4]
 800117e:	460b      	mov	r3, r1
 8001180:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	695b      	ldr	r3, [r3, #20]
 8001186:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001188:	887a      	ldrh	r2, [r7, #2]
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	4013      	ands	r3, r2
 800118e:	041a      	lsls	r2, r3, #16
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	43d9      	mvns	r1, r3
 8001194:	887b      	ldrh	r3, [r7, #2]
 8001196:	400b      	ands	r3, r1
 8001198:	431a      	orrs	r2, r3
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	619a      	str	r2, [r3, #24]
}
 800119e:	bf00      	nop
 80011a0:	3714      	adds	r7, #20
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
	...

080011ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80011b6:	4b08      	ldr	r3, [pc, #32]	; (80011d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011b8:	695a      	ldr	r2, [r3, #20]
 80011ba:	88fb      	ldrh	r3, [r7, #6]
 80011bc:	4013      	ands	r3, r2
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d006      	beq.n	80011d0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80011c2:	4a05      	ldr	r2, [pc, #20]	; (80011d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011c4:	88fb      	ldrh	r3, [r7, #6]
 80011c6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80011c8:	88fb      	ldrh	r3, [r7, #6]
 80011ca:	4618      	mov	r0, r3
 80011cc:	f000 f806 	bl	80011dc <HAL_GPIO_EXTI_Callback>
  }
}
 80011d0:	bf00      	nop
 80011d2:	3708      	adds	r7, #8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	40013c00 	.word	0x40013c00

080011dc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80011e6:	bf00      	nop
 80011e8:	370c      	adds	r7, #12
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
	...

080011f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b086      	sub	sp, #24
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d101      	bne.n	8001206 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001202:	2301      	movs	r3, #1
 8001204:	e267      	b.n	80016d6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f003 0301 	and.w	r3, r3, #1
 800120e:	2b00      	cmp	r3, #0
 8001210:	d075      	beq.n	80012fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001212:	4b88      	ldr	r3, [pc, #544]	; (8001434 <HAL_RCC_OscConfig+0x240>)
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	f003 030c 	and.w	r3, r3, #12
 800121a:	2b04      	cmp	r3, #4
 800121c:	d00c      	beq.n	8001238 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800121e:	4b85      	ldr	r3, [pc, #532]	; (8001434 <HAL_RCC_OscConfig+0x240>)
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001226:	2b08      	cmp	r3, #8
 8001228:	d112      	bne.n	8001250 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800122a:	4b82      	ldr	r3, [pc, #520]	; (8001434 <HAL_RCC_OscConfig+0x240>)
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001232:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001236:	d10b      	bne.n	8001250 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001238:	4b7e      	ldr	r3, [pc, #504]	; (8001434 <HAL_RCC_OscConfig+0x240>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001240:	2b00      	cmp	r3, #0
 8001242:	d05b      	beq.n	80012fc <HAL_RCC_OscConfig+0x108>
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d157      	bne.n	80012fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800124c:	2301      	movs	r3, #1
 800124e:	e242      	b.n	80016d6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001258:	d106      	bne.n	8001268 <HAL_RCC_OscConfig+0x74>
 800125a:	4b76      	ldr	r3, [pc, #472]	; (8001434 <HAL_RCC_OscConfig+0x240>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a75      	ldr	r2, [pc, #468]	; (8001434 <HAL_RCC_OscConfig+0x240>)
 8001260:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001264:	6013      	str	r3, [r2, #0]
 8001266:	e01d      	b.n	80012a4 <HAL_RCC_OscConfig+0xb0>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001270:	d10c      	bne.n	800128c <HAL_RCC_OscConfig+0x98>
 8001272:	4b70      	ldr	r3, [pc, #448]	; (8001434 <HAL_RCC_OscConfig+0x240>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a6f      	ldr	r2, [pc, #444]	; (8001434 <HAL_RCC_OscConfig+0x240>)
 8001278:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800127c:	6013      	str	r3, [r2, #0]
 800127e:	4b6d      	ldr	r3, [pc, #436]	; (8001434 <HAL_RCC_OscConfig+0x240>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a6c      	ldr	r2, [pc, #432]	; (8001434 <HAL_RCC_OscConfig+0x240>)
 8001284:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001288:	6013      	str	r3, [r2, #0]
 800128a:	e00b      	b.n	80012a4 <HAL_RCC_OscConfig+0xb0>
 800128c:	4b69      	ldr	r3, [pc, #420]	; (8001434 <HAL_RCC_OscConfig+0x240>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a68      	ldr	r2, [pc, #416]	; (8001434 <HAL_RCC_OscConfig+0x240>)
 8001292:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001296:	6013      	str	r3, [r2, #0]
 8001298:	4b66      	ldr	r3, [pc, #408]	; (8001434 <HAL_RCC_OscConfig+0x240>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a65      	ldr	r2, [pc, #404]	; (8001434 <HAL_RCC_OscConfig+0x240>)
 800129e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d013      	beq.n	80012d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ac:	f7ff fcc0 	bl	8000c30 <HAL_GetTick>
 80012b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012b2:	e008      	b.n	80012c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012b4:	f7ff fcbc 	bl	8000c30 <HAL_GetTick>
 80012b8:	4602      	mov	r2, r0
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	2b64      	cmp	r3, #100	; 0x64
 80012c0:	d901      	bls.n	80012c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80012c2:	2303      	movs	r3, #3
 80012c4:	e207      	b.n	80016d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012c6:	4b5b      	ldr	r3, [pc, #364]	; (8001434 <HAL_RCC_OscConfig+0x240>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d0f0      	beq.n	80012b4 <HAL_RCC_OscConfig+0xc0>
 80012d2:	e014      	b.n	80012fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012d4:	f7ff fcac 	bl	8000c30 <HAL_GetTick>
 80012d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012da:	e008      	b.n	80012ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012dc:	f7ff fca8 	bl	8000c30 <HAL_GetTick>
 80012e0:	4602      	mov	r2, r0
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	2b64      	cmp	r3, #100	; 0x64
 80012e8:	d901      	bls.n	80012ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012ea:	2303      	movs	r3, #3
 80012ec:	e1f3      	b.n	80016d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012ee:	4b51      	ldr	r3, [pc, #324]	; (8001434 <HAL_RCC_OscConfig+0x240>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d1f0      	bne.n	80012dc <HAL_RCC_OscConfig+0xe8>
 80012fa:	e000      	b.n	80012fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f003 0302 	and.w	r3, r3, #2
 8001306:	2b00      	cmp	r3, #0
 8001308:	d063      	beq.n	80013d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800130a:	4b4a      	ldr	r3, [pc, #296]	; (8001434 <HAL_RCC_OscConfig+0x240>)
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	f003 030c 	and.w	r3, r3, #12
 8001312:	2b00      	cmp	r3, #0
 8001314:	d00b      	beq.n	800132e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001316:	4b47      	ldr	r3, [pc, #284]	; (8001434 <HAL_RCC_OscConfig+0x240>)
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800131e:	2b08      	cmp	r3, #8
 8001320:	d11c      	bne.n	800135c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001322:	4b44      	ldr	r3, [pc, #272]	; (8001434 <HAL_RCC_OscConfig+0x240>)
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800132a:	2b00      	cmp	r3, #0
 800132c:	d116      	bne.n	800135c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800132e:	4b41      	ldr	r3, [pc, #260]	; (8001434 <HAL_RCC_OscConfig+0x240>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f003 0302 	and.w	r3, r3, #2
 8001336:	2b00      	cmp	r3, #0
 8001338:	d005      	beq.n	8001346 <HAL_RCC_OscConfig+0x152>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	68db      	ldr	r3, [r3, #12]
 800133e:	2b01      	cmp	r3, #1
 8001340:	d001      	beq.n	8001346 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	e1c7      	b.n	80016d6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001346:	4b3b      	ldr	r3, [pc, #236]	; (8001434 <HAL_RCC_OscConfig+0x240>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	691b      	ldr	r3, [r3, #16]
 8001352:	00db      	lsls	r3, r3, #3
 8001354:	4937      	ldr	r1, [pc, #220]	; (8001434 <HAL_RCC_OscConfig+0x240>)
 8001356:	4313      	orrs	r3, r2
 8001358:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800135a:	e03a      	b.n	80013d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d020      	beq.n	80013a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001364:	4b34      	ldr	r3, [pc, #208]	; (8001438 <HAL_RCC_OscConfig+0x244>)
 8001366:	2201      	movs	r2, #1
 8001368:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800136a:	f7ff fc61 	bl	8000c30 <HAL_GetTick>
 800136e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001370:	e008      	b.n	8001384 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001372:	f7ff fc5d 	bl	8000c30 <HAL_GetTick>
 8001376:	4602      	mov	r2, r0
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	1ad3      	subs	r3, r2, r3
 800137c:	2b02      	cmp	r3, #2
 800137e:	d901      	bls.n	8001384 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001380:	2303      	movs	r3, #3
 8001382:	e1a8      	b.n	80016d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001384:	4b2b      	ldr	r3, [pc, #172]	; (8001434 <HAL_RCC_OscConfig+0x240>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f003 0302 	and.w	r3, r3, #2
 800138c:	2b00      	cmp	r3, #0
 800138e:	d0f0      	beq.n	8001372 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001390:	4b28      	ldr	r3, [pc, #160]	; (8001434 <HAL_RCC_OscConfig+0x240>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	691b      	ldr	r3, [r3, #16]
 800139c:	00db      	lsls	r3, r3, #3
 800139e:	4925      	ldr	r1, [pc, #148]	; (8001434 <HAL_RCC_OscConfig+0x240>)
 80013a0:	4313      	orrs	r3, r2
 80013a2:	600b      	str	r3, [r1, #0]
 80013a4:	e015      	b.n	80013d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013a6:	4b24      	ldr	r3, [pc, #144]	; (8001438 <HAL_RCC_OscConfig+0x244>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ac:	f7ff fc40 	bl	8000c30 <HAL_GetTick>
 80013b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013b2:	e008      	b.n	80013c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013b4:	f7ff fc3c 	bl	8000c30 <HAL_GetTick>
 80013b8:	4602      	mov	r2, r0
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	2b02      	cmp	r3, #2
 80013c0:	d901      	bls.n	80013c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80013c2:	2303      	movs	r3, #3
 80013c4:	e187      	b.n	80016d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013c6:	4b1b      	ldr	r3, [pc, #108]	; (8001434 <HAL_RCC_OscConfig+0x240>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f003 0302 	and.w	r3, r3, #2
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d1f0      	bne.n	80013b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 0308 	and.w	r3, r3, #8
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d036      	beq.n	800144c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	695b      	ldr	r3, [r3, #20]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d016      	beq.n	8001414 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013e6:	4b15      	ldr	r3, [pc, #84]	; (800143c <HAL_RCC_OscConfig+0x248>)
 80013e8:	2201      	movs	r2, #1
 80013ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013ec:	f7ff fc20 	bl	8000c30 <HAL_GetTick>
 80013f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013f2:	e008      	b.n	8001406 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013f4:	f7ff fc1c 	bl	8000c30 <HAL_GetTick>
 80013f8:	4602      	mov	r2, r0
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	2b02      	cmp	r3, #2
 8001400:	d901      	bls.n	8001406 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001402:	2303      	movs	r3, #3
 8001404:	e167      	b.n	80016d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001406:	4b0b      	ldr	r3, [pc, #44]	; (8001434 <HAL_RCC_OscConfig+0x240>)
 8001408:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800140a:	f003 0302 	and.w	r3, r3, #2
 800140e:	2b00      	cmp	r3, #0
 8001410:	d0f0      	beq.n	80013f4 <HAL_RCC_OscConfig+0x200>
 8001412:	e01b      	b.n	800144c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001414:	4b09      	ldr	r3, [pc, #36]	; (800143c <HAL_RCC_OscConfig+0x248>)
 8001416:	2200      	movs	r2, #0
 8001418:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800141a:	f7ff fc09 	bl	8000c30 <HAL_GetTick>
 800141e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001420:	e00e      	b.n	8001440 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001422:	f7ff fc05 	bl	8000c30 <HAL_GetTick>
 8001426:	4602      	mov	r2, r0
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	2b02      	cmp	r3, #2
 800142e:	d907      	bls.n	8001440 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001430:	2303      	movs	r3, #3
 8001432:	e150      	b.n	80016d6 <HAL_RCC_OscConfig+0x4e2>
 8001434:	40023800 	.word	0x40023800
 8001438:	42470000 	.word	0x42470000
 800143c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001440:	4b88      	ldr	r3, [pc, #544]	; (8001664 <HAL_RCC_OscConfig+0x470>)
 8001442:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001444:	f003 0302 	and.w	r3, r3, #2
 8001448:	2b00      	cmp	r3, #0
 800144a:	d1ea      	bne.n	8001422 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f003 0304 	and.w	r3, r3, #4
 8001454:	2b00      	cmp	r3, #0
 8001456:	f000 8097 	beq.w	8001588 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800145a:	2300      	movs	r3, #0
 800145c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800145e:	4b81      	ldr	r3, [pc, #516]	; (8001664 <HAL_RCC_OscConfig+0x470>)
 8001460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001466:	2b00      	cmp	r3, #0
 8001468:	d10f      	bne.n	800148a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	60bb      	str	r3, [r7, #8]
 800146e:	4b7d      	ldr	r3, [pc, #500]	; (8001664 <HAL_RCC_OscConfig+0x470>)
 8001470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001472:	4a7c      	ldr	r2, [pc, #496]	; (8001664 <HAL_RCC_OscConfig+0x470>)
 8001474:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001478:	6413      	str	r3, [r2, #64]	; 0x40
 800147a:	4b7a      	ldr	r3, [pc, #488]	; (8001664 <HAL_RCC_OscConfig+0x470>)
 800147c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001482:	60bb      	str	r3, [r7, #8]
 8001484:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001486:	2301      	movs	r3, #1
 8001488:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800148a:	4b77      	ldr	r3, [pc, #476]	; (8001668 <HAL_RCC_OscConfig+0x474>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001492:	2b00      	cmp	r3, #0
 8001494:	d118      	bne.n	80014c8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001496:	4b74      	ldr	r3, [pc, #464]	; (8001668 <HAL_RCC_OscConfig+0x474>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a73      	ldr	r2, [pc, #460]	; (8001668 <HAL_RCC_OscConfig+0x474>)
 800149c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014a2:	f7ff fbc5 	bl	8000c30 <HAL_GetTick>
 80014a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014a8:	e008      	b.n	80014bc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014aa:	f7ff fbc1 	bl	8000c30 <HAL_GetTick>
 80014ae:	4602      	mov	r2, r0
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	1ad3      	subs	r3, r2, r3
 80014b4:	2b02      	cmp	r3, #2
 80014b6:	d901      	bls.n	80014bc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80014b8:	2303      	movs	r3, #3
 80014ba:	e10c      	b.n	80016d6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014bc:	4b6a      	ldr	r3, [pc, #424]	; (8001668 <HAL_RCC_OscConfig+0x474>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d0f0      	beq.n	80014aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d106      	bne.n	80014de <HAL_RCC_OscConfig+0x2ea>
 80014d0:	4b64      	ldr	r3, [pc, #400]	; (8001664 <HAL_RCC_OscConfig+0x470>)
 80014d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014d4:	4a63      	ldr	r2, [pc, #396]	; (8001664 <HAL_RCC_OscConfig+0x470>)
 80014d6:	f043 0301 	orr.w	r3, r3, #1
 80014da:	6713      	str	r3, [r2, #112]	; 0x70
 80014dc:	e01c      	b.n	8001518 <HAL_RCC_OscConfig+0x324>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	2b05      	cmp	r3, #5
 80014e4:	d10c      	bne.n	8001500 <HAL_RCC_OscConfig+0x30c>
 80014e6:	4b5f      	ldr	r3, [pc, #380]	; (8001664 <HAL_RCC_OscConfig+0x470>)
 80014e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014ea:	4a5e      	ldr	r2, [pc, #376]	; (8001664 <HAL_RCC_OscConfig+0x470>)
 80014ec:	f043 0304 	orr.w	r3, r3, #4
 80014f0:	6713      	str	r3, [r2, #112]	; 0x70
 80014f2:	4b5c      	ldr	r3, [pc, #368]	; (8001664 <HAL_RCC_OscConfig+0x470>)
 80014f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014f6:	4a5b      	ldr	r2, [pc, #364]	; (8001664 <HAL_RCC_OscConfig+0x470>)
 80014f8:	f043 0301 	orr.w	r3, r3, #1
 80014fc:	6713      	str	r3, [r2, #112]	; 0x70
 80014fe:	e00b      	b.n	8001518 <HAL_RCC_OscConfig+0x324>
 8001500:	4b58      	ldr	r3, [pc, #352]	; (8001664 <HAL_RCC_OscConfig+0x470>)
 8001502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001504:	4a57      	ldr	r2, [pc, #348]	; (8001664 <HAL_RCC_OscConfig+0x470>)
 8001506:	f023 0301 	bic.w	r3, r3, #1
 800150a:	6713      	str	r3, [r2, #112]	; 0x70
 800150c:	4b55      	ldr	r3, [pc, #340]	; (8001664 <HAL_RCC_OscConfig+0x470>)
 800150e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001510:	4a54      	ldr	r2, [pc, #336]	; (8001664 <HAL_RCC_OscConfig+0x470>)
 8001512:	f023 0304 	bic.w	r3, r3, #4
 8001516:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d015      	beq.n	800154c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001520:	f7ff fb86 	bl	8000c30 <HAL_GetTick>
 8001524:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001526:	e00a      	b.n	800153e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001528:	f7ff fb82 	bl	8000c30 <HAL_GetTick>
 800152c:	4602      	mov	r2, r0
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	f241 3288 	movw	r2, #5000	; 0x1388
 8001536:	4293      	cmp	r3, r2
 8001538:	d901      	bls.n	800153e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800153a:	2303      	movs	r3, #3
 800153c:	e0cb      	b.n	80016d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800153e:	4b49      	ldr	r3, [pc, #292]	; (8001664 <HAL_RCC_OscConfig+0x470>)
 8001540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001542:	f003 0302 	and.w	r3, r3, #2
 8001546:	2b00      	cmp	r3, #0
 8001548:	d0ee      	beq.n	8001528 <HAL_RCC_OscConfig+0x334>
 800154a:	e014      	b.n	8001576 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800154c:	f7ff fb70 	bl	8000c30 <HAL_GetTick>
 8001550:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001552:	e00a      	b.n	800156a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001554:	f7ff fb6c 	bl	8000c30 <HAL_GetTick>
 8001558:	4602      	mov	r2, r0
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001562:	4293      	cmp	r3, r2
 8001564:	d901      	bls.n	800156a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001566:	2303      	movs	r3, #3
 8001568:	e0b5      	b.n	80016d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800156a:	4b3e      	ldr	r3, [pc, #248]	; (8001664 <HAL_RCC_OscConfig+0x470>)
 800156c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800156e:	f003 0302 	and.w	r3, r3, #2
 8001572:	2b00      	cmp	r3, #0
 8001574:	d1ee      	bne.n	8001554 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001576:	7dfb      	ldrb	r3, [r7, #23]
 8001578:	2b01      	cmp	r3, #1
 800157a:	d105      	bne.n	8001588 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800157c:	4b39      	ldr	r3, [pc, #228]	; (8001664 <HAL_RCC_OscConfig+0x470>)
 800157e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001580:	4a38      	ldr	r2, [pc, #224]	; (8001664 <HAL_RCC_OscConfig+0x470>)
 8001582:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001586:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	699b      	ldr	r3, [r3, #24]
 800158c:	2b00      	cmp	r3, #0
 800158e:	f000 80a1 	beq.w	80016d4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001592:	4b34      	ldr	r3, [pc, #208]	; (8001664 <HAL_RCC_OscConfig+0x470>)
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	f003 030c 	and.w	r3, r3, #12
 800159a:	2b08      	cmp	r3, #8
 800159c:	d05c      	beq.n	8001658 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	699b      	ldr	r3, [r3, #24]
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d141      	bne.n	800162a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015a6:	4b31      	ldr	r3, [pc, #196]	; (800166c <HAL_RCC_OscConfig+0x478>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ac:	f7ff fb40 	bl	8000c30 <HAL_GetTick>
 80015b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015b2:	e008      	b.n	80015c6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015b4:	f7ff fb3c 	bl	8000c30 <HAL_GetTick>
 80015b8:	4602      	mov	r2, r0
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	2b02      	cmp	r3, #2
 80015c0:	d901      	bls.n	80015c6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80015c2:	2303      	movs	r3, #3
 80015c4:	e087      	b.n	80016d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015c6:	4b27      	ldr	r3, [pc, #156]	; (8001664 <HAL_RCC_OscConfig+0x470>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d1f0      	bne.n	80015b4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	69da      	ldr	r2, [r3, #28]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6a1b      	ldr	r3, [r3, #32]
 80015da:	431a      	orrs	r2, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e0:	019b      	lsls	r3, r3, #6
 80015e2:	431a      	orrs	r2, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015e8:	085b      	lsrs	r3, r3, #1
 80015ea:	3b01      	subs	r3, #1
 80015ec:	041b      	lsls	r3, r3, #16
 80015ee:	431a      	orrs	r2, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015f4:	061b      	lsls	r3, r3, #24
 80015f6:	491b      	ldr	r1, [pc, #108]	; (8001664 <HAL_RCC_OscConfig+0x470>)
 80015f8:	4313      	orrs	r3, r2
 80015fa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015fc:	4b1b      	ldr	r3, [pc, #108]	; (800166c <HAL_RCC_OscConfig+0x478>)
 80015fe:	2201      	movs	r2, #1
 8001600:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001602:	f7ff fb15 	bl	8000c30 <HAL_GetTick>
 8001606:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001608:	e008      	b.n	800161c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800160a:	f7ff fb11 	bl	8000c30 <HAL_GetTick>
 800160e:	4602      	mov	r2, r0
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	1ad3      	subs	r3, r2, r3
 8001614:	2b02      	cmp	r3, #2
 8001616:	d901      	bls.n	800161c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001618:	2303      	movs	r3, #3
 800161a:	e05c      	b.n	80016d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800161c:	4b11      	ldr	r3, [pc, #68]	; (8001664 <HAL_RCC_OscConfig+0x470>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001624:	2b00      	cmp	r3, #0
 8001626:	d0f0      	beq.n	800160a <HAL_RCC_OscConfig+0x416>
 8001628:	e054      	b.n	80016d4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800162a:	4b10      	ldr	r3, [pc, #64]	; (800166c <HAL_RCC_OscConfig+0x478>)
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001630:	f7ff fafe 	bl	8000c30 <HAL_GetTick>
 8001634:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001636:	e008      	b.n	800164a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001638:	f7ff fafa 	bl	8000c30 <HAL_GetTick>
 800163c:	4602      	mov	r2, r0
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	2b02      	cmp	r3, #2
 8001644:	d901      	bls.n	800164a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001646:	2303      	movs	r3, #3
 8001648:	e045      	b.n	80016d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800164a:	4b06      	ldr	r3, [pc, #24]	; (8001664 <HAL_RCC_OscConfig+0x470>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d1f0      	bne.n	8001638 <HAL_RCC_OscConfig+0x444>
 8001656:	e03d      	b.n	80016d4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	699b      	ldr	r3, [r3, #24]
 800165c:	2b01      	cmp	r3, #1
 800165e:	d107      	bne.n	8001670 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	e038      	b.n	80016d6 <HAL_RCC_OscConfig+0x4e2>
 8001664:	40023800 	.word	0x40023800
 8001668:	40007000 	.word	0x40007000
 800166c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001670:	4b1b      	ldr	r3, [pc, #108]	; (80016e0 <HAL_RCC_OscConfig+0x4ec>)
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	699b      	ldr	r3, [r3, #24]
 800167a:	2b01      	cmp	r3, #1
 800167c:	d028      	beq.n	80016d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001688:	429a      	cmp	r2, r3
 800168a:	d121      	bne.n	80016d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001696:	429a      	cmp	r2, r3
 8001698:	d11a      	bne.n	80016d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800169a:	68fa      	ldr	r2, [r7, #12]
 800169c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80016a0:	4013      	ands	r3, r2
 80016a2:	687a      	ldr	r2, [r7, #4]
 80016a4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80016a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d111      	bne.n	80016d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016b6:	085b      	lsrs	r3, r3, #1
 80016b8:	3b01      	subs	r3, #1
 80016ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016bc:	429a      	cmp	r2, r3
 80016be:	d107      	bne.n	80016d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d001      	beq.n	80016d4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e000      	b.n	80016d6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80016d4:	2300      	movs	r3, #0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3718      	adds	r7, #24
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	40023800 	.word	0x40023800

080016e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d101      	bne.n	80016f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	e0cc      	b.n	8001892 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016f8:	4b68      	ldr	r3, [pc, #416]	; (800189c <HAL_RCC_ClockConfig+0x1b8>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 0307 	and.w	r3, r3, #7
 8001700:	683a      	ldr	r2, [r7, #0]
 8001702:	429a      	cmp	r2, r3
 8001704:	d90c      	bls.n	8001720 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001706:	4b65      	ldr	r3, [pc, #404]	; (800189c <HAL_RCC_ClockConfig+0x1b8>)
 8001708:	683a      	ldr	r2, [r7, #0]
 800170a:	b2d2      	uxtb	r2, r2
 800170c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800170e:	4b63      	ldr	r3, [pc, #396]	; (800189c <HAL_RCC_ClockConfig+0x1b8>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 0307 	and.w	r3, r3, #7
 8001716:	683a      	ldr	r2, [r7, #0]
 8001718:	429a      	cmp	r2, r3
 800171a:	d001      	beq.n	8001720 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	e0b8      	b.n	8001892 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f003 0302 	and.w	r3, r3, #2
 8001728:	2b00      	cmp	r3, #0
 800172a:	d020      	beq.n	800176e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 0304 	and.w	r3, r3, #4
 8001734:	2b00      	cmp	r3, #0
 8001736:	d005      	beq.n	8001744 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001738:	4b59      	ldr	r3, [pc, #356]	; (80018a0 <HAL_RCC_ClockConfig+0x1bc>)
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	4a58      	ldr	r2, [pc, #352]	; (80018a0 <HAL_RCC_ClockConfig+0x1bc>)
 800173e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001742:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f003 0308 	and.w	r3, r3, #8
 800174c:	2b00      	cmp	r3, #0
 800174e:	d005      	beq.n	800175c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001750:	4b53      	ldr	r3, [pc, #332]	; (80018a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	4a52      	ldr	r2, [pc, #328]	; (80018a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001756:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800175a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800175c:	4b50      	ldr	r3, [pc, #320]	; (80018a0 <HAL_RCC_ClockConfig+0x1bc>)
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	494d      	ldr	r1, [pc, #308]	; (80018a0 <HAL_RCC_ClockConfig+0x1bc>)
 800176a:	4313      	orrs	r3, r2
 800176c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 0301 	and.w	r3, r3, #1
 8001776:	2b00      	cmp	r3, #0
 8001778:	d044      	beq.n	8001804 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	2b01      	cmp	r3, #1
 8001780:	d107      	bne.n	8001792 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001782:	4b47      	ldr	r3, [pc, #284]	; (80018a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d119      	bne.n	80017c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e07f      	b.n	8001892 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	2b02      	cmp	r3, #2
 8001798:	d003      	beq.n	80017a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800179e:	2b03      	cmp	r3, #3
 80017a0:	d107      	bne.n	80017b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017a2:	4b3f      	ldr	r3, [pc, #252]	; (80018a0 <HAL_RCC_ClockConfig+0x1bc>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d109      	bne.n	80017c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e06f      	b.n	8001892 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017b2:	4b3b      	ldr	r3, [pc, #236]	; (80018a0 <HAL_RCC_ClockConfig+0x1bc>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0302 	and.w	r3, r3, #2
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d101      	bne.n	80017c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e067      	b.n	8001892 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017c2:	4b37      	ldr	r3, [pc, #220]	; (80018a0 <HAL_RCC_ClockConfig+0x1bc>)
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	f023 0203 	bic.w	r2, r3, #3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	4934      	ldr	r1, [pc, #208]	; (80018a0 <HAL_RCC_ClockConfig+0x1bc>)
 80017d0:	4313      	orrs	r3, r2
 80017d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017d4:	f7ff fa2c 	bl	8000c30 <HAL_GetTick>
 80017d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017da:	e00a      	b.n	80017f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017dc:	f7ff fa28 	bl	8000c30 <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d901      	bls.n	80017f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e04f      	b.n	8001892 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017f2:	4b2b      	ldr	r3, [pc, #172]	; (80018a0 <HAL_RCC_ClockConfig+0x1bc>)
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	f003 020c 	and.w	r2, r3, #12
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	429a      	cmp	r2, r3
 8001802:	d1eb      	bne.n	80017dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001804:	4b25      	ldr	r3, [pc, #148]	; (800189c <HAL_RCC_ClockConfig+0x1b8>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 0307 	and.w	r3, r3, #7
 800180c:	683a      	ldr	r2, [r7, #0]
 800180e:	429a      	cmp	r2, r3
 8001810:	d20c      	bcs.n	800182c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001812:	4b22      	ldr	r3, [pc, #136]	; (800189c <HAL_RCC_ClockConfig+0x1b8>)
 8001814:	683a      	ldr	r2, [r7, #0]
 8001816:	b2d2      	uxtb	r2, r2
 8001818:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800181a:	4b20      	ldr	r3, [pc, #128]	; (800189c <HAL_RCC_ClockConfig+0x1b8>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0307 	and.w	r3, r3, #7
 8001822:	683a      	ldr	r2, [r7, #0]
 8001824:	429a      	cmp	r2, r3
 8001826:	d001      	beq.n	800182c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001828:	2301      	movs	r3, #1
 800182a:	e032      	b.n	8001892 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f003 0304 	and.w	r3, r3, #4
 8001834:	2b00      	cmp	r3, #0
 8001836:	d008      	beq.n	800184a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001838:	4b19      	ldr	r3, [pc, #100]	; (80018a0 <HAL_RCC_ClockConfig+0x1bc>)
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	4916      	ldr	r1, [pc, #88]	; (80018a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001846:	4313      	orrs	r3, r2
 8001848:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 0308 	and.w	r3, r3, #8
 8001852:	2b00      	cmp	r3, #0
 8001854:	d009      	beq.n	800186a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001856:	4b12      	ldr	r3, [pc, #72]	; (80018a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	691b      	ldr	r3, [r3, #16]
 8001862:	00db      	lsls	r3, r3, #3
 8001864:	490e      	ldr	r1, [pc, #56]	; (80018a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001866:	4313      	orrs	r3, r2
 8001868:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800186a:	f000 f821 	bl	80018b0 <HAL_RCC_GetSysClockFreq>
 800186e:	4602      	mov	r2, r0
 8001870:	4b0b      	ldr	r3, [pc, #44]	; (80018a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	091b      	lsrs	r3, r3, #4
 8001876:	f003 030f 	and.w	r3, r3, #15
 800187a:	490a      	ldr	r1, [pc, #40]	; (80018a4 <HAL_RCC_ClockConfig+0x1c0>)
 800187c:	5ccb      	ldrb	r3, [r1, r3]
 800187e:	fa22 f303 	lsr.w	r3, r2, r3
 8001882:	4a09      	ldr	r2, [pc, #36]	; (80018a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001884:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001886:	4b09      	ldr	r3, [pc, #36]	; (80018ac <HAL_RCC_ClockConfig+0x1c8>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4618      	mov	r0, r3
 800188c:	f7ff f8da 	bl	8000a44 <HAL_InitTick>

  return HAL_OK;
 8001890:	2300      	movs	r3, #0
}
 8001892:	4618      	mov	r0, r3
 8001894:	3710      	adds	r7, #16
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	40023c00 	.word	0x40023c00
 80018a0:	40023800 	.word	0x40023800
 80018a4:	08006698 	.word	0x08006698
 80018a8:	20000000 	.word	0x20000000
 80018ac:	20000004 	.word	0x20000004

080018b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018b4:	b094      	sub	sp, #80	; 0x50
 80018b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80018b8:	2300      	movs	r3, #0
 80018ba:	647b      	str	r3, [r7, #68]	; 0x44
 80018bc:	2300      	movs	r3, #0
 80018be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80018c0:	2300      	movs	r3, #0
 80018c2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80018c4:	2300      	movs	r3, #0
 80018c6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018c8:	4b79      	ldr	r3, [pc, #484]	; (8001ab0 <HAL_RCC_GetSysClockFreq+0x200>)
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	f003 030c 	and.w	r3, r3, #12
 80018d0:	2b08      	cmp	r3, #8
 80018d2:	d00d      	beq.n	80018f0 <HAL_RCC_GetSysClockFreq+0x40>
 80018d4:	2b08      	cmp	r3, #8
 80018d6:	f200 80e1 	bhi.w	8001a9c <HAL_RCC_GetSysClockFreq+0x1ec>
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d002      	beq.n	80018e4 <HAL_RCC_GetSysClockFreq+0x34>
 80018de:	2b04      	cmp	r3, #4
 80018e0:	d003      	beq.n	80018ea <HAL_RCC_GetSysClockFreq+0x3a>
 80018e2:	e0db      	b.n	8001a9c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018e4:	4b73      	ldr	r3, [pc, #460]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0x204>)
 80018e6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80018e8:	e0db      	b.n	8001aa2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018ea:	4b73      	ldr	r3, [pc, #460]	; (8001ab8 <HAL_RCC_GetSysClockFreq+0x208>)
 80018ec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80018ee:	e0d8      	b.n	8001aa2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018f0:	4b6f      	ldr	r3, [pc, #444]	; (8001ab0 <HAL_RCC_GetSysClockFreq+0x200>)
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80018f8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018fa:	4b6d      	ldr	r3, [pc, #436]	; (8001ab0 <HAL_RCC_GetSysClockFreq+0x200>)
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d063      	beq.n	80019ce <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001906:	4b6a      	ldr	r3, [pc, #424]	; (8001ab0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	099b      	lsrs	r3, r3, #6
 800190c:	2200      	movs	r2, #0
 800190e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001910:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001914:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001918:	633b      	str	r3, [r7, #48]	; 0x30
 800191a:	2300      	movs	r3, #0
 800191c:	637b      	str	r3, [r7, #52]	; 0x34
 800191e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001922:	4622      	mov	r2, r4
 8001924:	462b      	mov	r3, r5
 8001926:	f04f 0000 	mov.w	r0, #0
 800192a:	f04f 0100 	mov.w	r1, #0
 800192e:	0159      	lsls	r1, r3, #5
 8001930:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001934:	0150      	lsls	r0, r2, #5
 8001936:	4602      	mov	r2, r0
 8001938:	460b      	mov	r3, r1
 800193a:	4621      	mov	r1, r4
 800193c:	1a51      	subs	r1, r2, r1
 800193e:	6139      	str	r1, [r7, #16]
 8001940:	4629      	mov	r1, r5
 8001942:	eb63 0301 	sbc.w	r3, r3, r1
 8001946:	617b      	str	r3, [r7, #20]
 8001948:	f04f 0200 	mov.w	r2, #0
 800194c:	f04f 0300 	mov.w	r3, #0
 8001950:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001954:	4659      	mov	r1, fp
 8001956:	018b      	lsls	r3, r1, #6
 8001958:	4651      	mov	r1, sl
 800195a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800195e:	4651      	mov	r1, sl
 8001960:	018a      	lsls	r2, r1, #6
 8001962:	4651      	mov	r1, sl
 8001964:	ebb2 0801 	subs.w	r8, r2, r1
 8001968:	4659      	mov	r1, fp
 800196a:	eb63 0901 	sbc.w	r9, r3, r1
 800196e:	f04f 0200 	mov.w	r2, #0
 8001972:	f04f 0300 	mov.w	r3, #0
 8001976:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800197a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800197e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001982:	4690      	mov	r8, r2
 8001984:	4699      	mov	r9, r3
 8001986:	4623      	mov	r3, r4
 8001988:	eb18 0303 	adds.w	r3, r8, r3
 800198c:	60bb      	str	r3, [r7, #8]
 800198e:	462b      	mov	r3, r5
 8001990:	eb49 0303 	adc.w	r3, r9, r3
 8001994:	60fb      	str	r3, [r7, #12]
 8001996:	f04f 0200 	mov.w	r2, #0
 800199a:	f04f 0300 	mov.w	r3, #0
 800199e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80019a2:	4629      	mov	r1, r5
 80019a4:	024b      	lsls	r3, r1, #9
 80019a6:	4621      	mov	r1, r4
 80019a8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80019ac:	4621      	mov	r1, r4
 80019ae:	024a      	lsls	r2, r1, #9
 80019b0:	4610      	mov	r0, r2
 80019b2:	4619      	mov	r1, r3
 80019b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019b6:	2200      	movs	r2, #0
 80019b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80019ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80019bc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80019c0:	f7fe fc50 	bl	8000264 <__aeabi_uldivmod>
 80019c4:	4602      	mov	r2, r0
 80019c6:	460b      	mov	r3, r1
 80019c8:	4613      	mov	r3, r2
 80019ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80019cc:	e058      	b.n	8001a80 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019ce:	4b38      	ldr	r3, [pc, #224]	; (8001ab0 <HAL_RCC_GetSysClockFreq+0x200>)
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	099b      	lsrs	r3, r3, #6
 80019d4:	2200      	movs	r2, #0
 80019d6:	4618      	mov	r0, r3
 80019d8:	4611      	mov	r1, r2
 80019da:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80019de:	623b      	str	r3, [r7, #32]
 80019e0:	2300      	movs	r3, #0
 80019e2:	627b      	str	r3, [r7, #36]	; 0x24
 80019e4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80019e8:	4642      	mov	r2, r8
 80019ea:	464b      	mov	r3, r9
 80019ec:	f04f 0000 	mov.w	r0, #0
 80019f0:	f04f 0100 	mov.w	r1, #0
 80019f4:	0159      	lsls	r1, r3, #5
 80019f6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019fa:	0150      	lsls	r0, r2, #5
 80019fc:	4602      	mov	r2, r0
 80019fe:	460b      	mov	r3, r1
 8001a00:	4641      	mov	r1, r8
 8001a02:	ebb2 0a01 	subs.w	sl, r2, r1
 8001a06:	4649      	mov	r1, r9
 8001a08:	eb63 0b01 	sbc.w	fp, r3, r1
 8001a0c:	f04f 0200 	mov.w	r2, #0
 8001a10:	f04f 0300 	mov.w	r3, #0
 8001a14:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001a18:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001a1c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001a20:	ebb2 040a 	subs.w	r4, r2, sl
 8001a24:	eb63 050b 	sbc.w	r5, r3, fp
 8001a28:	f04f 0200 	mov.w	r2, #0
 8001a2c:	f04f 0300 	mov.w	r3, #0
 8001a30:	00eb      	lsls	r3, r5, #3
 8001a32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a36:	00e2      	lsls	r2, r4, #3
 8001a38:	4614      	mov	r4, r2
 8001a3a:	461d      	mov	r5, r3
 8001a3c:	4643      	mov	r3, r8
 8001a3e:	18e3      	adds	r3, r4, r3
 8001a40:	603b      	str	r3, [r7, #0]
 8001a42:	464b      	mov	r3, r9
 8001a44:	eb45 0303 	adc.w	r3, r5, r3
 8001a48:	607b      	str	r3, [r7, #4]
 8001a4a:	f04f 0200 	mov.w	r2, #0
 8001a4e:	f04f 0300 	mov.w	r3, #0
 8001a52:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a56:	4629      	mov	r1, r5
 8001a58:	028b      	lsls	r3, r1, #10
 8001a5a:	4621      	mov	r1, r4
 8001a5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a60:	4621      	mov	r1, r4
 8001a62:	028a      	lsls	r2, r1, #10
 8001a64:	4610      	mov	r0, r2
 8001a66:	4619      	mov	r1, r3
 8001a68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	61bb      	str	r3, [r7, #24]
 8001a6e:	61fa      	str	r2, [r7, #28]
 8001a70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a74:	f7fe fbf6 	bl	8000264 <__aeabi_uldivmod>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	460b      	mov	r3, r1
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a80:	4b0b      	ldr	r3, [pc, #44]	; (8001ab0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	0c1b      	lsrs	r3, r3, #16
 8001a86:	f003 0303 	and.w	r3, r3, #3
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	005b      	lsls	r3, r3, #1
 8001a8e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001a90:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001a92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a94:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a98:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a9a:	e002      	b.n	8001aa2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a9c:	4b05      	ldr	r3, [pc, #20]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001a9e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001aa0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001aa2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	3750      	adds	r7, #80	; 0x50
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001aae:	bf00      	nop
 8001ab0:	40023800 	.word	0x40023800
 8001ab4:	00f42400 	.word	0x00f42400
 8001ab8:	007a1200 	.word	0x007a1200

08001abc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ac0:	4b03      	ldr	r3, [pc, #12]	; (8001ad0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	20000000 	.word	0x20000000

08001ad4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ad8:	f7ff fff0 	bl	8001abc <HAL_RCC_GetHCLKFreq>
 8001adc:	4602      	mov	r2, r0
 8001ade:	4b05      	ldr	r3, [pc, #20]	; (8001af4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	0a9b      	lsrs	r3, r3, #10
 8001ae4:	f003 0307 	and.w	r3, r3, #7
 8001ae8:	4903      	ldr	r1, [pc, #12]	; (8001af8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001aea:	5ccb      	ldrb	r3, [r1, r3]
 8001aec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	40023800 	.word	0x40023800
 8001af8:	080066a8 	.word	0x080066a8

08001afc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	220f      	movs	r2, #15
 8001b0a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b0c:	4b12      	ldr	r3, [pc, #72]	; (8001b58 <HAL_RCC_GetClockConfig+0x5c>)
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	f003 0203 	and.w	r2, r3, #3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b18:	4b0f      	ldr	r3, [pc, #60]	; (8001b58 <HAL_RCC_GetClockConfig+0x5c>)
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b24:	4b0c      	ldr	r3, [pc, #48]	; (8001b58 <HAL_RCC_GetClockConfig+0x5c>)
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001b30:	4b09      	ldr	r3, [pc, #36]	; (8001b58 <HAL_RCC_GetClockConfig+0x5c>)
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	08db      	lsrs	r3, r3, #3
 8001b36:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b3e:	4b07      	ldr	r3, [pc, #28]	; (8001b5c <HAL_RCC_GetClockConfig+0x60>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0207 	and.w	r2, r3, #7
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	601a      	str	r2, [r3, #0]
}
 8001b4a:	bf00      	nop
 8001b4c:	370c      	adds	r7, #12
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	40023800 	.word	0x40023800
 8001b5c:	40023c00 	.word	0x40023c00

08001b60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d101      	bne.n	8001b72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e041      	b.n	8001bf6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d106      	bne.n	8001b8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2200      	movs	r2, #0
 8001b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f000 f839 	bl	8001bfe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2202      	movs	r2, #2
 8001b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	3304      	adds	r3, #4
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	4610      	mov	r0, r2
 8001ba0:	f000 f9d8 	bl	8001f54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2201      	movs	r2, #1
 8001be0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2201      	movs	r2, #1
 8001be8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2201      	movs	r2, #1
 8001bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001bf4:	2300      	movs	r3, #0
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3708      	adds	r7, #8
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}

08001bfe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001bfe:	b480      	push	{r7}
 8001c00:	b083      	sub	sp, #12
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c06:	bf00      	nop
 8001c08:	370c      	adds	r7, #12
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
	...

08001c14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b085      	sub	sp, #20
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d001      	beq.n	8001c2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e04e      	b.n	8001cca <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2202      	movs	r2, #2
 8001c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	68da      	ldr	r2, [r3, #12]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f042 0201 	orr.w	r2, r2, #1
 8001c42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a23      	ldr	r2, [pc, #140]	; (8001cd8 <HAL_TIM_Base_Start_IT+0xc4>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d022      	beq.n	8001c94 <HAL_TIM_Base_Start_IT+0x80>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c56:	d01d      	beq.n	8001c94 <HAL_TIM_Base_Start_IT+0x80>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a1f      	ldr	r2, [pc, #124]	; (8001cdc <HAL_TIM_Base_Start_IT+0xc8>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d018      	beq.n	8001c94 <HAL_TIM_Base_Start_IT+0x80>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a1e      	ldr	r2, [pc, #120]	; (8001ce0 <HAL_TIM_Base_Start_IT+0xcc>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d013      	beq.n	8001c94 <HAL_TIM_Base_Start_IT+0x80>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a1c      	ldr	r2, [pc, #112]	; (8001ce4 <HAL_TIM_Base_Start_IT+0xd0>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d00e      	beq.n	8001c94 <HAL_TIM_Base_Start_IT+0x80>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a1b      	ldr	r2, [pc, #108]	; (8001ce8 <HAL_TIM_Base_Start_IT+0xd4>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d009      	beq.n	8001c94 <HAL_TIM_Base_Start_IT+0x80>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a19      	ldr	r2, [pc, #100]	; (8001cec <HAL_TIM_Base_Start_IT+0xd8>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d004      	beq.n	8001c94 <HAL_TIM_Base_Start_IT+0x80>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a18      	ldr	r2, [pc, #96]	; (8001cf0 <HAL_TIM_Base_Start_IT+0xdc>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d111      	bne.n	8001cb8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	f003 0307 	and.w	r3, r3, #7
 8001c9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	2b06      	cmp	r3, #6
 8001ca4:	d010      	beq.n	8001cc8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f042 0201 	orr.w	r2, r2, #1
 8001cb4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cb6:	e007      	b.n	8001cc8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f042 0201 	orr.w	r2, r2, #1
 8001cc6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001cc8:	2300      	movs	r3, #0
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3714      	adds	r7, #20
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	40010000 	.word	0x40010000
 8001cdc:	40000400 	.word	0x40000400
 8001ce0:	40000800 	.word	0x40000800
 8001ce4:	40000c00 	.word	0x40000c00
 8001ce8:	40010400 	.word	0x40010400
 8001cec:	40014000 	.word	0x40014000
 8001cf0:	40001800 	.word	0x40001800

08001cf4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	691b      	ldr	r3, [r3, #16]
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d122      	bne.n	8001d50 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	f003 0302 	and.w	r3, r3, #2
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	d11b      	bne.n	8001d50 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f06f 0202 	mvn.w	r2, #2
 8001d20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2201      	movs	r2, #1
 8001d26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	699b      	ldr	r3, [r3, #24]
 8001d2e:	f003 0303 	and.w	r3, r3, #3
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d003      	beq.n	8001d3e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f000 f8ee 	bl	8001f18 <HAL_TIM_IC_CaptureCallback>
 8001d3c:	e005      	b.n	8001d4a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f000 f8e0 	bl	8001f04 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f000 f8f1 	bl	8001f2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	691b      	ldr	r3, [r3, #16]
 8001d56:	f003 0304 	and.w	r3, r3, #4
 8001d5a:	2b04      	cmp	r3, #4
 8001d5c:	d122      	bne.n	8001da4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	f003 0304 	and.w	r3, r3, #4
 8001d68:	2b04      	cmp	r3, #4
 8001d6a:	d11b      	bne.n	8001da4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f06f 0204 	mvn.w	r2, #4
 8001d74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2202      	movs	r2, #2
 8001d7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	699b      	ldr	r3, [r3, #24]
 8001d82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d003      	beq.n	8001d92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f000 f8c4 	bl	8001f18 <HAL_TIM_IC_CaptureCallback>
 8001d90:	e005      	b.n	8001d9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f000 f8b6 	bl	8001f04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f000 f8c7 	bl	8001f2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2200      	movs	r2, #0
 8001da2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	691b      	ldr	r3, [r3, #16]
 8001daa:	f003 0308 	and.w	r3, r3, #8
 8001dae:	2b08      	cmp	r3, #8
 8001db0:	d122      	bne.n	8001df8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	f003 0308 	and.w	r3, r3, #8
 8001dbc:	2b08      	cmp	r3, #8
 8001dbe:	d11b      	bne.n	8001df8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f06f 0208 	mvn.w	r2, #8
 8001dc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2204      	movs	r2, #4
 8001dce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	69db      	ldr	r3, [r3, #28]
 8001dd6:	f003 0303 	and.w	r3, r3, #3
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d003      	beq.n	8001de6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f000 f89a 	bl	8001f18 <HAL_TIM_IC_CaptureCallback>
 8001de4:	e005      	b.n	8001df2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f000 f88c 	bl	8001f04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f000 f89d 	bl	8001f2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2200      	movs	r2, #0
 8001df6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	691b      	ldr	r3, [r3, #16]
 8001dfe:	f003 0310 	and.w	r3, r3, #16
 8001e02:	2b10      	cmp	r3, #16
 8001e04:	d122      	bne.n	8001e4c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	f003 0310 	and.w	r3, r3, #16
 8001e10:	2b10      	cmp	r3, #16
 8001e12:	d11b      	bne.n	8001e4c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f06f 0210 	mvn.w	r2, #16
 8001e1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2208      	movs	r2, #8
 8001e22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	69db      	ldr	r3, [r3, #28]
 8001e2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d003      	beq.n	8001e3a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f000 f870 	bl	8001f18 <HAL_TIM_IC_CaptureCallback>
 8001e38:	e005      	b.n	8001e46 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f000 f862 	bl	8001f04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f000 f873 	bl	8001f2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	691b      	ldr	r3, [r3, #16]
 8001e52:	f003 0301 	and.w	r3, r3, #1
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d10e      	bne.n	8001e78 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	f003 0301 	and.w	r3, r3, #1
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d107      	bne.n	8001e78 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f06f 0201 	mvn.w	r2, #1
 8001e70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f7fe fda6 	bl	80009c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	691b      	ldr	r3, [r3, #16]
 8001e7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e82:	2b80      	cmp	r3, #128	; 0x80
 8001e84:	d10e      	bne.n	8001ea4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e90:	2b80      	cmp	r3, #128	; 0x80
 8001e92:	d107      	bne.n	8001ea4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001e9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f000 f902 	bl	80020a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	691b      	ldr	r3, [r3, #16]
 8001eaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eae:	2b40      	cmp	r3, #64	; 0x40
 8001eb0:	d10e      	bne.n	8001ed0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ebc:	2b40      	cmp	r3, #64	; 0x40
 8001ebe:	d107      	bne.n	8001ed0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001ec8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f000 f838 	bl	8001f40 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	691b      	ldr	r3, [r3, #16]
 8001ed6:	f003 0320 	and.w	r3, r3, #32
 8001eda:	2b20      	cmp	r3, #32
 8001edc:	d10e      	bne.n	8001efc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	f003 0320 	and.w	r3, r3, #32
 8001ee8:	2b20      	cmp	r3, #32
 8001eea:	d107      	bne.n	8001efc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f06f 0220 	mvn.w	r2, #32
 8001ef4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f000 f8cc 	bl	8002094 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001efc:	bf00      	nop
 8001efe:	3708      	adds	r7, #8
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}

08001f04 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f0c:	bf00      	nop
 8001f0e:	370c      	adds	r7, #12
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f20:	bf00      	nop
 8001f22:	370c      	adds	r7, #12
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr

08001f2c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f34:	bf00      	nop
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f48:	bf00      	nop
 8001f4a:	370c      	adds	r7, #12
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr

08001f54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b085      	sub	sp, #20
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	4a40      	ldr	r2, [pc, #256]	; (8002068 <TIM_Base_SetConfig+0x114>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d013      	beq.n	8001f94 <TIM_Base_SetConfig+0x40>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f72:	d00f      	beq.n	8001f94 <TIM_Base_SetConfig+0x40>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	4a3d      	ldr	r2, [pc, #244]	; (800206c <TIM_Base_SetConfig+0x118>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d00b      	beq.n	8001f94 <TIM_Base_SetConfig+0x40>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	4a3c      	ldr	r2, [pc, #240]	; (8002070 <TIM_Base_SetConfig+0x11c>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d007      	beq.n	8001f94 <TIM_Base_SetConfig+0x40>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	4a3b      	ldr	r2, [pc, #236]	; (8002074 <TIM_Base_SetConfig+0x120>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d003      	beq.n	8001f94 <TIM_Base_SetConfig+0x40>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	4a3a      	ldr	r2, [pc, #232]	; (8002078 <TIM_Base_SetConfig+0x124>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d108      	bne.n	8001fa6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	68fa      	ldr	r2, [r7, #12]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a2f      	ldr	r2, [pc, #188]	; (8002068 <TIM_Base_SetConfig+0x114>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d02b      	beq.n	8002006 <TIM_Base_SetConfig+0xb2>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fb4:	d027      	beq.n	8002006 <TIM_Base_SetConfig+0xb2>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a2c      	ldr	r2, [pc, #176]	; (800206c <TIM_Base_SetConfig+0x118>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d023      	beq.n	8002006 <TIM_Base_SetConfig+0xb2>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a2b      	ldr	r2, [pc, #172]	; (8002070 <TIM_Base_SetConfig+0x11c>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d01f      	beq.n	8002006 <TIM_Base_SetConfig+0xb2>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a2a      	ldr	r2, [pc, #168]	; (8002074 <TIM_Base_SetConfig+0x120>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d01b      	beq.n	8002006 <TIM_Base_SetConfig+0xb2>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4a29      	ldr	r2, [pc, #164]	; (8002078 <TIM_Base_SetConfig+0x124>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d017      	beq.n	8002006 <TIM_Base_SetConfig+0xb2>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a28      	ldr	r2, [pc, #160]	; (800207c <TIM_Base_SetConfig+0x128>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d013      	beq.n	8002006 <TIM_Base_SetConfig+0xb2>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a27      	ldr	r2, [pc, #156]	; (8002080 <TIM_Base_SetConfig+0x12c>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d00f      	beq.n	8002006 <TIM_Base_SetConfig+0xb2>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a26      	ldr	r2, [pc, #152]	; (8002084 <TIM_Base_SetConfig+0x130>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d00b      	beq.n	8002006 <TIM_Base_SetConfig+0xb2>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a25      	ldr	r2, [pc, #148]	; (8002088 <TIM_Base_SetConfig+0x134>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d007      	beq.n	8002006 <TIM_Base_SetConfig+0xb2>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4a24      	ldr	r2, [pc, #144]	; (800208c <TIM_Base_SetConfig+0x138>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d003      	beq.n	8002006 <TIM_Base_SetConfig+0xb2>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a23      	ldr	r2, [pc, #140]	; (8002090 <TIM_Base_SetConfig+0x13c>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d108      	bne.n	8002018 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800200c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	68db      	ldr	r3, [r3, #12]
 8002012:	68fa      	ldr	r2, [r7, #12]
 8002014:	4313      	orrs	r3, r2
 8002016:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	695b      	ldr	r3, [r3, #20]
 8002022:	4313      	orrs	r3, r2
 8002024:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	68fa      	ldr	r2, [r7, #12]
 800202a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	689a      	ldr	r2, [r3, #8]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	4a0a      	ldr	r2, [pc, #40]	; (8002068 <TIM_Base_SetConfig+0x114>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d003      	beq.n	800204c <TIM_Base_SetConfig+0xf8>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	4a0c      	ldr	r2, [pc, #48]	; (8002078 <TIM_Base_SetConfig+0x124>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d103      	bne.n	8002054 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	691a      	ldr	r2, [r3, #16]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2201      	movs	r2, #1
 8002058:	615a      	str	r2, [r3, #20]
}
 800205a:	bf00      	nop
 800205c:	3714      	adds	r7, #20
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	40010000 	.word	0x40010000
 800206c:	40000400 	.word	0x40000400
 8002070:	40000800 	.word	0x40000800
 8002074:	40000c00 	.word	0x40000c00
 8002078:	40010400 	.word	0x40010400
 800207c:	40014000 	.word	0x40014000
 8002080:	40014400 	.word	0x40014400
 8002084:	40014800 	.word	0x40014800
 8002088:	40001800 	.word	0x40001800
 800208c:	40001c00 	.word	0x40001c00
 8002090:	40002000 	.word	0x40002000

08002094 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800209c:	bf00      	nop
 800209e:	370c      	adds	r7, #12
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80020b0:	bf00      	nop
 80020b2:	370c      	adds	r7, #12
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr

080020bc <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	f103 0208 	add.w	r2, r3, #8
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f04f 32ff 	mov.w	r2, #4294967295
 80020d4:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	f103 0208 	add.w	r2, r3, #8
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f103 0208 	add.w	r2, r3, #8
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80020f0:	bf00      	nop
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2200      	movs	r2, #0
 8002108:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800210a:	bf00      	nop
 800210c:	370c      	adds	r7, #12
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr

08002116 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8002116:	b480      	push	{r7}
 8002118:	b085      	sub	sp, #20
 800211a:	af00      	add	r7, sp, #0
 800211c:	6078      	str	r0, [r7, #4]
 800211e:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	68fa      	ldr	r2, [r7, #12]
 800212a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	689a      	ldr	r2, [r3, #8]
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	683a      	ldr	r2, [r7, #0]
 800213a:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	683a      	ldr	r2, [r7, #0]
 8002140:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	687a      	ldr	r2, [r7, #4]
 8002146:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	1c5a      	adds	r2, r3, #1
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	601a      	str	r2, [r3, #0]
}
 8002152:	bf00      	nop
 8002154:	3714      	adds	r7, #20
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr

0800215e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800215e:	b480      	push	{r7}
 8002160:	b085      	sub	sp, #20
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
 8002166:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002174:	d103      	bne.n	800217e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	691b      	ldr	r3, [r3, #16]
 800217a:	60fb      	str	r3, [r7, #12]
 800217c:	e00c      	b.n	8002198 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	3308      	adds	r3, #8
 8002182:	60fb      	str	r3, [r7, #12]
 8002184:	e002      	b.n	800218c <vListInsert+0x2e>
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	60fb      	str	r3, [r7, #12]
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	68ba      	ldr	r2, [r7, #8]
 8002194:	429a      	cmp	r2, r3
 8002196:	d2f6      	bcs.n	8002186 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	685a      	ldr	r2, [r3, #4]
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	683a      	ldr	r2, [r7, #0]
 80021a6:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	68fa      	ldr	r2, [r7, #12]
 80021ac:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	683a      	ldr	r2, [r7, #0]
 80021b2:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	1c5a      	adds	r2, r3, #1
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	601a      	str	r2, [r3, #0]
}
 80021c4:	bf00      	nop
 80021c6:	3714      	adds	r7, #20
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr

080021d0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80021d0:	b480      	push	{r7}
 80021d2:	b085      	sub	sp, #20
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	691b      	ldr	r3, [r3, #16]
 80021dc:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	6892      	ldr	r2, [r2, #8]
 80021e6:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	6852      	ldr	r2, [r2, #4]
 80021f0:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d103      	bne.n	8002204 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	689a      	ldr	r2, [r3, #8]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2200      	movs	r2, #0
 8002208:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	1e5a      	subs	r2, r3, #1
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
}
 8002218:	4618      	mov	r0, r3
 800221a:	3714      	adds	r7, #20
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002224:	b580      	push	{r7, lr}
 8002226:	b08c      	sub	sp, #48	; 0x30
 8002228:	af04      	add	r7, sp, #16
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	60b9      	str	r1, [r7, #8]
 800222e:	603b      	str	r3, [r7, #0]
 8002230:	4613      	mov	r3, r2
 8002232:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002234:	88fb      	ldrh	r3, [r7, #6]
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	4618      	mov	r0, r3
 800223a:	f001 f9e7 	bl	800360c <pvPortMalloc>
 800223e:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d00e      	beq.n	8002264 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002246:	2058      	movs	r0, #88	; 0x58
 8002248:	f001 f9e0 	bl	800360c <pvPortMalloc>
 800224c:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d003      	beq.n	800225c <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	697a      	ldr	r2, [r7, #20]
 8002258:	631a      	str	r2, [r3, #48]	; 0x30
 800225a:	e005      	b.n	8002268 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 800225c:	6978      	ldr	r0, [r7, #20]
 800225e:	f001 fab5 	bl	80037cc <vPortFree>
 8002262:	e001      	b.n	8002268 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002264:	2300      	movs	r3, #0
 8002266:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d013      	beq.n	8002296 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800226e:	88fa      	ldrh	r2, [r7, #6]
 8002270:	2300      	movs	r3, #0
 8002272:	9303      	str	r3, [sp, #12]
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	9302      	str	r3, [sp, #8]
 8002278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800227a:	9301      	str	r3, [sp, #4]
 800227c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800227e:	9300      	str	r3, [sp, #0]
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	68b9      	ldr	r1, [r7, #8]
 8002284:	68f8      	ldr	r0, [r7, #12]
 8002286:	f000 f80e 	bl	80022a6 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800228a:	69f8      	ldr	r0, [r7, #28]
 800228c:	f000 f8a2 	bl	80023d4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002290:	2301      	movs	r3, #1
 8002292:	61bb      	str	r3, [r7, #24]
 8002294:	e002      	b.n	800229c <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002296:	f04f 33ff 	mov.w	r3, #4294967295
 800229a:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800229c:	69bb      	ldr	r3, [r7, #24]
    }
 800229e:	4618      	mov	r0, r3
 80022a0:	3720      	adds	r7, #32
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}

080022a6 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80022a6:	b580      	push	{r7, lr}
 80022a8:	b088      	sub	sp, #32
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	60f8      	str	r0, [r7, #12]
 80022ae:	60b9      	str	r1, [r7, #8]
 80022b0:	607a      	str	r2, [r7, #4]
 80022b2:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80022b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022b6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	461a      	mov	r2, r3
 80022be:	21a5      	movs	r1, #165	; 0xa5
 80022c0:	f004 f91a 	bl	80064f8 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80022c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80022ce:	3b01      	subs	r3, #1
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	4413      	add	r3, r2
 80022d4:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	f023 0307 	bic.w	r3, r3, #7
 80022dc:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80022de:	69bb      	ldr	r3, [r7, #24]
 80022e0:	f003 0307 	and.w	r3, r3, #7
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d00a      	beq.n	80022fe <prvInitialiseNewTask+0x58>
        __asm volatile
 80022e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022ec:	f383 8811 	msr	BASEPRI, r3
 80022f0:	f3bf 8f6f 	isb	sy
 80022f4:	f3bf 8f4f 	dsb	sy
 80022f8:	617b      	str	r3, [r7, #20]
    }
 80022fa:	bf00      	nop
 80022fc:	e7fe      	b.n	80022fc <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d01f      	beq.n	8002344 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002304:	2300      	movs	r3, #0
 8002306:	61fb      	str	r3, [r7, #28]
 8002308:	e012      	b.n	8002330 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800230a:	68ba      	ldr	r2, [r7, #8]
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	4413      	add	r3, r2
 8002310:	7819      	ldrb	r1, [r3, #0]
 8002312:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	4413      	add	r3, r2
 8002318:	3334      	adds	r3, #52	; 0x34
 800231a:	460a      	mov	r2, r1
 800231c:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800231e:	68ba      	ldr	r2, [r7, #8]
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	4413      	add	r3, r2
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d006      	beq.n	8002338 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	3301      	adds	r3, #1
 800232e:	61fb      	str	r3, [r7, #28]
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	2b09      	cmp	r3, #9
 8002334:	d9e9      	bls.n	800230a <prvInitialiseNewTask+0x64>
 8002336:	e000      	b.n	800233a <prvInitialiseNewTask+0x94>
            {
                break;
 8002338:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800233a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800233c:	2200      	movs	r2, #0
 800233e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002342:	e003      	b.n	800234c <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002346:	2200      	movs	r2, #0
 8002348:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800234c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800234e:	2b04      	cmp	r3, #4
 8002350:	d901      	bls.n	8002356 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002352:	2304      	movs	r3, #4
 8002354:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002358:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800235a:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 800235c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800235e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002360:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002364:	2200      	movs	r2, #0
 8002366:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800236a:	3304      	adds	r3, #4
 800236c:	4618      	mov	r0, r3
 800236e:	f7ff fec5 	bl	80020fc <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002374:	3318      	adds	r3, #24
 8002376:	4618      	mov	r0, r3
 8002378:	f7ff fec0 	bl	80020fc <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800237c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800237e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002380:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002384:	f1c3 0205 	rsb	r2, r3, #5
 8002388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800238a:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800238c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800238e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002390:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002394:	3350      	adds	r3, #80	; 0x50
 8002396:	2204      	movs	r2, #4
 8002398:	2100      	movs	r1, #0
 800239a:	4618      	mov	r0, r3
 800239c:	f004 f8ac 	bl	80064f8 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80023a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023a2:	3354      	adds	r3, #84	; 0x54
 80023a4:	2201      	movs	r2, #1
 80023a6:	2100      	movs	r1, #0
 80023a8:	4618      	mov	r0, r3
 80023aa:	f004 f8a5 	bl	80064f8 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80023ae:	683a      	ldr	r2, [r7, #0]
 80023b0:	68f9      	ldr	r1, [r7, #12]
 80023b2:	69b8      	ldr	r0, [r7, #24]
 80023b4:	f000 fe4e 	bl	8003054 <pxPortInitialiseStack>
 80023b8:	4602      	mov	r2, r0
 80023ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023bc:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80023be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d002      	beq.n	80023ca <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80023c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023c8:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80023ca:	bf00      	nop
 80023cc:	3720      	adds	r7, #32
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
	...

080023d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80023d4:	b5b0      	push	{r4, r5, r7, lr}
 80023d6:	b084      	sub	sp, #16
 80023d8:	af02      	add	r7, sp, #8
 80023da:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80023dc:	f000 ffea 	bl	80033b4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80023e0:	4b3b      	ldr	r3, [pc, #236]	; (80024d0 <prvAddNewTaskToReadyList+0xfc>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	3301      	adds	r3, #1
 80023e6:	4a3a      	ldr	r2, [pc, #232]	; (80024d0 <prvAddNewTaskToReadyList+0xfc>)
 80023e8:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80023ea:	4b3a      	ldr	r3, [pc, #232]	; (80024d4 <prvAddNewTaskToReadyList+0x100>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d109      	bne.n	8002406 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80023f2:	4a38      	ldr	r2, [pc, #224]	; (80024d4 <prvAddNewTaskToReadyList+0x100>)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80023f8:	4b35      	ldr	r3, [pc, #212]	; (80024d0 <prvAddNewTaskToReadyList+0xfc>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d110      	bne.n	8002422 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002400:	f000 fb78 	bl	8002af4 <prvInitialiseTaskLists>
 8002404:	e00d      	b.n	8002422 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002406:	4b34      	ldr	r3, [pc, #208]	; (80024d8 <prvAddNewTaskToReadyList+0x104>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d109      	bne.n	8002422 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800240e:	4b31      	ldr	r3, [pc, #196]	; (80024d4 <prvAddNewTaskToReadyList+0x100>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002418:	429a      	cmp	r2, r3
 800241a:	d802      	bhi.n	8002422 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800241c:	4a2d      	ldr	r2, [pc, #180]	; (80024d4 <prvAddNewTaskToReadyList+0x100>)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002422:	4b2e      	ldr	r3, [pc, #184]	; (80024dc <prvAddNewTaskToReadyList+0x108>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	3301      	adds	r3, #1
 8002428:	4a2c      	ldr	r2, [pc, #176]	; (80024dc <prvAddNewTaskToReadyList+0x108>)
 800242a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 800242c:	4b2b      	ldr	r3, [pc, #172]	; (80024dc <prvAddNewTaskToReadyList+0x108>)
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d016      	beq.n	8002468 <prvAddNewTaskToReadyList+0x94>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4618      	mov	r0, r3
 800243e:	f003 fd69 	bl	8005f14 <SEGGER_SYSVIEW_OnTaskCreate>
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002452:	461d      	mov	r5, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	461c      	mov	r4, r3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245e:	1ae3      	subs	r3, r4, r3
 8002460:	9300      	str	r3, [sp, #0]
 8002462:	462b      	mov	r3, r5
 8002464:	f001 fb80 	bl	8003b68 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	4618      	mov	r0, r3
 800246c:	f003 fdd6 	bl	800601c <SEGGER_SYSVIEW_OnTaskStartReady>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002474:	2201      	movs	r2, #1
 8002476:	409a      	lsls	r2, r3
 8002478:	4b19      	ldr	r3, [pc, #100]	; (80024e0 <prvAddNewTaskToReadyList+0x10c>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4313      	orrs	r3, r2
 800247e:	4a18      	ldr	r2, [pc, #96]	; (80024e0 <prvAddNewTaskToReadyList+0x10c>)
 8002480:	6013      	str	r3, [r2, #0]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002486:	4613      	mov	r3, r2
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	4413      	add	r3, r2
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	4a15      	ldr	r2, [pc, #84]	; (80024e4 <prvAddNewTaskToReadyList+0x110>)
 8002490:	441a      	add	r2, r3
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	3304      	adds	r3, #4
 8002496:	4619      	mov	r1, r3
 8002498:	4610      	mov	r0, r2
 800249a:	f7ff fe3c 	bl	8002116 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800249e:	f000 ffb9 	bl	8003414 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80024a2:	4b0d      	ldr	r3, [pc, #52]	; (80024d8 <prvAddNewTaskToReadyList+0x104>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d00e      	beq.n	80024c8 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80024aa:	4b0a      	ldr	r3, [pc, #40]	; (80024d4 <prvAddNewTaskToReadyList+0x100>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d207      	bcs.n	80024c8 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80024b8:	4b0b      	ldr	r3, [pc, #44]	; (80024e8 <prvAddNewTaskToReadyList+0x114>)
 80024ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024be:	601a      	str	r2, [r3, #0]
 80024c0:	f3bf 8f4f 	dsb	sy
 80024c4:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80024c8:	bf00      	nop
 80024ca:	3708      	adds	r7, #8
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bdb0      	pop	{r4, r5, r7, pc}
 80024d0:	20000168 	.word	0x20000168
 80024d4:	20000090 	.word	0x20000090
 80024d8:	20000174 	.word	0x20000174
 80024dc:	20000184 	.word	0x20000184
 80024e0:	20000170 	.word	0x20000170
 80024e4:	20000094 	.word	0x20000094
 80024e8:	e000ed04 	.word	0xe000ed04

080024ec <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 80024f4:	f000 ff5e 	bl	80033b4 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d102      	bne.n	8002504 <vTaskDelete+0x18>
 80024fe:	4b46      	ldr	r3, [pc, #280]	; (8002618 <vTaskDelete+0x12c>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	e000      	b.n	8002506 <vTaskDelete+0x1a>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	60fb      	str	r3, [r7, #12]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	3304      	adds	r3, #4
 800250c:	4618      	mov	r0, r3
 800250e:	f7ff fe5f 	bl	80021d0 <uxListRemove>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d115      	bne.n	8002544 <vTaskDelete+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800251c:	493f      	ldr	r1, [pc, #252]	; (800261c <vTaskDelete+0x130>)
 800251e:	4613      	mov	r3, r2
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	4413      	add	r3, r2
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	440b      	add	r3, r1
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d10a      	bne.n	8002544 <vTaskDelete+0x58>
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002532:	2201      	movs	r2, #1
 8002534:	fa02 f303 	lsl.w	r3, r2, r3
 8002538:	43da      	mvns	r2, r3
 800253a:	4b39      	ldr	r3, [pc, #228]	; (8002620 <vTaskDelete+0x134>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4013      	ands	r3, r2
 8002540:	4a37      	ldr	r2, [pc, #220]	; (8002620 <vTaskDelete+0x134>)
 8002542:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002548:	2b00      	cmp	r3, #0
 800254a:	d004      	beq.n	8002556 <vTaskDelete+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	3318      	adds	r3, #24
 8002550:	4618      	mov	r0, r3
 8002552:	f7ff fe3d 	bl	80021d0 <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 8002556:	4b33      	ldr	r3, [pc, #204]	; (8002624 <vTaskDelete+0x138>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	3301      	adds	r3, #1
 800255c:	4a31      	ldr	r2, [pc, #196]	; (8002624 <vTaskDelete+0x138>)
 800255e:	6013      	str	r3, [r2, #0]

            if( pxTCB == pxCurrentTCB )
 8002560:	4b2d      	ldr	r3, [pc, #180]	; (8002618 <vTaskDelete+0x12c>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	68fa      	ldr	r2, [r7, #12]
 8002566:	429a      	cmp	r2, r3
 8002568:	d118      	bne.n	800259c <vTaskDelete+0xb0>
                /* A task is deleting itself.  This cannot complete within the
                 * task itself, as a context switch to another task is required.
                 * Place the task in the termination list.  The idle task will
                 * check the termination list and free up any memory allocated by
                 * the scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	3304      	adds	r3, #4
 800256e:	4619      	mov	r1, r3
 8002570:	482d      	ldr	r0, [pc, #180]	; (8002628 <vTaskDelete+0x13c>)
 8002572:	f7ff fdd0 	bl	8002116 <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 8002576:	4b2d      	ldr	r3, [pc, #180]	; (800262c <vTaskDelete+0x140>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	3301      	adds	r3, #1
 800257c:	4a2b      	ldr	r2, [pc, #172]	; (800262c <vTaskDelete+0x140>)
 800257e:	6013      	str	r3, [r2, #0]

                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	4618      	mov	r0, r3
 8002584:	f003 fdec 	bl	8006160 <SEGGER_SYSVIEW_ShrinkId>
 8002588:	4603      	mov	r3, r0
 800258a:	4619      	mov	r1, r3
 800258c:	2022      	movs	r0, #34	; 0x22
 800258e:	f002 ff8b 	bl	80054a8 <SEGGER_SYSVIEW_RecordU32>
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	4618      	mov	r0, r3
 8002596:	f001 fb4f 	bl	8003c38 <SYSVIEW_DeleteTask>
 800259a:	e016      	b.n	80025ca <vTaskDelete+0xde>
                 * required. */
                portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
            }
            else
            {
                --uxCurrentNumberOfTasks;
 800259c:	4b24      	ldr	r3, [pc, #144]	; (8002630 <vTaskDelete+0x144>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	3b01      	subs	r3, #1
 80025a2:	4a23      	ldr	r2, [pc, #140]	; (8002630 <vTaskDelete+0x144>)
 80025a4:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	4618      	mov	r0, r3
 80025aa:	f003 fdd9 	bl	8006160 <SEGGER_SYSVIEW_ShrinkId>
 80025ae:	4603      	mov	r3, r0
 80025b0:	4619      	mov	r1, r3
 80025b2:	2022      	movs	r0, #34	; 0x22
 80025b4:	f002 ff78 	bl	80054a8 <SEGGER_SYSVIEW_RecordU32>
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	4618      	mov	r0, r3
 80025bc:	f001 fb3c 	bl	8003c38 <SYSVIEW_DeleteTask>
                prvDeleteTCB( pxTCB );
 80025c0:	68f8      	ldr	r0, [r7, #12]
 80025c2:	f000 fb05 	bl	8002bd0 <prvDeleteTCB>

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 80025c6:	f000 fb13 	bl	8002bf0 <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 80025ca:	f000 ff23 	bl	8003414 <vPortExitCritical>

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        if( xSchedulerRunning != pdFALSE )
 80025ce:	4b19      	ldr	r3, [pc, #100]	; (8002634 <vTaskDelete+0x148>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d01b      	beq.n	800260e <vTaskDelete+0x122>
        {
            if( pxTCB == pxCurrentTCB )
 80025d6:	4b10      	ldr	r3, [pc, #64]	; (8002618 <vTaskDelete+0x12c>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	68fa      	ldr	r2, [r7, #12]
 80025dc:	429a      	cmp	r2, r3
 80025de:	d116      	bne.n	800260e <vTaskDelete+0x122>
            {
                configASSERT( uxSchedulerSuspended == 0 );
 80025e0:	4b15      	ldr	r3, [pc, #84]	; (8002638 <vTaskDelete+0x14c>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d00a      	beq.n	80025fe <vTaskDelete+0x112>
        __asm volatile
 80025e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025ec:	f383 8811 	msr	BASEPRI, r3
 80025f0:	f3bf 8f6f 	isb	sy
 80025f4:	f3bf 8f4f 	dsb	sy
 80025f8:	60bb      	str	r3, [r7, #8]
    }
 80025fa:	bf00      	nop
 80025fc:	e7fe      	b.n	80025fc <vTaskDelete+0x110>
                portYIELD_WITHIN_API();
 80025fe:	4b0f      	ldr	r3, [pc, #60]	; (800263c <vTaskDelete+0x150>)
 8002600:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002604:	601a      	str	r2, [r3, #0]
 8002606:	f3bf 8f4f 	dsb	sy
 800260a:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 800260e:	bf00      	nop
 8002610:	3710      	adds	r7, #16
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	20000090 	.word	0x20000090
 800261c:	20000094 	.word	0x20000094
 8002620:	20000170 	.word	0x20000170
 8002624:	20000184 	.word	0x20000184
 8002628:	2000013c 	.word	0x2000013c
 800262c:	20000150 	.word	0x20000150
 8002630:	20000168 	.word	0x20000168
 8002634:	20000174 	.word	0x20000174
 8002638:	20000190 	.word	0x20000190
 800263c:	e000ed04 	.word	0xe000ed04

08002640 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b086      	sub	sp, #24
 8002644:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002646:	4b24      	ldr	r3, [pc, #144]	; (80026d8 <vTaskStartScheduler+0x98>)
 8002648:	9301      	str	r3, [sp, #4]
 800264a:	2300      	movs	r3, #0
 800264c:	9300      	str	r3, [sp, #0]
 800264e:	2300      	movs	r3, #0
 8002650:	2282      	movs	r2, #130	; 0x82
 8002652:	4922      	ldr	r1, [pc, #136]	; (80026dc <vTaskStartScheduler+0x9c>)
 8002654:	4822      	ldr	r0, [pc, #136]	; (80026e0 <vTaskStartScheduler+0xa0>)
 8002656:	f7ff fde5 	bl	8002224 <xTaskCreate>
 800265a:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2b01      	cmp	r3, #1
 8002660:	d124      	bne.n	80026ac <vTaskStartScheduler+0x6c>
        __asm volatile
 8002662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002666:	f383 8811 	msr	BASEPRI, r3
 800266a:	f3bf 8f6f 	isb	sy
 800266e:	f3bf 8f4f 	dsb	sy
 8002672:	60bb      	str	r3, [r7, #8]
    }
 8002674:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002676:	4b1b      	ldr	r3, [pc, #108]	; (80026e4 <vTaskStartScheduler+0xa4>)
 8002678:	f04f 32ff 	mov.w	r2, #4294967295
 800267c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800267e:	4b1a      	ldr	r3, [pc, #104]	; (80026e8 <vTaskStartScheduler+0xa8>)
 8002680:	2201      	movs	r2, #1
 8002682:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002684:	4b19      	ldr	r3, [pc, #100]	; (80026ec <vTaskStartScheduler+0xac>)
 8002686:	2200      	movs	r2, #0
 8002688:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 800268a:	4b19      	ldr	r3, [pc, #100]	; (80026f0 <vTaskStartScheduler+0xb0>)
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	4b12      	ldr	r3, [pc, #72]	; (80026d8 <vTaskStartScheduler+0x98>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	429a      	cmp	r2, r3
 8002694:	d102      	bne.n	800269c <vTaskStartScheduler+0x5c>
 8002696:	f003 fc21 	bl	8005edc <SEGGER_SYSVIEW_OnIdle>
 800269a:	e004      	b.n	80026a6 <vTaskStartScheduler+0x66>
 800269c:	4b14      	ldr	r3, [pc, #80]	; (80026f0 <vTaskStartScheduler+0xb0>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4618      	mov	r0, r3
 80026a2:	f003 fc79 	bl	8005f98 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80026a6:	f000 fd65 	bl	8003174 <xPortStartScheduler>
 80026aa:	e00e      	b.n	80026ca <vTaskStartScheduler+0x8a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026b2:	d10a      	bne.n	80026ca <vTaskStartScheduler+0x8a>
        __asm volatile
 80026b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026b8:	f383 8811 	msr	BASEPRI, r3
 80026bc:	f3bf 8f6f 	isb	sy
 80026c0:	f3bf 8f4f 	dsb	sy
 80026c4:	607b      	str	r3, [r7, #4]
    }
 80026c6:	bf00      	nop
 80026c8:	e7fe      	b.n	80026c8 <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80026ca:	4b0a      	ldr	r3, [pc, #40]	; (80026f4 <vTaskStartScheduler+0xb4>)
 80026cc:	681b      	ldr	r3, [r3, #0]
}
 80026ce:	bf00      	nop
 80026d0:	3710      	adds	r7, #16
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	2000018c 	.word	0x2000018c
 80026dc:	080065c4 	.word	0x080065c4
 80026e0:	08002ac5 	.word	0x08002ac5
 80026e4:	20000188 	.word	0x20000188
 80026e8:	20000174 	.word	0x20000174
 80026ec:	2000016c 	.word	0x2000016c
 80026f0:	20000090 	.word	0x20000090
 80026f4:	2000000c 	.word	0x2000000c

080026f8 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80026fc:	4b04      	ldr	r3, [pc, #16]	; (8002710 <vTaskSuspendAll+0x18>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	3301      	adds	r3, #1
 8002702:	4a03      	ldr	r2, [pc, #12]	; (8002710 <vTaskSuspendAll+0x18>)
 8002704:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002706:	bf00      	nop
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr
 8002710:	20000190 	.word	0x20000190

08002714 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800271a:	2300      	movs	r3, #0
 800271c:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800271e:	2300      	movs	r3, #0
 8002720:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002722:	4b43      	ldr	r3, [pc, #268]	; (8002830 <xTaskResumeAll+0x11c>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d10a      	bne.n	8002740 <xTaskResumeAll+0x2c>
        __asm volatile
 800272a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800272e:	f383 8811 	msr	BASEPRI, r3
 8002732:	f3bf 8f6f 	isb	sy
 8002736:	f3bf 8f4f 	dsb	sy
 800273a:	603b      	str	r3, [r7, #0]
    }
 800273c:	bf00      	nop
 800273e:	e7fe      	b.n	800273e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002740:	f000 fe38 	bl	80033b4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002744:	4b3a      	ldr	r3, [pc, #232]	; (8002830 <xTaskResumeAll+0x11c>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	3b01      	subs	r3, #1
 800274a:	4a39      	ldr	r2, [pc, #228]	; (8002830 <xTaskResumeAll+0x11c>)
 800274c:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800274e:	4b38      	ldr	r3, [pc, #224]	; (8002830 <xTaskResumeAll+0x11c>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d165      	bne.n	8002822 <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002756:	4b37      	ldr	r3, [pc, #220]	; (8002834 <xTaskResumeAll+0x120>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d061      	beq.n	8002822 <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800275e:	e032      	b.n	80027c6 <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002760:	4b35      	ldr	r3, [pc, #212]	; (8002838 <xTaskResumeAll+0x124>)
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	3318      	adds	r3, #24
 800276c:	4618      	mov	r0, r3
 800276e:	f7ff fd2f 	bl	80021d0 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	3304      	adds	r3, #4
 8002776:	4618      	mov	r0, r3
 8002778:	f7ff fd2a 	bl	80021d0 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	4618      	mov	r0, r3
 8002780:	f003 fc4c 	bl	800601c <SEGGER_SYSVIEW_OnTaskStartReady>
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002788:	2201      	movs	r2, #1
 800278a:	409a      	lsls	r2, r3
 800278c:	4b2b      	ldr	r3, [pc, #172]	; (800283c <xTaskResumeAll+0x128>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4313      	orrs	r3, r2
 8002792:	4a2a      	ldr	r2, [pc, #168]	; (800283c <xTaskResumeAll+0x128>)
 8002794:	6013      	str	r3, [r2, #0]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800279a:	4613      	mov	r3, r2
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	4413      	add	r3, r2
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	4a27      	ldr	r2, [pc, #156]	; (8002840 <xTaskResumeAll+0x12c>)
 80027a4:	441a      	add	r2, r3
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	3304      	adds	r3, #4
 80027aa:	4619      	mov	r1, r3
 80027ac:	4610      	mov	r0, r2
 80027ae:	f7ff fcb2 	bl	8002116 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027b6:	4b23      	ldr	r3, [pc, #140]	; (8002844 <xTaskResumeAll+0x130>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027bc:	429a      	cmp	r2, r3
 80027be:	d302      	bcc.n	80027c6 <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 80027c0:	4b21      	ldr	r3, [pc, #132]	; (8002848 <xTaskResumeAll+0x134>)
 80027c2:	2201      	movs	r2, #1
 80027c4:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80027c6:	4b1c      	ldr	r3, [pc, #112]	; (8002838 <xTaskResumeAll+0x124>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d1c8      	bne.n	8002760 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d001      	beq.n	80027d8 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80027d4:	f000 fa0c 	bl	8002bf0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80027d8:	4b1c      	ldr	r3, [pc, #112]	; (800284c <xTaskResumeAll+0x138>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d010      	beq.n	8002806 <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80027e4:	f000 f848 	bl	8002878 <xTaskIncrementTick>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d002      	beq.n	80027f4 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 80027ee:	4b16      	ldr	r3, [pc, #88]	; (8002848 <xTaskResumeAll+0x134>)
 80027f0:	2201      	movs	r2, #1
 80027f2:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	3b01      	subs	r3, #1
 80027f8:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d1f1      	bne.n	80027e4 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8002800:	4b12      	ldr	r3, [pc, #72]	; (800284c <xTaskResumeAll+0x138>)
 8002802:	2200      	movs	r2, #0
 8002804:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002806:	4b10      	ldr	r3, [pc, #64]	; (8002848 <xTaskResumeAll+0x134>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d009      	beq.n	8002822 <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800280e:	2301      	movs	r3, #1
 8002810:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002812:	4b0f      	ldr	r3, [pc, #60]	; (8002850 <xTaskResumeAll+0x13c>)
 8002814:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002818:	601a      	str	r2, [r3, #0]
 800281a:	f3bf 8f4f 	dsb	sy
 800281e:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002822:	f000 fdf7 	bl	8003414 <vPortExitCritical>

    return xAlreadyYielded;
 8002826:	68bb      	ldr	r3, [r7, #8]
}
 8002828:	4618      	mov	r0, r3
 800282a:	3710      	adds	r7, #16
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}
 8002830:	20000190 	.word	0x20000190
 8002834:	20000168 	.word	0x20000168
 8002838:	20000128 	.word	0x20000128
 800283c:	20000170 	.word	0x20000170
 8002840:	20000094 	.word	0x20000094
 8002844:	20000090 	.word	0x20000090
 8002848:	2000017c 	.word	0x2000017c
 800284c:	20000178 	.word	0x20000178
 8002850:	e000ed04 	.word	0xe000ed04

08002854 <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b082      	sub	sp, #8
 8002858:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800285a:	f000 fe97 	bl	800358c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800285e:	2300      	movs	r3, #0
 8002860:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8002862:	4b04      	ldr	r3, [pc, #16]	; (8002874 <xTaskGetTickCountFromISR+0x20>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002868:	683b      	ldr	r3, [r7, #0]
}
 800286a:	4618      	mov	r0, r3
 800286c:	3708      	adds	r7, #8
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	2000016c 	.word	0x2000016c

08002878 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b086      	sub	sp, #24
 800287c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800287e:	2300      	movs	r3, #0
 8002880:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002882:	4b50      	ldr	r3, [pc, #320]	; (80029c4 <xTaskIncrementTick+0x14c>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	2b00      	cmp	r3, #0
 8002888:	f040 8092 	bne.w	80029b0 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800288c:	4b4e      	ldr	r3, [pc, #312]	; (80029c8 <xTaskIncrementTick+0x150>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	3301      	adds	r3, #1
 8002892:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002894:	4a4c      	ldr	r2, [pc, #304]	; (80029c8 <xTaskIncrementTick+0x150>)
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d120      	bne.n	80028e2 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80028a0:	4b4a      	ldr	r3, [pc, #296]	; (80029cc <xTaskIncrementTick+0x154>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d00a      	beq.n	80028c0 <xTaskIncrementTick+0x48>
        __asm volatile
 80028aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028ae:	f383 8811 	msr	BASEPRI, r3
 80028b2:	f3bf 8f6f 	isb	sy
 80028b6:	f3bf 8f4f 	dsb	sy
 80028ba:	603b      	str	r3, [r7, #0]
    }
 80028bc:	bf00      	nop
 80028be:	e7fe      	b.n	80028be <xTaskIncrementTick+0x46>
 80028c0:	4b42      	ldr	r3, [pc, #264]	; (80029cc <xTaskIncrementTick+0x154>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	60fb      	str	r3, [r7, #12]
 80028c6:	4b42      	ldr	r3, [pc, #264]	; (80029d0 <xTaskIncrementTick+0x158>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a40      	ldr	r2, [pc, #256]	; (80029cc <xTaskIncrementTick+0x154>)
 80028cc:	6013      	str	r3, [r2, #0]
 80028ce:	4a40      	ldr	r2, [pc, #256]	; (80029d0 <xTaskIncrementTick+0x158>)
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	6013      	str	r3, [r2, #0]
 80028d4:	4b3f      	ldr	r3, [pc, #252]	; (80029d4 <xTaskIncrementTick+0x15c>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	3301      	adds	r3, #1
 80028da:	4a3e      	ldr	r2, [pc, #248]	; (80029d4 <xTaskIncrementTick+0x15c>)
 80028dc:	6013      	str	r3, [r2, #0]
 80028de:	f000 f987 	bl	8002bf0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80028e2:	4b3d      	ldr	r3, [pc, #244]	; (80029d8 <xTaskIncrementTick+0x160>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	693a      	ldr	r2, [r7, #16]
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d34c      	bcc.n	8002986 <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80028ec:	4b37      	ldr	r3, [pc, #220]	; (80029cc <xTaskIncrementTick+0x154>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d104      	bne.n	8002900 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80028f6:	4b38      	ldr	r3, [pc, #224]	; (80029d8 <xTaskIncrementTick+0x160>)
 80028f8:	f04f 32ff 	mov.w	r2, #4294967295
 80028fc:	601a      	str	r2, [r3, #0]
                    break;
 80028fe:	e042      	b.n	8002986 <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002900:	4b32      	ldr	r3, [pc, #200]	; (80029cc <xTaskIncrementTick+0x154>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	68db      	ldr	r3, [r3, #12]
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8002910:	693a      	ldr	r2, [r7, #16]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	429a      	cmp	r2, r3
 8002916:	d203      	bcs.n	8002920 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002918:	4a2f      	ldr	r2, [pc, #188]	; (80029d8 <xTaskIncrementTick+0x160>)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800291e:	e032      	b.n	8002986 <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	3304      	adds	r3, #4
 8002924:	4618      	mov	r0, r3
 8002926:	f7ff fc53 	bl	80021d0 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800292e:	2b00      	cmp	r3, #0
 8002930:	d004      	beq.n	800293c <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	3318      	adds	r3, #24
 8002936:	4618      	mov	r0, r3
 8002938:	f7ff fc4a 	bl	80021d0 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	4618      	mov	r0, r3
 8002940:	f003 fb6c 	bl	800601c <SEGGER_SYSVIEW_OnTaskStartReady>
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002948:	2201      	movs	r2, #1
 800294a:	409a      	lsls	r2, r3
 800294c:	4b23      	ldr	r3, [pc, #140]	; (80029dc <xTaskIncrementTick+0x164>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4313      	orrs	r3, r2
 8002952:	4a22      	ldr	r2, [pc, #136]	; (80029dc <xTaskIncrementTick+0x164>)
 8002954:	6013      	str	r3, [r2, #0]
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800295a:	4613      	mov	r3, r2
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	4413      	add	r3, r2
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	4a1f      	ldr	r2, [pc, #124]	; (80029e0 <xTaskIncrementTick+0x168>)
 8002964:	441a      	add	r2, r3
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	3304      	adds	r3, #4
 800296a:	4619      	mov	r1, r3
 800296c:	4610      	mov	r0, r2
 800296e:	f7ff fbd2 	bl	8002116 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002976:	4b1b      	ldr	r3, [pc, #108]	; (80029e4 <xTaskIncrementTick+0x16c>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800297c:	429a      	cmp	r2, r3
 800297e:	d3b5      	bcc.n	80028ec <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8002980:	2301      	movs	r3, #1
 8002982:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002984:	e7b2      	b.n	80028ec <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002986:	4b17      	ldr	r3, [pc, #92]	; (80029e4 <xTaskIncrementTick+0x16c>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800298c:	4914      	ldr	r1, [pc, #80]	; (80029e0 <xTaskIncrementTick+0x168>)
 800298e:	4613      	mov	r3, r2
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	4413      	add	r3, r2
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	440b      	add	r3, r1
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	2b01      	cmp	r3, #1
 800299c:	d901      	bls.n	80029a2 <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 800299e:	2301      	movs	r3, #1
 80029a0:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80029a2:	4b11      	ldr	r3, [pc, #68]	; (80029e8 <xTaskIncrementTick+0x170>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d007      	beq.n	80029ba <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 80029aa:	2301      	movs	r3, #1
 80029ac:	617b      	str	r3, [r7, #20]
 80029ae:	e004      	b.n	80029ba <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80029b0:	4b0e      	ldr	r3, [pc, #56]	; (80029ec <xTaskIncrementTick+0x174>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	3301      	adds	r3, #1
 80029b6:	4a0d      	ldr	r2, [pc, #52]	; (80029ec <xTaskIncrementTick+0x174>)
 80029b8:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80029ba:	697b      	ldr	r3, [r7, #20]
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3718      	adds	r7, #24
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	20000190 	.word	0x20000190
 80029c8:	2000016c 	.word	0x2000016c
 80029cc:	20000120 	.word	0x20000120
 80029d0:	20000124 	.word	0x20000124
 80029d4:	20000180 	.word	0x20000180
 80029d8:	20000188 	.word	0x20000188
 80029dc:	20000170 	.word	0x20000170
 80029e0:	20000094 	.word	0x20000094
 80029e4:	20000090 	.word	0x20000090
 80029e8:	2000017c 	.word	0x2000017c
 80029ec:	20000178 	.word	0x20000178

080029f0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b086      	sub	sp, #24
 80029f4:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80029f6:	4b2d      	ldr	r3, [pc, #180]	; (8002aac <vTaskSwitchContext+0xbc>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d003      	beq.n	8002a06 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80029fe:	4b2c      	ldr	r3, [pc, #176]	; (8002ab0 <vTaskSwitchContext+0xc0>)
 8002a00:	2201      	movs	r2, #1
 8002a02:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002a04:	e04d      	b.n	8002aa2 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8002a06:	4b2a      	ldr	r3, [pc, #168]	; (8002ab0 <vTaskSwitchContext+0xc0>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002a0c:	4b29      	ldr	r3, [pc, #164]	; (8002ab4 <vTaskSwitchContext+0xc4>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	fab3 f383 	clz	r3, r3
 8002a18:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002a1a:	7afb      	ldrb	r3, [r7, #11]
 8002a1c:	f1c3 031f 	rsb	r3, r3, #31
 8002a20:	617b      	str	r3, [r7, #20]
 8002a22:	4925      	ldr	r1, [pc, #148]	; (8002ab8 <vTaskSwitchContext+0xc8>)
 8002a24:	697a      	ldr	r2, [r7, #20]
 8002a26:	4613      	mov	r3, r2
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	4413      	add	r3, r2
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	440b      	add	r3, r1
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d10a      	bne.n	8002a4c <vTaskSwitchContext+0x5c>
        __asm volatile
 8002a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a3a:	f383 8811 	msr	BASEPRI, r3
 8002a3e:	f3bf 8f6f 	isb	sy
 8002a42:	f3bf 8f4f 	dsb	sy
 8002a46:	607b      	str	r3, [r7, #4]
    }
 8002a48:	bf00      	nop
 8002a4a:	e7fe      	b.n	8002a4a <vTaskSwitchContext+0x5a>
 8002a4c:	697a      	ldr	r2, [r7, #20]
 8002a4e:	4613      	mov	r3, r2
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	4413      	add	r3, r2
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	4a18      	ldr	r2, [pc, #96]	; (8002ab8 <vTaskSwitchContext+0xc8>)
 8002a58:	4413      	add	r3, r2
 8002a5a:	613b      	str	r3, [r7, #16]
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	685a      	ldr	r2, [r3, #4]
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	605a      	str	r2, [r3, #4]
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	685a      	ldr	r2, [r3, #4]
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	3308      	adds	r3, #8
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d104      	bne.n	8002a7c <vTaskSwitchContext+0x8c>
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	685a      	ldr	r2, [r3, #4]
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	605a      	str	r2, [r3, #4]
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	4a0e      	ldr	r2, [pc, #56]	; (8002abc <vTaskSwitchContext+0xcc>)
 8002a84:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8002a86:	4b0d      	ldr	r3, [pc, #52]	; (8002abc <vTaskSwitchContext+0xcc>)
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	4b0d      	ldr	r3, [pc, #52]	; (8002ac0 <vTaskSwitchContext+0xd0>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d102      	bne.n	8002a98 <vTaskSwitchContext+0xa8>
 8002a92:	f003 fa23 	bl	8005edc <SEGGER_SYSVIEW_OnIdle>
}
 8002a96:	e004      	b.n	8002aa2 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8002a98:	4b08      	ldr	r3, [pc, #32]	; (8002abc <vTaskSwitchContext+0xcc>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f003 fa7b 	bl	8005f98 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8002aa2:	bf00      	nop
 8002aa4:	3718      	adds	r7, #24
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	20000190 	.word	0x20000190
 8002ab0:	2000017c 	.word	0x2000017c
 8002ab4:	20000170 	.word	0x20000170
 8002ab8:	20000094 	.word	0x20000094
 8002abc:	20000090 	.word	0x20000090
 8002ac0:	2000018c 	.word	0x2000018c

08002ac4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b082      	sub	sp, #8
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002acc:	f000 f852 	bl	8002b74 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002ad0:	4b06      	ldr	r3, [pc, #24]	; (8002aec <prvIdleTask+0x28>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d9f9      	bls.n	8002acc <prvIdleTask+0x8>
                {
                    taskYIELD();
 8002ad8:	4b05      	ldr	r3, [pc, #20]	; (8002af0 <prvIdleTask+0x2c>)
 8002ada:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ade:	601a      	str	r2, [r3, #0]
 8002ae0:	f3bf 8f4f 	dsb	sy
 8002ae4:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002ae8:	e7f0      	b.n	8002acc <prvIdleTask+0x8>
 8002aea:	bf00      	nop
 8002aec:	20000094 	.word	0x20000094
 8002af0:	e000ed04 	.word	0xe000ed04

08002af4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b082      	sub	sp, #8
 8002af8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002afa:	2300      	movs	r3, #0
 8002afc:	607b      	str	r3, [r7, #4]
 8002afe:	e00c      	b.n	8002b1a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	4613      	mov	r3, r2
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	4413      	add	r3, r2
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	4a12      	ldr	r2, [pc, #72]	; (8002b54 <prvInitialiseTaskLists+0x60>)
 8002b0c:	4413      	add	r3, r2
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f7ff fad4 	bl	80020bc <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	3301      	adds	r3, #1
 8002b18:	607b      	str	r3, [r7, #4]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2b04      	cmp	r3, #4
 8002b1e:	d9ef      	bls.n	8002b00 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002b20:	480d      	ldr	r0, [pc, #52]	; (8002b58 <prvInitialiseTaskLists+0x64>)
 8002b22:	f7ff facb 	bl	80020bc <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002b26:	480d      	ldr	r0, [pc, #52]	; (8002b5c <prvInitialiseTaskLists+0x68>)
 8002b28:	f7ff fac8 	bl	80020bc <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002b2c:	480c      	ldr	r0, [pc, #48]	; (8002b60 <prvInitialiseTaskLists+0x6c>)
 8002b2e:	f7ff fac5 	bl	80020bc <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8002b32:	480c      	ldr	r0, [pc, #48]	; (8002b64 <prvInitialiseTaskLists+0x70>)
 8002b34:	f7ff fac2 	bl	80020bc <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8002b38:	480b      	ldr	r0, [pc, #44]	; (8002b68 <prvInitialiseTaskLists+0x74>)
 8002b3a:	f7ff fabf 	bl	80020bc <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002b3e:	4b0b      	ldr	r3, [pc, #44]	; (8002b6c <prvInitialiseTaskLists+0x78>)
 8002b40:	4a05      	ldr	r2, [pc, #20]	; (8002b58 <prvInitialiseTaskLists+0x64>)
 8002b42:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002b44:	4b0a      	ldr	r3, [pc, #40]	; (8002b70 <prvInitialiseTaskLists+0x7c>)
 8002b46:	4a05      	ldr	r2, [pc, #20]	; (8002b5c <prvInitialiseTaskLists+0x68>)
 8002b48:	601a      	str	r2, [r3, #0]
}
 8002b4a:	bf00      	nop
 8002b4c:	3708      	adds	r7, #8
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	20000094 	.word	0x20000094
 8002b58:	200000f8 	.word	0x200000f8
 8002b5c:	2000010c 	.word	0x2000010c
 8002b60:	20000128 	.word	0x20000128
 8002b64:	2000013c 	.word	0x2000013c
 8002b68:	20000154 	.word	0x20000154
 8002b6c:	20000120 	.word	0x20000120
 8002b70:	20000124 	.word	0x20000124

08002b74 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002b7a:	e019      	b.n	8002bb0 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8002b7c:	f000 fc1a 	bl	80033b4 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002b80:	4b10      	ldr	r3, [pc, #64]	; (8002bc4 <prvCheckTasksWaitingTermination+0x50>)
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	68db      	ldr	r3, [r3, #12]
 8002b86:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	3304      	adds	r3, #4
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f7ff fb1f 	bl	80021d0 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8002b92:	4b0d      	ldr	r3, [pc, #52]	; (8002bc8 <prvCheckTasksWaitingTermination+0x54>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	3b01      	subs	r3, #1
 8002b98:	4a0b      	ldr	r2, [pc, #44]	; (8002bc8 <prvCheckTasksWaitingTermination+0x54>)
 8002b9a:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8002b9c:	4b0b      	ldr	r3, [pc, #44]	; (8002bcc <prvCheckTasksWaitingTermination+0x58>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	3b01      	subs	r3, #1
 8002ba2:	4a0a      	ldr	r2, [pc, #40]	; (8002bcc <prvCheckTasksWaitingTermination+0x58>)
 8002ba4:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8002ba6:	f000 fc35 	bl	8003414 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f000 f810 	bl	8002bd0 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002bb0:	4b06      	ldr	r3, [pc, #24]	; (8002bcc <prvCheckTasksWaitingTermination+0x58>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d1e1      	bne.n	8002b7c <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8002bb8:	bf00      	nop
 8002bba:	bf00      	nop
 8002bbc:	3708      	adds	r7, #8
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	2000013c 	.word	0x2000013c
 8002bc8:	20000168 	.word	0x20000168
 8002bcc:	20000150 	.word	0x20000150

08002bd0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f000 fdf5 	bl	80037cc <vPortFree>
                vPortFree( pxTCB );
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f000 fdf2 	bl	80037cc <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002be8:	bf00      	nop
 8002bea:	3708      	adds	r7, #8
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002bf4:	4b0a      	ldr	r3, [pc, #40]	; (8002c20 <prvResetNextTaskUnblockTime+0x30>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d104      	bne.n	8002c08 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002bfe:	4b09      	ldr	r3, [pc, #36]	; (8002c24 <prvResetNextTaskUnblockTime+0x34>)
 8002c00:	f04f 32ff 	mov.w	r2, #4294967295
 8002c04:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002c06:	e005      	b.n	8002c14 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002c08:	4b05      	ldr	r3, [pc, #20]	; (8002c20 <prvResetNextTaskUnblockTime+0x30>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a04      	ldr	r2, [pc, #16]	; (8002c24 <prvResetNextTaskUnblockTime+0x34>)
 8002c12:	6013      	str	r3, [r2, #0]
}
 8002c14:	bf00      	nop
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr
 8002c1e:	bf00      	nop
 8002c20:	20000120 	.word	0x20000120
 8002c24:	20000188 	.word	0x20000188

08002c28 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b088      	sub	sp, #32
 8002c2c:	af02      	add	r7, sp, #8
 8002c2e:	60f8      	str	r0, [r7, #12]
 8002c30:	60b9      	str	r1, [r7, #8]
 8002c32:	607a      	str	r2, [r7, #4]
 8002c34:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d00a      	beq.n	8002c52 <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 8002c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c40:	f383 8811 	msr	BASEPRI, r3
 8002c44:	f3bf 8f6f 	isb	sy
 8002c48:	f3bf 8f4f 	dsb	sy
 8002c4c:	613b      	str	r3, [r7, #16]
    }
 8002c4e:	bf00      	nop
 8002c50:	e7fe      	b.n	8002c50 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8002c52:	f000 fbaf 	bl	80033b4 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8002c56:	4b36      	ldr	r3, [pc, #216]	; (8002d30 <xTaskGenericNotifyWait+0x108>)
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	4413      	add	r3, r2
 8002c5e:	3354      	adds	r3, #84	; 0x54
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	2b02      	cmp	r3, #2
 8002c66:	d022      	beq.n	8002cae <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8002c68:	4b31      	ldr	r3, [pc, #196]	; (8002d30 <xTaskGenericNotifyWait+0x108>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	68fa      	ldr	r2, [r7, #12]
 8002c6e:	3214      	adds	r2, #20
 8002c70:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002c74:	68ba      	ldr	r2, [r7, #8]
 8002c76:	43d2      	mvns	r2, r2
 8002c78:	4011      	ands	r1, r2
 8002c7a:	68fa      	ldr	r2, [r7, #12]
 8002c7c:	3214      	adds	r2, #20
 8002c7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8002c82:	4b2b      	ldr	r3, [pc, #172]	; (8002d30 <xTaskGenericNotifyWait+0x108>)
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	4413      	add	r3, r2
 8002c8a:	3354      	adds	r3, #84	; 0x54
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8002c90:	6a3b      	ldr	r3, [r7, #32]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d00b      	beq.n	8002cae <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002c96:	2101      	movs	r1, #1
 8002c98:	6a38      	ldr	r0, [r7, #32]
 8002c9a:	f000 f963 	bl	8002f64 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8002c9e:	4b25      	ldr	r3, [pc, #148]	; (8002d34 <xTaskGenericNotifyWait+0x10c>)
 8002ca0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ca4:	601a      	str	r2, [r3, #0]
 8002ca6:	f3bf 8f4f 	dsb	sy
 8002caa:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002cae:	f000 fbb1 	bl	8003414 <vPortExitCritical>

        taskENTER_CRITICAL();
 8002cb2:	f000 fb7f 	bl	80033b4 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 8002cb6:	683a      	ldr	r2, [r7, #0]
 8002cb8:	6a3b      	ldr	r3, [r7, #32]
 8002cba:	9300      	str	r3, [sp, #0]
 8002cbc:	4613      	mov	r3, r2
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	68b9      	ldr	r1, [r7, #8]
 8002cc2:	2040      	movs	r0, #64	; 0x40
 8002cc4:	f002 fc86 	bl	80055d4 <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d007      	beq.n	8002cde <xTaskGenericNotifyWait+0xb6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8002cce:	4b18      	ldr	r3, [pc, #96]	; (8002d30 <xTaskGenericNotifyWait+0x108>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	68fa      	ldr	r2, [r7, #12]
 8002cd4:	3214      	adds	r2, #20
 8002cd6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8002cde:	4b14      	ldr	r3, [pc, #80]	; (8002d30 <xTaskGenericNotifyWait+0x108>)
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	4413      	add	r3, r2
 8002ce6:	3354      	adds	r3, #84	; 0x54
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	2b02      	cmp	r3, #2
 8002cee:	d002      	beq.n	8002cf6 <xTaskGenericNotifyWait+0xce>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	617b      	str	r3, [r7, #20]
 8002cf4:	e00e      	b.n	8002d14 <xTaskGenericNotifyWait+0xec>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8002cf6:	4b0e      	ldr	r3, [pc, #56]	; (8002d30 <xTaskGenericNotifyWait+0x108>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	68fa      	ldr	r2, [r7, #12]
 8002cfc:	3214      	adds	r2, #20
 8002cfe:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	43d2      	mvns	r2, r2
 8002d06:	4011      	ands	r1, r2
 8002d08:	68fa      	ldr	r2, [r7, #12]
 8002d0a:	3214      	adds	r2, #20
 8002d0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8002d10:	2301      	movs	r3, #1
 8002d12:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8002d14:	4b06      	ldr	r3, [pc, #24]	; (8002d30 <xTaskGenericNotifyWait+0x108>)
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	4413      	add	r3, r2
 8002d1c:	3354      	adds	r3, #84	; 0x54
 8002d1e:	2200      	movs	r2, #0
 8002d20:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8002d22:	f000 fb77 	bl	8003414 <vPortExitCritical>

        return xReturn;
 8002d26:	697b      	ldr	r3, [r7, #20]
    }
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3718      	adds	r7, #24
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	20000090 	.word	0x20000090
 8002d34:	e000ed04 	.word	0xe000ed04

08002d38 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b092      	sub	sp, #72	; 0x48
 8002d3c:	af02      	add	r7, sp, #8
 8002d3e:	60f8      	str	r0, [r7, #12]
 8002d40:	60b9      	str	r1, [r7, #8]
 8002d42:	607a      	str	r2, [r7, #4]
 8002d44:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 8002d46:	2301      	movs	r3, #1
 8002d48:	63fb      	str	r3, [r7, #60]	; 0x3c
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d10a      	bne.n	8002d66 <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 8002d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d54:	f383 8811 	msr	BASEPRI, r3
 8002d58:	f3bf 8f6f 	isb	sy
 8002d5c:	f3bf 8f4f 	dsb	sy
 8002d60:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 8002d62:	bf00      	nop
 8002d64:	e7fe      	b.n	8002d64 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d00a      	beq.n	8002d82 <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 8002d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d70:	f383 8811 	msr	BASEPRI, r3
 8002d74:	f3bf 8f6f 	isb	sy
 8002d78:	f3bf 8f4f 	dsb	sy
 8002d7c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8002d7e:	bf00      	nop
 8002d80:	e7fe      	b.n	8002d80 <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002d82:	f000 fc03 	bl	800358c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	63bb      	str	r3, [r7, #56]	; 0x38

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8002d8a:	f3ef 8211 	mrs	r2, BASEPRI
 8002d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d92:	f383 8811 	msr	BASEPRI, r3
 8002d96:	f3bf 8f6f 	isb	sy
 8002d9a:	f3bf 8f4f 	dsb	sy
 8002d9e:	627a      	str	r2, [r7, #36]	; 0x24
 8002da0:	623b      	str	r3, [r7, #32]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8002da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002da4:	637b      	str	r3, [r7, #52]	; 0x34
        {
            if( pulPreviousNotificationValue != NULL )
 8002da6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d006      	beq.n	8002dba <xTaskGenericNotifyFromISR+0x82>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8002dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dae:	68ba      	ldr	r2, [r7, #8]
 8002db0:	3214      	adds	r2, #20
 8002db2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002db6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002db8:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8002dba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	4413      	add	r3, r2
 8002dc0:	3354      	adds	r3, #84	; 0x54
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8002dc8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	4413      	add	r3, r2
 8002dce:	3354      	adds	r3, #84	; 0x54
 8002dd0:	2202      	movs	r2, #2
 8002dd2:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8002dd4:	78fb      	ldrb	r3, [r7, #3]
 8002dd6:	2b04      	cmp	r3, #4
 8002dd8:	d83b      	bhi.n	8002e52 <xTaskGenericNotifyFromISR+0x11a>
 8002dda:	a201      	add	r2, pc, #4	; (adr r2, 8002de0 <xTaskGenericNotifyFromISR+0xa8>)
 8002ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002de0:	08002e71 	.word	0x08002e71
 8002de4:	08002df5 	.word	0x08002df5
 8002de8:	08002e11 	.word	0x08002e11
 8002dec:	08002e29 	.word	0x08002e29
 8002df0:	08002e37 	.word	0x08002e37
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8002df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002df6:	68ba      	ldr	r2, [r7, #8]
 8002df8:	3214      	adds	r2, #20
 8002dfa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	ea42 0103 	orr.w	r1, r2, r3
 8002e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e06:	68ba      	ldr	r2, [r7, #8]
 8002e08:	3214      	adds	r2, #20
 8002e0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8002e0e:	e032      	b.n	8002e76 <xTaskGenericNotifyFromISR+0x13e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8002e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e12:	68ba      	ldr	r2, [r7, #8]
 8002e14:	3214      	adds	r2, #20
 8002e16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e1a:	1c59      	adds	r1, r3, #1
 8002e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e1e:	68ba      	ldr	r2, [r7, #8]
 8002e20:	3214      	adds	r2, #20
 8002e22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8002e26:	e026      	b.n	8002e76 <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8002e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e2a:	68ba      	ldr	r2, [r7, #8]
 8002e2c:	3214      	adds	r2, #20
 8002e2e:	6879      	ldr	r1, [r7, #4]
 8002e30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8002e34:	e01f      	b.n	8002e76 <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8002e36:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d006      	beq.n	8002e4c <xTaskGenericNotifyFromISR+0x114>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8002e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e40:	68ba      	ldr	r2, [r7, #8]
 8002e42:	3214      	adds	r2, #20
 8002e44:	6879      	ldr	r1, [r7, #4]
 8002e46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8002e4a:	e014      	b.n	8002e76 <xTaskGenericNotifyFromISR+0x13e>
                        xReturn = pdFAIL;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
 8002e50:	e011      	b.n	8002e76 <xTaskGenericNotifyFromISR+0x13e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8002e52:	4b3d      	ldr	r3, [pc, #244]	; (8002f48 <xTaskGenericNotifyFromISR+0x210>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d00c      	beq.n	8002e74 <xTaskGenericNotifyFromISR+0x13c>
        __asm volatile
 8002e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e5e:	f383 8811 	msr	BASEPRI, r3
 8002e62:	f3bf 8f6f 	isb	sy
 8002e66:	f3bf 8f4f 	dsb	sy
 8002e6a:	61fb      	str	r3, [r7, #28]
    }
 8002e6c:	bf00      	nop
 8002e6e:	e7fe      	b.n	8002e6e <xTaskGenericNotifyFromISR+0x136>
                    break;
 8002e70:	bf00      	nop
 8002e72:	e000      	b.n	8002e76 <xTaskGenericNotifyFromISR+0x13e>
                    break;
 8002e74:	bf00      	nop
            }

            traceTASK_NOTIFY_FROM_ISR(  );
 8002e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f003 f971 	bl	8006160 <SEGGER_SYSVIEW_ShrinkId>
 8002e7e:	78f9      	ldrb	r1, [r7, #3]
 8002e80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e82:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e84:	9201      	str	r2, [sp, #4]
 8002e86:	9300      	str	r3, [sp, #0]
 8002e88:	460b      	mov	r3, r1
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	4601      	mov	r1, r0
 8002e8e:	203f      	movs	r0, #63	; 0x3f
 8002e90:	f002 fc32 	bl	80056f8 <SEGGER_SYSVIEW_RecordU32x5>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8002e94:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d149      	bne.n	8002f30 <xTaskGenericNotifyFromISR+0x1f8>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8002e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d00a      	beq.n	8002eba <xTaskGenericNotifyFromISR+0x182>
        __asm volatile
 8002ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ea8:	f383 8811 	msr	BASEPRI, r3
 8002eac:	f3bf 8f6f 	isb	sy
 8002eb0:	f3bf 8f4f 	dsb	sy
 8002eb4:	61bb      	str	r3, [r7, #24]
    }
 8002eb6:	bf00      	nop
 8002eb8:	e7fe      	b.n	8002eb8 <xTaskGenericNotifyFromISR+0x180>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002eba:	4b24      	ldr	r3, [pc, #144]	; (8002f4c <xTaskGenericNotifyFromISR+0x214>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d120      	bne.n	8002f04 <xTaskGenericNotifyFromISR+0x1cc>
                {
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ec4:	3304      	adds	r3, #4
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7ff f982 	bl	80021d0 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8002ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f003 f8a4 	bl	800601c <SEGGER_SYSVIEW_OnTaskStartReady>
 8002ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed8:	2201      	movs	r2, #1
 8002eda:	409a      	lsls	r2, r3
 8002edc:	4b1c      	ldr	r3, [pc, #112]	; (8002f50 <xTaskGenericNotifyFromISR+0x218>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	4a1b      	ldr	r2, [pc, #108]	; (8002f50 <xTaskGenericNotifyFromISR+0x218>)
 8002ee4:	6013      	str	r3, [r2, #0]
 8002ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ee8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002eea:	4613      	mov	r3, r2
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	4413      	add	r3, r2
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	4a18      	ldr	r2, [pc, #96]	; (8002f54 <xTaskGenericNotifyFromISR+0x21c>)
 8002ef4:	441a      	add	r2, r3
 8002ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ef8:	3304      	adds	r3, #4
 8002efa:	4619      	mov	r1, r3
 8002efc:	4610      	mov	r0, r2
 8002efe:	f7ff f90a 	bl	8002116 <vListInsertEnd>
 8002f02:	e005      	b.n	8002f10 <xTaskGenericNotifyFromISR+0x1d8>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8002f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f06:	3318      	adds	r3, #24
 8002f08:	4619      	mov	r1, r3
 8002f0a:	4813      	ldr	r0, [pc, #76]	; (8002f58 <xTaskGenericNotifyFromISR+0x220>)
 8002f0c:	f7ff f903 	bl	8002116 <vListInsertEnd>
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f14:	4b11      	ldr	r3, [pc, #68]	; (8002f5c <xTaskGenericNotifyFromISR+0x224>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d908      	bls.n	8002f30 <xTaskGenericNotifyFromISR+0x1f8>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8002f1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d002      	beq.n	8002f2a <xTaskGenericNotifyFromISR+0x1f2>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8002f24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f26:	2201      	movs	r2, #1
 8002f28:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 8002f2a:	4b0d      	ldr	r3, [pc, #52]	; (8002f60 <xTaskGenericNotifyFromISR+0x228>)
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	601a      	str	r2, [r3, #0]
 8002f30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f32:	617b      	str	r3, [r7, #20]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002f3a:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 8002f3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    }
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3740      	adds	r7, #64	; 0x40
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	2000016c 	.word	0x2000016c
 8002f4c:	20000190 	.word	0x20000190
 8002f50:	20000170 	.word	0x20000170
 8002f54:	20000094 	.word	0x20000094
 8002f58:	20000128 	.word	0x20000128
 8002f5c:	20000090 	.word	0x20000090
 8002f60:	2000017c 	.word	0x2000017c

08002f64 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b084      	sub	sp, #16
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
 8002f6c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8002f6e:	4b32      	ldr	r3, [pc, #200]	; (8003038 <prvAddCurrentTaskToDelayedList+0xd4>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002f74:	4b31      	ldr	r3, [pc, #196]	; (800303c <prvAddCurrentTaskToDelayedList+0xd8>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	3304      	adds	r3, #4
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f7ff f928 	bl	80021d0 <uxListRemove>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d10b      	bne.n	8002f9e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002f86:	4b2d      	ldr	r3, [pc, #180]	; (800303c <prvAddCurrentTaskToDelayedList+0xd8>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f92:	43da      	mvns	r2, r3
 8002f94:	4b2a      	ldr	r3, [pc, #168]	; (8003040 <prvAddCurrentTaskToDelayedList+0xdc>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4013      	ands	r3, r2
 8002f9a:	4a29      	ldr	r2, [pc, #164]	; (8003040 <prvAddCurrentTaskToDelayedList+0xdc>)
 8002f9c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fa4:	d110      	bne.n	8002fc8 <prvAddCurrentTaskToDelayedList+0x64>
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d00d      	beq.n	8002fc8 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8002fac:	4b23      	ldr	r3, [pc, #140]	; (800303c <prvAddCurrentTaskToDelayedList+0xd8>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	211b      	movs	r1, #27
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f003 f874 	bl	80060a0 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002fb8:	4b20      	ldr	r3, [pc, #128]	; (800303c <prvAddCurrentTaskToDelayedList+0xd8>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	3304      	adds	r3, #4
 8002fbe:	4619      	mov	r1, r3
 8002fc0:	4820      	ldr	r0, [pc, #128]	; (8003044 <prvAddCurrentTaskToDelayedList+0xe0>)
 8002fc2:	f7ff f8a8 	bl	8002116 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8002fc6:	e032      	b.n	800302e <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8002fc8:	68fa      	ldr	r2, [r7, #12]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4413      	add	r3, r2
 8002fce:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002fd0:	4b1a      	ldr	r3, [pc, #104]	; (800303c <prvAddCurrentTaskToDelayedList+0xd8>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	68ba      	ldr	r2, [r7, #8]
 8002fd6:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8002fd8:	68ba      	ldr	r2, [r7, #8]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d20f      	bcs.n	8003000 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8002fe0:	4b16      	ldr	r3, [pc, #88]	; (800303c <prvAddCurrentTaskToDelayedList+0xd8>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	2104      	movs	r1, #4
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f003 f85a 	bl	80060a0 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002fec:	4b16      	ldr	r3, [pc, #88]	; (8003048 <prvAddCurrentTaskToDelayedList+0xe4>)
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	4b12      	ldr	r3, [pc, #72]	; (800303c <prvAddCurrentTaskToDelayedList+0xd8>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	3304      	adds	r3, #4
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	4610      	mov	r0, r2
 8002ffa:	f7ff f8b0 	bl	800215e <vListInsert>
}
 8002ffe:	e016      	b.n	800302e <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8003000:	4b0e      	ldr	r3, [pc, #56]	; (800303c <prvAddCurrentTaskToDelayedList+0xd8>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	2104      	movs	r1, #4
 8003006:	4618      	mov	r0, r3
 8003008:	f003 f84a 	bl	80060a0 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800300c:	4b0f      	ldr	r3, [pc, #60]	; (800304c <prvAddCurrentTaskToDelayedList+0xe8>)
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	4b0a      	ldr	r3, [pc, #40]	; (800303c <prvAddCurrentTaskToDelayedList+0xd8>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	3304      	adds	r3, #4
 8003016:	4619      	mov	r1, r3
 8003018:	4610      	mov	r0, r2
 800301a:	f7ff f8a0 	bl	800215e <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800301e:	4b0c      	ldr	r3, [pc, #48]	; (8003050 <prvAddCurrentTaskToDelayedList+0xec>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	68ba      	ldr	r2, [r7, #8]
 8003024:	429a      	cmp	r2, r3
 8003026:	d202      	bcs.n	800302e <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8003028:	4a09      	ldr	r2, [pc, #36]	; (8003050 <prvAddCurrentTaskToDelayedList+0xec>)
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	6013      	str	r3, [r2, #0]
}
 800302e:	bf00      	nop
 8003030:	3710      	adds	r7, #16
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	2000016c 	.word	0x2000016c
 800303c:	20000090 	.word	0x20000090
 8003040:	20000170 	.word	0x20000170
 8003044:	20000154 	.word	0x20000154
 8003048:	20000124 	.word	0x20000124
 800304c:	20000120 	.word	0x20000120
 8003050:	20000188 	.word	0x20000188

08003054 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003054:	b480      	push	{r7}
 8003056:	b085      	sub	sp, #20
 8003058:	af00      	add	r7, sp, #0
 800305a:	60f8      	str	r0, [r7, #12]
 800305c:	60b9      	str	r1, [r7, #8]
 800305e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	3b04      	subs	r3, #4
 8003064:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800306c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	3b04      	subs	r3, #4
 8003072:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	f023 0201 	bic.w	r2, r3, #1
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	3b04      	subs	r3, #4
 8003082:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003084:	4a0c      	ldr	r2, [pc, #48]	; (80030b8 <pxPortInitialiseStack+0x64>)
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	3b14      	subs	r3, #20
 800308e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	3b04      	subs	r3, #4
 800309a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f06f 0202 	mvn.w	r2, #2
 80030a2:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	3b20      	subs	r3, #32
 80030a8:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80030aa:	68fb      	ldr	r3, [r7, #12]
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3714      	adds	r7, #20
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr
 80030b8:	080030bd 	.word	0x080030bd

080030bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80030bc:	b480      	push	{r7}
 80030be:	b085      	sub	sp, #20
 80030c0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80030c2:	2300      	movs	r3, #0
 80030c4:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80030c6:	4b12      	ldr	r3, [pc, #72]	; (8003110 <prvTaskExitError+0x54>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030ce:	d00a      	beq.n	80030e6 <prvTaskExitError+0x2a>
        __asm volatile
 80030d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030d4:	f383 8811 	msr	BASEPRI, r3
 80030d8:	f3bf 8f6f 	isb	sy
 80030dc:	f3bf 8f4f 	dsb	sy
 80030e0:	60fb      	str	r3, [r7, #12]
    }
 80030e2:	bf00      	nop
 80030e4:	e7fe      	b.n	80030e4 <prvTaskExitError+0x28>
        __asm volatile
 80030e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ea:	f383 8811 	msr	BASEPRI, r3
 80030ee:	f3bf 8f6f 	isb	sy
 80030f2:	f3bf 8f4f 	dsb	sy
 80030f6:	60bb      	str	r3, [r7, #8]
    }
 80030f8:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80030fa:	bf00      	nop
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d0fc      	beq.n	80030fc <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003102:	bf00      	nop
 8003104:	bf00      	nop
 8003106:	3714      	adds	r7, #20
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr
 8003110:	20000010 	.word	0x20000010
	...

08003120 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003120:	4b07      	ldr	r3, [pc, #28]	; (8003140 <pxCurrentTCBConst2>)
 8003122:	6819      	ldr	r1, [r3, #0]
 8003124:	6808      	ldr	r0, [r1, #0]
 8003126:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800312a:	f380 8809 	msr	PSP, r0
 800312e:	f3bf 8f6f 	isb	sy
 8003132:	f04f 0000 	mov.w	r0, #0
 8003136:	f380 8811 	msr	BASEPRI, r0
 800313a:	4770      	bx	lr
 800313c:	f3af 8000 	nop.w

08003140 <pxCurrentTCBConst2>:
 8003140:	20000090 	.word	0x20000090
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003144:	bf00      	nop
 8003146:	bf00      	nop

08003148 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003148:	4808      	ldr	r0, [pc, #32]	; (800316c <prvPortStartFirstTask+0x24>)
 800314a:	6800      	ldr	r0, [r0, #0]
 800314c:	6800      	ldr	r0, [r0, #0]
 800314e:	f380 8808 	msr	MSP, r0
 8003152:	f04f 0000 	mov.w	r0, #0
 8003156:	f380 8814 	msr	CONTROL, r0
 800315a:	b662      	cpsie	i
 800315c:	b661      	cpsie	f
 800315e:	f3bf 8f4f 	dsb	sy
 8003162:	f3bf 8f6f 	isb	sy
 8003166:	df00      	svc	0
 8003168:	bf00      	nop
 800316a:	0000      	.short	0x0000
 800316c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003170:	bf00      	nop
 8003172:	bf00      	nop

08003174 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b086      	sub	sp, #24
 8003178:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800317a:	4b46      	ldr	r3, [pc, #280]	; (8003294 <xPortStartScheduler+0x120>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a46      	ldr	r2, [pc, #280]	; (8003298 <xPortStartScheduler+0x124>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d10a      	bne.n	800319a <xPortStartScheduler+0x26>
        __asm volatile
 8003184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003188:	f383 8811 	msr	BASEPRI, r3
 800318c:	f3bf 8f6f 	isb	sy
 8003190:	f3bf 8f4f 	dsb	sy
 8003194:	613b      	str	r3, [r7, #16]
    }
 8003196:	bf00      	nop
 8003198:	e7fe      	b.n	8003198 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800319a:	4b3e      	ldr	r3, [pc, #248]	; (8003294 <xPortStartScheduler+0x120>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a3f      	ldr	r2, [pc, #252]	; (800329c <xPortStartScheduler+0x128>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d10a      	bne.n	80031ba <xPortStartScheduler+0x46>
        __asm volatile
 80031a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031a8:	f383 8811 	msr	BASEPRI, r3
 80031ac:	f3bf 8f6f 	isb	sy
 80031b0:	f3bf 8f4f 	dsb	sy
 80031b4:	60fb      	str	r3, [r7, #12]
    }
 80031b6:	bf00      	nop
 80031b8:	e7fe      	b.n	80031b8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80031ba:	4b39      	ldr	r3, [pc, #228]	; (80032a0 <xPortStartScheduler+0x12c>)
 80031bc:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	781b      	ldrb	r3, [r3, #0]
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	22ff      	movs	r2, #255	; 0xff
 80031ca:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80031d4:	78fb      	ldrb	r3, [r7, #3]
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80031dc:	b2da      	uxtb	r2, r3
 80031de:	4b31      	ldr	r3, [pc, #196]	; (80032a4 <xPortStartScheduler+0x130>)
 80031e0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80031e2:	4b31      	ldr	r3, [pc, #196]	; (80032a8 <xPortStartScheduler+0x134>)
 80031e4:	2207      	movs	r2, #7
 80031e6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80031e8:	e009      	b.n	80031fe <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80031ea:	4b2f      	ldr	r3, [pc, #188]	; (80032a8 <xPortStartScheduler+0x134>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	3b01      	subs	r3, #1
 80031f0:	4a2d      	ldr	r2, [pc, #180]	; (80032a8 <xPortStartScheduler+0x134>)
 80031f2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80031f4:	78fb      	ldrb	r3, [r7, #3]
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	005b      	lsls	r3, r3, #1
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80031fe:	78fb      	ldrb	r3, [r7, #3]
 8003200:	b2db      	uxtb	r3, r3
 8003202:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003206:	2b80      	cmp	r3, #128	; 0x80
 8003208:	d0ef      	beq.n	80031ea <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800320a:	4b27      	ldr	r3, [pc, #156]	; (80032a8 <xPortStartScheduler+0x134>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f1c3 0307 	rsb	r3, r3, #7
 8003212:	2b04      	cmp	r3, #4
 8003214:	d00a      	beq.n	800322c <xPortStartScheduler+0xb8>
        __asm volatile
 8003216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800321a:	f383 8811 	msr	BASEPRI, r3
 800321e:	f3bf 8f6f 	isb	sy
 8003222:	f3bf 8f4f 	dsb	sy
 8003226:	60bb      	str	r3, [r7, #8]
    }
 8003228:	bf00      	nop
 800322a:	e7fe      	b.n	800322a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800322c:	4b1e      	ldr	r3, [pc, #120]	; (80032a8 <xPortStartScheduler+0x134>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	021b      	lsls	r3, r3, #8
 8003232:	4a1d      	ldr	r2, [pc, #116]	; (80032a8 <xPortStartScheduler+0x134>)
 8003234:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003236:	4b1c      	ldr	r3, [pc, #112]	; (80032a8 <xPortStartScheduler+0x134>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800323e:	4a1a      	ldr	r2, [pc, #104]	; (80032a8 <xPortStartScheduler+0x134>)
 8003240:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	b2da      	uxtb	r2, r3
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800324a:	4b18      	ldr	r3, [pc, #96]	; (80032ac <xPortStartScheduler+0x138>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a17      	ldr	r2, [pc, #92]	; (80032ac <xPortStartScheduler+0x138>)
 8003250:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003254:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003256:	4b15      	ldr	r3, [pc, #84]	; (80032ac <xPortStartScheduler+0x138>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a14      	ldr	r2, [pc, #80]	; (80032ac <xPortStartScheduler+0x138>)
 800325c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003260:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003262:	f000 f963 	bl	800352c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003266:	4b12      	ldr	r3, [pc, #72]	; (80032b0 <xPortStartScheduler+0x13c>)
 8003268:	2200      	movs	r2, #0
 800326a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800326c:	f000 f982 	bl	8003574 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003270:	4b10      	ldr	r3, [pc, #64]	; (80032b4 <xPortStartScheduler+0x140>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a0f      	ldr	r2, [pc, #60]	; (80032b4 <xPortStartScheduler+0x140>)
 8003276:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800327a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800327c:	f7ff ff64 	bl	8003148 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003280:	f7ff fbb6 	bl	80029f0 <vTaskSwitchContext>
    prvTaskExitError();
 8003284:	f7ff ff1a 	bl	80030bc <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003288:	2300      	movs	r3, #0
}
 800328a:	4618      	mov	r0, r3
 800328c:	3718      	adds	r7, #24
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	e000ed00 	.word	0xe000ed00
 8003298:	410fc271 	.word	0x410fc271
 800329c:	410fc270 	.word	0x410fc270
 80032a0:	e000e400 	.word	0xe000e400
 80032a4:	20000194 	.word	0x20000194
 80032a8:	20000198 	.word	0x20000198
 80032ac:	e000ed20 	.word	0xe000ed20
 80032b0:	20000010 	.word	0x20000010
 80032b4:	e000ef34 	.word	0xe000ef34

080032b8 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b087      	sub	sp, #28
 80032bc:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80032be:	4b37      	ldr	r3, [pc, #220]	; (800339c <vInitPrioGroupValue+0xe4>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a37      	ldr	r2, [pc, #220]	; (80033a0 <vInitPrioGroupValue+0xe8>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d10a      	bne.n	80032de <vInitPrioGroupValue+0x26>
        __asm volatile
 80032c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032cc:	f383 8811 	msr	BASEPRI, r3
 80032d0:	f3bf 8f6f 	isb	sy
 80032d4:	f3bf 8f4f 	dsb	sy
 80032d8:	613b      	str	r3, [r7, #16]
    }
 80032da:	bf00      	nop
 80032dc:	e7fe      	b.n	80032dc <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80032de:	4b2f      	ldr	r3, [pc, #188]	; (800339c <vInitPrioGroupValue+0xe4>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a30      	ldr	r2, [pc, #192]	; (80033a4 <vInitPrioGroupValue+0xec>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d10a      	bne.n	80032fe <vInitPrioGroupValue+0x46>
        __asm volatile
 80032e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ec:	f383 8811 	msr	BASEPRI, r3
 80032f0:	f3bf 8f6f 	isb	sy
 80032f4:	f3bf 8f4f 	dsb	sy
 80032f8:	60fb      	str	r3, [r7, #12]
    }
 80032fa:	bf00      	nop
 80032fc:	e7fe      	b.n	80032fc <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80032fe:	4b2a      	ldr	r3, [pc, #168]	; (80033a8 <vInitPrioGroupValue+0xf0>)
 8003300:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	b2db      	uxtb	r3, r3
 8003308:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	22ff      	movs	r2, #255	; 0xff
 800330e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	b2db      	uxtb	r3, r3
 8003316:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003318:	78fb      	ldrb	r3, [r7, #3]
 800331a:	b2db      	uxtb	r3, r3
 800331c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003320:	b2da      	uxtb	r2, r3
 8003322:	4b22      	ldr	r3, [pc, #136]	; (80033ac <vInitPrioGroupValue+0xf4>)
 8003324:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003326:	4b22      	ldr	r3, [pc, #136]	; (80033b0 <vInitPrioGroupValue+0xf8>)
 8003328:	2207      	movs	r2, #7
 800332a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800332c:	e009      	b.n	8003342 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800332e:	4b20      	ldr	r3, [pc, #128]	; (80033b0 <vInitPrioGroupValue+0xf8>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	3b01      	subs	r3, #1
 8003334:	4a1e      	ldr	r2, [pc, #120]	; (80033b0 <vInitPrioGroupValue+0xf8>)
 8003336:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003338:	78fb      	ldrb	r3, [r7, #3]
 800333a:	b2db      	uxtb	r3, r3
 800333c:	005b      	lsls	r3, r3, #1
 800333e:	b2db      	uxtb	r3, r3
 8003340:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003342:	78fb      	ldrb	r3, [r7, #3]
 8003344:	b2db      	uxtb	r3, r3
 8003346:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800334a:	2b80      	cmp	r3, #128	; 0x80
 800334c:	d0ef      	beq.n	800332e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800334e:	4b18      	ldr	r3, [pc, #96]	; (80033b0 <vInitPrioGroupValue+0xf8>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f1c3 0307 	rsb	r3, r3, #7
 8003356:	2b04      	cmp	r3, #4
 8003358:	d00a      	beq.n	8003370 <vInitPrioGroupValue+0xb8>
        __asm volatile
 800335a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800335e:	f383 8811 	msr	BASEPRI, r3
 8003362:	f3bf 8f6f 	isb	sy
 8003366:	f3bf 8f4f 	dsb	sy
 800336a:	60bb      	str	r3, [r7, #8]
    }
 800336c:	bf00      	nop
 800336e:	e7fe      	b.n	800336e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003370:	4b0f      	ldr	r3, [pc, #60]	; (80033b0 <vInitPrioGroupValue+0xf8>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	021b      	lsls	r3, r3, #8
 8003376:	4a0e      	ldr	r2, [pc, #56]	; (80033b0 <vInitPrioGroupValue+0xf8>)
 8003378:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800337a:	4b0d      	ldr	r3, [pc, #52]	; (80033b0 <vInitPrioGroupValue+0xf8>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003382:	4a0b      	ldr	r2, [pc, #44]	; (80033b0 <vInitPrioGroupValue+0xf8>)
 8003384:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	b2da      	uxtb	r2, r3
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800338e:	bf00      	nop
 8003390:	371c      	adds	r7, #28
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr
 800339a:	bf00      	nop
 800339c:	e000ed00 	.word	0xe000ed00
 80033a0:	410fc271 	.word	0x410fc271
 80033a4:	410fc270 	.word	0x410fc270
 80033a8:	e000e400 	.word	0xe000e400
 80033ac:	20000194 	.word	0x20000194
 80033b0:	20000198 	.word	0x20000198

080033b4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
        __asm volatile
 80033ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033be:	f383 8811 	msr	BASEPRI, r3
 80033c2:	f3bf 8f6f 	isb	sy
 80033c6:	f3bf 8f4f 	dsb	sy
 80033ca:	607b      	str	r3, [r7, #4]
    }
 80033cc:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80033ce:	4b0f      	ldr	r3, [pc, #60]	; (800340c <vPortEnterCritical+0x58>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	3301      	adds	r3, #1
 80033d4:	4a0d      	ldr	r2, [pc, #52]	; (800340c <vPortEnterCritical+0x58>)
 80033d6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80033d8:	4b0c      	ldr	r3, [pc, #48]	; (800340c <vPortEnterCritical+0x58>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d10f      	bne.n	8003400 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80033e0:	4b0b      	ldr	r3, [pc, #44]	; (8003410 <vPortEnterCritical+0x5c>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d00a      	beq.n	8003400 <vPortEnterCritical+0x4c>
        __asm volatile
 80033ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033ee:	f383 8811 	msr	BASEPRI, r3
 80033f2:	f3bf 8f6f 	isb	sy
 80033f6:	f3bf 8f4f 	dsb	sy
 80033fa:	603b      	str	r3, [r7, #0]
    }
 80033fc:	bf00      	nop
 80033fe:	e7fe      	b.n	80033fe <vPortEnterCritical+0x4a>
    }
}
 8003400:	bf00      	nop
 8003402:	370c      	adds	r7, #12
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr
 800340c:	20000010 	.word	0x20000010
 8003410:	e000ed04 	.word	0xe000ed04

08003414 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800341a:	4b12      	ldr	r3, [pc, #72]	; (8003464 <vPortExitCritical+0x50>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d10a      	bne.n	8003438 <vPortExitCritical+0x24>
        __asm volatile
 8003422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003426:	f383 8811 	msr	BASEPRI, r3
 800342a:	f3bf 8f6f 	isb	sy
 800342e:	f3bf 8f4f 	dsb	sy
 8003432:	607b      	str	r3, [r7, #4]
    }
 8003434:	bf00      	nop
 8003436:	e7fe      	b.n	8003436 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8003438:	4b0a      	ldr	r3, [pc, #40]	; (8003464 <vPortExitCritical+0x50>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	3b01      	subs	r3, #1
 800343e:	4a09      	ldr	r2, [pc, #36]	; (8003464 <vPortExitCritical+0x50>)
 8003440:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003442:	4b08      	ldr	r3, [pc, #32]	; (8003464 <vPortExitCritical+0x50>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d105      	bne.n	8003456 <vPortExitCritical+0x42>
 800344a:	2300      	movs	r3, #0
 800344c:	603b      	str	r3, [r7, #0]
        __asm volatile
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	f383 8811 	msr	BASEPRI, r3
    }
 8003454:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003456:	bf00      	nop
 8003458:	370c      	adds	r7, #12
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr
 8003462:	bf00      	nop
 8003464:	20000010 	.word	0x20000010
	...

08003470 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003470:	f3ef 8009 	mrs	r0, PSP
 8003474:	f3bf 8f6f 	isb	sy
 8003478:	4b15      	ldr	r3, [pc, #84]	; (80034d0 <pxCurrentTCBConst>)
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	f01e 0f10 	tst.w	lr, #16
 8003480:	bf08      	it	eq
 8003482:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003486:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800348a:	6010      	str	r0, [r2, #0]
 800348c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003490:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003494:	f380 8811 	msr	BASEPRI, r0
 8003498:	f3bf 8f4f 	dsb	sy
 800349c:	f3bf 8f6f 	isb	sy
 80034a0:	f7ff faa6 	bl	80029f0 <vTaskSwitchContext>
 80034a4:	f04f 0000 	mov.w	r0, #0
 80034a8:	f380 8811 	msr	BASEPRI, r0
 80034ac:	bc09      	pop	{r0, r3}
 80034ae:	6819      	ldr	r1, [r3, #0]
 80034b0:	6808      	ldr	r0, [r1, #0]
 80034b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034b6:	f01e 0f10 	tst.w	lr, #16
 80034ba:	bf08      	it	eq
 80034bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80034c0:	f380 8809 	msr	PSP, r0
 80034c4:	f3bf 8f6f 	isb	sy
 80034c8:	4770      	bx	lr
 80034ca:	bf00      	nop
 80034cc:	f3af 8000 	nop.w

080034d0 <pxCurrentTCBConst>:
 80034d0:	20000090 	.word	0x20000090
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80034d4:	bf00      	nop
 80034d6:	bf00      	nop

080034d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b082      	sub	sp, #8
 80034dc:	af00      	add	r7, sp, #0
        __asm volatile
 80034de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034e2:	f383 8811 	msr	BASEPRI, r3
 80034e6:	f3bf 8f6f 	isb	sy
 80034ea:	f3bf 8f4f 	dsb	sy
 80034ee:	607b      	str	r3, [r7, #4]
    }
 80034f0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 80034f2:	f002 fc79 	bl	8005de8 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80034f6:	f7ff f9bf 	bl	8002878 <xTaskIncrementTick>
 80034fa:	4603      	mov	r3, r0
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d006      	beq.n	800350e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8003500:	f002 fcd0 	bl	8005ea4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003504:	4b08      	ldr	r3, [pc, #32]	; (8003528 <SysTick_Handler+0x50>)
 8003506:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800350a:	601a      	str	r2, [r3, #0]
 800350c:	e001      	b.n	8003512 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800350e:	f002 fcad 	bl	8005e6c <SEGGER_SYSVIEW_RecordExitISR>
 8003512:	2300      	movs	r3, #0
 8003514:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	f383 8811 	msr	BASEPRI, r3
    }
 800351c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800351e:	bf00      	nop
 8003520:	3708      	adds	r7, #8
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	e000ed04 	.word	0xe000ed04

0800352c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800352c:	b480      	push	{r7}
 800352e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003530:	4b0b      	ldr	r3, [pc, #44]	; (8003560 <vPortSetupTimerInterrupt+0x34>)
 8003532:	2200      	movs	r2, #0
 8003534:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003536:	4b0b      	ldr	r3, [pc, #44]	; (8003564 <vPortSetupTimerInterrupt+0x38>)
 8003538:	2200      	movs	r2, #0
 800353a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800353c:	4b0a      	ldr	r3, [pc, #40]	; (8003568 <vPortSetupTimerInterrupt+0x3c>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a0a      	ldr	r2, [pc, #40]	; (800356c <vPortSetupTimerInterrupt+0x40>)
 8003542:	fba2 2303 	umull	r2, r3, r2, r3
 8003546:	099b      	lsrs	r3, r3, #6
 8003548:	4a09      	ldr	r2, [pc, #36]	; (8003570 <vPortSetupTimerInterrupt+0x44>)
 800354a:	3b01      	subs	r3, #1
 800354c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800354e:	4b04      	ldr	r3, [pc, #16]	; (8003560 <vPortSetupTimerInterrupt+0x34>)
 8003550:	2207      	movs	r2, #7
 8003552:	601a      	str	r2, [r3, #0]
}
 8003554:	bf00      	nop
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr
 800355e:	bf00      	nop
 8003560:	e000e010 	.word	0xe000e010
 8003564:	e000e018 	.word	0xe000e018
 8003568:	20000000 	.word	0x20000000
 800356c:	10624dd3 	.word	0x10624dd3
 8003570:	e000e014 	.word	0xe000e014

08003574 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003574:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003584 <vPortEnableVFP+0x10>
 8003578:	6801      	ldr	r1, [r0, #0]
 800357a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800357e:	6001      	str	r1, [r0, #0]
 8003580:	4770      	bx	lr
 8003582:	0000      	.short	0x0000
 8003584:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003588:	bf00      	nop
 800358a:	bf00      	nop

0800358c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800358c:	b480      	push	{r7}
 800358e:	b085      	sub	sp, #20
 8003590:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8003592:	f3ef 8305 	mrs	r3, IPSR
 8003596:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2b0f      	cmp	r3, #15
 800359c:	d914      	bls.n	80035c8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800359e:	4a17      	ldr	r2, [pc, #92]	; (80035fc <vPortValidateInterruptPriority+0x70>)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	4413      	add	r3, r2
 80035a4:	781b      	ldrb	r3, [r3, #0]
 80035a6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80035a8:	4b15      	ldr	r3, [pc, #84]	; (8003600 <vPortValidateInterruptPriority+0x74>)
 80035aa:	781b      	ldrb	r3, [r3, #0]
 80035ac:	7afa      	ldrb	r2, [r7, #11]
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d20a      	bcs.n	80035c8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80035b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035b6:	f383 8811 	msr	BASEPRI, r3
 80035ba:	f3bf 8f6f 	isb	sy
 80035be:	f3bf 8f4f 	dsb	sy
 80035c2:	607b      	str	r3, [r7, #4]
    }
 80035c4:	bf00      	nop
 80035c6:	e7fe      	b.n	80035c6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80035c8:	4b0e      	ldr	r3, [pc, #56]	; (8003604 <vPortValidateInterruptPriority+0x78>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80035d0:	4b0d      	ldr	r3, [pc, #52]	; (8003608 <vPortValidateInterruptPriority+0x7c>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d90a      	bls.n	80035ee <vPortValidateInterruptPriority+0x62>
        __asm volatile
 80035d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035dc:	f383 8811 	msr	BASEPRI, r3
 80035e0:	f3bf 8f6f 	isb	sy
 80035e4:	f3bf 8f4f 	dsb	sy
 80035e8:	603b      	str	r3, [r7, #0]
    }
 80035ea:	bf00      	nop
 80035ec:	e7fe      	b.n	80035ec <vPortValidateInterruptPriority+0x60>
    }
 80035ee:	bf00      	nop
 80035f0:	3714      	adds	r7, #20
 80035f2:	46bd      	mov	sp, r7
 80035f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f8:	4770      	bx	lr
 80035fa:	bf00      	nop
 80035fc:	e000e3f0 	.word	0xe000e3f0
 8003600:	20000194 	.word	0x20000194
 8003604:	e000ed0c 	.word	0xe000ed0c
 8003608:	20000198 	.word	0x20000198

0800360c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b08a      	sub	sp, #40	; 0x28
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8003614:	2300      	movs	r3, #0
 8003616:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8003618:	f7ff f86e 	bl	80026f8 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800361c:	4b65      	ldr	r3, [pc, #404]	; (80037b4 <pvPortMalloc+0x1a8>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d101      	bne.n	8003628 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003624:	f000 f934 	bl	8003890 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003628:	4b63      	ldr	r3, [pc, #396]	; (80037b8 <pvPortMalloc+0x1ac>)
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	4013      	ands	r3, r2
 8003630:	2b00      	cmp	r3, #0
 8003632:	f040 80a7 	bne.w	8003784 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d02d      	beq.n	8003698 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800363c:	2208      	movs	r2, #8
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	429a      	cmp	r2, r3
 8003646:	d227      	bcs.n	8003698 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8003648:	2208      	movs	r2, #8
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	4413      	add	r3, r2
 800364e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f003 0307 	and.w	r3, r3, #7
 8003656:	2b00      	cmp	r3, #0
 8003658:	d021      	beq.n	800369e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	f023 0307 	bic.w	r3, r3, #7
 8003660:	3308      	adds	r3, #8
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	429a      	cmp	r2, r3
 8003666:	d214      	bcs.n	8003692 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	f023 0307 	bic.w	r3, r3, #7
 800366e:	3308      	adds	r3, #8
 8003670:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f003 0307 	and.w	r3, r3, #7
 8003678:	2b00      	cmp	r3, #0
 800367a:	d010      	beq.n	800369e <pvPortMalloc+0x92>
        __asm volatile
 800367c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003680:	f383 8811 	msr	BASEPRI, r3
 8003684:	f3bf 8f6f 	isb	sy
 8003688:	f3bf 8f4f 	dsb	sy
 800368c:	617b      	str	r3, [r7, #20]
    }
 800368e:	bf00      	nop
 8003690:	e7fe      	b.n	8003690 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8003692:	2300      	movs	r3, #0
 8003694:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003696:	e002      	b.n	800369e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8003698:	2300      	movs	r3, #0
 800369a:	607b      	str	r3, [r7, #4]
 800369c:	e000      	b.n	80036a0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800369e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d06e      	beq.n	8003784 <pvPortMalloc+0x178>
 80036a6:	4b45      	ldr	r3, [pc, #276]	; (80037bc <pvPortMalloc+0x1b0>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	687a      	ldr	r2, [r7, #4]
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d869      	bhi.n	8003784 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80036b0:	4b43      	ldr	r3, [pc, #268]	; (80037c0 <pvPortMalloc+0x1b4>)
 80036b2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80036b4:	4b42      	ldr	r3, [pc, #264]	; (80037c0 <pvPortMalloc+0x1b4>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80036ba:	e004      	b.n	80036c6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 80036bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036be:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80036c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80036c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d903      	bls.n	80036d8 <pvPortMalloc+0xcc>
 80036d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d1f1      	bne.n	80036bc <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80036d8:	4b36      	ldr	r3, [pc, #216]	; (80037b4 <pvPortMalloc+0x1a8>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036de:	429a      	cmp	r2, r3
 80036e0:	d050      	beq.n	8003784 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80036e2:	6a3b      	ldr	r3, [r7, #32]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	2208      	movs	r2, #8
 80036e8:	4413      	add	r3, r2
 80036ea:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80036ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	6a3b      	ldr	r3, [r7, #32]
 80036f2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80036f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f6:	685a      	ldr	r2, [r3, #4]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	1ad2      	subs	r2, r2, r3
 80036fc:	2308      	movs	r3, #8
 80036fe:	005b      	lsls	r3, r3, #1
 8003700:	429a      	cmp	r2, r3
 8003702:	d91f      	bls.n	8003744 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003704:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4413      	add	r3, r2
 800370a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800370c:	69bb      	ldr	r3, [r7, #24]
 800370e:	f003 0307 	and.w	r3, r3, #7
 8003712:	2b00      	cmp	r3, #0
 8003714:	d00a      	beq.n	800372c <pvPortMalloc+0x120>
        __asm volatile
 8003716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800371a:	f383 8811 	msr	BASEPRI, r3
 800371e:	f3bf 8f6f 	isb	sy
 8003722:	f3bf 8f4f 	dsb	sy
 8003726:	613b      	str	r3, [r7, #16]
    }
 8003728:	bf00      	nop
 800372a:	e7fe      	b.n	800372a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800372c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372e:	685a      	ldr	r2, [r3, #4]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	1ad2      	subs	r2, r2, r3
 8003734:	69bb      	ldr	r3, [r7, #24]
 8003736:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800373e:	69b8      	ldr	r0, [r7, #24]
 8003740:	f000 f908 	bl	8003954 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003744:	4b1d      	ldr	r3, [pc, #116]	; (80037bc <pvPortMalloc+0x1b0>)
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	4a1b      	ldr	r2, [pc, #108]	; (80037bc <pvPortMalloc+0x1b0>)
 8003750:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003752:	4b1a      	ldr	r3, [pc, #104]	; (80037bc <pvPortMalloc+0x1b0>)
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	4b1b      	ldr	r3, [pc, #108]	; (80037c4 <pvPortMalloc+0x1b8>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	429a      	cmp	r2, r3
 800375c:	d203      	bcs.n	8003766 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800375e:	4b17      	ldr	r3, [pc, #92]	; (80037bc <pvPortMalloc+0x1b0>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a18      	ldr	r2, [pc, #96]	; (80037c4 <pvPortMalloc+0x1b8>)
 8003764:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003768:	685a      	ldr	r2, [r3, #4]
 800376a:	4b13      	ldr	r3, [pc, #76]	; (80037b8 <pvPortMalloc+0x1ac>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	431a      	orrs	r2, r3
 8003770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003772:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003776:	2200      	movs	r2, #0
 8003778:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800377a:	4b13      	ldr	r3, [pc, #76]	; (80037c8 <pvPortMalloc+0x1bc>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	3301      	adds	r3, #1
 8003780:	4a11      	ldr	r2, [pc, #68]	; (80037c8 <pvPortMalloc+0x1bc>)
 8003782:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003784:	f7fe ffc6 	bl	8002714 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	f003 0307 	and.w	r3, r3, #7
 800378e:	2b00      	cmp	r3, #0
 8003790:	d00a      	beq.n	80037a8 <pvPortMalloc+0x19c>
        __asm volatile
 8003792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003796:	f383 8811 	msr	BASEPRI, r3
 800379a:	f3bf 8f6f 	isb	sy
 800379e:	f3bf 8f4f 	dsb	sy
 80037a2:	60fb      	str	r3, [r7, #12]
    }
 80037a4:	bf00      	nop
 80037a6:	e7fe      	b.n	80037a6 <pvPortMalloc+0x19a>
    return pvReturn;
 80037a8:	69fb      	ldr	r3, [r7, #28]
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3728      	adds	r7, #40	; 0x28
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	20012da4 	.word	0x20012da4
 80037b8:	20012db8 	.word	0x20012db8
 80037bc:	20012da8 	.word	0x20012da8
 80037c0:	20012d9c 	.word	0x20012d9c
 80037c4:	20012dac 	.word	0x20012dac
 80037c8:	20012db0 	.word	0x20012db0

080037cc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b086      	sub	sp, #24
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d04d      	beq.n	800387a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80037de:	2308      	movs	r3, #8
 80037e0:	425b      	negs	r3, r3
 80037e2:	697a      	ldr	r2, [r7, #20]
 80037e4:	4413      	add	r3, r2
 80037e6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	685a      	ldr	r2, [r3, #4]
 80037f0:	4b24      	ldr	r3, [pc, #144]	; (8003884 <vPortFree+0xb8>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4013      	ands	r3, r2
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d10a      	bne.n	8003810 <vPortFree+0x44>
        __asm volatile
 80037fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037fe:	f383 8811 	msr	BASEPRI, r3
 8003802:	f3bf 8f6f 	isb	sy
 8003806:	f3bf 8f4f 	dsb	sy
 800380a:	60fb      	str	r3, [r7, #12]
    }
 800380c:	bf00      	nop
 800380e:	e7fe      	b.n	800380e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d00a      	beq.n	800382e <vPortFree+0x62>
        __asm volatile
 8003818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800381c:	f383 8811 	msr	BASEPRI, r3
 8003820:	f3bf 8f6f 	isb	sy
 8003824:	f3bf 8f4f 	dsb	sy
 8003828:	60bb      	str	r3, [r7, #8]
    }
 800382a:	bf00      	nop
 800382c:	e7fe      	b.n	800382c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	685a      	ldr	r2, [r3, #4]
 8003832:	4b14      	ldr	r3, [pc, #80]	; (8003884 <vPortFree+0xb8>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4013      	ands	r3, r2
 8003838:	2b00      	cmp	r3, #0
 800383a:	d01e      	beq.n	800387a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d11a      	bne.n	800387a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	685a      	ldr	r2, [r3, #4]
 8003848:	4b0e      	ldr	r3, [pc, #56]	; (8003884 <vPortFree+0xb8>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	43db      	mvns	r3, r3
 800384e:	401a      	ands	r2, r3
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8003854:	f7fe ff50 	bl	80026f8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	685a      	ldr	r2, [r3, #4]
 800385c:	4b0a      	ldr	r3, [pc, #40]	; (8003888 <vPortFree+0xbc>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4413      	add	r3, r2
 8003862:	4a09      	ldr	r2, [pc, #36]	; (8003888 <vPortFree+0xbc>)
 8003864:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003866:	6938      	ldr	r0, [r7, #16]
 8003868:	f000 f874 	bl	8003954 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800386c:	4b07      	ldr	r3, [pc, #28]	; (800388c <vPortFree+0xc0>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	3301      	adds	r3, #1
 8003872:	4a06      	ldr	r2, [pc, #24]	; (800388c <vPortFree+0xc0>)
 8003874:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003876:	f7fe ff4d 	bl	8002714 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800387a:	bf00      	nop
 800387c:	3718      	adds	r7, #24
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	20012db8 	.word	0x20012db8
 8003888:	20012da8 	.word	0x20012da8
 800388c:	20012db4 	.word	0x20012db4

08003890 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003890:	b480      	push	{r7}
 8003892:	b085      	sub	sp, #20
 8003894:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003896:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800389a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800389c:	4b27      	ldr	r3, [pc, #156]	; (800393c <prvHeapInit+0xac>)
 800389e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f003 0307 	and.w	r3, r3, #7
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d00c      	beq.n	80038c4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	3307      	adds	r3, #7
 80038ae:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f023 0307 	bic.w	r3, r3, #7
 80038b6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80038b8:	68ba      	ldr	r2, [r7, #8]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	4a1f      	ldr	r2, [pc, #124]	; (800393c <prvHeapInit+0xac>)
 80038c0:	4413      	add	r3, r2
 80038c2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80038c8:	4a1d      	ldr	r2, [pc, #116]	; (8003940 <prvHeapInit+0xb0>)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80038ce:	4b1c      	ldr	r3, [pc, #112]	; (8003940 <prvHeapInit+0xb0>)
 80038d0:	2200      	movs	r2, #0
 80038d2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	68ba      	ldr	r2, [r7, #8]
 80038d8:	4413      	add	r3, r2
 80038da:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80038dc:	2208      	movs	r2, #8
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	1a9b      	subs	r3, r3, r2
 80038e2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f023 0307 	bic.w	r3, r3, #7
 80038ea:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	4a15      	ldr	r2, [pc, #84]	; (8003944 <prvHeapInit+0xb4>)
 80038f0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80038f2:	4b14      	ldr	r3, [pc, #80]	; (8003944 <prvHeapInit+0xb4>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	2200      	movs	r2, #0
 80038f8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80038fa:	4b12      	ldr	r3, [pc, #72]	; (8003944 <prvHeapInit+0xb4>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	2200      	movs	r2, #0
 8003900:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	68fa      	ldr	r2, [r7, #12]
 800390a:	1ad2      	subs	r2, r2, r3
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003910:	4b0c      	ldr	r3, [pc, #48]	; (8003944 <prvHeapInit+0xb4>)
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	4a0a      	ldr	r2, [pc, #40]	; (8003948 <prvHeapInit+0xb8>)
 800391e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	4a09      	ldr	r2, [pc, #36]	; (800394c <prvHeapInit+0xbc>)
 8003926:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003928:	4b09      	ldr	r3, [pc, #36]	; (8003950 <prvHeapInit+0xc0>)
 800392a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800392e:	601a      	str	r2, [r3, #0]
}
 8003930:	bf00      	nop
 8003932:	3714      	adds	r7, #20
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr
 800393c:	2000019c 	.word	0x2000019c
 8003940:	20012d9c 	.word	0x20012d9c
 8003944:	20012da4 	.word	0x20012da4
 8003948:	20012dac 	.word	0x20012dac
 800394c:	20012da8 	.word	0x20012da8
 8003950:	20012db8 	.word	0x20012db8

08003954 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003954:	b480      	push	{r7}
 8003956:	b085      	sub	sp, #20
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800395c:	4b28      	ldr	r3, [pc, #160]	; (8003a00 <prvInsertBlockIntoFreeList+0xac>)
 800395e:	60fb      	str	r3, [r7, #12]
 8003960:	e002      	b.n	8003968 <prvInsertBlockIntoFreeList+0x14>
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	60fb      	str	r3, [r7, #12]
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	429a      	cmp	r2, r3
 8003970:	d8f7      	bhi.n	8003962 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	68ba      	ldr	r2, [r7, #8]
 800397c:	4413      	add	r3, r2
 800397e:	687a      	ldr	r2, [r7, #4]
 8003980:	429a      	cmp	r2, r3
 8003982:	d108      	bne.n	8003996 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	685a      	ldr	r2, [r3, #4]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	441a      	add	r2, r3
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	68ba      	ldr	r2, [r7, #8]
 80039a0:	441a      	add	r2, r3
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d118      	bne.n	80039dc <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	4b15      	ldr	r3, [pc, #84]	; (8003a04 <prvInsertBlockIntoFreeList+0xb0>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d00d      	beq.n	80039d2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685a      	ldr	r2, [r3, #4]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	441a      	add	r2, r3
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	601a      	str	r2, [r3, #0]
 80039d0:	e008      	b.n	80039e4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80039d2:	4b0c      	ldr	r3, [pc, #48]	; (8003a04 <prvInsertBlockIntoFreeList+0xb0>)
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	601a      	str	r2, [r3, #0]
 80039da:	e003      	b.n	80039e4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80039e4:	68fa      	ldr	r2, [r7, #12]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d002      	beq.n	80039f2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80039f2:	bf00      	nop
 80039f4:	3714      	adds	r7, #20
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr
 80039fe:	bf00      	nop
 8003a00:	20012d9c 	.word	0x20012d9c
 8003a04:	20012da4 	.word	0x20012da4

08003a08 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8003a0c:	4803      	ldr	r0, [pc, #12]	; (8003a1c <_cbSendSystemDesc+0x14>)
 8003a0e:	f002 f995 	bl	8005d3c <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8003a12:	4803      	ldr	r0, [pc, #12]	; (8003a20 <_cbSendSystemDesc+0x18>)
 8003a14:	f002 f992 	bl	8005d3c <SEGGER_SYSVIEW_SendSysDesc>
}
 8003a18:	bf00      	nop
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	080065cc 	.word	0x080065cc
 8003a20:	08006610 	.word	0x08006610

08003a24 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8003a24:	b580      	push	{r7, lr}
 8003a26:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8003a28:	4b06      	ldr	r3, [pc, #24]	; (8003a44 <SEGGER_SYSVIEW_Conf+0x20>)
 8003a2a:	6818      	ldr	r0, [r3, #0]
 8003a2c:	4b05      	ldr	r3, [pc, #20]	; (8003a44 <SEGGER_SYSVIEW_Conf+0x20>)
 8003a2e:	6819      	ldr	r1, [r3, #0]
 8003a30:	4b05      	ldr	r3, [pc, #20]	; (8003a48 <SEGGER_SYSVIEW_Conf+0x24>)
 8003a32:	4a06      	ldr	r2, [pc, #24]	; (8003a4c <SEGGER_SYSVIEW_Conf+0x28>)
 8003a34:	f001 fcc6 	bl	80053c4 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8003a38:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003a3c:	f001 fd06 	bl	800544c <SEGGER_SYSVIEW_SetRAMBase>
}
 8003a40:	bf00      	nop
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	20000000 	.word	0x20000000
 8003a48:	08003a09 	.word	0x08003a09
 8003a4c:	080066b0 	.word	0x080066b0

08003a50 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8003a50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a52:	b085      	sub	sp, #20
 8003a54:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8003a56:	2300      	movs	r3, #0
 8003a58:	607b      	str	r3, [r7, #4]
 8003a5a:	e033      	b.n	8003ac4 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8003a5c:	491e      	ldr	r1, [pc, #120]	; (8003ad8 <_cbSendTaskList+0x88>)
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	4613      	mov	r3, r2
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	4413      	add	r3, r2
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	440b      	add	r3, r1
 8003a6a:	6818      	ldr	r0, [r3, #0]
 8003a6c:	491a      	ldr	r1, [pc, #104]	; (8003ad8 <_cbSendTaskList+0x88>)
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	4613      	mov	r3, r2
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	4413      	add	r3, r2
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	440b      	add	r3, r1
 8003a7a:	3304      	adds	r3, #4
 8003a7c:	6819      	ldr	r1, [r3, #0]
 8003a7e:	4c16      	ldr	r4, [pc, #88]	; (8003ad8 <_cbSendTaskList+0x88>)
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	4613      	mov	r3, r2
 8003a84:	009b      	lsls	r3, r3, #2
 8003a86:	4413      	add	r3, r2
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	4423      	add	r3, r4
 8003a8c:	3308      	adds	r3, #8
 8003a8e:	681c      	ldr	r4, [r3, #0]
 8003a90:	4d11      	ldr	r5, [pc, #68]	; (8003ad8 <_cbSendTaskList+0x88>)
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	4613      	mov	r3, r2
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	4413      	add	r3, r2
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	442b      	add	r3, r5
 8003a9e:	330c      	adds	r3, #12
 8003aa0:	681d      	ldr	r5, [r3, #0]
 8003aa2:	4e0d      	ldr	r6, [pc, #52]	; (8003ad8 <_cbSendTaskList+0x88>)
 8003aa4:	687a      	ldr	r2, [r7, #4]
 8003aa6:	4613      	mov	r3, r2
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	4413      	add	r3, r2
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	4433      	add	r3, r6
 8003ab0:	3310      	adds	r3, #16
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	9300      	str	r3, [sp, #0]
 8003ab6:	462b      	mov	r3, r5
 8003ab8:	4622      	mov	r2, r4
 8003aba:	f000 f979 	bl	8003db0 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	3301      	adds	r3, #1
 8003ac2:	607b      	str	r3, [r7, #4]
 8003ac4:	4b05      	ldr	r3, [pc, #20]	; (8003adc <_cbSendTaskList+0x8c>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	429a      	cmp	r2, r3
 8003acc:	d3c6      	bcc.n	8003a5c <_cbSendTaskList+0xc>
  }
}
 8003ace:	bf00      	nop
 8003ad0:	bf00      	nop
 8003ad2:	370c      	adds	r7, #12
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ad8:	20012dbc 	.word	0x20012dbc
 8003adc:	20012e5c 	.word	0x20012e5c

08003ae0 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8003ae0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ae4:	b082      	sub	sp, #8
 8003ae6:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8003ae8:	f7fe feb4 	bl	8002854 <xTaskGetTickCountFromISR>
 8003aec:	4603      	mov	r3, r0
 8003aee:	2200      	movs	r2, #0
 8003af0:	469a      	mov	sl, r3
 8003af2:	4693      	mov	fp, r2
 8003af4:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8003af8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003afc:	4602      	mov	r2, r0
 8003afe:	460b      	mov	r3, r1
 8003b00:	f04f 0a00 	mov.w	sl, #0
 8003b04:	f04f 0b00 	mov.w	fp, #0
 8003b08:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8003b0c:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8003b10:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8003b14:	4652      	mov	r2, sl
 8003b16:	465b      	mov	r3, fp
 8003b18:	1a14      	subs	r4, r2, r0
 8003b1a:	eb63 0501 	sbc.w	r5, r3, r1
 8003b1e:	f04f 0200 	mov.w	r2, #0
 8003b22:	f04f 0300 	mov.w	r3, #0
 8003b26:	00ab      	lsls	r3, r5, #2
 8003b28:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8003b2c:	00a2      	lsls	r2, r4, #2
 8003b2e:	4614      	mov	r4, r2
 8003b30:	461d      	mov	r5, r3
 8003b32:	eb14 0800 	adds.w	r8, r4, r0
 8003b36:	eb45 0901 	adc.w	r9, r5, r1
 8003b3a:	f04f 0200 	mov.w	r2, #0
 8003b3e:	f04f 0300 	mov.w	r3, #0
 8003b42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b4e:	4690      	mov	r8, r2
 8003b50:	4699      	mov	r9, r3
 8003b52:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8003b56:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8003b5a:	4610      	mov	r0, r2
 8003b5c:	4619      	mov	r1, r3
 8003b5e:	3708      	adds	r7, #8
 8003b60:	46bd      	mov	sp, r7
 8003b62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08003b68 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b086      	sub	sp, #24
 8003b6c:	af02      	add	r7, sp, #8
 8003b6e:	60f8      	str	r0, [r7, #12]
 8003b70:	60b9      	str	r1, [r7, #8]
 8003b72:	607a      	str	r2, [r7, #4]
 8003b74:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003b76:	2205      	movs	r2, #5
 8003b78:	492b      	ldr	r1, [pc, #172]	; (8003c28 <SYSVIEW_AddTask+0xc0>)
 8003b7a:	68b8      	ldr	r0, [r7, #8]
 8003b7c:	f002 fc9e 	bl	80064bc <memcmp>
 8003b80:	4603      	mov	r3, r0
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d04b      	beq.n	8003c1e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8003b86:	4b29      	ldr	r3, [pc, #164]	; (8003c2c <SYSVIEW_AddTask+0xc4>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	2b07      	cmp	r3, #7
 8003b8c:	d903      	bls.n	8003b96 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8003b8e:	4828      	ldr	r0, [pc, #160]	; (8003c30 <SYSVIEW_AddTask+0xc8>)
 8003b90:	f002 fbe6 	bl	8006360 <SEGGER_SYSVIEW_Warn>
    return;
 8003b94:	e044      	b.n	8003c20 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8003b96:	4b25      	ldr	r3, [pc, #148]	; (8003c2c <SYSVIEW_AddTask+0xc4>)
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	4926      	ldr	r1, [pc, #152]	; (8003c34 <SYSVIEW_AddTask+0xcc>)
 8003b9c:	4613      	mov	r3, r2
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	4413      	add	r3, r2
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	440b      	add	r3, r1
 8003ba6:	68fa      	ldr	r2, [r7, #12]
 8003ba8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8003baa:	4b20      	ldr	r3, [pc, #128]	; (8003c2c <SYSVIEW_AddTask+0xc4>)
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	4921      	ldr	r1, [pc, #132]	; (8003c34 <SYSVIEW_AddTask+0xcc>)
 8003bb0:	4613      	mov	r3, r2
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	4413      	add	r3, r2
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	440b      	add	r3, r1
 8003bba:	3304      	adds	r3, #4
 8003bbc:	68ba      	ldr	r2, [r7, #8]
 8003bbe:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8003bc0:	4b1a      	ldr	r3, [pc, #104]	; (8003c2c <SYSVIEW_AddTask+0xc4>)
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	491b      	ldr	r1, [pc, #108]	; (8003c34 <SYSVIEW_AddTask+0xcc>)
 8003bc6:	4613      	mov	r3, r2
 8003bc8:	009b      	lsls	r3, r3, #2
 8003bca:	4413      	add	r3, r2
 8003bcc:	009b      	lsls	r3, r3, #2
 8003bce:	440b      	add	r3, r1
 8003bd0:	3308      	adds	r3, #8
 8003bd2:	687a      	ldr	r2, [r7, #4]
 8003bd4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8003bd6:	4b15      	ldr	r3, [pc, #84]	; (8003c2c <SYSVIEW_AddTask+0xc4>)
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	4916      	ldr	r1, [pc, #88]	; (8003c34 <SYSVIEW_AddTask+0xcc>)
 8003bdc:	4613      	mov	r3, r2
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	4413      	add	r3, r2
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	440b      	add	r3, r1
 8003be6:	330c      	adds	r3, #12
 8003be8:	683a      	ldr	r2, [r7, #0]
 8003bea:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8003bec:	4b0f      	ldr	r3, [pc, #60]	; (8003c2c <SYSVIEW_AddTask+0xc4>)
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	4910      	ldr	r1, [pc, #64]	; (8003c34 <SYSVIEW_AddTask+0xcc>)
 8003bf2:	4613      	mov	r3, r2
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	4413      	add	r3, r2
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	440b      	add	r3, r1
 8003bfc:	3310      	adds	r3, #16
 8003bfe:	69ba      	ldr	r2, [r7, #24]
 8003c00:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8003c02:	4b0a      	ldr	r3, [pc, #40]	; (8003c2c <SYSVIEW_AddTask+0xc4>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	3301      	adds	r3, #1
 8003c08:	4a08      	ldr	r2, [pc, #32]	; (8003c2c <SYSVIEW_AddTask+0xc4>)
 8003c0a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8003c0c:	69bb      	ldr	r3, [r7, #24]
 8003c0e:	9300      	str	r3, [sp, #0]
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	687a      	ldr	r2, [r7, #4]
 8003c14:	68b9      	ldr	r1, [r7, #8]
 8003c16:	68f8      	ldr	r0, [r7, #12]
 8003c18:	f000 f8ca 	bl	8003db0 <SYSVIEW_SendTaskInfo>
 8003c1c:	e000      	b.n	8003c20 <SYSVIEW_AddTask+0xb8>
    return;
 8003c1e:	bf00      	nop

}
 8003c20:	3710      	adds	r7, #16
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	bf00      	nop
 8003c28:	08006620 	.word	0x08006620
 8003c2c:	20012e5c 	.word	0x20012e5c
 8003c30:	08006628 	.word	0x08006628
 8003c34:	20012dbc 	.word	0x20012dbc

08003c38 <SYSVIEW_DeleteTask>:
*       SYSVIEW_DeleteTask()
*
*  Function description
*    Delete a task from the internal list.
*/
void SYSVIEW_DeleteTask(U32 xHandle) {
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b084      	sub	sp, #16
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  unsigned n;
  
  if (_NumTasks == 0) {
 8003c40:	4b59      	ldr	r3, [pc, #356]	; (8003da8 <SYSVIEW_DeleteTask+0x170>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	f000 80ab 	beq.w	8003da0 <SYSVIEW_DeleteTask+0x168>
    return; // Early out
  }  
  for (n = 0; n < _NumTasks; n++) {
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	60fb      	str	r3, [r7, #12]
 8003c4e:	e00d      	b.n	8003c6c <SYSVIEW_DeleteTask+0x34>
    if (_aTasks[n].xHandle == xHandle) {
 8003c50:	4956      	ldr	r1, [pc, #344]	; (8003dac <SYSVIEW_DeleteTask+0x174>)
 8003c52:	68fa      	ldr	r2, [r7, #12]
 8003c54:	4613      	mov	r3, r2
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	4413      	add	r3, r2
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	440b      	add	r3, r1
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d008      	beq.n	8003c78 <SYSVIEW_DeleteTask+0x40>
  for (n = 0; n < _NumTasks; n++) {
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	3301      	adds	r3, #1
 8003c6a:	60fb      	str	r3, [r7, #12]
 8003c6c:	4b4e      	ldr	r3, [pc, #312]	; (8003da8 <SYSVIEW_DeleteTask+0x170>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	68fa      	ldr	r2, [r7, #12]
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d3ec      	bcc.n	8003c50 <SYSVIEW_DeleteTask+0x18>
 8003c76:	e000      	b.n	8003c7a <SYSVIEW_DeleteTask+0x42>
      break;
 8003c78:	bf00      	nop
    }
  }
  if (n == (_NumTasks - 1)) {  
 8003c7a:	4b4b      	ldr	r3, [pc, #300]	; (8003da8 <SYSVIEW_DeleteTask+0x170>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	3b01      	subs	r3, #1
 8003c80:	68fa      	ldr	r2, [r7, #12]
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d111      	bne.n	8003caa <SYSVIEW_DeleteTask+0x72>
    //
    // Task is last item in list.
    // Simply zero the item and decrement number of tasks.
    //
    memset(&_aTasks[n], 0, sizeof(_aTasks[n]));
 8003c86:	68fa      	ldr	r2, [r7, #12]
 8003c88:	4613      	mov	r3, r2
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	4413      	add	r3, r2
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	4a46      	ldr	r2, [pc, #280]	; (8003dac <SYSVIEW_DeleteTask+0x174>)
 8003c92:	4413      	add	r3, r2
 8003c94:	2214      	movs	r2, #20
 8003c96:	2100      	movs	r1, #0
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f002 fc2d 	bl	80064f8 <memset>
    _NumTasks--;
 8003c9e:	4b42      	ldr	r3, [pc, #264]	; (8003da8 <SYSVIEW_DeleteTask+0x170>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	3b01      	subs	r3, #1
 8003ca4:	4a40      	ldr	r2, [pc, #256]	; (8003da8 <SYSVIEW_DeleteTask+0x170>)
 8003ca6:	6013      	str	r3, [r2, #0]
 8003ca8:	e07b      	b.n	8003da2 <SYSVIEW_DeleteTask+0x16a>
  } else if (n < _NumTasks) {
 8003caa:	4b3f      	ldr	r3, [pc, #252]	; (8003da8 <SYSVIEW_DeleteTask+0x170>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	68fa      	ldr	r2, [r7, #12]
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d276      	bcs.n	8003da2 <SYSVIEW_DeleteTask+0x16a>
    //
    // Task is in the middle of the list.
    // Move last item to current position and decrement number of tasks.
    // Order of tasks does not really matter, so no need to move all following items.
    //
    _aTasks[n].xHandle             = _aTasks[_NumTasks - 1].xHandle;
 8003cb4:	4b3c      	ldr	r3, [pc, #240]	; (8003da8 <SYSVIEW_DeleteTask+0x170>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	1e5a      	subs	r2, r3, #1
 8003cba:	493c      	ldr	r1, [pc, #240]	; (8003dac <SYSVIEW_DeleteTask+0x174>)
 8003cbc:	4613      	mov	r3, r2
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	4413      	add	r3, r2
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	440b      	add	r3, r1
 8003cc6:	6819      	ldr	r1, [r3, #0]
 8003cc8:	4838      	ldr	r0, [pc, #224]	; (8003dac <SYSVIEW_DeleteTask+0x174>)
 8003cca:	68fa      	ldr	r2, [r7, #12]
 8003ccc:	4613      	mov	r3, r2
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	4413      	add	r3, r2
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	4403      	add	r3, r0
 8003cd6:	6019      	str	r1, [r3, #0]
    _aTasks[n].pcTaskName          = _aTasks[_NumTasks - 1].pcTaskName;
 8003cd8:	4b33      	ldr	r3, [pc, #204]	; (8003da8 <SYSVIEW_DeleteTask+0x170>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	1e5a      	subs	r2, r3, #1
 8003cde:	4933      	ldr	r1, [pc, #204]	; (8003dac <SYSVIEW_DeleteTask+0x174>)
 8003ce0:	4613      	mov	r3, r2
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	4413      	add	r3, r2
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	440b      	add	r3, r1
 8003cea:	3304      	adds	r3, #4
 8003cec:	6819      	ldr	r1, [r3, #0]
 8003cee:	482f      	ldr	r0, [pc, #188]	; (8003dac <SYSVIEW_DeleteTask+0x174>)
 8003cf0:	68fa      	ldr	r2, [r7, #12]
 8003cf2:	4613      	mov	r3, r2
 8003cf4:	009b      	lsls	r3, r3, #2
 8003cf6:	4413      	add	r3, r2
 8003cf8:	009b      	lsls	r3, r3, #2
 8003cfa:	4403      	add	r3, r0
 8003cfc:	3304      	adds	r3, #4
 8003cfe:	6019      	str	r1, [r3, #0]
    _aTasks[n].uxCurrentPriority   = _aTasks[_NumTasks - 1].uxCurrentPriority;
 8003d00:	4b29      	ldr	r3, [pc, #164]	; (8003da8 <SYSVIEW_DeleteTask+0x170>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	1e5a      	subs	r2, r3, #1
 8003d06:	4929      	ldr	r1, [pc, #164]	; (8003dac <SYSVIEW_DeleteTask+0x174>)
 8003d08:	4613      	mov	r3, r2
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	4413      	add	r3, r2
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	440b      	add	r3, r1
 8003d12:	3308      	adds	r3, #8
 8003d14:	6819      	ldr	r1, [r3, #0]
 8003d16:	4825      	ldr	r0, [pc, #148]	; (8003dac <SYSVIEW_DeleteTask+0x174>)
 8003d18:	68fa      	ldr	r2, [r7, #12]
 8003d1a:	4613      	mov	r3, r2
 8003d1c:	009b      	lsls	r3, r3, #2
 8003d1e:	4413      	add	r3, r2
 8003d20:	009b      	lsls	r3, r3, #2
 8003d22:	4403      	add	r3, r0
 8003d24:	3308      	adds	r3, #8
 8003d26:	6019      	str	r1, [r3, #0]
    _aTasks[n].pxStack             = _aTasks[_NumTasks - 1].pxStack;
 8003d28:	4b1f      	ldr	r3, [pc, #124]	; (8003da8 <SYSVIEW_DeleteTask+0x170>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	1e5a      	subs	r2, r3, #1
 8003d2e:	491f      	ldr	r1, [pc, #124]	; (8003dac <SYSVIEW_DeleteTask+0x174>)
 8003d30:	4613      	mov	r3, r2
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	4413      	add	r3, r2
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	440b      	add	r3, r1
 8003d3a:	330c      	adds	r3, #12
 8003d3c:	6819      	ldr	r1, [r3, #0]
 8003d3e:	481b      	ldr	r0, [pc, #108]	; (8003dac <SYSVIEW_DeleteTask+0x174>)
 8003d40:	68fa      	ldr	r2, [r7, #12]
 8003d42:	4613      	mov	r3, r2
 8003d44:	009b      	lsls	r3, r3, #2
 8003d46:	4413      	add	r3, r2
 8003d48:	009b      	lsls	r3, r3, #2
 8003d4a:	4403      	add	r3, r0
 8003d4c:	330c      	adds	r3, #12
 8003d4e:	6019      	str	r1, [r3, #0]
    _aTasks[n].uStackHighWaterMark = _aTasks[_NumTasks - 1].uStackHighWaterMark;
 8003d50:	4b15      	ldr	r3, [pc, #84]	; (8003da8 <SYSVIEW_DeleteTask+0x170>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	1e5a      	subs	r2, r3, #1
 8003d56:	4915      	ldr	r1, [pc, #84]	; (8003dac <SYSVIEW_DeleteTask+0x174>)
 8003d58:	4613      	mov	r3, r2
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	4413      	add	r3, r2
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	440b      	add	r3, r1
 8003d62:	3310      	adds	r3, #16
 8003d64:	6819      	ldr	r1, [r3, #0]
 8003d66:	4811      	ldr	r0, [pc, #68]	; (8003dac <SYSVIEW_DeleteTask+0x174>)
 8003d68:	68fa      	ldr	r2, [r7, #12]
 8003d6a:	4613      	mov	r3, r2
 8003d6c:	009b      	lsls	r3, r3, #2
 8003d6e:	4413      	add	r3, r2
 8003d70:	009b      	lsls	r3, r3, #2
 8003d72:	4403      	add	r3, r0
 8003d74:	3310      	adds	r3, #16
 8003d76:	6019      	str	r1, [r3, #0]
    memset(&_aTasks[_NumTasks - 1], 0, sizeof(_aTasks[_NumTasks - 1]));
 8003d78:	4b0b      	ldr	r3, [pc, #44]	; (8003da8 <SYSVIEW_DeleteTask+0x170>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	1e5a      	subs	r2, r3, #1
 8003d7e:	4613      	mov	r3, r2
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	4413      	add	r3, r2
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	4a09      	ldr	r2, [pc, #36]	; (8003dac <SYSVIEW_DeleteTask+0x174>)
 8003d88:	4413      	add	r3, r2
 8003d8a:	2214      	movs	r2, #20
 8003d8c:	2100      	movs	r1, #0
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f002 fbb2 	bl	80064f8 <memset>
    _NumTasks--;
 8003d94:	4b04      	ldr	r3, [pc, #16]	; (8003da8 <SYSVIEW_DeleteTask+0x170>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	3b01      	subs	r3, #1
 8003d9a:	4a03      	ldr	r2, [pc, #12]	; (8003da8 <SYSVIEW_DeleteTask+0x170>)
 8003d9c:	6013      	str	r3, [r2, #0]
 8003d9e:	e000      	b.n	8003da2 <SYSVIEW_DeleteTask+0x16a>
    return; // Early out
 8003da0:	bf00      	nop
  }
}
 8003da2:	3710      	adds	r7, #16
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}
 8003da8:	20012e5c 	.word	0x20012e5c
 8003dac:	20012dbc 	.word	0x20012dbc

08003db0 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b08a      	sub	sp, #40	; 0x28
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	60f8      	str	r0, [r7, #12]
 8003db8:	60b9      	str	r1, [r7, #8]
 8003dba:	607a      	str	r2, [r7, #4]
 8003dbc:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8003dbe:	f107 0314 	add.w	r3, r7, #20
 8003dc2:	2214      	movs	r2, #20
 8003dc4:	2100      	movs	r1, #0
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f002 fb96 	bl	80064f8 <memset>
  TaskInfo.TaskID     = TaskID;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8003ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dde:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8003de0:	f107 0314 	add.w	r3, r7, #20
 8003de4:	4618      	mov	r0, r3
 8003de6:	f001 feb1 	bl	8005b4c <SEGGER_SYSVIEW_SendTaskInfo>
}
 8003dea:	bf00      	nop
 8003dec:	3728      	adds	r7, #40	; 0x28
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
	...

08003df4 <__NVIC_EnableIRQ>:
{
 8003df4:	b480      	push	{r7}
 8003df6:	b083      	sub	sp, #12
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	db0b      	blt.n	8003e1e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e06:	79fb      	ldrb	r3, [r7, #7]
 8003e08:	f003 021f 	and.w	r2, r3, #31
 8003e0c:	4907      	ldr	r1, [pc, #28]	; (8003e2c <__NVIC_EnableIRQ+0x38>)
 8003e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e12:	095b      	lsrs	r3, r3, #5
 8003e14:	2001      	movs	r0, #1
 8003e16:	fa00 f202 	lsl.w	r2, r0, r2
 8003e1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003e1e:	bf00      	nop
 8003e20:	370c      	adds	r7, #12
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr
 8003e2a:	bf00      	nop
 8003e2c:	e000e100 	.word	0xe000e100

08003e30 <__NVIC_SetPriority>:
{
 8003e30:	b480      	push	{r7}
 8003e32:	b083      	sub	sp, #12
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	4603      	mov	r3, r0
 8003e38:	6039      	str	r1, [r7, #0]
 8003e3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	db0a      	blt.n	8003e5a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	b2da      	uxtb	r2, r3
 8003e48:	490c      	ldr	r1, [pc, #48]	; (8003e7c <__NVIC_SetPriority+0x4c>)
 8003e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e4e:	0112      	lsls	r2, r2, #4
 8003e50:	b2d2      	uxtb	r2, r2
 8003e52:	440b      	add	r3, r1
 8003e54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003e58:	e00a      	b.n	8003e70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	b2da      	uxtb	r2, r3
 8003e5e:	4908      	ldr	r1, [pc, #32]	; (8003e80 <__NVIC_SetPriority+0x50>)
 8003e60:	79fb      	ldrb	r3, [r7, #7]
 8003e62:	f003 030f 	and.w	r3, r3, #15
 8003e66:	3b04      	subs	r3, #4
 8003e68:	0112      	lsls	r2, r2, #4
 8003e6a:	b2d2      	uxtb	r2, r2
 8003e6c:	440b      	add	r3, r1
 8003e6e:	761a      	strb	r2, [r3, #24]
}
 8003e70:	bf00      	nop
 8003e72:	370c      	adds	r7, #12
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr
 8003e7c:	e000e100 	.word	0xe000e100
 8003e80:	e000ed00 	.word	0xe000ed00

08003e84 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b082      	sub	sp, #8
 8003e88:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 8003e8a:	f002 fac5 	bl	8006418 <SEGGER_SYSVIEW_IsStarted>
 8003e8e:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d101      	bne.n	8003e9a <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 8003e96:	f001 fcdd 	bl	8005854 <SEGGER_SYSVIEW_Start>
  }
}
 8003e9a:	bf00      	nop
 8003e9c:	3708      	adds	r7, #8
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
	...

08003ea4 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b082      	sub	sp, #8
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	4603      	mov	r3, r0
 8003eac:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8003eae:	4b0c      	ldr	r3, [pc, #48]	; (8003ee0 <_cbOnUARTRx+0x3c>)
 8003eb0:	781b      	ldrb	r3, [r3, #0]
 8003eb2:	2b03      	cmp	r3, #3
 8003eb4:	d806      	bhi.n	8003ec4 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 8003eb6:	4b0a      	ldr	r3, [pc, #40]	; (8003ee0 <_cbOnUARTRx+0x3c>)
 8003eb8:	781b      	ldrb	r3, [r3, #0]
 8003eba:	3301      	adds	r3, #1
 8003ebc:	b2da      	uxtb	r2, r3
 8003ebe:	4b08      	ldr	r3, [pc, #32]	; (8003ee0 <_cbOnUARTRx+0x3c>)
 8003ec0:	701a      	strb	r2, [r3, #0]
    goto Done;
 8003ec2:	e009      	b.n	8003ed8 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8003ec4:	f7ff ffde 	bl	8003e84 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8003ec8:	4b05      	ldr	r3, [pc, #20]	; (8003ee0 <_cbOnUARTRx+0x3c>)
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	4618      	mov	r0, r3
 8003ece:	1dfb      	adds	r3, r7, #7
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	4619      	mov	r1, r3
 8003ed4:	f000 fb9a 	bl	800460c <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8003ed8:	bf00      	nop
}
 8003eda:	3708      	adds	r7, #8
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}
 8003ee0:	20000014 	.word	0x20000014

08003ee4 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b084      	sub	sp, #16
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8003eec:	4b14      	ldr	r3, [pc, #80]	; (8003f40 <_cbOnUARTTx+0x5c>)
 8003eee:	785b      	ldrb	r3, [r3, #1]
 8003ef0:	2b03      	cmp	r3, #3
 8003ef2:	d80f      	bhi.n	8003f14 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8003ef4:	4b12      	ldr	r3, [pc, #72]	; (8003f40 <_cbOnUARTTx+0x5c>)
 8003ef6:	785b      	ldrb	r3, [r3, #1]
 8003ef8:	461a      	mov	r2, r3
 8003efa:	4b12      	ldr	r3, [pc, #72]	; (8003f44 <_cbOnUARTTx+0x60>)
 8003efc:	5c9a      	ldrb	r2, [r3, r2]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 8003f02:	4b0f      	ldr	r3, [pc, #60]	; (8003f40 <_cbOnUARTTx+0x5c>)
 8003f04:	785b      	ldrb	r3, [r3, #1]
 8003f06:	3301      	adds	r3, #1
 8003f08:	b2da      	uxtb	r2, r3
 8003f0a:	4b0d      	ldr	r3, [pc, #52]	; (8003f40 <_cbOnUARTTx+0x5c>)
 8003f0c:	705a      	strb	r2, [r3, #1]
    r = 1;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	60fb      	str	r3, [r7, #12]
    goto Done;
 8003f12:	e00f      	b.n	8003f34 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8003f14:	4b0a      	ldr	r3, [pc, #40]	; (8003f40 <_cbOnUARTTx+0x5c>)
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	2201      	movs	r2, #1
 8003f1a:	6879      	ldr	r1, [r7, #4]
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f000 fa19 	bl	8004354 <SEGGER_RTT_ReadUpBufferNoLock>
 8003f22:	4603      	mov	r3, r0
 8003f24:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	da02      	bge.n	8003f32 <_cbOnUARTTx+0x4e>
    r = 0;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	60fb      	str	r3, [r7, #12]
 8003f30:	e000      	b.n	8003f34 <_cbOnUARTTx+0x50>
  }
Done:
 8003f32:	bf00      	nop
  return r;
 8003f34:	68fb      	ldr	r3, [r7, #12]
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3710      	adds	r7, #16
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}
 8003f3e:	bf00      	nop
 8003f40:	20000014 	.word	0x20000014
 8003f44:	080066b8 	.word	0x080066b8

08003f48 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b082      	sub	sp, #8
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8003f50:	4a04      	ldr	r2, [pc, #16]	; (8003f64 <SEGGER_UART_init+0x1c>)
 8003f52:	4905      	ldr	r1, [pc, #20]	; (8003f68 <SEGGER_UART_init+0x20>)
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f000 f863 	bl	8004020 <HIF_UART_Init>
}
 8003f5a:	bf00      	nop
 8003f5c:	3708      	adds	r7, #8
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	bf00      	nop
 8003f64:	08003ea5 	.word	0x08003ea5
 8003f68:	08003ee5 	.word	0x08003ee5

08003f6c <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b084      	sub	sp, #16
 8003f70:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8003f72:	4b1e      	ldr	r3, [pc, #120]	; (8003fec <USART2_IRQHandler+0x80>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	f003 0320 	and.w	r3, r3, #32
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d011      	beq.n	8003fa6 <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8003f82:	4b1b      	ldr	r3, [pc, #108]	; (8003ff0 <USART2_IRQHandler+0x84>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	b2db      	uxtb	r3, r3
 8003f88:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	f003 030b 	and.w	r3, r3, #11
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d108      	bne.n	8003fa6 <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8003f94:	4b17      	ldr	r3, [pc, #92]	; (8003ff4 <USART2_IRQHandler+0x88>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d004      	beq.n	8003fa6 <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8003f9c:	4b15      	ldr	r3, [pc, #84]	; (8003ff4 <USART2_IRQHandler+0x88>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	79fa      	ldrb	r2, [r7, #7]
 8003fa2:	4610      	mov	r0, r2
 8003fa4:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d01a      	beq.n	8003fe6 <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8003fb0:	4b11      	ldr	r3, [pc, #68]	; (8003ff8 <USART2_IRQHandler+0x8c>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d015      	beq.n	8003fe4 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8003fb8:	4b0f      	ldr	r3, [pc, #60]	; (8003ff8 <USART2_IRQHandler+0x8c>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	1dfa      	adds	r2, r7, #7
 8003fbe:	4610      	mov	r0, r2
 8003fc0:	4798      	blx	r3
 8003fc2:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d106      	bne.n	8003fd8 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8003fca:	4b0c      	ldr	r3, [pc, #48]	; (8003ffc <USART2_IRQHandler+0x90>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a0b      	ldr	r2, [pc, #44]	; (8003ffc <USART2_IRQHandler+0x90>)
 8003fd0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003fd4:	6013      	str	r3, [r2, #0]
 8003fd6:	e006      	b.n	8003fe6 <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8003fd8:	4b04      	ldr	r3, [pc, #16]	; (8003fec <USART2_IRQHandler+0x80>)
 8003fda:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8003fdc:	79fa      	ldrb	r2, [r7, #7]
 8003fde:	4b04      	ldr	r3, [pc, #16]	; (8003ff0 <USART2_IRQHandler+0x84>)
 8003fe0:	601a      	str	r2, [r3, #0]
 8003fe2:	e000      	b.n	8003fe6 <USART2_IRQHandler+0x7a>
      return;
 8003fe4:	bf00      	nop
    }
  }
}
 8003fe6:	3710      	adds	r7, #16
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}
 8003fec:	40004400 	.word	0x40004400
 8003ff0:	40004404 	.word	0x40004404
 8003ff4:	20012e60 	.word	0x20012e60
 8003ff8:	20012e64 	.word	0x20012e64
 8003ffc:	4000440c 	.word	0x4000440c

08004000 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8004000:	b480      	push	{r7}
 8004002:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8004004:	4b05      	ldr	r3, [pc, #20]	; (800401c <HIF_UART_EnableTXEInterrupt+0x1c>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a04      	ldr	r2, [pc, #16]	; (800401c <HIF_UART_EnableTXEInterrupt+0x1c>)
 800400a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800400e:	6013      	str	r3, [r2, #0]
}
 8004010:	bf00      	nop
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr
 800401a:	bf00      	nop
 800401c:	4000440c 	.word	0x4000440c

08004020 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8004020:	b580      	push	{r7, lr}
 8004022:	b086      	sub	sp, #24
 8004024:	af00      	add	r7, sp, #0
 8004026:	60f8      	str	r0, [r7, #12]
 8004028:	60b9      	str	r1, [r7, #8]
 800402a:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 800402c:	4b2e      	ldr	r3, [pc, #184]	; (80040e8 <HIF_UART_Init+0xc8>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a2d      	ldr	r2, [pc, #180]	; (80040e8 <HIF_UART_Init+0xc8>)
 8004032:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004036:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8004038:	4b2c      	ldr	r3, [pc, #176]	; (80040ec <HIF_UART_Init+0xcc>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a2b      	ldr	r2, [pc, #172]	; (80040ec <HIF_UART_Init+0xcc>)
 800403e:	f043 0301 	orr.w	r3, r3, #1
 8004042:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 8004044:	4b2a      	ldr	r3, [pc, #168]	; (80040f0 <HIF_UART_Init+0xd0>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004050:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8004058:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 800405a:	4a25      	ldr	r2, [pc, #148]	; (80040f0 <HIF_UART_Init+0xd0>)
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8004060:	4b24      	ldr	r3, [pc, #144]	; (80040f4 <HIF_UART_Init+0xd4>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800406c:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8004074:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 8004076:	4a1f      	ldr	r2, [pc, #124]	; (80040f4 <HIF_UART_Init+0xd4>)
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 800407c:	4b1e      	ldr	r3, [pc, #120]	; (80040f8 <HIF_UART_Init+0xd8>)
 800407e:	f24a 022c 	movw	r2, #41004	; 0xa02c
 8004082:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8004084:	4b1d      	ldr	r3, [pc, #116]	; (80040fc <HIF_UART_Init+0xdc>)
 8004086:	2200      	movs	r2, #0
 8004088:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 800408a:	4b1d      	ldr	r3, [pc, #116]	; (8004100 <HIF_UART_Init+0xe0>)
 800408c:	2280      	movs	r2, #128	; 0x80
 800408e:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	00db      	lsls	r3, r3, #3
 8004094:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 8004096:	4a1b      	ldr	r2, [pc, #108]	; (8004104 <HIF_UART_Init+0xe4>)
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	fbb2 f3f3 	udiv	r3, r2, r3
 800409e:	3301      	adds	r3, #1
 80040a0:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	085b      	lsrs	r3, r3, #1
 80040a6:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040ae:	d302      	bcc.n	80040b6 <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 80040b0:	f640 73ff 	movw	r3, #4095	; 0xfff
 80040b4:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d004      	beq.n	80040c6 <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	011b      	lsls	r3, r3, #4
 80040c0:	4a11      	ldr	r2, [pc, #68]	; (8004108 <HIF_UART_Init+0xe8>)
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 80040c6:	4a11      	ldr	r2, [pc, #68]	; (800410c <HIF_UART_Init+0xec>)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 80040cc:	4a10      	ldr	r2, [pc, #64]	; (8004110 <HIF_UART_Init+0xf0>)
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 80040d2:	2106      	movs	r1, #6
 80040d4:	2026      	movs	r0, #38	; 0x26
 80040d6:	f7ff feab 	bl	8003e30 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 80040da:	2026      	movs	r0, #38	; 0x26
 80040dc:	f7ff fe8a 	bl	8003df4 <__NVIC_EnableIRQ>
}
 80040e0:	bf00      	nop
 80040e2:	3718      	adds	r7, #24
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	40023840 	.word	0x40023840
 80040ec:	40023830 	.word	0x40023830
 80040f0:	40020020 	.word	0x40020020
 80040f4:	40020000 	.word	0x40020000
 80040f8:	4000440c 	.word	0x4000440c
 80040fc:	40004410 	.word	0x40004410
 8004100:	40004414 	.word	0x40004414
 8004104:	0501bd00 	.word	0x0501bd00
 8004108:	40004408 	.word	0x40004408
 800410c:	20012e60 	.word	0x20012e60
 8004110:	20012e64 	.word	0x20012e64

08004114 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8004114:	b480      	push	{r7}
 8004116:	b083      	sub	sp, #12
 8004118:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800411a:	4b24      	ldr	r3, [pc, #144]	; (80041ac <_DoInit+0x98>)
 800411c:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2203      	movs	r2, #3
 8004122:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2203      	movs	r2, #3
 8004128:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	4a20      	ldr	r2, [pc, #128]	; (80041b0 <_DoInit+0x9c>)
 800412e:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	4a20      	ldr	r2, [pc, #128]	; (80041b4 <_DoInit+0xa0>)
 8004134:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800413c:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2200      	movs	r2, #0
 8004148:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	4a17      	ldr	r2, [pc, #92]	; (80041b0 <_DoInit+0x9c>)
 8004154:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a17      	ldr	r2, [pc, #92]	; (80041b8 <_DoInit+0xa4>)
 800415a:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2210      	movs	r2, #16
 8004160:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2200      	movs	r2, #0
 8004172:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	3307      	adds	r3, #7
 8004178:	4a10      	ldr	r2, [pc, #64]	; (80041bc <_DoInit+0xa8>)
 800417a:	6810      	ldr	r0, [r2, #0]
 800417c:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800417e:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4a0e      	ldr	r2, [pc, #56]	; (80041c0 <_DoInit+0xac>)
 8004186:	6810      	ldr	r0, [r2, #0]
 8004188:	6018      	str	r0, [r3, #0]
 800418a:	8891      	ldrh	r1, [r2, #4]
 800418c:	7992      	ldrb	r2, [r2, #6]
 800418e:	8099      	strh	r1, [r3, #4]
 8004190:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004192:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2220      	movs	r2, #32
 800419a:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800419c:	f3bf 8f5f 	dmb	sy
}
 80041a0:	bf00      	nop
 80041a2:	370c      	adds	r7, #12
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr
 80041ac:	20012e68 	.word	0x20012e68
 80041b0:	08006678 	.word	0x08006678
 80041b4:	20012f10 	.word	0x20012f10
 80041b8:	20013310 	.word	0x20013310
 80041bc:	08006684 	.word	0x08006684
 80041c0:	08006688 	.word	0x08006688

080041c4 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b08a      	sub	sp, #40	; 0x28
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	60f8      	str	r0, [r7, #12]
 80041cc:	60b9      	str	r1, [r7, #8]
 80041ce:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 80041d0:	2300      	movs	r3, #0
 80041d2:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	68db      	ldr	r3, [r3, #12]
 80041d8:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	691b      	ldr	r3, [r3, #16]
 80041de:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 80041e0:	69ba      	ldr	r2, [r7, #24]
 80041e2:	69fb      	ldr	r3, [r7, #28]
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d905      	bls.n	80041f4 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 80041e8:	69ba      	ldr	r2, [r7, #24]
 80041ea:	69fb      	ldr	r3, [r7, #28]
 80041ec:	1ad3      	subs	r3, r2, r3
 80041ee:	3b01      	subs	r3, #1
 80041f0:	627b      	str	r3, [r7, #36]	; 0x24
 80041f2:	e007      	b.n	8004204 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	689a      	ldr	r2, [r3, #8]
 80041f8:	69b9      	ldr	r1, [r7, #24]
 80041fa:	69fb      	ldr	r3, [r7, #28]
 80041fc:	1acb      	subs	r3, r1, r3
 80041fe:	4413      	add	r3, r2
 8004200:	3b01      	subs	r3, #1
 8004202:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	689a      	ldr	r2, [r3, #8]
 8004208:	69fb      	ldr	r3, [r7, #28]
 800420a:	1ad3      	subs	r3, r2, r3
 800420c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800420e:	4293      	cmp	r3, r2
 8004210:	bf28      	it	cs
 8004212:	4613      	movcs	r3, r2
 8004214:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8004216:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	4293      	cmp	r3, r2
 800421c:	bf28      	it	cs
 800421e:	4613      	movcs	r3, r2
 8004220:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	685a      	ldr	r2, [r3, #4]
 8004226:	69fb      	ldr	r3, [r7, #28]
 8004228:	4413      	add	r3, r2
 800422a:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 800422c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800422e:	68b9      	ldr	r1, [r7, #8]
 8004230:	6978      	ldr	r0, [r7, #20]
 8004232:	f002 f953 	bl	80064dc <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8004236:	6a3a      	ldr	r2, [r7, #32]
 8004238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800423a:	4413      	add	r3, r2
 800423c:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 800423e:	68ba      	ldr	r2, [r7, #8]
 8004240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004242:	4413      	add	r3, r2
 8004244:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800424a:	1ad3      	subs	r3, r2, r3
 800424c:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 800424e:	69fa      	ldr	r2, [r7, #28]
 8004250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004252:	4413      	add	r3, r2
 8004254:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	69fa      	ldr	r2, [r7, #28]
 800425c:	429a      	cmp	r2, r3
 800425e:	d101      	bne.n	8004264 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8004260:	2300      	movs	r3, #0
 8004262:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004264:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	69fa      	ldr	r2, [r7, #28]
 800426c:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d1b2      	bne.n	80041da <_WriteBlocking+0x16>
  return NumBytesWritten;
 8004274:	6a3b      	ldr	r3, [r7, #32]
}
 8004276:	4618      	mov	r0, r3
 8004278:	3728      	adds	r7, #40	; 0x28
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}

0800427e <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 800427e:	b580      	push	{r7, lr}
 8004280:	b088      	sub	sp, #32
 8004282:	af00      	add	r7, sp, #0
 8004284:	60f8      	str	r0, [r7, #12]
 8004286:	60b9      	str	r1, [r7, #8]
 8004288:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	68db      	ldr	r3, [r3, #12]
 800428e:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	689a      	ldr	r2, [r3, #8]
 8004294:	69fb      	ldr	r3, [r7, #28]
 8004296:	1ad3      	subs	r3, r2, r3
 8004298:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 800429a:	69ba      	ldr	r2, [r7, #24]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	429a      	cmp	r2, r3
 80042a0:	d911      	bls.n	80042c6 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	685a      	ldr	r2, [r3, #4]
 80042a6:	69fb      	ldr	r3, [r7, #28]
 80042a8:	4413      	add	r3, r2
 80042aa:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 80042ac:	687a      	ldr	r2, [r7, #4]
 80042ae:	68b9      	ldr	r1, [r7, #8]
 80042b0:	6938      	ldr	r0, [r7, #16]
 80042b2:	f002 f913 	bl	80064dc <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80042b6:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 80042ba:	69fa      	ldr	r2, [r7, #28]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	441a      	add	r2, r3
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 80042c4:	e01f      	b.n	8004306 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 80042c6:	69bb      	ldr	r3, [r7, #24]
 80042c8:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	685a      	ldr	r2, [r3, #4]
 80042ce:	69fb      	ldr	r3, [r7, #28]
 80042d0:	4413      	add	r3, r2
 80042d2:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 80042d4:	697a      	ldr	r2, [r7, #20]
 80042d6:	68b9      	ldr	r1, [r7, #8]
 80042d8:	6938      	ldr	r0, [r7, #16]
 80042da:	f002 f8ff 	bl	80064dc <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	69bb      	ldr	r3, [r7, #24]
 80042e2:	1ad3      	subs	r3, r2, r3
 80042e4:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 80042ec:	68ba      	ldr	r2, [r7, #8]
 80042ee:	69bb      	ldr	r3, [r7, #24]
 80042f0:	4413      	add	r3, r2
 80042f2:	697a      	ldr	r2, [r7, #20]
 80042f4:	4619      	mov	r1, r3
 80042f6:	6938      	ldr	r0, [r7, #16]
 80042f8:	f002 f8f0 	bl	80064dc <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80042fc:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	697a      	ldr	r2, [r7, #20]
 8004304:	60da      	str	r2, [r3, #12]
}
 8004306:	bf00      	nop
 8004308:	3720      	adds	r7, #32
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}

0800430e <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 800430e:	b480      	push	{r7}
 8004310:	b087      	sub	sp, #28
 8004312:	af00      	add	r7, sp, #0
 8004314:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	691b      	ldr	r3, [r3, #16]
 800431a:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8004322:	693a      	ldr	r2, [r7, #16]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	429a      	cmp	r2, r3
 8004328:	d808      	bhi.n	800433c <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	689a      	ldr	r2, [r3, #8]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	1ad2      	subs	r2, r2, r3
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	4413      	add	r3, r2
 8004336:	3b01      	subs	r3, #1
 8004338:	617b      	str	r3, [r7, #20]
 800433a:	e004      	b.n	8004346 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 800433c:	693a      	ldr	r2, [r7, #16]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	3b01      	subs	r3, #1
 8004344:	617b      	str	r3, [r7, #20]
  }
  return r;
 8004346:	697b      	ldr	r3, [r7, #20]
}
 8004348:	4618      	mov	r0, r3
 800434a:	371c      	adds	r7, #28
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr

08004354 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004354:	b580      	push	{r7, lr}
 8004356:	b08c      	sub	sp, #48	; 0x30
 8004358:	af00      	add	r7, sp, #0
 800435a:	60f8      	str	r0, [r7, #12]
 800435c:	60b9      	str	r1, [r7, #8]
 800435e:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8004360:	4b3e      	ldr	r3, [pc, #248]	; (800445c <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8004362:	623b      	str	r3, [r7, #32]
 8004364:	6a3b      	ldr	r3, [r7, #32]
 8004366:	781b      	ldrb	r3, [r3, #0]
 8004368:	b2db      	uxtb	r3, r3
 800436a:	2b00      	cmp	r3, #0
 800436c:	d101      	bne.n	8004372 <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 800436e:	f7ff fed1 	bl	8004114 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	1c5a      	adds	r2, r3, #1
 8004376:	4613      	mov	r3, r2
 8004378:	005b      	lsls	r3, r3, #1
 800437a:	4413      	add	r3, r2
 800437c:	00db      	lsls	r3, r3, #3
 800437e:	4a37      	ldr	r2, [pc, #220]	; (800445c <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8004380:	4413      	add	r3, r2
 8004382:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8004388:	69fb      	ldr	r3, [r7, #28]
 800438a:	691b      	ldr	r3, [r3, #16]
 800438c:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800438e:	69fb      	ldr	r3, [r7, #28]
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004394:	2300      	movs	r3, #0
 8004396:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004398:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800439a:	69bb      	ldr	r3, [r7, #24]
 800439c:	429a      	cmp	r2, r3
 800439e:	d92b      	bls.n	80043f8 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	689a      	ldr	r2, [r3, #8]
 80043a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043a6:	1ad3      	subs	r3, r2, r3
 80043a8:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80043aa:	697a      	ldr	r2, [r7, #20]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	4293      	cmp	r3, r2
 80043b0:	bf28      	it	cs
 80043b2:	4613      	movcs	r3, r2
 80043b4:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80043b6:	69fb      	ldr	r3, [r7, #28]
 80043b8:	685a      	ldr	r2, [r3, #4]
 80043ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043bc:	4413      	add	r3, r2
 80043be:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80043c0:	697a      	ldr	r2, [r7, #20]
 80043c2:	6939      	ldr	r1, [r7, #16]
 80043c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80043c6:	f002 f889 	bl	80064dc <memcpy>
    NumBytesRead += NumBytesRem;
 80043ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	4413      	add	r3, r2
 80043d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80043d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	4413      	add	r3, r2
 80043d8:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80043da:	687a      	ldr	r2, [r7, #4]
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	1ad3      	subs	r3, r2, r3
 80043e0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80043e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	4413      	add	r3, r2
 80043e8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80043ea:	69fb      	ldr	r3, [r7, #28]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d101      	bne.n	80043f8 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 80043f4:	2300      	movs	r3, #0
 80043f6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80043f8:	69ba      	ldr	r2, [r7, #24]
 80043fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004400:	697a      	ldr	r2, [r7, #20]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	4293      	cmp	r3, r2
 8004406:	bf28      	it	cs
 8004408:	4613      	movcs	r3, r2
 800440a:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d019      	beq.n	8004446 <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004412:	69fb      	ldr	r3, [r7, #28]
 8004414:	685a      	ldr	r2, [r3, #4]
 8004416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004418:	4413      	add	r3, r2
 800441a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800441c:	697a      	ldr	r2, [r7, #20]
 800441e:	6939      	ldr	r1, [r7, #16]
 8004420:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004422:	f002 f85b 	bl	80064dc <memcpy>
    NumBytesRead += NumBytesRem;
 8004426:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	4413      	add	r3, r2
 800442c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800442e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	4413      	add	r3, r2
 8004434:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004436:	687a      	ldr	r2, [r7, #4]
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	1ad3      	subs	r3, r2, r3
 800443c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800443e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	4413      	add	r3, r2
 8004444:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8004446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004448:	2b00      	cmp	r3, #0
 800444a:	d002      	beq.n	8004452 <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 800444c:	69fb      	ldr	r3, [r7, #28]
 800444e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004450:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004454:	4618      	mov	r0, r3
 8004456:	3730      	adds	r7, #48	; 0x30
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}
 800445c:	20012e68 	.word	0x20012e68

08004460 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004460:	b580      	push	{r7, lr}
 8004462:	b08c      	sub	sp, #48	; 0x30
 8004464:	af00      	add	r7, sp, #0
 8004466:	60f8      	str	r0, [r7, #12]
 8004468:	60b9      	str	r1, [r7, #8]
 800446a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 800446c:	4b3e      	ldr	r3, [pc, #248]	; (8004568 <SEGGER_RTT_ReadNoLock+0x108>)
 800446e:	623b      	str	r3, [r7, #32]
 8004470:	6a3b      	ldr	r3, [r7, #32]
 8004472:	781b      	ldrb	r3, [r3, #0]
 8004474:	b2db      	uxtb	r3, r3
 8004476:	2b00      	cmp	r3, #0
 8004478:	d101      	bne.n	800447e <SEGGER_RTT_ReadNoLock+0x1e>
 800447a:	f7ff fe4b 	bl	8004114 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800447e:	68fa      	ldr	r2, [r7, #12]
 8004480:	4613      	mov	r3, r2
 8004482:	005b      	lsls	r3, r3, #1
 8004484:	4413      	add	r3, r2
 8004486:	00db      	lsls	r3, r3, #3
 8004488:	3360      	adds	r3, #96	; 0x60
 800448a:	4a37      	ldr	r2, [pc, #220]	; (8004568 <SEGGER_RTT_ReadNoLock+0x108>)
 800448c:	4413      	add	r3, r2
 800448e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8004494:	69fb      	ldr	r3, [r7, #28]
 8004496:	691b      	ldr	r3, [r3, #16]
 8004498:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800449a:	69fb      	ldr	r3, [r7, #28]
 800449c:	68db      	ldr	r3, [r3, #12]
 800449e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80044a0:	2300      	movs	r3, #0
 80044a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80044a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044a6:	69bb      	ldr	r3, [r7, #24]
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d92b      	bls.n	8004504 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80044ac:	69fb      	ldr	r3, [r7, #28]
 80044ae:	689a      	ldr	r2, [r3, #8]
 80044b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044b2:	1ad3      	subs	r3, r2, r3
 80044b4:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80044b6:	697a      	ldr	r2, [r7, #20]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	4293      	cmp	r3, r2
 80044bc:	bf28      	it	cs
 80044be:	4613      	movcs	r3, r2
 80044c0:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	685a      	ldr	r2, [r3, #4]
 80044c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044c8:	4413      	add	r3, r2
 80044ca:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80044cc:	697a      	ldr	r2, [r7, #20]
 80044ce:	6939      	ldr	r1, [r7, #16]
 80044d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80044d2:	f002 f803 	bl	80064dc <memcpy>
    NumBytesRead += NumBytesRem;
 80044d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	4413      	add	r3, r2
 80044dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80044de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	4413      	add	r3, r2
 80044e4:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	1ad3      	subs	r3, r2, r3
 80044ec:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80044ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	4413      	add	r3, r2
 80044f4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80044f6:	69fb      	ldr	r3, [r7, #28]
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d101      	bne.n	8004504 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8004500:	2300      	movs	r3, #0
 8004502:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004504:	69ba      	ldr	r2, [r7, #24]
 8004506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800450c:	697a      	ldr	r2, [r7, #20]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	4293      	cmp	r3, r2
 8004512:	bf28      	it	cs
 8004514:	4613      	movcs	r3, r2
 8004516:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d019      	beq.n	8004552 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800451e:	69fb      	ldr	r3, [r7, #28]
 8004520:	685a      	ldr	r2, [r3, #4]
 8004522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004524:	4413      	add	r3, r2
 8004526:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004528:	697a      	ldr	r2, [r7, #20]
 800452a:	6939      	ldr	r1, [r7, #16]
 800452c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800452e:	f001 ffd5 	bl	80064dc <memcpy>
    NumBytesRead += NumBytesRem;
 8004532:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	4413      	add	r3, r2
 8004538:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800453a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	4413      	add	r3, r2
 8004540:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	1ad3      	subs	r3, r2, r3
 8004548:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800454a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	4413      	add	r3, r2
 8004550:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8004552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004554:	2b00      	cmp	r3, #0
 8004556:	d002      	beq.n	800455e <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004558:	69fb      	ldr	r3, [r7, #28]
 800455a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800455c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800455e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004560:	4618      	mov	r0, r3
 8004562:	3730      	adds	r7, #48	; 0x30
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}
 8004568:	20012e68 	.word	0x20012e68

0800456c <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800456c:	b580      	push	{r7, lr}
 800456e:	b088      	sub	sp, #32
 8004570:	af00      	add	r7, sp, #0
 8004572:	60f8      	str	r0, [r7, #12]
 8004574:	60b9      	str	r1, [r7, #8]
 8004576:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800457c:	68fa      	ldr	r2, [r7, #12]
 800457e:	4613      	mov	r3, r2
 8004580:	005b      	lsls	r3, r3, #1
 8004582:	4413      	add	r3, r2
 8004584:	00db      	lsls	r3, r3, #3
 8004586:	3360      	adds	r3, #96	; 0x60
 8004588:	4a1f      	ldr	r2, [pc, #124]	; (8004608 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 800458a:	4413      	add	r3, r2
 800458c:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	695b      	ldr	r3, [r3, #20]
 8004592:	2b02      	cmp	r3, #2
 8004594:	d029      	beq.n	80045ea <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 8004596:	2b02      	cmp	r3, #2
 8004598:	d82e      	bhi.n	80045f8 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 800459a:	2b00      	cmp	r3, #0
 800459c:	d002      	beq.n	80045a4 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d013      	beq.n	80045ca <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 80045a2:	e029      	b.n	80045f8 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80045a4:	6978      	ldr	r0, [r7, #20]
 80045a6:	f7ff feb2 	bl	800430e <_GetAvailWriteSpace>
 80045aa:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 80045ac:	693a      	ldr	r2, [r7, #16]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d202      	bcs.n	80045ba <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 80045b4:	2300      	movs	r3, #0
 80045b6:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 80045b8:	e021      	b.n	80045fe <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	69b9      	ldr	r1, [r7, #24]
 80045c2:	6978      	ldr	r0, [r7, #20]
 80045c4:	f7ff fe5b 	bl	800427e <_WriteNoCheck>
    break;
 80045c8:	e019      	b.n	80045fe <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80045ca:	6978      	ldr	r0, [r7, #20]
 80045cc:	f7ff fe9f 	bl	800430e <_GetAvailWriteSpace>
 80045d0:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 80045d2:	687a      	ldr	r2, [r7, #4]
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	4293      	cmp	r3, r2
 80045d8:	bf28      	it	cs
 80045da:	4613      	movcs	r3, r2
 80045dc:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 80045de:	69fa      	ldr	r2, [r7, #28]
 80045e0:	69b9      	ldr	r1, [r7, #24]
 80045e2:	6978      	ldr	r0, [r7, #20]
 80045e4:	f7ff fe4b 	bl	800427e <_WriteNoCheck>
    break;
 80045e8:	e009      	b.n	80045fe <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	69b9      	ldr	r1, [r7, #24]
 80045ee:	6978      	ldr	r0, [r7, #20]
 80045f0:	f7ff fde8 	bl	80041c4 <_WriteBlocking>
 80045f4:	61f8      	str	r0, [r7, #28]
    break;
 80045f6:	e002      	b.n	80045fe <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 80045f8:	2300      	movs	r3, #0
 80045fa:	61fb      	str	r3, [r7, #28]
    break;
 80045fc:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 80045fe:	69fb      	ldr	r3, [r7, #28]
}
 8004600:	4618      	mov	r0, r3
 8004602:	3720      	adds	r7, #32
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}
 8004608:	20012e68 	.word	0x20012e68

0800460c <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800460c:	b580      	push	{r7, lr}
 800460e:	b088      	sub	sp, #32
 8004610:	af00      	add	r7, sp, #0
 8004612:	60f8      	str	r0, [r7, #12]
 8004614:	60b9      	str	r1, [r7, #8]
 8004616:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8004618:	4b0e      	ldr	r3, [pc, #56]	; (8004654 <SEGGER_RTT_WriteDownBuffer+0x48>)
 800461a:	61fb      	str	r3, [r7, #28]
 800461c:	69fb      	ldr	r3, [r7, #28]
 800461e:	781b      	ldrb	r3, [r3, #0]
 8004620:	b2db      	uxtb	r3, r3
 8004622:	2b00      	cmp	r3, #0
 8004624:	d101      	bne.n	800462a <SEGGER_RTT_WriteDownBuffer+0x1e>
 8004626:	f7ff fd75 	bl	8004114 <_DoInit>
  SEGGER_RTT_LOCK();
 800462a:	f3ef 8311 	mrs	r3, BASEPRI
 800462e:	f04f 0120 	mov.w	r1, #32
 8004632:	f381 8811 	msr	BASEPRI, r1
 8004636:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8004638:	687a      	ldr	r2, [r7, #4]
 800463a:	68b9      	ldr	r1, [r7, #8]
 800463c:	68f8      	ldr	r0, [r7, #12]
 800463e:	f7ff ff95 	bl	800456c <SEGGER_RTT_WriteDownBufferNoLock>
 8004642:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8004644:	69bb      	ldr	r3, [r7, #24]
 8004646:	f383 8811 	msr	BASEPRI, r3
  return Status;
 800464a:	697b      	ldr	r3, [r7, #20]
}
 800464c:	4618      	mov	r0, r3
 800464e:	3720      	adds	r7, #32
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}
 8004654:	20012e68 	.word	0x20012e68

08004658 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004658:	b580      	push	{r7, lr}
 800465a:	b088      	sub	sp, #32
 800465c:	af00      	add	r7, sp, #0
 800465e:	60f8      	str	r0, [r7, #12]
 8004660:	60b9      	str	r1, [r7, #8]
 8004662:	607a      	str	r2, [r7, #4]
 8004664:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8004666:	4b3d      	ldr	r3, [pc, #244]	; (800475c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004668:	61bb      	str	r3, [r7, #24]
 800466a:	69bb      	ldr	r3, [r7, #24]
 800466c:	781b      	ldrb	r3, [r3, #0]
 800466e:	b2db      	uxtb	r3, r3
 8004670:	2b00      	cmp	r3, #0
 8004672:	d101      	bne.n	8004678 <SEGGER_RTT_AllocUpBuffer+0x20>
 8004674:	f7ff fd4e 	bl	8004114 <_DoInit>
  SEGGER_RTT_LOCK();
 8004678:	f3ef 8311 	mrs	r3, BASEPRI
 800467c:	f04f 0120 	mov.w	r1, #32
 8004680:	f381 8811 	msr	BASEPRI, r1
 8004684:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004686:	4b35      	ldr	r3, [pc, #212]	; (800475c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004688:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800468a:	2300      	movs	r3, #0
 800468c:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800468e:	6939      	ldr	r1, [r7, #16]
 8004690:	69fb      	ldr	r3, [r7, #28]
 8004692:	1c5a      	adds	r2, r3, #1
 8004694:	4613      	mov	r3, r2
 8004696:	005b      	lsls	r3, r3, #1
 8004698:	4413      	add	r3, r2
 800469a:	00db      	lsls	r3, r3, #3
 800469c:	440b      	add	r3, r1
 800469e:	3304      	adds	r3, #4
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d008      	beq.n	80046b8 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80046a6:	69fb      	ldr	r3, [r7, #28]
 80046a8:	3301      	adds	r3, #1
 80046aa:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	691b      	ldr	r3, [r3, #16]
 80046b0:	69fa      	ldr	r2, [r7, #28]
 80046b2:	429a      	cmp	r2, r3
 80046b4:	dbeb      	blt.n	800468e <SEGGER_RTT_AllocUpBuffer+0x36>
 80046b6:	e000      	b.n	80046ba <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80046b8:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	691b      	ldr	r3, [r3, #16]
 80046be:	69fa      	ldr	r2, [r7, #28]
 80046c0:	429a      	cmp	r2, r3
 80046c2:	da3f      	bge.n	8004744 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80046c4:	6939      	ldr	r1, [r7, #16]
 80046c6:	69fb      	ldr	r3, [r7, #28]
 80046c8:	1c5a      	adds	r2, r3, #1
 80046ca:	4613      	mov	r3, r2
 80046cc:	005b      	lsls	r3, r3, #1
 80046ce:	4413      	add	r3, r2
 80046d0:	00db      	lsls	r3, r3, #3
 80046d2:	440b      	add	r3, r1
 80046d4:	68fa      	ldr	r2, [r7, #12]
 80046d6:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80046d8:	6939      	ldr	r1, [r7, #16]
 80046da:	69fb      	ldr	r3, [r7, #28]
 80046dc:	1c5a      	adds	r2, r3, #1
 80046de:	4613      	mov	r3, r2
 80046e0:	005b      	lsls	r3, r3, #1
 80046e2:	4413      	add	r3, r2
 80046e4:	00db      	lsls	r3, r3, #3
 80046e6:	440b      	add	r3, r1
 80046e8:	3304      	adds	r3, #4
 80046ea:	68ba      	ldr	r2, [r7, #8]
 80046ec:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80046ee:	6939      	ldr	r1, [r7, #16]
 80046f0:	69fa      	ldr	r2, [r7, #28]
 80046f2:	4613      	mov	r3, r2
 80046f4:	005b      	lsls	r3, r3, #1
 80046f6:	4413      	add	r3, r2
 80046f8:	00db      	lsls	r3, r3, #3
 80046fa:	440b      	add	r3, r1
 80046fc:	3320      	adds	r3, #32
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8004702:	6939      	ldr	r1, [r7, #16]
 8004704:	69fa      	ldr	r2, [r7, #28]
 8004706:	4613      	mov	r3, r2
 8004708:	005b      	lsls	r3, r3, #1
 800470a:	4413      	add	r3, r2
 800470c:	00db      	lsls	r3, r3, #3
 800470e:	440b      	add	r3, r1
 8004710:	3328      	adds	r3, #40	; 0x28
 8004712:	2200      	movs	r2, #0
 8004714:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8004716:	6939      	ldr	r1, [r7, #16]
 8004718:	69fa      	ldr	r2, [r7, #28]
 800471a:	4613      	mov	r3, r2
 800471c:	005b      	lsls	r3, r3, #1
 800471e:	4413      	add	r3, r2
 8004720:	00db      	lsls	r3, r3, #3
 8004722:	440b      	add	r3, r1
 8004724:	3324      	adds	r3, #36	; 0x24
 8004726:	2200      	movs	r2, #0
 8004728:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800472a:	6939      	ldr	r1, [r7, #16]
 800472c:	69fa      	ldr	r2, [r7, #28]
 800472e:	4613      	mov	r3, r2
 8004730:	005b      	lsls	r3, r3, #1
 8004732:	4413      	add	r3, r2
 8004734:	00db      	lsls	r3, r3, #3
 8004736:	440b      	add	r3, r1
 8004738:	332c      	adds	r3, #44	; 0x2c
 800473a:	683a      	ldr	r2, [r7, #0]
 800473c:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800473e:	f3bf 8f5f 	dmb	sy
 8004742:	e002      	b.n	800474a <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8004744:	f04f 33ff 	mov.w	r3, #4294967295
 8004748:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8004750:	69fb      	ldr	r3, [r7, #28]
}
 8004752:	4618      	mov	r0, r3
 8004754:	3720      	adds	r7, #32
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}
 800475a:	bf00      	nop
 800475c:	20012e68 	.word	0x20012e68

08004760 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004760:	b580      	push	{r7, lr}
 8004762:	b088      	sub	sp, #32
 8004764:	af00      	add	r7, sp, #0
 8004766:	60f8      	str	r0, [r7, #12]
 8004768:	60b9      	str	r1, [r7, #8]
 800476a:	607a      	str	r2, [r7, #4]
 800476c:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800476e:	4b33      	ldr	r3, [pc, #204]	; (800483c <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8004770:	61bb      	str	r3, [r7, #24]
 8004772:	69bb      	ldr	r3, [r7, #24]
 8004774:	781b      	ldrb	r3, [r3, #0]
 8004776:	b2db      	uxtb	r3, r3
 8004778:	2b00      	cmp	r3, #0
 800477a:	d101      	bne.n	8004780 <SEGGER_RTT_ConfigDownBuffer+0x20>
 800477c:	f7ff fcca 	bl	8004114 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004780:	4b2e      	ldr	r3, [pc, #184]	; (800483c <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8004782:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	695b      	ldr	r3, [r3, #20]
 8004788:	461a      	mov	r2, r3
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	4293      	cmp	r3, r2
 800478e:	d24d      	bcs.n	800482c <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8004790:	f3ef 8311 	mrs	r3, BASEPRI
 8004794:	f04f 0120 	mov.w	r1, #32
 8004798:	f381 8811 	msr	BASEPRI, r1
 800479c:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d031      	beq.n	8004808 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 80047a4:	6979      	ldr	r1, [r7, #20]
 80047a6:	68fa      	ldr	r2, [r7, #12]
 80047a8:	4613      	mov	r3, r2
 80047aa:	005b      	lsls	r3, r3, #1
 80047ac:	4413      	add	r3, r2
 80047ae:	00db      	lsls	r3, r3, #3
 80047b0:	440b      	add	r3, r1
 80047b2:	3360      	adds	r3, #96	; 0x60
 80047b4:	68ba      	ldr	r2, [r7, #8]
 80047b6:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 80047b8:	6979      	ldr	r1, [r7, #20]
 80047ba:	68fa      	ldr	r2, [r7, #12]
 80047bc:	4613      	mov	r3, r2
 80047be:	005b      	lsls	r3, r3, #1
 80047c0:	4413      	add	r3, r2
 80047c2:	00db      	lsls	r3, r3, #3
 80047c4:	440b      	add	r3, r1
 80047c6:	3364      	adds	r3, #100	; 0x64
 80047c8:	687a      	ldr	r2, [r7, #4]
 80047ca:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 80047cc:	6979      	ldr	r1, [r7, #20]
 80047ce:	68fa      	ldr	r2, [r7, #12]
 80047d0:	4613      	mov	r3, r2
 80047d2:	005b      	lsls	r3, r3, #1
 80047d4:	4413      	add	r3, r2
 80047d6:	00db      	lsls	r3, r3, #3
 80047d8:	440b      	add	r3, r1
 80047da:	3368      	adds	r3, #104	; 0x68
 80047dc:	683a      	ldr	r2, [r7, #0]
 80047de:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 80047e0:	6979      	ldr	r1, [r7, #20]
 80047e2:	68fa      	ldr	r2, [r7, #12]
 80047e4:	4613      	mov	r3, r2
 80047e6:	005b      	lsls	r3, r3, #1
 80047e8:	4413      	add	r3, r2
 80047ea:	00db      	lsls	r3, r3, #3
 80047ec:	440b      	add	r3, r1
 80047ee:	3370      	adds	r3, #112	; 0x70
 80047f0:	2200      	movs	r2, #0
 80047f2:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 80047f4:	6979      	ldr	r1, [r7, #20]
 80047f6:	68fa      	ldr	r2, [r7, #12]
 80047f8:	4613      	mov	r3, r2
 80047fa:	005b      	lsls	r3, r3, #1
 80047fc:	4413      	add	r3, r2
 80047fe:	00db      	lsls	r3, r3, #3
 8004800:	440b      	add	r3, r1
 8004802:	336c      	adds	r3, #108	; 0x6c
 8004804:	2200      	movs	r2, #0
 8004806:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8004808:	6979      	ldr	r1, [r7, #20]
 800480a:	68fa      	ldr	r2, [r7, #12]
 800480c:	4613      	mov	r3, r2
 800480e:	005b      	lsls	r3, r3, #1
 8004810:	4413      	add	r3, r2
 8004812:	00db      	lsls	r3, r3, #3
 8004814:	440b      	add	r3, r1
 8004816:	3374      	adds	r3, #116	; 0x74
 8004818:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800481a:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800481c:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8004826:	2300      	movs	r3, #0
 8004828:	61fb      	str	r3, [r7, #28]
 800482a:	e002      	b.n	8004832 <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 800482c:	f04f 33ff 	mov.w	r3, #4294967295
 8004830:	61fb      	str	r3, [r7, #28]
  }
  return r;
 8004832:	69fb      	ldr	r3, [r7, #28]
}
 8004834:	4618      	mov	r0, r3
 8004836:	3720      	adds	r7, #32
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}
 800483c:	20012e68 	.word	0x20012e68

08004840 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8004840:	b480      	push	{r7}
 8004842:	b087      	sub	sp, #28
 8004844:	af00      	add	r7, sp, #0
 8004846:	60f8      	str	r0, [r7, #12]
 8004848:	60b9      	str	r1, [r7, #8]
 800484a:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 800484c:	2300      	movs	r3, #0
 800484e:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8004850:	e002      	b.n	8004858 <_EncodeStr+0x18>
    Len++;
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	3301      	adds	r3, #1
 8004856:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8004858:	68ba      	ldr	r2, [r7, #8]
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	4413      	add	r3, r2
 800485e:	781b      	ldrb	r3, [r3, #0]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d1f6      	bne.n	8004852 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8004864:	693a      	ldr	r2, [r7, #16]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	429a      	cmp	r2, r3
 800486a:	d901      	bls.n	8004870 <_EncodeStr+0x30>
    Len = Limit;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	2bfe      	cmp	r3, #254	; 0xfe
 8004874:	d806      	bhi.n	8004884 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	1c5a      	adds	r2, r3, #1
 800487a:	60fa      	str	r2, [r7, #12]
 800487c:	693a      	ldr	r2, [r7, #16]
 800487e:	b2d2      	uxtb	r2, r2
 8004880:	701a      	strb	r2, [r3, #0]
 8004882:	e011      	b.n	80048a8 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	1c5a      	adds	r2, r3, #1
 8004888:	60fa      	str	r2, [r7, #12]
 800488a:	22ff      	movs	r2, #255	; 0xff
 800488c:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	1c5a      	adds	r2, r3, #1
 8004892:	60fa      	str	r2, [r7, #12]
 8004894:	693a      	ldr	r2, [r7, #16]
 8004896:	b2d2      	uxtb	r2, r2
 8004898:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	0a19      	lsrs	r1, r3, #8
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	1c5a      	adds	r2, r3, #1
 80048a2:	60fa      	str	r2, [r7, #12]
 80048a4:	b2ca      	uxtb	r2, r1
 80048a6:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 80048a8:	2300      	movs	r3, #0
 80048aa:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80048ac:	e00a      	b.n	80048c4 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 80048ae:	68ba      	ldr	r2, [r7, #8]
 80048b0:	1c53      	adds	r3, r2, #1
 80048b2:	60bb      	str	r3, [r7, #8]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	1c59      	adds	r1, r3, #1
 80048b8:	60f9      	str	r1, [r7, #12]
 80048ba:	7812      	ldrb	r2, [r2, #0]
 80048bc:	701a      	strb	r2, [r3, #0]
    n++;
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	3301      	adds	r3, #1
 80048c2:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80048c4:	697a      	ldr	r2, [r7, #20]
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d3f0      	bcc.n	80048ae <_EncodeStr+0x6e>
  }
  return pPayload;
 80048cc:	68fb      	ldr	r3, [r7, #12]
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	371c      	adds	r7, #28
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr

080048da <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80048da:	b480      	push	{r7}
 80048dc:	b083      	sub	sp, #12
 80048de:	af00      	add	r7, sp, #0
 80048e0:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	3304      	adds	r3, #4
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	370c      	adds	r7, #12
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr
	...

080048f4 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b082      	sub	sp, #8
 80048f8:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80048fa:	4b36      	ldr	r3, [pc, #216]	; (80049d4 <_HandleIncomingPacket+0xe0>)
 80048fc:	7e1b      	ldrb	r3, [r3, #24]
 80048fe:	4618      	mov	r0, r3
 8004900:	1cfb      	adds	r3, r7, #3
 8004902:	2201      	movs	r2, #1
 8004904:	4619      	mov	r1, r3
 8004906:	f7ff fdab 	bl	8004460 <SEGGER_RTT_ReadNoLock>
 800490a:	4603      	mov	r3, r0
 800490c:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2b00      	cmp	r3, #0
 8004912:	dd54      	ble.n	80049be <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 8004914:	78fb      	ldrb	r3, [r7, #3]
 8004916:	2b80      	cmp	r3, #128	; 0x80
 8004918:	d032      	beq.n	8004980 <_HandleIncomingPacket+0x8c>
 800491a:	2b80      	cmp	r3, #128	; 0x80
 800491c:	dc42      	bgt.n	80049a4 <_HandleIncomingPacket+0xb0>
 800491e:	2b07      	cmp	r3, #7
 8004920:	dc16      	bgt.n	8004950 <_HandleIncomingPacket+0x5c>
 8004922:	2b00      	cmp	r3, #0
 8004924:	dd3e      	ble.n	80049a4 <_HandleIncomingPacket+0xb0>
 8004926:	3b01      	subs	r3, #1
 8004928:	2b06      	cmp	r3, #6
 800492a:	d83b      	bhi.n	80049a4 <_HandleIncomingPacket+0xb0>
 800492c:	a201      	add	r2, pc, #4	; (adr r2, 8004934 <_HandleIncomingPacket+0x40>)
 800492e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004932:	bf00      	nop
 8004934:	08004957 	.word	0x08004957
 8004938:	0800495d 	.word	0x0800495d
 800493c:	08004963 	.word	0x08004963
 8004940:	08004969 	.word	0x08004969
 8004944:	0800496f 	.word	0x0800496f
 8004948:	08004975 	.word	0x08004975
 800494c:	0800497b 	.word	0x0800497b
 8004950:	2b7f      	cmp	r3, #127	; 0x7f
 8004952:	d036      	beq.n	80049c2 <_HandleIncomingPacket+0xce>
 8004954:	e026      	b.n	80049a4 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8004956:	f000 ff7d 	bl	8005854 <SEGGER_SYSVIEW_Start>
      break;
 800495a:	e037      	b.n	80049cc <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800495c:	f001 f836 	bl	80059cc <SEGGER_SYSVIEW_Stop>
      break;
 8004960:	e034      	b.n	80049cc <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8004962:	f001 fa0f 	bl	8005d84 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8004966:	e031      	b.n	80049cc <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8004968:	f001 f9d4 	bl	8005d14 <SEGGER_SYSVIEW_SendTaskList>
      break;
 800496c:	e02e      	b.n	80049cc <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800496e:	f001 f853 	bl	8005a18 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8004972:	e02b      	b.n	80049cc <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8004974:	f001 fca2 	bl	80062bc <SEGGER_SYSVIEW_SendNumModules>
      break;
 8004978:	e028      	b.n	80049cc <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800497a:	f001 fc81 	bl	8006280 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800497e:	e025      	b.n	80049cc <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004980:	4b14      	ldr	r3, [pc, #80]	; (80049d4 <_HandleIncomingPacket+0xe0>)
 8004982:	7e1b      	ldrb	r3, [r3, #24]
 8004984:	4618      	mov	r0, r3
 8004986:	1cfb      	adds	r3, r7, #3
 8004988:	2201      	movs	r2, #1
 800498a:	4619      	mov	r1, r3
 800498c:	f7ff fd68 	bl	8004460 <SEGGER_RTT_ReadNoLock>
 8004990:	4603      	mov	r3, r0
 8004992:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2b00      	cmp	r3, #0
 8004998:	dd15      	ble.n	80049c6 <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800499a:	78fb      	ldrb	r3, [r7, #3]
 800499c:	4618      	mov	r0, r3
 800499e:	f001 fbef 	bl	8006180 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80049a2:	e010      	b.n	80049c6 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80049a4:	78fb      	ldrb	r3, [r7, #3]
 80049a6:	b25b      	sxtb	r3, r3
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	da0e      	bge.n	80049ca <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80049ac:	4b09      	ldr	r3, [pc, #36]	; (80049d4 <_HandleIncomingPacket+0xe0>)
 80049ae:	7e1b      	ldrb	r3, [r3, #24]
 80049b0:	4618      	mov	r0, r3
 80049b2:	1cfb      	adds	r3, r7, #3
 80049b4:	2201      	movs	r2, #1
 80049b6:	4619      	mov	r1, r3
 80049b8:	f7ff fd52 	bl	8004460 <SEGGER_RTT_ReadNoLock>
      }
      break;
 80049bc:	e005      	b.n	80049ca <_HandleIncomingPacket+0xd6>
    }
  }
 80049be:	bf00      	nop
 80049c0:	e004      	b.n	80049cc <_HandleIncomingPacket+0xd8>
      break;
 80049c2:	bf00      	nop
 80049c4:	e002      	b.n	80049cc <_HandleIncomingPacket+0xd8>
      break;
 80049c6:	bf00      	nop
 80049c8:	e000      	b.n	80049cc <_HandleIncomingPacket+0xd8>
      break;
 80049ca:	bf00      	nop
}
 80049cc:	bf00      	nop
 80049ce:	3708      	adds	r7, #8
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}
 80049d4:	20014328 	.word	0x20014328

080049d8 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80049d8:	b580      	push	{r7, lr}
 80049da:	b08c      	sub	sp, #48	; 0x30
 80049dc:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80049de:	2301      	movs	r3, #1
 80049e0:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80049e2:	1d3b      	adds	r3, r7, #4
 80049e4:	3301      	adds	r3, #1
 80049e6:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80049e8:	69fb      	ldr	r3, [r7, #28]
 80049ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049ec:	4b32      	ldr	r3, [pc, #200]	; (8004ab8 <_TrySendOverflowPacket+0xe0>)
 80049ee:	695b      	ldr	r3, [r3, #20]
 80049f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80049f2:	e00b      	b.n	8004a0c <_TrySendOverflowPacket+0x34>
 80049f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049f6:	b2da      	uxtb	r2, r3
 80049f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049fa:	1c59      	adds	r1, r3, #1
 80049fc:	62f9      	str	r1, [r7, #44]	; 0x2c
 80049fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004a02:	b2d2      	uxtb	r2, r2
 8004a04:	701a      	strb	r2, [r3, #0]
 8004a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a08:	09db      	lsrs	r3, r3, #7
 8004a0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a0e:	2b7f      	cmp	r3, #127	; 0x7f
 8004a10:	d8f0      	bhi.n	80049f4 <_TrySendOverflowPacket+0x1c>
 8004a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a14:	1c5a      	adds	r2, r3, #1
 8004a16:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a1a:	b2d2      	uxtb	r2, r2
 8004a1c:	701a      	strb	r2, [r3, #0]
 8004a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a20:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004a22:	4b26      	ldr	r3, [pc, #152]	; (8004abc <_TrySendOverflowPacket+0xe4>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004a28:	4b23      	ldr	r3, [pc, #140]	; (8004ab8 <_TrySendOverflowPacket+0xe0>)
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	69ba      	ldr	r2, [r7, #24]
 8004a2e:	1ad3      	subs	r3, r2, r3
 8004a30:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8004a32:	69fb      	ldr	r3, [r7, #28]
 8004a34:	627b      	str	r3, [r7, #36]	; 0x24
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	623b      	str	r3, [r7, #32]
 8004a3a:	e00b      	b.n	8004a54 <_TrySendOverflowPacket+0x7c>
 8004a3c:	6a3b      	ldr	r3, [r7, #32]
 8004a3e:	b2da      	uxtb	r2, r3
 8004a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a42:	1c59      	adds	r1, r3, #1
 8004a44:	6279      	str	r1, [r7, #36]	; 0x24
 8004a46:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004a4a:	b2d2      	uxtb	r2, r2
 8004a4c:	701a      	strb	r2, [r3, #0]
 8004a4e:	6a3b      	ldr	r3, [r7, #32]
 8004a50:	09db      	lsrs	r3, r3, #7
 8004a52:	623b      	str	r3, [r7, #32]
 8004a54:	6a3b      	ldr	r3, [r7, #32]
 8004a56:	2b7f      	cmp	r3, #127	; 0x7f
 8004a58:	d8f0      	bhi.n	8004a3c <_TrySendOverflowPacket+0x64>
 8004a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5c:	1c5a      	adds	r2, r3, #1
 8004a5e:	627a      	str	r2, [r7, #36]	; 0x24
 8004a60:	6a3a      	ldr	r2, [r7, #32]
 8004a62:	b2d2      	uxtb	r2, r2
 8004a64:	701a      	strb	r2, [r3, #0]
 8004a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a68:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8004a6a:	4b13      	ldr	r3, [pc, #76]	; (8004ab8 <_TrySendOverflowPacket+0xe0>)
 8004a6c:	785b      	ldrb	r3, [r3, #1]
 8004a6e:	4618      	mov	r0, r3
 8004a70:	1d3b      	adds	r3, r7, #4
 8004a72:	69fa      	ldr	r2, [r7, #28]
 8004a74:	1ad3      	subs	r3, r2, r3
 8004a76:	461a      	mov	r2, r3
 8004a78:	1d3b      	adds	r3, r7, #4
 8004a7a:	4619      	mov	r1, r3
 8004a7c:	f7fb fba8 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004a80:	4603      	mov	r3, r0
 8004a82:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8004a84:	f7ff fabc 	bl	8004000 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d009      	beq.n	8004aa2 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004a8e:	4a0a      	ldr	r2, [pc, #40]	; (8004ab8 <_TrySendOverflowPacket+0xe0>)
 8004a90:	69bb      	ldr	r3, [r7, #24]
 8004a92:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8004a94:	4b08      	ldr	r3, [pc, #32]	; (8004ab8 <_TrySendOverflowPacket+0xe0>)
 8004a96:	781b      	ldrb	r3, [r3, #0]
 8004a98:	3b01      	subs	r3, #1
 8004a9a:	b2da      	uxtb	r2, r3
 8004a9c:	4b06      	ldr	r3, [pc, #24]	; (8004ab8 <_TrySendOverflowPacket+0xe0>)
 8004a9e:	701a      	strb	r2, [r3, #0]
 8004aa0:	e004      	b.n	8004aac <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8004aa2:	4b05      	ldr	r3, [pc, #20]	; (8004ab8 <_TrySendOverflowPacket+0xe0>)
 8004aa4:	695b      	ldr	r3, [r3, #20]
 8004aa6:	3301      	adds	r3, #1
 8004aa8:	4a03      	ldr	r2, [pc, #12]	; (8004ab8 <_TrySendOverflowPacket+0xe0>)
 8004aaa:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8004aac:	693b      	ldr	r3, [r7, #16]
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3730      	adds	r7, #48	; 0x30
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	bf00      	nop
 8004ab8:	20014328 	.word	0x20014328
 8004abc:	e0001004 	.word	0xe0001004

08004ac0 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b08a      	sub	sp, #40	; 0x28
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	60f8      	str	r0, [r7, #12]
 8004ac8:	60b9      	str	r1, [r7, #8]
 8004aca:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8004acc:	4b6d      	ldr	r3, [pc, #436]	; (8004c84 <_SendPacket+0x1c4>)
 8004ace:	781b      	ldrb	r3, [r3, #0]
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d010      	beq.n	8004af6 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8004ad4:	4b6b      	ldr	r3, [pc, #428]	; (8004c84 <_SendPacket+0x1c4>)
 8004ad6:	781b      	ldrb	r3, [r3, #0]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	f000 80a5 	beq.w	8004c28 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8004ade:	4b69      	ldr	r3, [pc, #420]	; (8004c84 <_SendPacket+0x1c4>)
 8004ae0:	781b      	ldrb	r3, [r3, #0]
 8004ae2:	2b02      	cmp	r3, #2
 8004ae4:	d109      	bne.n	8004afa <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8004ae6:	f7ff ff77 	bl	80049d8 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8004aea:	4b66      	ldr	r3, [pc, #408]	; (8004c84 <_SendPacket+0x1c4>)
 8004aec:	781b      	ldrb	r3, [r3, #0]
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	f040 809c 	bne.w	8004c2c <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 8004af4:	e001      	b.n	8004afa <_SendPacket+0x3a>
    goto Send;
 8004af6:	bf00      	nop
 8004af8:	e000      	b.n	8004afc <_SendPacket+0x3c>
Send:
 8004afa:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2b1f      	cmp	r3, #31
 8004b00:	d809      	bhi.n	8004b16 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8004b02:	4b60      	ldr	r3, [pc, #384]	; (8004c84 <_SendPacket+0x1c4>)
 8004b04:	69da      	ldr	r2, [r3, #28]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	fa22 f303 	lsr.w	r3, r2, r3
 8004b0c:	f003 0301 	and.w	r3, r3, #1
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	f040 808d 	bne.w	8004c30 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2b17      	cmp	r3, #23
 8004b1a:	d807      	bhi.n	8004b2c <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	3b01      	subs	r3, #1
 8004b20:	60fb      	str	r3, [r7, #12]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	b2da      	uxtb	r2, r3
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	701a      	strb	r2, [r3, #0]
 8004b2a:	e03d      	b.n	8004ba8 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8004b2c:	68ba      	ldr	r2, [r7, #8]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	1ad3      	subs	r3, r2, r3
 8004b32:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8004b34:	69fb      	ldr	r3, [r7, #28]
 8004b36:	2b7f      	cmp	r3, #127	; 0x7f
 8004b38:	d912      	bls.n	8004b60 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8004b3a:	69fb      	ldr	r3, [r7, #28]
 8004b3c:	09da      	lsrs	r2, r3, #7
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	3b01      	subs	r3, #1
 8004b42:	60fb      	str	r3, [r7, #12]
 8004b44:	b2d2      	uxtb	r2, r2
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8004b4a:	69fb      	ldr	r3, [r7, #28]
 8004b4c:	b2db      	uxtb	r3, r3
 8004b4e:	68fa      	ldr	r2, [r7, #12]
 8004b50:	3a01      	subs	r2, #1
 8004b52:	60fa      	str	r2, [r7, #12]
 8004b54:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004b58:	b2da      	uxtb	r2, r3
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	701a      	strb	r2, [r3, #0]
 8004b5e:	e006      	b.n	8004b6e <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	3b01      	subs	r3, #1
 8004b64:	60fb      	str	r3, [r7, #12]
 8004b66:	69fb      	ldr	r3, [r7, #28]
 8004b68:	b2da      	uxtb	r2, r3
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2b7f      	cmp	r3, #127	; 0x7f
 8004b72:	d912      	bls.n	8004b9a <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	09da      	lsrs	r2, r3, #7
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	3b01      	subs	r3, #1
 8004b7c:	60fb      	str	r3, [r7, #12]
 8004b7e:	b2d2      	uxtb	r2, r2
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	b2db      	uxtb	r3, r3
 8004b88:	68fa      	ldr	r2, [r7, #12]
 8004b8a:	3a01      	subs	r2, #1
 8004b8c:	60fa      	str	r2, [r7, #12]
 8004b8e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004b92:	b2da      	uxtb	r2, r3
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	701a      	strb	r2, [r3, #0]
 8004b98:	e006      	b.n	8004ba8 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	3b01      	subs	r3, #1
 8004b9e:	60fb      	str	r3, [r7, #12]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	b2da      	uxtb	r2, r3
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004ba8:	4b37      	ldr	r3, [pc, #220]	; (8004c88 <_SendPacket+0x1c8>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004bae:	4b35      	ldr	r3, [pc, #212]	; (8004c84 <_SendPacket+0x1c4>)
 8004bb0:	68db      	ldr	r3, [r3, #12]
 8004bb2:	69ba      	ldr	r2, [r7, #24]
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	627b      	str	r3, [r7, #36]	; 0x24
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	623b      	str	r3, [r7, #32]
 8004bc0:	e00b      	b.n	8004bda <_SendPacket+0x11a>
 8004bc2:	6a3b      	ldr	r3, [r7, #32]
 8004bc4:	b2da      	uxtb	r2, r3
 8004bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc8:	1c59      	adds	r1, r3, #1
 8004bca:	6279      	str	r1, [r7, #36]	; 0x24
 8004bcc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004bd0:	b2d2      	uxtb	r2, r2
 8004bd2:	701a      	strb	r2, [r3, #0]
 8004bd4:	6a3b      	ldr	r3, [r7, #32]
 8004bd6:	09db      	lsrs	r3, r3, #7
 8004bd8:	623b      	str	r3, [r7, #32]
 8004bda:	6a3b      	ldr	r3, [r7, #32]
 8004bdc:	2b7f      	cmp	r3, #127	; 0x7f
 8004bde:	d8f0      	bhi.n	8004bc2 <_SendPacket+0x102>
 8004be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be2:	1c5a      	adds	r2, r3, #1
 8004be4:	627a      	str	r2, [r7, #36]	; 0x24
 8004be6:	6a3a      	ldr	r2, [r7, #32]
 8004be8:	b2d2      	uxtb	r2, r2
 8004bea:	701a      	strb	r2, [r3, #0]
 8004bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bee:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8004bf0:	4b24      	ldr	r3, [pc, #144]	; (8004c84 <_SendPacket+0x1c4>)
 8004bf2:	785b      	ldrb	r3, [r3, #1]
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	68ba      	ldr	r2, [r7, #8]
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	1ad3      	subs	r3, r2, r3
 8004bfc:	461a      	mov	r2, r3
 8004bfe:	68f9      	ldr	r1, [r7, #12]
 8004c00:	f7fb fae6 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004c04:	4603      	mov	r3, r0
 8004c06:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8004c08:	f7ff f9fa 	bl	8004000 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d003      	beq.n	8004c1a <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004c12:	4a1c      	ldr	r2, [pc, #112]	; (8004c84 <_SendPacket+0x1c4>)
 8004c14:	69bb      	ldr	r3, [r7, #24]
 8004c16:	60d3      	str	r3, [r2, #12]
 8004c18:	e00b      	b.n	8004c32 <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8004c1a:	4b1a      	ldr	r3, [pc, #104]	; (8004c84 <_SendPacket+0x1c4>)
 8004c1c:	781b      	ldrb	r3, [r3, #0]
 8004c1e:	3301      	adds	r3, #1
 8004c20:	b2da      	uxtb	r2, r3
 8004c22:	4b18      	ldr	r3, [pc, #96]	; (8004c84 <_SendPacket+0x1c4>)
 8004c24:	701a      	strb	r2, [r3, #0]
 8004c26:	e004      	b.n	8004c32 <_SendPacket+0x172>
    goto SendDone;
 8004c28:	bf00      	nop
 8004c2a:	e002      	b.n	8004c32 <_SendPacket+0x172>
      goto SendDone;
 8004c2c:	bf00      	nop
 8004c2e:	e000      	b.n	8004c32 <_SendPacket+0x172>
      goto SendDone;
 8004c30:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8004c32:	4b14      	ldr	r3, [pc, #80]	; (8004c84 <_SendPacket+0x1c4>)
 8004c34:	7e1b      	ldrb	r3, [r3, #24]
 8004c36:	4619      	mov	r1, r3
 8004c38:	4a14      	ldr	r2, [pc, #80]	; (8004c8c <_SendPacket+0x1cc>)
 8004c3a:	460b      	mov	r3, r1
 8004c3c:	005b      	lsls	r3, r3, #1
 8004c3e:	440b      	add	r3, r1
 8004c40:	00db      	lsls	r3, r3, #3
 8004c42:	4413      	add	r3, r2
 8004c44:	336c      	adds	r3, #108	; 0x6c
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	4b0e      	ldr	r3, [pc, #56]	; (8004c84 <_SendPacket+0x1c4>)
 8004c4a:	7e1b      	ldrb	r3, [r3, #24]
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	490f      	ldr	r1, [pc, #60]	; (8004c8c <_SendPacket+0x1cc>)
 8004c50:	4603      	mov	r3, r0
 8004c52:	005b      	lsls	r3, r3, #1
 8004c54:	4403      	add	r3, r0
 8004c56:	00db      	lsls	r3, r3, #3
 8004c58:	440b      	add	r3, r1
 8004c5a:	3370      	adds	r3, #112	; 0x70
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	d00b      	beq.n	8004c7a <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8004c62:	4b08      	ldr	r3, [pc, #32]	; (8004c84 <_SendPacket+0x1c4>)
 8004c64:	789b      	ldrb	r3, [r3, #2]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d107      	bne.n	8004c7a <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8004c6a:	4b06      	ldr	r3, [pc, #24]	; (8004c84 <_SendPacket+0x1c4>)
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004c70:	f7ff fe40 	bl	80048f4 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8004c74:	4b03      	ldr	r3, [pc, #12]	; (8004c84 <_SendPacket+0x1c4>)
 8004c76:	2200      	movs	r2, #0
 8004c78:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8004c7a:	bf00      	nop
 8004c7c:	3728      	adds	r7, #40	; 0x28
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}
 8004c82:	bf00      	nop
 8004c84:	20014328 	.word	0x20014328
 8004c88:	e0001004 	.word	0xe0001004
 8004c8c:	20012e68 	.word	0x20012e68

08004c90 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b08a      	sub	sp, #40	; 0x28
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	460b      	mov	r3, r1
 8004c9a:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	691b      	ldr	r3, [r3, #16]
 8004ca0:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	3301      	adds	r3, #1
 8004ca6:	2b80      	cmp	r3, #128	; 0x80
 8004ca8:	d80a      	bhi.n	8004cc0 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	1c59      	adds	r1, r3, #1
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	6051      	str	r1, [r2, #4]
 8004cb4:	78fa      	ldrb	r2, [r7, #3]
 8004cb6:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	1c5a      	adds	r2, r3, #1
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	691b      	ldr	r3, [r3, #16]
 8004cc4:	2b80      	cmp	r3, #128	; 0x80
 8004cc6:	d15a      	bne.n	8004d7e <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	691a      	ldr	r2, [r3, #16]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	b2d2      	uxtb	r2, r2
 8004cd2:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	68db      	ldr	r3, [r3, #12]
 8004cde:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	627b      	str	r3, [r7, #36]	; 0x24
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	623b      	str	r3, [r7, #32]
 8004ce8:	e00b      	b.n	8004d02 <_StoreChar+0x72>
 8004cea:	6a3b      	ldr	r3, [r7, #32]
 8004cec:	b2da      	uxtb	r2, r3
 8004cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf0:	1c59      	adds	r1, r3, #1
 8004cf2:	6279      	str	r1, [r7, #36]	; 0x24
 8004cf4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004cf8:	b2d2      	uxtb	r2, r2
 8004cfa:	701a      	strb	r2, [r3, #0]
 8004cfc:	6a3b      	ldr	r3, [r7, #32]
 8004cfe:	09db      	lsrs	r3, r3, #7
 8004d00:	623b      	str	r3, [r7, #32]
 8004d02:	6a3b      	ldr	r3, [r7, #32]
 8004d04:	2b7f      	cmp	r3, #127	; 0x7f
 8004d06:	d8f0      	bhi.n	8004cea <_StoreChar+0x5a>
 8004d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d0a:	1c5a      	adds	r2, r3, #1
 8004d0c:	627a      	str	r2, [r7, #36]	; 0x24
 8004d0e:	6a3a      	ldr	r2, [r7, #32]
 8004d10:	b2d2      	uxtb	r2, r2
 8004d12:	701a      	strb	r2, [r3, #0]
 8004d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d16:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	61fb      	str	r3, [r7, #28]
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	61bb      	str	r3, [r7, #24]
 8004d20:	e00b      	b.n	8004d3a <_StoreChar+0xaa>
 8004d22:	69bb      	ldr	r3, [r7, #24]
 8004d24:	b2da      	uxtb	r2, r3
 8004d26:	69fb      	ldr	r3, [r7, #28]
 8004d28:	1c59      	adds	r1, r3, #1
 8004d2a:	61f9      	str	r1, [r7, #28]
 8004d2c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d30:	b2d2      	uxtb	r2, r2
 8004d32:	701a      	strb	r2, [r3, #0]
 8004d34:	69bb      	ldr	r3, [r7, #24]
 8004d36:	09db      	lsrs	r3, r3, #7
 8004d38:	61bb      	str	r3, [r7, #24]
 8004d3a:	69bb      	ldr	r3, [r7, #24]
 8004d3c:	2b7f      	cmp	r3, #127	; 0x7f
 8004d3e:	d8f0      	bhi.n	8004d22 <_StoreChar+0x92>
 8004d40:	69fb      	ldr	r3, [r7, #28]
 8004d42:	1c5a      	adds	r2, r3, #1
 8004d44:	61fa      	str	r2, [r7, #28]
 8004d46:	69ba      	ldr	r2, [r7, #24]
 8004d48:	b2d2      	uxtb	r2, r2
 8004d4a:	701a      	strb	r2, [r3, #0]
 8004d4c:	69fb      	ldr	r3, [r7, #28]
 8004d4e:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	221a      	movs	r2, #26
 8004d56:	6939      	ldr	r1, [r7, #16]
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f7ff feb1 	bl	8004ac0 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4618      	mov	r0, r3
 8004d64:	f7ff fdb9 	bl	80048da <_PreparePacket>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	1c5a      	adds	r2, r3, #1
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	611a      	str	r2, [r3, #16]
  }
}
 8004d7e:	bf00      	nop
 8004d80:	3728      	adds	r7, #40	; 0x28
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
	...

08004d88 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b08a      	sub	sp, #40	; 0x28
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	60f8      	str	r0, [r7, #12]
 8004d90:	60b9      	str	r1, [r7, #8]
 8004d92:	607a      	str	r2, [r7, #4]
 8004d94:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8004da2:	e007      	b.n	8004db4 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8004da4:	6a3a      	ldr	r2, [r7, #32]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dac:	623b      	str	r3, [r7, #32]
    Width++;
 8004dae:	69fb      	ldr	r3, [r7, #28]
 8004db0:	3301      	adds	r3, #1
 8004db2:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8004db4:	6a3a      	ldr	r2, [r7, #32]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	429a      	cmp	r2, r3
 8004dba:	d2f3      	bcs.n	8004da4 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8004dbc:	683a      	ldr	r2, [r7, #0]
 8004dbe:	69fb      	ldr	r3, [r7, #28]
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d901      	bls.n	8004dc8 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8004dc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dca:	f003 0301 	and.w	r3, r3, #1
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d11f      	bne.n	8004e12 <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 8004dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d01c      	beq.n	8004e12 <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8004dd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dda:	f003 0302 	and.w	r3, r3, #2
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d005      	beq.n	8004dee <_PrintUnsigned+0x66>
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d102      	bne.n	8004dee <_PrintUnsigned+0x66>
        c = '0';
 8004de8:	2330      	movs	r3, #48	; 0x30
 8004dea:	76fb      	strb	r3, [r7, #27]
 8004dec:	e001      	b.n	8004df2 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8004dee:	2320      	movs	r3, #32
 8004df0:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004df2:	e007      	b.n	8004e04 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8004df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004df6:	3b01      	subs	r3, #1
 8004df8:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8004dfa:	7efb      	ldrb	r3, [r7, #27]
 8004dfc:	4619      	mov	r1, r3
 8004dfe:	68f8      	ldr	r0, [r7, #12]
 8004e00:	f7ff ff46 	bl	8004c90 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d003      	beq.n	8004e12 <_PrintUnsigned+0x8a>
 8004e0a:	69fa      	ldr	r2, [r7, #28]
 8004e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	d3f0      	bcc.n	8004df4 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d903      	bls.n	8004e20 <_PrintUnsigned+0x98>
      NumDigits--;
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	3b01      	subs	r3, #1
 8004e1c:	603b      	str	r3, [r7, #0]
 8004e1e:	e009      	b.n	8004e34 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8004e20:	68ba      	ldr	r2, [r7, #8]
 8004e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e24:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e28:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8004e2a:	697a      	ldr	r2, [r7, #20]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d200      	bcs.n	8004e34 <_PrintUnsigned+0xac>
        break;
 8004e32:	e005      	b.n	8004e40 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8004e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	fb02 f303 	mul.w	r3, r2, r3
 8004e3c:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8004e3e:	e7e8      	b.n	8004e12 <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8004e40:	68ba      	ldr	r2, [r7, #8]
 8004e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e48:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e4e:	fb02 f303 	mul.w	r3, r2, r3
 8004e52:	68ba      	ldr	r2, [r7, #8]
 8004e54:	1ad3      	subs	r3, r2, r3
 8004e56:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8004e58:	4a15      	ldr	r2, [pc, #84]	; (8004eb0 <_PrintUnsigned+0x128>)
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	4413      	add	r3, r2
 8004e5e:	781b      	ldrb	r3, [r3, #0]
 8004e60:	4619      	mov	r1, r3
 8004e62:	68f8      	ldr	r0, [r7, #12]
 8004e64:	f7ff ff14 	bl	8004c90 <_StoreChar>
    Digit /= Base;
 8004e68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e70:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 8004e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d1e3      	bne.n	8004e40 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8004e78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e7a:	f003 0301 	and.w	r3, r3, #1
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d011      	beq.n	8004ea6 <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 8004e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d00e      	beq.n	8004ea6 <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004e88:	e006      	b.n	8004e98 <_PrintUnsigned+0x110>
        FieldWidth--;
 8004e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e8c:	3b01      	subs	r3, #1
 8004e8e:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8004e90:	2120      	movs	r1, #32
 8004e92:	68f8      	ldr	r0, [r7, #12]
 8004e94:	f7ff fefc 	bl	8004c90 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d003      	beq.n	8004ea6 <_PrintUnsigned+0x11e>
 8004e9e:	69fa      	ldr	r2, [r7, #28]
 8004ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ea2:	429a      	cmp	r2, r3
 8004ea4:	d3f1      	bcc.n	8004e8a <_PrintUnsigned+0x102>
      }
    }
  }
}
 8004ea6:	bf00      	nop
 8004ea8:	3728      	adds	r7, #40	; 0x28
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}
 8004eae:	bf00      	nop
 8004eb0:	080066c8 	.word	0x080066c8

08004eb4 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b088      	sub	sp, #32
 8004eb8:	af02      	add	r7, sp, #8
 8004eba:	60f8      	str	r0, [r7, #12]
 8004ebc:	60b9      	str	r1, [r7, #8]
 8004ebe:	607a      	str	r2, [r7, #4]
 8004ec0:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	bfb8      	it	lt
 8004ec8:	425b      	neglt	r3, r3
 8004eca:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8004ed0:	e007      	b.n	8004ee2 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	693a      	ldr	r2, [r7, #16]
 8004ed6:	fb92 f3f3 	sdiv	r3, r2, r3
 8004eda:	613b      	str	r3, [r7, #16]
    Width++;
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	3301      	adds	r3, #1
 8004ee0:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	693a      	ldr	r2, [r7, #16]
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	daf3      	bge.n	8004ed2 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8004eea:	683a      	ldr	r2, [r7, #0]
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d901      	bls.n	8004ef6 <_PrintInt+0x42>
    Width = NumDigits;
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8004ef6:	6a3b      	ldr	r3, [r7, #32]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d00a      	beq.n	8004f12 <_PrintInt+0x5e>
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	db04      	blt.n	8004f0c <_PrintInt+0x58>
 8004f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f04:	f003 0304 	and.w	r3, r3, #4
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d002      	beq.n	8004f12 <_PrintInt+0x5e>
    FieldWidth--;
 8004f0c:	6a3b      	ldr	r3, [r7, #32]
 8004f0e:	3b01      	subs	r3, #1
 8004f10:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8004f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f14:	f003 0302 	and.w	r3, r3, #2
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d002      	beq.n	8004f22 <_PrintInt+0x6e>
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d016      	beq.n	8004f50 <_PrintInt+0x9c>
 8004f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f24:	f003 0301 	and.w	r3, r3, #1
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d111      	bne.n	8004f50 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8004f2c:	6a3b      	ldr	r3, [r7, #32]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d00e      	beq.n	8004f50 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004f32:	e006      	b.n	8004f42 <_PrintInt+0x8e>
        FieldWidth--;
 8004f34:	6a3b      	ldr	r3, [r7, #32]
 8004f36:	3b01      	subs	r3, #1
 8004f38:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8004f3a:	2120      	movs	r1, #32
 8004f3c:	68f8      	ldr	r0, [r7, #12]
 8004f3e:	f7ff fea7 	bl	8004c90 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004f42:	6a3b      	ldr	r3, [r7, #32]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d003      	beq.n	8004f50 <_PrintInt+0x9c>
 8004f48:	697a      	ldr	r2, [r7, #20]
 8004f4a:	6a3b      	ldr	r3, [r7, #32]
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	d3f1      	bcc.n	8004f34 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	da07      	bge.n	8004f66 <_PrintInt+0xb2>
    v = -v;
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	425b      	negs	r3, r3
 8004f5a:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8004f5c:	212d      	movs	r1, #45	; 0x2d
 8004f5e:	68f8      	ldr	r0, [r7, #12]
 8004f60:	f7ff fe96 	bl	8004c90 <_StoreChar>
 8004f64:	e008      	b.n	8004f78 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8004f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f68:	f003 0304 	and.w	r3, r3, #4
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d003      	beq.n	8004f78 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8004f70:	212b      	movs	r1, #43	; 0x2b
 8004f72:	68f8      	ldr	r0, [r7, #12]
 8004f74:	f7ff fe8c 	bl	8004c90 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8004f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7a:	f003 0302 	and.w	r3, r3, #2
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d019      	beq.n	8004fb6 <_PrintInt+0x102>
 8004f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f84:	f003 0301 	and.w	r3, r3, #1
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d114      	bne.n	8004fb6 <_PrintInt+0x102>
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d111      	bne.n	8004fb6 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8004f92:	6a3b      	ldr	r3, [r7, #32]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d00e      	beq.n	8004fb6 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004f98:	e006      	b.n	8004fa8 <_PrintInt+0xf4>
        FieldWidth--;
 8004f9a:	6a3b      	ldr	r3, [r7, #32]
 8004f9c:	3b01      	subs	r3, #1
 8004f9e:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8004fa0:	2130      	movs	r1, #48	; 0x30
 8004fa2:	68f8      	ldr	r0, [r7, #12]
 8004fa4:	f7ff fe74 	bl	8004c90 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004fa8:	6a3b      	ldr	r3, [r7, #32]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d003      	beq.n	8004fb6 <_PrintInt+0x102>
 8004fae:	697a      	ldr	r2, [r7, #20]
 8004fb0:	6a3b      	ldr	r3, [r7, #32]
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	d3f1      	bcc.n	8004f9a <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8004fb6:	68b9      	ldr	r1, [r7, #8]
 8004fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fba:	9301      	str	r3, [sp, #4]
 8004fbc:	6a3b      	ldr	r3, [r7, #32]
 8004fbe:	9300      	str	r3, [sp, #0]
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	687a      	ldr	r2, [r7, #4]
 8004fc4:	68f8      	ldr	r0, [r7, #12]
 8004fc6:	f7ff fedf 	bl	8004d88 <_PrintUnsigned>
}
 8004fca:	bf00      	nop
 8004fcc:	3718      	adds	r7, #24
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}
	...

08004fd4 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b098      	sub	sp, #96	; 0x60
 8004fd8:	af02      	add	r7, sp, #8
 8004fda:	60f8      	str	r0, [r7, #12]
 8004fdc:	60b9      	str	r1, [r7, #8]
 8004fde:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004fe0:	f3ef 8311 	mrs	r3, BASEPRI
 8004fe4:	f04f 0120 	mov.w	r1, #32
 8004fe8:	f381 8811 	msr	BASEPRI, r1
 8004fec:	633b      	str	r3, [r7, #48]	; 0x30
 8004fee:	48b7      	ldr	r0, [pc, #732]	; (80052cc <_VPrintTarget+0x2f8>)
 8004ff0:	f7ff fc73 	bl	80048da <_PreparePacket>
 8004ff4:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8004ff6:	4bb5      	ldr	r3, [pc, #724]	; (80052cc <_VPrintTarget+0x2f8>)
 8004ff8:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 8004ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005000:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8005002:	69fb      	ldr	r3, [r7, #28]
 8005004:	3301      	adds	r3, #1
 8005006:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	781b      	ldrb	r3, [r3, #0]
 8005010:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	3301      	adds	r3, #1
 8005018:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 800501a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800501e:	2b00      	cmp	r3, #0
 8005020:	f000 8183 	beq.w	800532a <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 8005024:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005028:	2b25      	cmp	r3, #37	; 0x25
 800502a:	f040 8170 	bne.w	800530e <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 800502e:	2300      	movs	r3, #0
 8005030:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8005032:	2301      	movs	r3, #1
 8005034:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	781b      	ldrb	r3, [r3, #0]
 800503a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 800503e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005042:	3b23      	subs	r3, #35	; 0x23
 8005044:	2b0d      	cmp	r3, #13
 8005046:	d83f      	bhi.n	80050c8 <_VPrintTarget+0xf4>
 8005048:	a201      	add	r2, pc, #4	; (adr r2, 8005050 <_VPrintTarget+0x7c>)
 800504a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800504e:	bf00      	nop
 8005050:	080050b9 	.word	0x080050b9
 8005054:	080050c9 	.word	0x080050c9
 8005058:	080050c9 	.word	0x080050c9
 800505c:	080050c9 	.word	0x080050c9
 8005060:	080050c9 	.word	0x080050c9
 8005064:	080050c9 	.word	0x080050c9
 8005068:	080050c9 	.word	0x080050c9
 800506c:	080050c9 	.word	0x080050c9
 8005070:	080050a9 	.word	0x080050a9
 8005074:	080050c9 	.word	0x080050c9
 8005078:	08005089 	.word	0x08005089
 800507c:	080050c9 	.word	0x080050c9
 8005080:	080050c9 	.word	0x080050c9
 8005084:	08005099 	.word	0x08005099
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8005088:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800508a:	f043 0301 	orr.w	r3, r3, #1
 800508e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	3301      	adds	r3, #1
 8005094:	60fb      	str	r3, [r7, #12]
 8005096:	e01a      	b.n	80050ce <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8005098:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800509a:	f043 0302 	orr.w	r3, r3, #2
 800509e:	64bb      	str	r3, [r7, #72]	; 0x48
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	3301      	adds	r3, #1
 80050a4:	60fb      	str	r3, [r7, #12]
 80050a6:	e012      	b.n	80050ce <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 80050a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050aa:	f043 0304 	orr.w	r3, r3, #4
 80050ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	3301      	adds	r3, #1
 80050b4:	60fb      	str	r3, [r7, #12]
 80050b6:	e00a      	b.n	80050ce <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 80050b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050ba:	f043 0308 	orr.w	r3, r3, #8
 80050be:	64bb      	str	r3, [r7, #72]	; 0x48
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	3301      	adds	r3, #1
 80050c4:	60fb      	str	r3, [r7, #12]
 80050c6:	e002      	b.n	80050ce <_VPrintTarget+0xfa>
        default:  v = 0; break;
 80050c8:	2300      	movs	r3, #0
 80050ca:	653b      	str	r3, [r7, #80]	; 0x50
 80050cc:	bf00      	nop
        }
      } while (v);
 80050ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d1b0      	bne.n	8005036 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 80050d4:	2300      	movs	r3, #0
 80050d6:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	781b      	ldrb	r3, [r3, #0]
 80050dc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 80050e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80050e4:	2b2f      	cmp	r3, #47	; 0x2f
 80050e6:	d912      	bls.n	800510e <_VPrintTarget+0x13a>
 80050e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80050ec:	2b39      	cmp	r3, #57	; 0x39
 80050ee:	d80e      	bhi.n	800510e <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	3301      	adds	r3, #1
 80050f4:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 80050f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80050f8:	4613      	mov	r3, r2
 80050fa:	009b      	lsls	r3, r3, #2
 80050fc:	4413      	add	r3, r2
 80050fe:	005b      	lsls	r3, r3, #1
 8005100:	461a      	mov	r2, r3
 8005102:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005106:	4413      	add	r3, r2
 8005108:	3b30      	subs	r3, #48	; 0x30
 800510a:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 800510c:	e7e4      	b.n	80050d8 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 800510e:	2300      	movs	r3, #0
 8005110:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	781b      	ldrb	r3, [r3, #0]
 8005116:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 800511a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800511e:	2b2e      	cmp	r3, #46	; 0x2e
 8005120:	d11d      	bne.n	800515e <_VPrintTarget+0x18a>
        sFormat++;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	3301      	adds	r3, #1
 8005126:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	781b      	ldrb	r3, [r3, #0]
 800512c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8005130:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005134:	2b2f      	cmp	r3, #47	; 0x2f
 8005136:	d912      	bls.n	800515e <_VPrintTarget+0x18a>
 8005138:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800513c:	2b39      	cmp	r3, #57	; 0x39
 800513e:	d80e      	bhi.n	800515e <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	3301      	adds	r3, #1
 8005144:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8005146:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005148:	4613      	mov	r3, r2
 800514a:	009b      	lsls	r3, r3, #2
 800514c:	4413      	add	r3, r2
 800514e:	005b      	lsls	r3, r3, #1
 8005150:	461a      	mov	r2, r3
 8005152:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005156:	4413      	add	r3, r2
 8005158:	3b30      	subs	r3, #48	; 0x30
 800515a:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 800515c:	e7e4      	b.n	8005128 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	781b      	ldrb	r3, [r3, #0]
 8005162:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8005166:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800516a:	2b6c      	cmp	r3, #108	; 0x6c
 800516c:	d003      	beq.n	8005176 <_VPrintTarget+0x1a2>
 800516e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005172:	2b68      	cmp	r3, #104	; 0x68
 8005174:	d107      	bne.n	8005186 <_VPrintTarget+0x1b2>
          c = *sFormat;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	781b      	ldrb	r3, [r3, #0]
 800517a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	3301      	adds	r3, #1
 8005182:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8005184:	e7ef      	b.n	8005166 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8005186:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800518a:	2b25      	cmp	r3, #37	; 0x25
 800518c:	f000 80b3 	beq.w	80052f6 <_VPrintTarget+0x322>
 8005190:	2b25      	cmp	r3, #37	; 0x25
 8005192:	f2c0 80b7 	blt.w	8005304 <_VPrintTarget+0x330>
 8005196:	2b78      	cmp	r3, #120	; 0x78
 8005198:	f300 80b4 	bgt.w	8005304 <_VPrintTarget+0x330>
 800519c:	2b58      	cmp	r3, #88	; 0x58
 800519e:	f2c0 80b1 	blt.w	8005304 <_VPrintTarget+0x330>
 80051a2:	3b58      	subs	r3, #88	; 0x58
 80051a4:	2b20      	cmp	r3, #32
 80051a6:	f200 80ad 	bhi.w	8005304 <_VPrintTarget+0x330>
 80051aa:	a201      	add	r2, pc, #4	; (adr r2, 80051b0 <_VPrintTarget+0x1dc>)
 80051ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051b0:	080052a7 	.word	0x080052a7
 80051b4:	08005305 	.word	0x08005305
 80051b8:	08005305 	.word	0x08005305
 80051bc:	08005305 	.word	0x08005305
 80051c0:	08005305 	.word	0x08005305
 80051c4:	08005305 	.word	0x08005305
 80051c8:	08005305 	.word	0x08005305
 80051cc:	08005305 	.word	0x08005305
 80051d0:	08005305 	.word	0x08005305
 80051d4:	08005305 	.word	0x08005305
 80051d8:	08005305 	.word	0x08005305
 80051dc:	08005235 	.word	0x08005235
 80051e0:	0800525b 	.word	0x0800525b
 80051e4:	08005305 	.word	0x08005305
 80051e8:	08005305 	.word	0x08005305
 80051ec:	08005305 	.word	0x08005305
 80051f0:	08005305 	.word	0x08005305
 80051f4:	08005305 	.word	0x08005305
 80051f8:	08005305 	.word	0x08005305
 80051fc:	08005305 	.word	0x08005305
 8005200:	08005305 	.word	0x08005305
 8005204:	08005305 	.word	0x08005305
 8005208:	08005305 	.word	0x08005305
 800520c:	08005305 	.word	0x08005305
 8005210:	080052d1 	.word	0x080052d1
 8005214:	08005305 	.word	0x08005305
 8005218:	08005305 	.word	0x08005305
 800521c:	08005305 	.word	0x08005305
 8005220:	08005305 	.word	0x08005305
 8005224:	08005281 	.word	0x08005281
 8005228:	08005305 	.word	0x08005305
 800522c:	08005305 	.word	0x08005305
 8005230:	080052a7 	.word	0x080052a7
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	1d19      	adds	r1, r3, #4
 800523a:	687a      	ldr	r2, [r7, #4]
 800523c:	6011      	str	r1, [r2, #0]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8005242:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005244:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 8005248:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800524c:	f107 0314 	add.w	r3, r7, #20
 8005250:	4611      	mov	r1, r2
 8005252:	4618      	mov	r0, r3
 8005254:	f7ff fd1c 	bl	8004c90 <_StoreChar>
        break;
 8005258:	e055      	b.n	8005306 <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	1d19      	adds	r1, r3, #4
 8005260:	687a      	ldr	r2, [r7, #4]
 8005262:	6011      	str	r1, [r2, #0]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005268:	f107 0014 	add.w	r0, r7, #20
 800526c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800526e:	9301      	str	r3, [sp, #4]
 8005270:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005272:	9300      	str	r3, [sp, #0]
 8005274:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005276:	220a      	movs	r2, #10
 8005278:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800527a:	f7ff fe1b 	bl	8004eb4 <_PrintInt>
        break;
 800527e:	e042      	b.n	8005306 <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	1d19      	adds	r1, r3, #4
 8005286:	687a      	ldr	r2, [r7, #4]
 8005288:	6011      	str	r1, [r2, #0]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 800528e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005290:	f107 0014 	add.w	r0, r7, #20
 8005294:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005296:	9301      	str	r3, [sp, #4]
 8005298:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800529a:	9300      	str	r3, [sp, #0]
 800529c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800529e:	220a      	movs	r2, #10
 80052a0:	f7ff fd72 	bl	8004d88 <_PrintUnsigned>
        break;
 80052a4:	e02f      	b.n	8005306 <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	1d19      	adds	r1, r3, #4
 80052ac:	687a      	ldr	r2, [r7, #4]
 80052ae:	6011      	str	r1, [r2, #0]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 80052b4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80052b6:	f107 0014 	add.w	r0, r7, #20
 80052ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052bc:	9301      	str	r3, [sp, #4]
 80052be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052c0:	9300      	str	r3, [sp, #0]
 80052c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052c4:	2210      	movs	r2, #16
 80052c6:	f7ff fd5f 	bl	8004d88 <_PrintUnsigned>
        break;
 80052ca:	e01c      	b.n	8005306 <_VPrintTarget+0x332>
 80052cc:	20014358 	.word	0x20014358
      case 'p':
        v = va_arg(*pParamList, int);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	1d19      	adds	r1, r3, #4
 80052d6:	687a      	ldr	r2, [r7, #4]
 80052d8:	6011      	str	r1, [r2, #0]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 80052de:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80052e0:	f107 0014 	add.w	r0, r7, #20
 80052e4:	2300      	movs	r3, #0
 80052e6:	9301      	str	r3, [sp, #4]
 80052e8:	2308      	movs	r3, #8
 80052ea:	9300      	str	r3, [sp, #0]
 80052ec:	2308      	movs	r3, #8
 80052ee:	2210      	movs	r2, #16
 80052f0:	f7ff fd4a 	bl	8004d88 <_PrintUnsigned>
        break;
 80052f4:	e007      	b.n	8005306 <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 80052f6:	f107 0314 	add.w	r3, r7, #20
 80052fa:	2125      	movs	r1, #37	; 0x25
 80052fc:	4618      	mov	r0, r3
 80052fe:	f7ff fcc7 	bl	8004c90 <_StoreChar>
        break;
 8005302:	e000      	b.n	8005306 <_VPrintTarget+0x332>
      default:
        break;
 8005304:	bf00      	nop
      }
      sFormat++;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	3301      	adds	r3, #1
 800530a:	60fb      	str	r3, [r7, #12]
 800530c:	e007      	b.n	800531e <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 800530e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8005312:	f107 0314 	add.w	r3, r7, #20
 8005316:	4611      	mov	r1, r2
 8005318:	4618      	mov	r0, r3
 800531a:	f7ff fcb9 	bl	8004c90 <_StoreChar>
    }
  } while (*sFormat);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	781b      	ldrb	r3, [r3, #0]
 8005322:	2b00      	cmp	r3, #0
 8005324:	f47f ae72 	bne.w	800500c <_VPrintTarget+0x38>
 8005328:	e000      	b.n	800532c <_VPrintTarget+0x358>
      break;
 800532a:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 800532c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532e:	2b00      	cmp	r3, #0
 8005330:	d041      	beq.n	80053b6 <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 8005332:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005334:	69fb      	ldr	r3, [r7, #28]
 8005336:	b2d2      	uxtb	r2, r2
 8005338:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 800533a:	69bb      	ldr	r3, [r7, #24]
 800533c:	643b      	str	r3, [r7, #64]	; 0x40
 800533e:	6a3b      	ldr	r3, [r7, #32]
 8005340:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005342:	e00b      	b.n	800535c <_VPrintTarget+0x388>
 8005344:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005346:	b2da      	uxtb	r2, r3
 8005348:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800534a:	1c59      	adds	r1, r3, #1
 800534c:	6439      	str	r1, [r7, #64]	; 0x40
 800534e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005352:	b2d2      	uxtb	r2, r2
 8005354:	701a      	strb	r2, [r3, #0]
 8005356:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005358:	09db      	lsrs	r3, r3, #7
 800535a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800535c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800535e:	2b7f      	cmp	r3, #127	; 0x7f
 8005360:	d8f0      	bhi.n	8005344 <_VPrintTarget+0x370>
 8005362:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005364:	1c5a      	adds	r2, r3, #1
 8005366:	643a      	str	r2, [r7, #64]	; 0x40
 8005368:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800536a:	b2d2      	uxtb	r2, r2
 800536c:	701a      	strb	r2, [r3, #0]
 800536e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005370:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8005372:	69bb      	ldr	r3, [r7, #24]
 8005374:	63bb      	str	r3, [r7, #56]	; 0x38
 8005376:	2300      	movs	r3, #0
 8005378:	637b      	str	r3, [r7, #52]	; 0x34
 800537a:	e00b      	b.n	8005394 <_VPrintTarget+0x3c0>
 800537c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800537e:	b2da      	uxtb	r2, r3
 8005380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005382:	1c59      	adds	r1, r3, #1
 8005384:	63b9      	str	r1, [r7, #56]	; 0x38
 8005386:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800538a:	b2d2      	uxtb	r2, r2
 800538c:	701a      	strb	r2, [r3, #0]
 800538e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005390:	09db      	lsrs	r3, r3, #7
 8005392:	637b      	str	r3, [r7, #52]	; 0x34
 8005394:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005396:	2b7f      	cmp	r3, #127	; 0x7f
 8005398:	d8f0      	bhi.n	800537c <_VPrintTarget+0x3a8>
 800539a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800539c:	1c5a      	adds	r2, r3, #1
 800539e:	63ba      	str	r2, [r7, #56]	; 0x38
 80053a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80053a2:	b2d2      	uxtb	r2, r2
 80053a4:	701a      	strb	r2, [r3, #0]
 80053a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053a8:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80053aa:	69fb      	ldr	r3, [r7, #28]
 80053ac:	69b9      	ldr	r1, [r7, #24]
 80053ae:	221a      	movs	r2, #26
 80053b0:	4618      	mov	r0, r3
 80053b2:	f7ff fb85 	bl	8004ac0 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 80053b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053b8:	f383 8811 	msr	BASEPRI, r3
#endif
}
 80053bc:	bf00      	nop
 80053be:	3758      	adds	r7, #88	; 0x58
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd80      	pop	{r7, pc}

080053c4 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b086      	sub	sp, #24
 80053c8:	af02      	add	r7, sp, #8
 80053ca:	60f8      	str	r0, [r7, #12]
 80053cc:	60b9      	str	r1, [r7, #8]
 80053ce:	607a      	str	r2, [r7, #4]
 80053d0:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80053d2:	2300      	movs	r3, #0
 80053d4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80053d8:	4917      	ldr	r1, [pc, #92]	; (8005438 <SEGGER_SYSVIEW_Init+0x74>)
 80053da:	4818      	ldr	r0, [pc, #96]	; (800543c <SEGGER_SYSVIEW_Init+0x78>)
 80053dc:	f7ff f93c 	bl	8004658 <SEGGER_RTT_AllocUpBuffer>
 80053e0:	4603      	mov	r3, r0
 80053e2:	b2da      	uxtb	r2, r3
 80053e4:	4b16      	ldr	r3, [pc, #88]	; (8005440 <SEGGER_SYSVIEW_Init+0x7c>)
 80053e6:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80053e8:	4b15      	ldr	r3, [pc, #84]	; (8005440 <SEGGER_SYSVIEW_Init+0x7c>)
 80053ea:	785a      	ldrb	r2, [r3, #1]
 80053ec:	4b14      	ldr	r3, [pc, #80]	; (8005440 <SEGGER_SYSVIEW_Init+0x7c>)
 80053ee:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80053f0:	4b13      	ldr	r3, [pc, #76]	; (8005440 <SEGGER_SYSVIEW_Init+0x7c>)
 80053f2:	7e1b      	ldrb	r3, [r3, #24]
 80053f4:	4618      	mov	r0, r3
 80053f6:	2300      	movs	r3, #0
 80053f8:	9300      	str	r3, [sp, #0]
 80053fa:	2308      	movs	r3, #8
 80053fc:	4a11      	ldr	r2, [pc, #68]	; (8005444 <SEGGER_SYSVIEW_Init+0x80>)
 80053fe:	490f      	ldr	r1, [pc, #60]	; (800543c <SEGGER_SYSVIEW_Init+0x78>)
 8005400:	f7ff f9ae 	bl	8004760 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8005404:	4b0e      	ldr	r3, [pc, #56]	; (8005440 <SEGGER_SYSVIEW_Init+0x7c>)
 8005406:	2200      	movs	r2, #0
 8005408:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800540a:	4b0f      	ldr	r3, [pc, #60]	; (8005448 <SEGGER_SYSVIEW_Init+0x84>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a0c      	ldr	r2, [pc, #48]	; (8005440 <SEGGER_SYSVIEW_Init+0x7c>)
 8005410:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8005412:	4a0b      	ldr	r2, [pc, #44]	; (8005440 <SEGGER_SYSVIEW_Init+0x7c>)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8005418:	4a09      	ldr	r2, [pc, #36]	; (8005440 <SEGGER_SYSVIEW_Init+0x7c>)
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800541e:	4a08      	ldr	r2, [pc, #32]	; (8005440 <SEGGER_SYSVIEW_Init+0x7c>)
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8005424:	4a06      	ldr	r2, [pc, #24]	; (8005440 <SEGGER_SYSVIEW_Init+0x7c>)
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800542a:	4b05      	ldr	r3, [pc, #20]	; (8005440 <SEGGER_SYSVIEW_Init+0x7c>)
 800542c:	2200      	movs	r2, #0
 800542e:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8005430:	bf00      	nop
 8005432:	3710      	adds	r7, #16
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}
 8005438:	20013320 	.word	0x20013320
 800543c:	08006690 	.word	0x08006690
 8005440:	20014328 	.word	0x20014328
 8005444:	20014320 	.word	0x20014320
 8005448:	e0001004 	.word	0xe0001004

0800544c <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 800544c:	b480      	push	{r7}
 800544e:	b083      	sub	sp, #12
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8005454:	4a04      	ldr	r2, [pc, #16]	; (8005468 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6113      	str	r3, [r2, #16]
}
 800545a:	bf00      	nop
 800545c:	370c      	adds	r7, #12
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr
 8005466:	bf00      	nop
 8005468:	20014328 	.word	0x20014328

0800546c <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800546c:	b580      	push	{r7, lr}
 800546e:	b084      	sub	sp, #16
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005474:	f3ef 8311 	mrs	r3, BASEPRI
 8005478:	f04f 0120 	mov.w	r1, #32
 800547c:	f381 8811 	msr	BASEPRI, r1
 8005480:	60fb      	str	r3, [r7, #12]
 8005482:	4808      	ldr	r0, [pc, #32]	; (80054a4 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005484:	f7ff fa29 	bl	80048da <_PreparePacket>
 8005488:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800548a:	687a      	ldr	r2, [r7, #4]
 800548c:	68b9      	ldr	r1, [r7, #8]
 800548e:	68b8      	ldr	r0, [r7, #8]
 8005490:	f7ff fb16 	bl	8004ac0 <_SendPacket>
  RECORD_END();
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f383 8811 	msr	BASEPRI, r3
}
 800549a:	bf00      	nop
 800549c:	3710      	adds	r7, #16
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}
 80054a2:	bf00      	nop
 80054a4:	20014358 	.word	0x20014358

080054a8 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b088      	sub	sp, #32
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
 80054b0:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80054b2:	f3ef 8311 	mrs	r3, BASEPRI
 80054b6:	f04f 0120 	mov.w	r1, #32
 80054ba:	f381 8811 	msr	BASEPRI, r1
 80054be:	617b      	str	r3, [r7, #20]
 80054c0:	4816      	ldr	r0, [pc, #88]	; (800551c <SEGGER_SYSVIEW_RecordU32+0x74>)
 80054c2:	f7ff fa0a 	bl	80048da <_PreparePacket>
 80054c6:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	61fb      	str	r3, [r7, #28]
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	61bb      	str	r3, [r7, #24]
 80054d4:	e00b      	b.n	80054ee <SEGGER_SYSVIEW_RecordU32+0x46>
 80054d6:	69bb      	ldr	r3, [r7, #24]
 80054d8:	b2da      	uxtb	r2, r3
 80054da:	69fb      	ldr	r3, [r7, #28]
 80054dc:	1c59      	adds	r1, r3, #1
 80054de:	61f9      	str	r1, [r7, #28]
 80054e0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80054e4:	b2d2      	uxtb	r2, r2
 80054e6:	701a      	strb	r2, [r3, #0]
 80054e8:	69bb      	ldr	r3, [r7, #24]
 80054ea:	09db      	lsrs	r3, r3, #7
 80054ec:	61bb      	str	r3, [r7, #24]
 80054ee:	69bb      	ldr	r3, [r7, #24]
 80054f0:	2b7f      	cmp	r3, #127	; 0x7f
 80054f2:	d8f0      	bhi.n	80054d6 <SEGGER_SYSVIEW_RecordU32+0x2e>
 80054f4:	69fb      	ldr	r3, [r7, #28]
 80054f6:	1c5a      	adds	r2, r3, #1
 80054f8:	61fa      	str	r2, [r7, #28]
 80054fa:	69ba      	ldr	r2, [r7, #24]
 80054fc:	b2d2      	uxtb	r2, r2
 80054fe:	701a      	strb	r2, [r3, #0]
 8005500:	69fb      	ldr	r3, [r7, #28]
 8005502:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005504:	687a      	ldr	r2, [r7, #4]
 8005506:	68f9      	ldr	r1, [r7, #12]
 8005508:	6938      	ldr	r0, [r7, #16]
 800550a:	f7ff fad9 	bl	8004ac0 <_SendPacket>
  RECORD_END();
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	f383 8811 	msr	BASEPRI, r3
}
 8005514:	bf00      	nop
 8005516:	3720      	adds	r7, #32
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}
 800551c:	20014358 	.word	0x20014358

08005520 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8005520:	b580      	push	{r7, lr}
 8005522:	b08c      	sub	sp, #48	; 0x30
 8005524:	af00      	add	r7, sp, #0
 8005526:	60f8      	str	r0, [r7, #12]
 8005528:	60b9      	str	r1, [r7, #8]
 800552a:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800552c:	f3ef 8311 	mrs	r3, BASEPRI
 8005530:	f04f 0120 	mov.w	r1, #32
 8005534:	f381 8811 	msr	BASEPRI, r1
 8005538:	61fb      	str	r3, [r7, #28]
 800553a:	4825      	ldr	r0, [pc, #148]	; (80055d0 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800553c:	f7ff f9cd 	bl	80048da <_PreparePacket>
 8005540:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005542:	69bb      	ldr	r3, [r7, #24]
 8005544:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	62fb      	str	r3, [r7, #44]	; 0x2c
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	62bb      	str	r3, [r7, #40]	; 0x28
 800554e:	e00b      	b.n	8005568 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8005550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005552:	b2da      	uxtb	r2, r3
 8005554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005556:	1c59      	adds	r1, r3, #1
 8005558:	62f9      	str	r1, [r7, #44]	; 0x2c
 800555a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800555e:	b2d2      	uxtb	r2, r2
 8005560:	701a      	strb	r2, [r3, #0]
 8005562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005564:	09db      	lsrs	r3, r3, #7
 8005566:	62bb      	str	r3, [r7, #40]	; 0x28
 8005568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800556a:	2b7f      	cmp	r3, #127	; 0x7f
 800556c:	d8f0      	bhi.n	8005550 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800556e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005570:	1c5a      	adds	r2, r3, #1
 8005572:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005574:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005576:	b2d2      	uxtb	r2, r2
 8005578:	701a      	strb	r2, [r3, #0]
 800557a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800557c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	627b      	str	r3, [r7, #36]	; 0x24
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	623b      	str	r3, [r7, #32]
 8005586:	e00b      	b.n	80055a0 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8005588:	6a3b      	ldr	r3, [r7, #32]
 800558a:	b2da      	uxtb	r2, r3
 800558c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558e:	1c59      	adds	r1, r3, #1
 8005590:	6279      	str	r1, [r7, #36]	; 0x24
 8005592:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005596:	b2d2      	uxtb	r2, r2
 8005598:	701a      	strb	r2, [r3, #0]
 800559a:	6a3b      	ldr	r3, [r7, #32]
 800559c:	09db      	lsrs	r3, r3, #7
 800559e:	623b      	str	r3, [r7, #32]
 80055a0:	6a3b      	ldr	r3, [r7, #32]
 80055a2:	2b7f      	cmp	r3, #127	; 0x7f
 80055a4:	d8f0      	bhi.n	8005588 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80055a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a8:	1c5a      	adds	r2, r3, #1
 80055aa:	627a      	str	r2, [r7, #36]	; 0x24
 80055ac:	6a3a      	ldr	r2, [r7, #32]
 80055ae:	b2d2      	uxtb	r2, r2
 80055b0:	701a      	strb	r2, [r3, #0]
 80055b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b4:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80055b6:	68fa      	ldr	r2, [r7, #12]
 80055b8:	6979      	ldr	r1, [r7, #20]
 80055ba:	69b8      	ldr	r0, [r7, #24]
 80055bc:	f7ff fa80 	bl	8004ac0 <_SendPacket>
  RECORD_END();
 80055c0:	69fb      	ldr	r3, [r7, #28]
 80055c2:	f383 8811 	msr	BASEPRI, r3
}
 80055c6:	bf00      	nop
 80055c8:	3730      	adds	r7, #48	; 0x30
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}
 80055ce:	bf00      	nop
 80055d0:	20014358 	.word	0x20014358

080055d4 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b090      	sub	sp, #64	; 0x40
 80055d8:	af00      	add	r7, sp, #0
 80055da:	60f8      	str	r0, [r7, #12]
 80055dc:	60b9      	str	r1, [r7, #8]
 80055de:	607a      	str	r2, [r7, #4]
 80055e0:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80055e2:	f3ef 8311 	mrs	r3, BASEPRI
 80055e6:	f04f 0120 	mov.w	r1, #32
 80055ea:	f381 8811 	msr	BASEPRI, r1
 80055ee:	61fb      	str	r3, [r7, #28]
 80055f0:	4840      	ldr	r0, [pc, #256]	; (80056f4 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 80055f2:	f7ff f972 	bl	80048da <_PreparePacket>
 80055f6:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80055f8:	69bb      	ldr	r3, [r7, #24]
 80055fa:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	63bb      	str	r3, [r7, #56]	; 0x38
 8005604:	e00b      	b.n	800561e <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8005606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005608:	b2da      	uxtb	r2, r3
 800560a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800560c:	1c59      	adds	r1, r3, #1
 800560e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005610:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005614:	b2d2      	uxtb	r2, r2
 8005616:	701a      	strb	r2, [r3, #0]
 8005618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800561a:	09db      	lsrs	r3, r3, #7
 800561c:	63bb      	str	r3, [r7, #56]	; 0x38
 800561e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005620:	2b7f      	cmp	r3, #127	; 0x7f
 8005622:	d8f0      	bhi.n	8005606 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8005624:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005626:	1c5a      	adds	r2, r3, #1
 8005628:	63fa      	str	r2, [r7, #60]	; 0x3c
 800562a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800562c:	b2d2      	uxtb	r2, r2
 800562e:	701a      	strb	r2, [r3, #0]
 8005630:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005632:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	637b      	str	r3, [r7, #52]	; 0x34
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	633b      	str	r3, [r7, #48]	; 0x30
 800563c:	e00b      	b.n	8005656 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800563e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005640:	b2da      	uxtb	r2, r3
 8005642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005644:	1c59      	adds	r1, r3, #1
 8005646:	6379      	str	r1, [r7, #52]	; 0x34
 8005648:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800564c:	b2d2      	uxtb	r2, r2
 800564e:	701a      	strb	r2, [r3, #0]
 8005650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005652:	09db      	lsrs	r3, r3, #7
 8005654:	633b      	str	r3, [r7, #48]	; 0x30
 8005656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005658:	2b7f      	cmp	r3, #127	; 0x7f
 800565a:	d8f0      	bhi.n	800563e <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 800565c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800565e:	1c5a      	adds	r2, r3, #1
 8005660:	637a      	str	r2, [r7, #52]	; 0x34
 8005662:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005664:	b2d2      	uxtb	r2, r2
 8005666:	701a      	strb	r2, [r3, #0]
 8005668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800566a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	62bb      	str	r3, [r7, #40]	; 0x28
 8005674:	e00b      	b.n	800568e <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8005676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005678:	b2da      	uxtb	r2, r3
 800567a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800567c:	1c59      	adds	r1, r3, #1
 800567e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005680:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005684:	b2d2      	uxtb	r2, r2
 8005686:	701a      	strb	r2, [r3, #0]
 8005688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800568a:	09db      	lsrs	r3, r3, #7
 800568c:	62bb      	str	r3, [r7, #40]	; 0x28
 800568e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005690:	2b7f      	cmp	r3, #127	; 0x7f
 8005692:	d8f0      	bhi.n	8005676 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8005694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005696:	1c5a      	adds	r2, r3, #1
 8005698:	62fa      	str	r2, [r7, #44]	; 0x2c
 800569a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800569c:	b2d2      	uxtb	r2, r2
 800569e:	701a      	strb	r2, [r3, #0]
 80056a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056a2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	627b      	str	r3, [r7, #36]	; 0x24
 80056a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056aa:	623b      	str	r3, [r7, #32]
 80056ac:	e00b      	b.n	80056c6 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 80056ae:	6a3b      	ldr	r3, [r7, #32]
 80056b0:	b2da      	uxtb	r2, r3
 80056b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b4:	1c59      	adds	r1, r3, #1
 80056b6:	6279      	str	r1, [r7, #36]	; 0x24
 80056b8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80056bc:	b2d2      	uxtb	r2, r2
 80056be:	701a      	strb	r2, [r3, #0]
 80056c0:	6a3b      	ldr	r3, [r7, #32]
 80056c2:	09db      	lsrs	r3, r3, #7
 80056c4:	623b      	str	r3, [r7, #32]
 80056c6:	6a3b      	ldr	r3, [r7, #32]
 80056c8:	2b7f      	cmp	r3, #127	; 0x7f
 80056ca:	d8f0      	bhi.n	80056ae <SEGGER_SYSVIEW_RecordU32x4+0xda>
 80056cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ce:	1c5a      	adds	r2, r3, #1
 80056d0:	627a      	str	r2, [r7, #36]	; 0x24
 80056d2:	6a3a      	ldr	r2, [r7, #32]
 80056d4:	b2d2      	uxtb	r2, r2
 80056d6:	701a      	strb	r2, [r3, #0]
 80056d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056da:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80056dc:	68fa      	ldr	r2, [r7, #12]
 80056de:	6979      	ldr	r1, [r7, #20]
 80056e0:	69b8      	ldr	r0, [r7, #24]
 80056e2:	f7ff f9ed 	bl	8004ac0 <_SendPacket>
  RECORD_END();
 80056e6:	69fb      	ldr	r3, [r7, #28]
 80056e8:	f383 8811 	msr	BASEPRI, r3
}
 80056ec:	bf00      	nop
 80056ee:	3740      	adds	r7, #64	; 0x40
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}
 80056f4:	20014358 	.word	0x20014358

080056f8 <SEGGER_SYSVIEW_RecordU32x5>:
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*    Para4   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x5(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3, U32 Para4) {
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b092      	sub	sp, #72	; 0x48
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	60f8      	str	r0, [r7, #12]
 8005700:	60b9      	str	r1, [r7, #8]
 8005702:	607a      	str	r2, [r7, #4]
 8005704:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 5 * SEGGER_SYSVIEW_QUANTA_U32);
 8005706:	f3ef 8311 	mrs	r3, BASEPRI
 800570a:	f04f 0120 	mov.w	r1, #32
 800570e:	f381 8811 	msr	BASEPRI, r1
 8005712:	61fb      	str	r3, [r7, #28]
 8005714:	484e      	ldr	r0, [pc, #312]	; (8005850 <SEGGER_SYSVIEW_RecordU32x5+0x158>)
 8005716:	f7ff f8e0 	bl	80048da <_PreparePacket>
 800571a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800571c:	69bb      	ldr	r3, [r7, #24]
 800571e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	647b      	str	r3, [r7, #68]	; 0x44
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	643b      	str	r3, [r7, #64]	; 0x40
 8005728:	e00b      	b.n	8005742 <SEGGER_SYSVIEW_RecordU32x5+0x4a>
 800572a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800572c:	b2da      	uxtb	r2, r3
 800572e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005730:	1c59      	adds	r1, r3, #1
 8005732:	6479      	str	r1, [r7, #68]	; 0x44
 8005734:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005738:	b2d2      	uxtb	r2, r2
 800573a:	701a      	strb	r2, [r3, #0]
 800573c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800573e:	09db      	lsrs	r3, r3, #7
 8005740:	643b      	str	r3, [r7, #64]	; 0x40
 8005742:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005744:	2b7f      	cmp	r3, #127	; 0x7f
 8005746:	d8f0      	bhi.n	800572a <SEGGER_SYSVIEW_RecordU32x5+0x32>
 8005748:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800574a:	1c5a      	adds	r2, r3, #1
 800574c:	647a      	str	r2, [r7, #68]	; 0x44
 800574e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005750:	b2d2      	uxtb	r2, r2
 8005752:	701a      	strb	r2, [r3, #0]
 8005754:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005756:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005760:	e00b      	b.n	800577a <SEGGER_SYSVIEW_RecordU32x5+0x82>
 8005762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005764:	b2da      	uxtb	r2, r3
 8005766:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005768:	1c59      	adds	r1, r3, #1
 800576a:	63f9      	str	r1, [r7, #60]	; 0x3c
 800576c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005770:	b2d2      	uxtb	r2, r2
 8005772:	701a      	strb	r2, [r3, #0]
 8005774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005776:	09db      	lsrs	r3, r3, #7
 8005778:	63bb      	str	r3, [r7, #56]	; 0x38
 800577a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800577c:	2b7f      	cmp	r3, #127	; 0x7f
 800577e:	d8f0      	bhi.n	8005762 <SEGGER_SYSVIEW_RecordU32x5+0x6a>
 8005780:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005782:	1c5a      	adds	r2, r3, #1
 8005784:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005786:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005788:	b2d2      	uxtb	r2, r2
 800578a:	701a      	strb	r2, [r3, #0]
 800578c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800578e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	637b      	str	r3, [r7, #52]	; 0x34
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	633b      	str	r3, [r7, #48]	; 0x30
 8005798:	e00b      	b.n	80057b2 <SEGGER_SYSVIEW_RecordU32x5+0xba>
 800579a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800579c:	b2da      	uxtb	r2, r3
 800579e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057a0:	1c59      	adds	r1, r3, #1
 80057a2:	6379      	str	r1, [r7, #52]	; 0x34
 80057a4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80057a8:	b2d2      	uxtb	r2, r2
 80057aa:	701a      	strb	r2, [r3, #0]
 80057ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ae:	09db      	lsrs	r3, r3, #7
 80057b0:	633b      	str	r3, [r7, #48]	; 0x30
 80057b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057b4:	2b7f      	cmp	r3, #127	; 0x7f
 80057b6:	d8f0      	bhi.n	800579a <SEGGER_SYSVIEW_RecordU32x5+0xa2>
 80057b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057ba:	1c5a      	adds	r2, r3, #1
 80057bc:	637a      	str	r2, [r7, #52]	; 0x34
 80057be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057c0:	b2d2      	uxtb	r2, r2
 80057c2:	701a      	strb	r2, [r3, #0]
 80057c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057c6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80057d0:	e00b      	b.n	80057ea <SEGGER_SYSVIEW_RecordU32x5+0xf2>
 80057d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057d4:	b2da      	uxtb	r2, r3
 80057d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057d8:	1c59      	adds	r1, r3, #1
 80057da:	62f9      	str	r1, [r7, #44]	; 0x2c
 80057dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80057e0:	b2d2      	uxtb	r2, r2
 80057e2:	701a      	strb	r2, [r3, #0]
 80057e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057e6:	09db      	lsrs	r3, r3, #7
 80057e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80057ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ec:	2b7f      	cmp	r3, #127	; 0x7f
 80057ee:	d8f0      	bhi.n	80057d2 <SEGGER_SYSVIEW_RecordU32x5+0xda>
 80057f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057f2:	1c5a      	adds	r2, r3, #1
 80057f4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80057f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057f8:	b2d2      	uxtb	r2, r2
 80057fa:	701a      	strb	r2, [r3, #0]
 80057fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057fe:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para4);
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	627b      	str	r3, [r7, #36]	; 0x24
 8005804:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005806:	623b      	str	r3, [r7, #32]
 8005808:	e00b      	b.n	8005822 <SEGGER_SYSVIEW_RecordU32x5+0x12a>
 800580a:	6a3b      	ldr	r3, [r7, #32]
 800580c:	b2da      	uxtb	r2, r3
 800580e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005810:	1c59      	adds	r1, r3, #1
 8005812:	6279      	str	r1, [r7, #36]	; 0x24
 8005814:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005818:	b2d2      	uxtb	r2, r2
 800581a:	701a      	strb	r2, [r3, #0]
 800581c:	6a3b      	ldr	r3, [r7, #32]
 800581e:	09db      	lsrs	r3, r3, #7
 8005820:	623b      	str	r3, [r7, #32]
 8005822:	6a3b      	ldr	r3, [r7, #32]
 8005824:	2b7f      	cmp	r3, #127	; 0x7f
 8005826:	d8f0      	bhi.n	800580a <SEGGER_SYSVIEW_RecordU32x5+0x112>
 8005828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582a:	1c5a      	adds	r2, r3, #1
 800582c:	627a      	str	r2, [r7, #36]	; 0x24
 800582e:	6a3a      	ldr	r2, [r7, #32]
 8005830:	b2d2      	uxtb	r2, r2
 8005832:	701a      	strb	r2, [r3, #0]
 8005834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005836:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005838:	68fa      	ldr	r2, [r7, #12]
 800583a:	6979      	ldr	r1, [r7, #20]
 800583c:	69b8      	ldr	r0, [r7, #24]
 800583e:	f7ff f93f 	bl	8004ac0 <_SendPacket>
  RECORD_END();
 8005842:	69fb      	ldr	r3, [r7, #28]
 8005844:	f383 8811 	msr	BASEPRI, r3
}
 8005848:	bf00      	nop
 800584a:	3748      	adds	r7, #72	; 0x48
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}
 8005850:	20014358 	.word	0x20014358

08005854 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8005854:	b580      	push	{r7, lr}
 8005856:	b08c      	sub	sp, #48	; 0x30
 8005858:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800585a:	4b59      	ldr	r3, [pc, #356]	; (80059c0 <SEGGER_SYSVIEW_Start+0x16c>)
 800585c:	2201      	movs	r2, #1
 800585e:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8005860:	f3ef 8311 	mrs	r3, BASEPRI
 8005864:	f04f 0120 	mov.w	r1, #32
 8005868:	f381 8811 	msr	BASEPRI, r1
 800586c:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800586e:	4b54      	ldr	r3, [pc, #336]	; (80059c0 <SEGGER_SYSVIEW_Start+0x16c>)
 8005870:	785b      	ldrb	r3, [r3, #1]
 8005872:	220a      	movs	r2, #10
 8005874:	4953      	ldr	r1, [pc, #332]	; (80059c4 <SEGGER_SYSVIEW_Start+0x170>)
 8005876:	4618      	mov	r0, r3
 8005878:	f7fa fcaa 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8005882:	f7fe fbbd 	bl	8004000 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8005886:	200a      	movs	r0, #10
 8005888:	f7ff fdf0 	bl	800546c <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800588c:	f3ef 8311 	mrs	r3, BASEPRI
 8005890:	f04f 0120 	mov.w	r1, #32
 8005894:	f381 8811 	msr	BASEPRI, r1
 8005898:	60bb      	str	r3, [r7, #8]
 800589a:	484b      	ldr	r0, [pc, #300]	; (80059c8 <SEGGER_SYSVIEW_Start+0x174>)
 800589c:	f7ff f81d 	bl	80048da <_PreparePacket>
 80058a0:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058aa:	4b45      	ldr	r3, [pc, #276]	; (80059c0 <SEGGER_SYSVIEW_Start+0x16c>)
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80058b0:	e00b      	b.n	80058ca <SEGGER_SYSVIEW_Start+0x76>
 80058b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058b4:	b2da      	uxtb	r2, r3
 80058b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058b8:	1c59      	adds	r1, r3, #1
 80058ba:	62f9      	str	r1, [r7, #44]	; 0x2c
 80058bc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80058c0:	b2d2      	uxtb	r2, r2
 80058c2:	701a      	strb	r2, [r3, #0]
 80058c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058c6:	09db      	lsrs	r3, r3, #7
 80058c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80058ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058cc:	2b7f      	cmp	r3, #127	; 0x7f
 80058ce:	d8f0      	bhi.n	80058b2 <SEGGER_SYSVIEW_Start+0x5e>
 80058d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058d2:	1c5a      	adds	r2, r3, #1
 80058d4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80058d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058d8:	b2d2      	uxtb	r2, r2
 80058da:	701a      	strb	r2, [r3, #0]
 80058dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058de:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	627b      	str	r3, [r7, #36]	; 0x24
 80058e4:	4b36      	ldr	r3, [pc, #216]	; (80059c0 <SEGGER_SYSVIEW_Start+0x16c>)
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	623b      	str	r3, [r7, #32]
 80058ea:	e00b      	b.n	8005904 <SEGGER_SYSVIEW_Start+0xb0>
 80058ec:	6a3b      	ldr	r3, [r7, #32]
 80058ee:	b2da      	uxtb	r2, r3
 80058f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f2:	1c59      	adds	r1, r3, #1
 80058f4:	6279      	str	r1, [r7, #36]	; 0x24
 80058f6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80058fa:	b2d2      	uxtb	r2, r2
 80058fc:	701a      	strb	r2, [r3, #0]
 80058fe:	6a3b      	ldr	r3, [r7, #32]
 8005900:	09db      	lsrs	r3, r3, #7
 8005902:	623b      	str	r3, [r7, #32]
 8005904:	6a3b      	ldr	r3, [r7, #32]
 8005906:	2b7f      	cmp	r3, #127	; 0x7f
 8005908:	d8f0      	bhi.n	80058ec <SEGGER_SYSVIEW_Start+0x98>
 800590a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590c:	1c5a      	adds	r2, r3, #1
 800590e:	627a      	str	r2, [r7, #36]	; 0x24
 8005910:	6a3a      	ldr	r2, [r7, #32]
 8005912:	b2d2      	uxtb	r2, r2
 8005914:	701a      	strb	r2, [r3, #0]
 8005916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005918:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	61fb      	str	r3, [r7, #28]
 800591e:	4b28      	ldr	r3, [pc, #160]	; (80059c0 <SEGGER_SYSVIEW_Start+0x16c>)
 8005920:	691b      	ldr	r3, [r3, #16]
 8005922:	61bb      	str	r3, [r7, #24]
 8005924:	e00b      	b.n	800593e <SEGGER_SYSVIEW_Start+0xea>
 8005926:	69bb      	ldr	r3, [r7, #24]
 8005928:	b2da      	uxtb	r2, r3
 800592a:	69fb      	ldr	r3, [r7, #28]
 800592c:	1c59      	adds	r1, r3, #1
 800592e:	61f9      	str	r1, [r7, #28]
 8005930:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005934:	b2d2      	uxtb	r2, r2
 8005936:	701a      	strb	r2, [r3, #0]
 8005938:	69bb      	ldr	r3, [r7, #24]
 800593a:	09db      	lsrs	r3, r3, #7
 800593c:	61bb      	str	r3, [r7, #24]
 800593e:	69bb      	ldr	r3, [r7, #24]
 8005940:	2b7f      	cmp	r3, #127	; 0x7f
 8005942:	d8f0      	bhi.n	8005926 <SEGGER_SYSVIEW_Start+0xd2>
 8005944:	69fb      	ldr	r3, [r7, #28]
 8005946:	1c5a      	adds	r2, r3, #1
 8005948:	61fa      	str	r2, [r7, #28]
 800594a:	69ba      	ldr	r2, [r7, #24]
 800594c:	b2d2      	uxtb	r2, r2
 800594e:	701a      	strb	r2, [r3, #0]
 8005950:	69fb      	ldr	r3, [r7, #28]
 8005952:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	617b      	str	r3, [r7, #20]
 8005958:	2300      	movs	r3, #0
 800595a:	613b      	str	r3, [r7, #16]
 800595c:	e00b      	b.n	8005976 <SEGGER_SYSVIEW_Start+0x122>
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	b2da      	uxtb	r2, r3
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	1c59      	adds	r1, r3, #1
 8005966:	6179      	str	r1, [r7, #20]
 8005968:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800596c:	b2d2      	uxtb	r2, r2
 800596e:	701a      	strb	r2, [r3, #0]
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	09db      	lsrs	r3, r3, #7
 8005974:	613b      	str	r3, [r7, #16]
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	2b7f      	cmp	r3, #127	; 0x7f
 800597a:	d8f0      	bhi.n	800595e <SEGGER_SYSVIEW_Start+0x10a>
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	1c5a      	adds	r2, r3, #1
 8005980:	617a      	str	r2, [r7, #20]
 8005982:	693a      	ldr	r2, [r7, #16]
 8005984:	b2d2      	uxtb	r2, r2
 8005986:	701a      	strb	r2, [r3, #0]
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800598c:	2218      	movs	r2, #24
 800598e:	6839      	ldr	r1, [r7, #0]
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f7ff f895 	bl	8004ac0 <_SendPacket>
      RECORD_END();
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800599c:	4b08      	ldr	r3, [pc, #32]	; (80059c0 <SEGGER_SYSVIEW_Start+0x16c>)
 800599e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d002      	beq.n	80059aa <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 80059a4:	4b06      	ldr	r3, [pc, #24]	; (80059c0 <SEGGER_SYSVIEW_Start+0x16c>)
 80059a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a8:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80059aa:	f000 f9eb 	bl	8005d84 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80059ae:	f000 f9b1 	bl	8005d14 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80059b2:	f000 fc83 	bl	80062bc <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80059b6:	bf00      	nop
 80059b8:	3730      	adds	r7, #48	; 0x30
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}
 80059be:	bf00      	nop
 80059c0:	20014328 	.word	0x20014328
 80059c4:	080066bc 	.word	0x080066bc
 80059c8:	20014358 	.word	0x20014358

080059cc <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b082      	sub	sp, #8
 80059d0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80059d2:	f3ef 8311 	mrs	r3, BASEPRI
 80059d6:	f04f 0120 	mov.w	r1, #32
 80059da:	f381 8811 	msr	BASEPRI, r1
 80059de:	607b      	str	r3, [r7, #4]
 80059e0:	480b      	ldr	r0, [pc, #44]	; (8005a10 <SEGGER_SYSVIEW_Stop+0x44>)
 80059e2:	f7fe ff7a 	bl	80048da <_PreparePacket>
 80059e6:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80059e8:	4b0a      	ldr	r3, [pc, #40]	; (8005a14 <SEGGER_SYSVIEW_Stop+0x48>)
 80059ea:	781b      	ldrb	r3, [r3, #0]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d007      	beq.n	8005a00 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80059f0:	220b      	movs	r2, #11
 80059f2:	6839      	ldr	r1, [r7, #0]
 80059f4:	6838      	ldr	r0, [r7, #0]
 80059f6:	f7ff f863 	bl	8004ac0 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80059fa:	4b06      	ldr	r3, [pc, #24]	; (8005a14 <SEGGER_SYSVIEW_Stop+0x48>)
 80059fc:	2200      	movs	r2, #0
 80059fe:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	f383 8811 	msr	BASEPRI, r3
}
 8005a06:	bf00      	nop
 8005a08:	3708      	adds	r7, #8
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}
 8005a0e:	bf00      	nop
 8005a10:	20014358 	.word	0x20014358
 8005a14:	20014328 	.word	0x20014328

08005a18 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b08c      	sub	sp, #48	; 0x30
 8005a1c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005a1e:	f3ef 8311 	mrs	r3, BASEPRI
 8005a22:	f04f 0120 	mov.w	r1, #32
 8005a26:	f381 8811 	msr	BASEPRI, r1
 8005a2a:	60fb      	str	r3, [r7, #12]
 8005a2c:	4845      	ldr	r0, [pc, #276]	; (8005b44 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8005a2e:	f7fe ff54 	bl	80048da <_PreparePacket>
 8005a32:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a3c:	4b42      	ldr	r3, [pc, #264]	; (8005b48 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a42:	e00b      	b.n	8005a5c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8005a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a46:	b2da      	uxtb	r2, r3
 8005a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a4a:	1c59      	adds	r1, r3, #1
 8005a4c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005a4e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a52:	b2d2      	uxtb	r2, r2
 8005a54:	701a      	strb	r2, [r3, #0]
 8005a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a58:	09db      	lsrs	r3, r3, #7
 8005a5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a5e:	2b7f      	cmp	r3, #127	; 0x7f
 8005a60:	d8f0      	bhi.n	8005a44 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8005a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a64:	1c5a      	adds	r2, r3, #1
 8005a66:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a6a:	b2d2      	uxtb	r2, r2
 8005a6c:	701a      	strb	r2, [r3, #0]
 8005a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a70:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	627b      	str	r3, [r7, #36]	; 0x24
 8005a76:	4b34      	ldr	r3, [pc, #208]	; (8005b48 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005a78:	689b      	ldr	r3, [r3, #8]
 8005a7a:	623b      	str	r3, [r7, #32]
 8005a7c:	e00b      	b.n	8005a96 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8005a7e:	6a3b      	ldr	r3, [r7, #32]
 8005a80:	b2da      	uxtb	r2, r3
 8005a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a84:	1c59      	adds	r1, r3, #1
 8005a86:	6279      	str	r1, [r7, #36]	; 0x24
 8005a88:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a8c:	b2d2      	uxtb	r2, r2
 8005a8e:	701a      	strb	r2, [r3, #0]
 8005a90:	6a3b      	ldr	r3, [r7, #32]
 8005a92:	09db      	lsrs	r3, r3, #7
 8005a94:	623b      	str	r3, [r7, #32]
 8005a96:	6a3b      	ldr	r3, [r7, #32]
 8005a98:	2b7f      	cmp	r3, #127	; 0x7f
 8005a9a:	d8f0      	bhi.n	8005a7e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8005a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a9e:	1c5a      	adds	r2, r3, #1
 8005aa0:	627a      	str	r2, [r7, #36]	; 0x24
 8005aa2:	6a3a      	ldr	r2, [r7, #32]
 8005aa4:	b2d2      	uxtb	r2, r2
 8005aa6:	701a      	strb	r2, [r3, #0]
 8005aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aaa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	61fb      	str	r3, [r7, #28]
 8005ab0:	4b25      	ldr	r3, [pc, #148]	; (8005b48 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005ab2:	691b      	ldr	r3, [r3, #16]
 8005ab4:	61bb      	str	r3, [r7, #24]
 8005ab6:	e00b      	b.n	8005ad0 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8005ab8:	69bb      	ldr	r3, [r7, #24]
 8005aba:	b2da      	uxtb	r2, r3
 8005abc:	69fb      	ldr	r3, [r7, #28]
 8005abe:	1c59      	adds	r1, r3, #1
 8005ac0:	61f9      	str	r1, [r7, #28]
 8005ac2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ac6:	b2d2      	uxtb	r2, r2
 8005ac8:	701a      	strb	r2, [r3, #0]
 8005aca:	69bb      	ldr	r3, [r7, #24]
 8005acc:	09db      	lsrs	r3, r3, #7
 8005ace:	61bb      	str	r3, [r7, #24]
 8005ad0:	69bb      	ldr	r3, [r7, #24]
 8005ad2:	2b7f      	cmp	r3, #127	; 0x7f
 8005ad4:	d8f0      	bhi.n	8005ab8 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8005ad6:	69fb      	ldr	r3, [r7, #28]
 8005ad8:	1c5a      	adds	r2, r3, #1
 8005ada:	61fa      	str	r2, [r7, #28]
 8005adc:	69ba      	ldr	r2, [r7, #24]
 8005ade:	b2d2      	uxtb	r2, r2
 8005ae0:	701a      	strb	r2, [r3, #0]
 8005ae2:	69fb      	ldr	r3, [r7, #28]
 8005ae4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	617b      	str	r3, [r7, #20]
 8005aea:	2300      	movs	r3, #0
 8005aec:	613b      	str	r3, [r7, #16]
 8005aee:	e00b      	b.n	8005b08 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	b2da      	uxtb	r2, r3
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	1c59      	adds	r1, r3, #1
 8005af8:	6179      	str	r1, [r7, #20]
 8005afa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005afe:	b2d2      	uxtb	r2, r2
 8005b00:	701a      	strb	r2, [r3, #0]
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	09db      	lsrs	r3, r3, #7
 8005b06:	613b      	str	r3, [r7, #16]
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	2b7f      	cmp	r3, #127	; 0x7f
 8005b0c:	d8f0      	bhi.n	8005af0 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	1c5a      	adds	r2, r3, #1
 8005b12:	617a      	str	r2, [r7, #20]
 8005b14:	693a      	ldr	r2, [r7, #16]
 8005b16:	b2d2      	uxtb	r2, r2
 8005b18:	701a      	strb	r2, [r3, #0]
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005b1e:	2218      	movs	r2, #24
 8005b20:	6879      	ldr	r1, [r7, #4]
 8005b22:	68b8      	ldr	r0, [r7, #8]
 8005b24:	f7fe ffcc 	bl	8004ac0 <_SendPacket>
  RECORD_END();
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005b2e:	4b06      	ldr	r3, [pc, #24]	; (8005b48 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d002      	beq.n	8005b3c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8005b36:	4b04      	ldr	r3, [pc, #16]	; (8005b48 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b3a:	4798      	blx	r3
  }
}
 8005b3c:	bf00      	nop
 8005b3e:	3730      	adds	r7, #48	; 0x30
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}
 8005b44:	20014358 	.word	0x20014358
 8005b48:	20014328 	.word	0x20014328

08005b4c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b092      	sub	sp, #72	; 0x48
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8005b54:	f3ef 8311 	mrs	r3, BASEPRI
 8005b58:	f04f 0120 	mov.w	r1, #32
 8005b5c:	f381 8811 	msr	BASEPRI, r1
 8005b60:	617b      	str	r3, [r7, #20]
 8005b62:	486a      	ldr	r0, [pc, #424]	; (8005d0c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005b64:	f7fe feb9 	bl	80048da <_PreparePacket>
 8005b68:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	647b      	str	r3, [r7, #68]	; 0x44
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681a      	ldr	r2, [r3, #0]
 8005b76:	4b66      	ldr	r3, [pc, #408]	; (8005d10 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005b78:	691b      	ldr	r3, [r3, #16]
 8005b7a:	1ad3      	subs	r3, r2, r3
 8005b7c:	643b      	str	r3, [r7, #64]	; 0x40
 8005b7e:	e00b      	b.n	8005b98 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8005b80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b82:	b2da      	uxtb	r2, r3
 8005b84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b86:	1c59      	adds	r1, r3, #1
 8005b88:	6479      	str	r1, [r7, #68]	; 0x44
 8005b8a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b8e:	b2d2      	uxtb	r2, r2
 8005b90:	701a      	strb	r2, [r3, #0]
 8005b92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b94:	09db      	lsrs	r3, r3, #7
 8005b96:	643b      	str	r3, [r7, #64]	; 0x40
 8005b98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b9a:	2b7f      	cmp	r3, #127	; 0x7f
 8005b9c:	d8f0      	bhi.n	8005b80 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8005b9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ba0:	1c5a      	adds	r2, r3, #1
 8005ba2:	647a      	str	r2, [r7, #68]	; 0x44
 8005ba4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005ba6:	b2d2      	uxtb	r2, r2
 8005ba8:	701a      	strb	r2, [r3, #0]
 8005baa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bac:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	63bb      	str	r3, [r7, #56]	; 0x38
 8005bb8:	e00b      	b.n	8005bd2 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8005bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bbc:	b2da      	uxtb	r2, r3
 8005bbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bc0:	1c59      	adds	r1, r3, #1
 8005bc2:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005bc4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005bc8:	b2d2      	uxtb	r2, r2
 8005bca:	701a      	strb	r2, [r3, #0]
 8005bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bce:	09db      	lsrs	r3, r3, #7
 8005bd0:	63bb      	str	r3, [r7, #56]	; 0x38
 8005bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bd4:	2b7f      	cmp	r3, #127	; 0x7f
 8005bd6:	d8f0      	bhi.n	8005bba <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8005bd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bda:	1c5a      	adds	r2, r3, #1
 8005bdc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005bde:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005be0:	b2d2      	uxtb	r2, r2
 8005be2:	701a      	strb	r2, [r3, #0]
 8005be4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005be6:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	2220      	movs	r2, #32
 8005bee:	4619      	mov	r1, r3
 8005bf0:	68f8      	ldr	r0, [r7, #12]
 8005bf2:	f7fe fe25 	bl	8004840 <_EncodeStr>
 8005bf6:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8005bf8:	2209      	movs	r2, #9
 8005bfa:	68f9      	ldr	r1, [r7, #12]
 8005bfc:	6938      	ldr	r0, [r7, #16]
 8005bfe:	f7fe ff5f 	bl	8004ac0 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	637b      	str	r3, [r7, #52]	; 0x34
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681a      	ldr	r2, [r3, #0]
 8005c0e:	4b40      	ldr	r3, [pc, #256]	; (8005d10 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005c10:	691b      	ldr	r3, [r3, #16]
 8005c12:	1ad3      	subs	r3, r2, r3
 8005c14:	633b      	str	r3, [r7, #48]	; 0x30
 8005c16:	e00b      	b.n	8005c30 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8005c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c1a:	b2da      	uxtb	r2, r3
 8005c1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c1e:	1c59      	adds	r1, r3, #1
 8005c20:	6379      	str	r1, [r7, #52]	; 0x34
 8005c22:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c26:	b2d2      	uxtb	r2, r2
 8005c28:	701a      	strb	r2, [r3, #0]
 8005c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c2c:	09db      	lsrs	r3, r3, #7
 8005c2e:	633b      	str	r3, [r7, #48]	; 0x30
 8005c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c32:	2b7f      	cmp	r3, #127	; 0x7f
 8005c34:	d8f0      	bhi.n	8005c18 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8005c36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c38:	1c5a      	adds	r2, r3, #1
 8005c3a:	637a      	str	r2, [r7, #52]	; 0x34
 8005c3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c3e:	b2d2      	uxtb	r2, r2
 8005c40:	701a      	strb	r2, [r3, #0]
 8005c42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c44:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	68db      	ldr	r3, [r3, #12]
 8005c4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c50:	e00b      	b.n	8005c6a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8005c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c54:	b2da      	uxtb	r2, r3
 8005c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c58:	1c59      	adds	r1, r3, #1
 8005c5a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005c5c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c60:	b2d2      	uxtb	r2, r2
 8005c62:	701a      	strb	r2, [r3, #0]
 8005c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c66:	09db      	lsrs	r3, r3, #7
 8005c68:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c6c:	2b7f      	cmp	r3, #127	; 0x7f
 8005c6e:	d8f0      	bhi.n	8005c52 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8005c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c72:	1c5a      	adds	r2, r3, #1
 8005c74:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c78:	b2d2      	uxtb	r2, r2
 8005c7a:	701a      	strb	r2, [r3, #0]
 8005c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c7e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	627b      	str	r3, [r7, #36]	; 0x24
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	691b      	ldr	r3, [r3, #16]
 8005c88:	623b      	str	r3, [r7, #32]
 8005c8a:	e00b      	b.n	8005ca4 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8005c8c:	6a3b      	ldr	r3, [r7, #32]
 8005c8e:	b2da      	uxtb	r2, r3
 8005c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c92:	1c59      	adds	r1, r3, #1
 8005c94:	6279      	str	r1, [r7, #36]	; 0x24
 8005c96:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c9a:	b2d2      	uxtb	r2, r2
 8005c9c:	701a      	strb	r2, [r3, #0]
 8005c9e:	6a3b      	ldr	r3, [r7, #32]
 8005ca0:	09db      	lsrs	r3, r3, #7
 8005ca2:	623b      	str	r3, [r7, #32]
 8005ca4:	6a3b      	ldr	r3, [r7, #32]
 8005ca6:	2b7f      	cmp	r3, #127	; 0x7f
 8005ca8:	d8f0      	bhi.n	8005c8c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8005caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cac:	1c5a      	adds	r2, r3, #1
 8005cae:	627a      	str	r2, [r7, #36]	; 0x24
 8005cb0:	6a3a      	ldr	r2, [r7, #32]
 8005cb2:	b2d2      	uxtb	r2, r2
 8005cb4:	701a      	strb	r2, [r3, #0]
 8005cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	61fb      	str	r3, [r7, #28]
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	61bb      	str	r3, [r7, #24]
 8005cc2:	e00b      	b.n	8005cdc <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8005cc4:	69bb      	ldr	r3, [r7, #24]
 8005cc6:	b2da      	uxtb	r2, r3
 8005cc8:	69fb      	ldr	r3, [r7, #28]
 8005cca:	1c59      	adds	r1, r3, #1
 8005ccc:	61f9      	str	r1, [r7, #28]
 8005cce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005cd2:	b2d2      	uxtb	r2, r2
 8005cd4:	701a      	strb	r2, [r3, #0]
 8005cd6:	69bb      	ldr	r3, [r7, #24]
 8005cd8:	09db      	lsrs	r3, r3, #7
 8005cda:	61bb      	str	r3, [r7, #24]
 8005cdc:	69bb      	ldr	r3, [r7, #24]
 8005cde:	2b7f      	cmp	r3, #127	; 0x7f
 8005ce0:	d8f0      	bhi.n	8005cc4 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8005ce2:	69fb      	ldr	r3, [r7, #28]
 8005ce4:	1c5a      	adds	r2, r3, #1
 8005ce6:	61fa      	str	r2, [r7, #28]
 8005ce8:	69ba      	ldr	r2, [r7, #24]
 8005cea:	b2d2      	uxtb	r2, r2
 8005cec:	701a      	strb	r2, [r3, #0]
 8005cee:	69fb      	ldr	r3, [r7, #28]
 8005cf0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8005cf2:	2215      	movs	r2, #21
 8005cf4:	68f9      	ldr	r1, [r7, #12]
 8005cf6:	6938      	ldr	r0, [r7, #16]
 8005cf8:	f7fe fee2 	bl	8004ac0 <_SendPacket>
  RECORD_END();
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	f383 8811 	msr	BASEPRI, r3
}
 8005d02:	bf00      	nop
 8005d04:	3748      	adds	r7, #72	; 0x48
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}
 8005d0a:	bf00      	nop
 8005d0c:	20014358 	.word	0x20014358
 8005d10:	20014328 	.word	0x20014328

08005d14 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8005d14:	b580      	push	{r7, lr}
 8005d16:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8005d18:	4b07      	ldr	r3, [pc, #28]	; (8005d38 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005d1a:	6a1b      	ldr	r3, [r3, #32]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d008      	beq.n	8005d32 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8005d20:	4b05      	ldr	r3, [pc, #20]	; (8005d38 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005d22:	6a1b      	ldr	r3, [r3, #32]
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d003      	beq.n	8005d32 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8005d2a:	4b03      	ldr	r3, [pc, #12]	; (8005d38 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005d2c:	6a1b      	ldr	r3, [r3, #32]
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	4798      	blx	r3
  }
}
 8005d32:	bf00      	nop
 8005d34:	bd80      	pop	{r7, pc}
 8005d36:	bf00      	nop
 8005d38:	20014328 	.word	0x20014328

08005d3c <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b086      	sub	sp, #24
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005d44:	f3ef 8311 	mrs	r3, BASEPRI
 8005d48:	f04f 0120 	mov.w	r1, #32
 8005d4c:	f381 8811 	msr	BASEPRI, r1
 8005d50:	617b      	str	r3, [r7, #20]
 8005d52:	480b      	ldr	r0, [pc, #44]	; (8005d80 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8005d54:	f7fe fdc1 	bl	80048da <_PreparePacket>
 8005d58:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005d5a:	2280      	movs	r2, #128	; 0x80
 8005d5c:	6879      	ldr	r1, [r7, #4]
 8005d5e:	6938      	ldr	r0, [r7, #16]
 8005d60:	f7fe fd6e 	bl	8004840 <_EncodeStr>
 8005d64:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8005d66:	220e      	movs	r2, #14
 8005d68:	68f9      	ldr	r1, [r7, #12]
 8005d6a:	6938      	ldr	r0, [r7, #16]
 8005d6c:	f7fe fea8 	bl	8004ac0 <_SendPacket>
  RECORD_END();
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	f383 8811 	msr	BASEPRI, r3
}
 8005d76:	bf00      	nop
 8005d78:	3718      	adds	r7, #24
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}
 8005d7e:	bf00      	nop
 8005d80:	20014358 	.word	0x20014358

08005d84 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8005d84:	b590      	push	{r4, r7, lr}
 8005d86:	b083      	sub	sp, #12
 8005d88:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8005d8a:	4b15      	ldr	r3, [pc, #84]	; (8005de0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005d8c:	6a1b      	ldr	r3, [r3, #32]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d01a      	beq.n	8005dc8 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8005d92:	4b13      	ldr	r3, [pc, #76]	; (8005de0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005d94:	6a1b      	ldr	r3, [r3, #32]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d015      	beq.n	8005dc8 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8005d9c:	4b10      	ldr	r3, [pc, #64]	; (8005de0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005d9e:	6a1b      	ldr	r3, [r3, #32]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4798      	blx	r3
 8005da4:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005da8:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8005daa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005dae:	f04f 0200 	mov.w	r2, #0
 8005db2:	f04f 0300 	mov.w	r3, #0
 8005db6:	000a      	movs	r2, r1
 8005db8:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005dba:	4613      	mov	r3, r2
 8005dbc:	461a      	mov	r2, r3
 8005dbe:	4621      	mov	r1, r4
 8005dc0:	200d      	movs	r0, #13
 8005dc2:	f7ff fbad 	bl	8005520 <SEGGER_SYSVIEW_RecordU32x2>
 8005dc6:	e006      	b.n	8005dd6 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8005dc8:	4b06      	ldr	r3, [pc, #24]	; (8005de4 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4619      	mov	r1, r3
 8005dce:	200c      	movs	r0, #12
 8005dd0:	f7ff fb6a 	bl	80054a8 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8005dd4:	bf00      	nop
 8005dd6:	bf00      	nop
 8005dd8:	370c      	adds	r7, #12
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd90      	pop	{r4, r7, pc}
 8005dde:	bf00      	nop
 8005de0:	20014328 	.word	0x20014328
 8005de4:	e0001004 	.word	0xe0001004

08005de8 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b086      	sub	sp, #24
 8005dec:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005dee:	f3ef 8311 	mrs	r3, BASEPRI
 8005df2:	f04f 0120 	mov.w	r1, #32
 8005df6:	f381 8811 	msr	BASEPRI, r1
 8005dfa:	60fb      	str	r3, [r7, #12]
 8005dfc:	4819      	ldr	r0, [pc, #100]	; (8005e64 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8005dfe:	f7fe fd6c 	bl	80048da <_PreparePacket>
 8005e02:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8005e08:	4b17      	ldr	r3, [pc, #92]	; (8005e68 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e10:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	617b      	str	r3, [r7, #20]
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	613b      	str	r3, [r7, #16]
 8005e1a:	e00b      	b.n	8005e34 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	b2da      	uxtb	r2, r3
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	1c59      	adds	r1, r3, #1
 8005e24:	6179      	str	r1, [r7, #20]
 8005e26:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e2a:	b2d2      	uxtb	r2, r2
 8005e2c:	701a      	strb	r2, [r3, #0]
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	09db      	lsrs	r3, r3, #7
 8005e32:	613b      	str	r3, [r7, #16]
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	2b7f      	cmp	r3, #127	; 0x7f
 8005e38:	d8f0      	bhi.n	8005e1c <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	1c5a      	adds	r2, r3, #1
 8005e3e:	617a      	str	r2, [r7, #20]
 8005e40:	693a      	ldr	r2, [r7, #16]
 8005e42:	b2d2      	uxtb	r2, r2
 8005e44:	701a      	strb	r2, [r3, #0]
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8005e4a:	2202      	movs	r2, #2
 8005e4c:	6879      	ldr	r1, [r7, #4]
 8005e4e:	68b8      	ldr	r0, [r7, #8]
 8005e50:	f7fe fe36 	bl	8004ac0 <_SendPacket>
  RECORD_END();
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	f383 8811 	msr	BASEPRI, r3
}
 8005e5a:	bf00      	nop
 8005e5c:	3718      	adds	r7, #24
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}
 8005e62:	bf00      	nop
 8005e64:	20014358 	.word	0x20014358
 8005e68:	e000ed04 	.word	0xe000ed04

08005e6c <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b082      	sub	sp, #8
 8005e70:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005e72:	f3ef 8311 	mrs	r3, BASEPRI
 8005e76:	f04f 0120 	mov.w	r1, #32
 8005e7a:	f381 8811 	msr	BASEPRI, r1
 8005e7e:	607b      	str	r3, [r7, #4]
 8005e80:	4807      	ldr	r0, [pc, #28]	; (8005ea0 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8005e82:	f7fe fd2a 	bl	80048da <_PreparePacket>
 8005e86:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8005e88:	2203      	movs	r2, #3
 8005e8a:	6839      	ldr	r1, [r7, #0]
 8005e8c:	6838      	ldr	r0, [r7, #0]
 8005e8e:	f7fe fe17 	bl	8004ac0 <_SendPacket>
  RECORD_END();
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f383 8811 	msr	BASEPRI, r3
}
 8005e98:	bf00      	nop
 8005e9a:	3708      	adds	r7, #8
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}
 8005ea0:	20014358 	.word	0x20014358

08005ea4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b082      	sub	sp, #8
 8005ea8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005eaa:	f3ef 8311 	mrs	r3, BASEPRI
 8005eae:	f04f 0120 	mov.w	r1, #32
 8005eb2:	f381 8811 	msr	BASEPRI, r1
 8005eb6:	607b      	str	r3, [r7, #4]
 8005eb8:	4807      	ldr	r0, [pc, #28]	; (8005ed8 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8005eba:	f7fe fd0e 	bl	80048da <_PreparePacket>
 8005ebe:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8005ec0:	2212      	movs	r2, #18
 8005ec2:	6839      	ldr	r1, [r7, #0]
 8005ec4:	6838      	ldr	r0, [r7, #0]
 8005ec6:	f7fe fdfb 	bl	8004ac0 <_SendPacket>
  RECORD_END();
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f383 8811 	msr	BASEPRI, r3
}
 8005ed0:	bf00      	nop
 8005ed2:	3708      	adds	r7, #8
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}
 8005ed8:	20014358 	.word	0x20014358

08005edc <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b082      	sub	sp, #8
 8005ee0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005ee2:	f3ef 8311 	mrs	r3, BASEPRI
 8005ee6:	f04f 0120 	mov.w	r1, #32
 8005eea:	f381 8811 	msr	BASEPRI, r1
 8005eee:	607b      	str	r3, [r7, #4]
 8005ef0:	4807      	ldr	r0, [pc, #28]	; (8005f10 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8005ef2:	f7fe fcf2 	bl	80048da <_PreparePacket>
 8005ef6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8005ef8:	2211      	movs	r2, #17
 8005efa:	6839      	ldr	r1, [r7, #0]
 8005efc:	6838      	ldr	r0, [r7, #0]
 8005efe:	f7fe fddf 	bl	8004ac0 <_SendPacket>
  RECORD_END();
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	f383 8811 	msr	BASEPRI, r3
}
 8005f08:	bf00      	nop
 8005f0a:	3708      	adds	r7, #8
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}
 8005f10:	20014358 	.word	0x20014358

08005f14 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b088      	sub	sp, #32
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005f1c:	f3ef 8311 	mrs	r3, BASEPRI
 8005f20:	f04f 0120 	mov.w	r1, #32
 8005f24:	f381 8811 	msr	BASEPRI, r1
 8005f28:	617b      	str	r3, [r7, #20]
 8005f2a:	4819      	ldr	r0, [pc, #100]	; (8005f90 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8005f2c:	f7fe fcd5 	bl	80048da <_PreparePacket>
 8005f30:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005f36:	4b17      	ldr	r3, [pc, #92]	; (8005f94 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8005f38:	691b      	ldr	r3, [r3, #16]
 8005f3a:	687a      	ldr	r2, [r7, #4]
 8005f3c:	1ad3      	subs	r3, r2, r3
 8005f3e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	61fb      	str	r3, [r7, #28]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	61bb      	str	r3, [r7, #24]
 8005f48:	e00b      	b.n	8005f62 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8005f4a:	69bb      	ldr	r3, [r7, #24]
 8005f4c:	b2da      	uxtb	r2, r3
 8005f4e:	69fb      	ldr	r3, [r7, #28]
 8005f50:	1c59      	adds	r1, r3, #1
 8005f52:	61f9      	str	r1, [r7, #28]
 8005f54:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f58:	b2d2      	uxtb	r2, r2
 8005f5a:	701a      	strb	r2, [r3, #0]
 8005f5c:	69bb      	ldr	r3, [r7, #24]
 8005f5e:	09db      	lsrs	r3, r3, #7
 8005f60:	61bb      	str	r3, [r7, #24]
 8005f62:	69bb      	ldr	r3, [r7, #24]
 8005f64:	2b7f      	cmp	r3, #127	; 0x7f
 8005f66:	d8f0      	bhi.n	8005f4a <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8005f68:	69fb      	ldr	r3, [r7, #28]
 8005f6a:	1c5a      	adds	r2, r3, #1
 8005f6c:	61fa      	str	r2, [r7, #28]
 8005f6e:	69ba      	ldr	r2, [r7, #24]
 8005f70:	b2d2      	uxtb	r2, r2
 8005f72:	701a      	strb	r2, [r3, #0]
 8005f74:	69fb      	ldr	r3, [r7, #28]
 8005f76:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8005f78:	2208      	movs	r2, #8
 8005f7a:	68f9      	ldr	r1, [r7, #12]
 8005f7c:	6938      	ldr	r0, [r7, #16]
 8005f7e:	f7fe fd9f 	bl	8004ac0 <_SendPacket>
  RECORD_END();
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	f383 8811 	msr	BASEPRI, r3
}
 8005f88:	bf00      	nop
 8005f8a:	3720      	adds	r7, #32
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bd80      	pop	{r7, pc}
 8005f90:	20014358 	.word	0x20014358
 8005f94:	20014328 	.word	0x20014328

08005f98 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b088      	sub	sp, #32
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005fa0:	f3ef 8311 	mrs	r3, BASEPRI
 8005fa4:	f04f 0120 	mov.w	r1, #32
 8005fa8:	f381 8811 	msr	BASEPRI, r1
 8005fac:	617b      	str	r3, [r7, #20]
 8005fae:	4819      	ldr	r0, [pc, #100]	; (8006014 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8005fb0:	f7fe fc93 	bl	80048da <_PreparePacket>
 8005fb4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005fba:	4b17      	ldr	r3, [pc, #92]	; (8006018 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8005fbc:	691b      	ldr	r3, [r3, #16]
 8005fbe:	687a      	ldr	r2, [r7, #4]
 8005fc0:	1ad3      	subs	r3, r2, r3
 8005fc2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	61fb      	str	r3, [r7, #28]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	61bb      	str	r3, [r7, #24]
 8005fcc:	e00b      	b.n	8005fe6 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8005fce:	69bb      	ldr	r3, [r7, #24]
 8005fd0:	b2da      	uxtb	r2, r3
 8005fd2:	69fb      	ldr	r3, [r7, #28]
 8005fd4:	1c59      	adds	r1, r3, #1
 8005fd6:	61f9      	str	r1, [r7, #28]
 8005fd8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005fdc:	b2d2      	uxtb	r2, r2
 8005fde:	701a      	strb	r2, [r3, #0]
 8005fe0:	69bb      	ldr	r3, [r7, #24]
 8005fe2:	09db      	lsrs	r3, r3, #7
 8005fe4:	61bb      	str	r3, [r7, #24]
 8005fe6:	69bb      	ldr	r3, [r7, #24]
 8005fe8:	2b7f      	cmp	r3, #127	; 0x7f
 8005fea:	d8f0      	bhi.n	8005fce <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8005fec:	69fb      	ldr	r3, [r7, #28]
 8005fee:	1c5a      	adds	r2, r3, #1
 8005ff0:	61fa      	str	r2, [r7, #28]
 8005ff2:	69ba      	ldr	r2, [r7, #24]
 8005ff4:	b2d2      	uxtb	r2, r2
 8005ff6:	701a      	strb	r2, [r3, #0]
 8005ff8:	69fb      	ldr	r3, [r7, #28]
 8005ffa:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8005ffc:	2204      	movs	r2, #4
 8005ffe:	68f9      	ldr	r1, [r7, #12]
 8006000:	6938      	ldr	r0, [r7, #16]
 8006002:	f7fe fd5d 	bl	8004ac0 <_SendPacket>
  RECORD_END();
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	f383 8811 	msr	BASEPRI, r3
}
 800600c:	bf00      	nop
 800600e:	3720      	adds	r7, #32
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}
 8006014:	20014358 	.word	0x20014358
 8006018:	20014328 	.word	0x20014328

0800601c <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800601c:	b580      	push	{r7, lr}
 800601e:	b088      	sub	sp, #32
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006024:	f3ef 8311 	mrs	r3, BASEPRI
 8006028:	f04f 0120 	mov.w	r1, #32
 800602c:	f381 8811 	msr	BASEPRI, r1
 8006030:	617b      	str	r3, [r7, #20]
 8006032:	4819      	ldr	r0, [pc, #100]	; (8006098 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006034:	f7fe fc51 	bl	80048da <_PreparePacket>
 8006038:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800603e:	4b17      	ldr	r3, [pc, #92]	; (800609c <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006040:	691b      	ldr	r3, [r3, #16]
 8006042:	687a      	ldr	r2, [r7, #4]
 8006044:	1ad3      	subs	r3, r2, r3
 8006046:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	61fb      	str	r3, [r7, #28]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	61bb      	str	r3, [r7, #24]
 8006050:	e00b      	b.n	800606a <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006052:	69bb      	ldr	r3, [r7, #24]
 8006054:	b2da      	uxtb	r2, r3
 8006056:	69fb      	ldr	r3, [r7, #28]
 8006058:	1c59      	adds	r1, r3, #1
 800605a:	61f9      	str	r1, [r7, #28]
 800605c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006060:	b2d2      	uxtb	r2, r2
 8006062:	701a      	strb	r2, [r3, #0]
 8006064:	69bb      	ldr	r3, [r7, #24]
 8006066:	09db      	lsrs	r3, r3, #7
 8006068:	61bb      	str	r3, [r7, #24]
 800606a:	69bb      	ldr	r3, [r7, #24]
 800606c:	2b7f      	cmp	r3, #127	; 0x7f
 800606e:	d8f0      	bhi.n	8006052 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006070:	69fb      	ldr	r3, [r7, #28]
 8006072:	1c5a      	adds	r2, r3, #1
 8006074:	61fa      	str	r2, [r7, #28]
 8006076:	69ba      	ldr	r2, [r7, #24]
 8006078:	b2d2      	uxtb	r2, r2
 800607a:	701a      	strb	r2, [r3, #0]
 800607c:	69fb      	ldr	r3, [r7, #28]
 800607e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006080:	2206      	movs	r2, #6
 8006082:	68f9      	ldr	r1, [r7, #12]
 8006084:	6938      	ldr	r0, [r7, #16]
 8006086:	f7fe fd1b 	bl	8004ac0 <_SendPacket>
  RECORD_END();
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	f383 8811 	msr	BASEPRI, r3
}
 8006090:	bf00      	nop
 8006092:	3720      	adds	r7, #32
 8006094:	46bd      	mov	sp, r7
 8006096:	bd80      	pop	{r7, pc}
 8006098:	20014358 	.word	0x20014358
 800609c:	20014328 	.word	0x20014328

080060a0 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b08a      	sub	sp, #40	; 0x28
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
 80060a8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80060aa:	f3ef 8311 	mrs	r3, BASEPRI
 80060ae:	f04f 0120 	mov.w	r1, #32
 80060b2:	f381 8811 	msr	BASEPRI, r1
 80060b6:	617b      	str	r3, [r7, #20]
 80060b8:	4827      	ldr	r0, [pc, #156]	; (8006158 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 80060ba:	f7fe fc0e 	bl	80048da <_PreparePacket>
 80060be:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80060c4:	4b25      	ldr	r3, [pc, #148]	; (800615c <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 80060c6:	691b      	ldr	r3, [r3, #16]
 80060c8:	687a      	ldr	r2, [r7, #4]
 80060ca:	1ad3      	subs	r3, r2, r3
 80060cc:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	627b      	str	r3, [r7, #36]	; 0x24
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	623b      	str	r3, [r7, #32]
 80060d6:	e00b      	b.n	80060f0 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 80060d8:	6a3b      	ldr	r3, [r7, #32]
 80060da:	b2da      	uxtb	r2, r3
 80060dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060de:	1c59      	adds	r1, r3, #1
 80060e0:	6279      	str	r1, [r7, #36]	; 0x24
 80060e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80060e6:	b2d2      	uxtb	r2, r2
 80060e8:	701a      	strb	r2, [r3, #0]
 80060ea:	6a3b      	ldr	r3, [r7, #32]
 80060ec:	09db      	lsrs	r3, r3, #7
 80060ee:	623b      	str	r3, [r7, #32]
 80060f0:	6a3b      	ldr	r3, [r7, #32]
 80060f2:	2b7f      	cmp	r3, #127	; 0x7f
 80060f4:	d8f0      	bhi.n	80060d8 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 80060f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f8:	1c5a      	adds	r2, r3, #1
 80060fa:	627a      	str	r2, [r7, #36]	; 0x24
 80060fc:	6a3a      	ldr	r2, [r7, #32]
 80060fe:	b2d2      	uxtb	r2, r2
 8006100:	701a      	strb	r2, [r3, #0]
 8006102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006104:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	61fb      	str	r3, [r7, #28]
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	61bb      	str	r3, [r7, #24]
 800610e:	e00b      	b.n	8006128 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8006110:	69bb      	ldr	r3, [r7, #24]
 8006112:	b2da      	uxtb	r2, r3
 8006114:	69fb      	ldr	r3, [r7, #28]
 8006116:	1c59      	adds	r1, r3, #1
 8006118:	61f9      	str	r1, [r7, #28]
 800611a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800611e:	b2d2      	uxtb	r2, r2
 8006120:	701a      	strb	r2, [r3, #0]
 8006122:	69bb      	ldr	r3, [r7, #24]
 8006124:	09db      	lsrs	r3, r3, #7
 8006126:	61bb      	str	r3, [r7, #24]
 8006128:	69bb      	ldr	r3, [r7, #24]
 800612a:	2b7f      	cmp	r3, #127	; 0x7f
 800612c:	d8f0      	bhi.n	8006110 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 800612e:	69fb      	ldr	r3, [r7, #28]
 8006130:	1c5a      	adds	r2, r3, #1
 8006132:	61fa      	str	r2, [r7, #28]
 8006134:	69ba      	ldr	r2, [r7, #24]
 8006136:	b2d2      	uxtb	r2, r2
 8006138:	701a      	strb	r2, [r3, #0]
 800613a:	69fb      	ldr	r3, [r7, #28]
 800613c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800613e:	2207      	movs	r2, #7
 8006140:	68f9      	ldr	r1, [r7, #12]
 8006142:	6938      	ldr	r0, [r7, #16]
 8006144:	f7fe fcbc 	bl	8004ac0 <_SendPacket>
  RECORD_END();
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	f383 8811 	msr	BASEPRI, r3
}
 800614e:	bf00      	nop
 8006150:	3728      	adds	r7, #40	; 0x28
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}
 8006156:	bf00      	nop
 8006158:	20014358 	.word	0x20014358
 800615c:	20014328 	.word	0x20014328

08006160 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006160:	b480      	push	{r7}
 8006162:	b083      	sub	sp, #12
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006168:	4b04      	ldr	r3, [pc, #16]	; (800617c <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800616a:	691b      	ldr	r3, [r3, #16]
 800616c:	687a      	ldr	r2, [r7, #4]
 800616e:	1ad3      	subs	r3, r2, r3
}
 8006170:	4618      	mov	r0, r3
 8006172:	370c      	adds	r7, #12
 8006174:	46bd      	mov	sp, r7
 8006176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617a:	4770      	bx	lr
 800617c:	20014328 	.word	0x20014328

08006180 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006180:	b580      	push	{r7, lr}
 8006182:	b08c      	sub	sp, #48	; 0x30
 8006184:	af00      	add	r7, sp, #0
 8006186:	4603      	mov	r3, r0
 8006188:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800618a:	4b3b      	ldr	r3, [pc, #236]	; (8006278 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d06d      	beq.n	800626e <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8006192:	4b39      	ldr	r3, [pc, #228]	; (8006278 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006198:	2300      	movs	r3, #0
 800619a:	62bb      	str	r3, [r7, #40]	; 0x28
 800619c:	e008      	b.n	80061b0 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800619e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061a0:	691b      	ldr	r3, [r3, #16]
 80061a2:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80061a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d007      	beq.n	80061ba <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80061aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ac:	3301      	adds	r3, #1
 80061ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80061b0:	79fb      	ldrb	r3, [r7, #7]
 80061b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061b4:	429a      	cmp	r2, r3
 80061b6:	d3f2      	bcc.n	800619e <SEGGER_SYSVIEW_SendModule+0x1e>
 80061b8:	e000      	b.n	80061bc <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80061ba:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80061bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d055      	beq.n	800626e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80061c2:	f3ef 8311 	mrs	r3, BASEPRI
 80061c6:	f04f 0120 	mov.w	r1, #32
 80061ca:	f381 8811 	msr	BASEPRI, r1
 80061ce:	617b      	str	r3, [r7, #20]
 80061d0:	482a      	ldr	r0, [pc, #168]	; (800627c <SEGGER_SYSVIEW_SendModule+0xfc>)
 80061d2:	f7fe fb82 	bl	80048da <_PreparePacket>
 80061d6:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	627b      	str	r3, [r7, #36]	; 0x24
 80061e0:	79fb      	ldrb	r3, [r7, #7]
 80061e2:	623b      	str	r3, [r7, #32]
 80061e4:	e00b      	b.n	80061fe <SEGGER_SYSVIEW_SendModule+0x7e>
 80061e6:	6a3b      	ldr	r3, [r7, #32]
 80061e8:	b2da      	uxtb	r2, r3
 80061ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ec:	1c59      	adds	r1, r3, #1
 80061ee:	6279      	str	r1, [r7, #36]	; 0x24
 80061f0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061f4:	b2d2      	uxtb	r2, r2
 80061f6:	701a      	strb	r2, [r3, #0]
 80061f8:	6a3b      	ldr	r3, [r7, #32]
 80061fa:	09db      	lsrs	r3, r3, #7
 80061fc:	623b      	str	r3, [r7, #32]
 80061fe:	6a3b      	ldr	r3, [r7, #32]
 8006200:	2b7f      	cmp	r3, #127	; 0x7f
 8006202:	d8f0      	bhi.n	80061e6 <SEGGER_SYSVIEW_SendModule+0x66>
 8006204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006206:	1c5a      	adds	r2, r3, #1
 8006208:	627a      	str	r2, [r7, #36]	; 0x24
 800620a:	6a3a      	ldr	r2, [r7, #32]
 800620c:	b2d2      	uxtb	r2, r2
 800620e:	701a      	strb	r2, [r3, #0]
 8006210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006212:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	61fb      	str	r3, [r7, #28]
 8006218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800621a:	689b      	ldr	r3, [r3, #8]
 800621c:	61bb      	str	r3, [r7, #24]
 800621e:	e00b      	b.n	8006238 <SEGGER_SYSVIEW_SendModule+0xb8>
 8006220:	69bb      	ldr	r3, [r7, #24]
 8006222:	b2da      	uxtb	r2, r3
 8006224:	69fb      	ldr	r3, [r7, #28]
 8006226:	1c59      	adds	r1, r3, #1
 8006228:	61f9      	str	r1, [r7, #28]
 800622a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800622e:	b2d2      	uxtb	r2, r2
 8006230:	701a      	strb	r2, [r3, #0]
 8006232:	69bb      	ldr	r3, [r7, #24]
 8006234:	09db      	lsrs	r3, r3, #7
 8006236:	61bb      	str	r3, [r7, #24]
 8006238:	69bb      	ldr	r3, [r7, #24]
 800623a:	2b7f      	cmp	r3, #127	; 0x7f
 800623c:	d8f0      	bhi.n	8006220 <SEGGER_SYSVIEW_SendModule+0xa0>
 800623e:	69fb      	ldr	r3, [r7, #28]
 8006240:	1c5a      	adds	r2, r3, #1
 8006242:	61fa      	str	r2, [r7, #28]
 8006244:	69ba      	ldr	r2, [r7, #24]
 8006246:	b2d2      	uxtb	r2, r2
 8006248:	701a      	strb	r2, [r3, #0]
 800624a:	69fb      	ldr	r3, [r7, #28]
 800624c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800624e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	2280      	movs	r2, #128	; 0x80
 8006254:	4619      	mov	r1, r3
 8006256:	68f8      	ldr	r0, [r7, #12]
 8006258:	f7fe faf2 	bl	8004840 <_EncodeStr>
 800625c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800625e:	2216      	movs	r2, #22
 8006260:	68f9      	ldr	r1, [r7, #12]
 8006262:	6938      	ldr	r0, [r7, #16]
 8006264:	f7fe fc2c 	bl	8004ac0 <_SendPacket>
      RECORD_END();
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800626e:	bf00      	nop
 8006270:	3730      	adds	r7, #48	; 0x30
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}
 8006276:	bf00      	nop
 8006278:	20014350 	.word	0x20014350
 800627c:	20014358 	.word	0x20014358

08006280 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006280:	b580      	push	{r7, lr}
 8006282:	b082      	sub	sp, #8
 8006284:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8006286:	4b0c      	ldr	r3, [pc, #48]	; (80062b8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d00f      	beq.n	80062ae <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800628e:	4b0a      	ldr	r3, [pc, #40]	; (80062b8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	68db      	ldr	r3, [r3, #12]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d002      	beq.n	80062a2 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	68db      	ldr	r3, [r3, #12]
 80062a0:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	691b      	ldr	r3, [r3, #16]
 80062a6:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d1f2      	bne.n	8006294 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80062ae:	bf00      	nop
 80062b0:	3708      	adds	r7, #8
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}
 80062b6:	bf00      	nop
 80062b8:	20014350 	.word	0x20014350

080062bc <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80062bc:	b580      	push	{r7, lr}
 80062be:	b086      	sub	sp, #24
 80062c0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80062c2:	f3ef 8311 	mrs	r3, BASEPRI
 80062c6:	f04f 0120 	mov.w	r1, #32
 80062ca:	f381 8811 	msr	BASEPRI, r1
 80062ce:	60fb      	str	r3, [r7, #12]
 80062d0:	4817      	ldr	r0, [pc, #92]	; (8006330 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80062d2:	f7fe fb02 	bl	80048da <_PreparePacket>
 80062d6:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	617b      	str	r3, [r7, #20]
 80062e0:	4b14      	ldr	r3, [pc, #80]	; (8006334 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80062e2:	781b      	ldrb	r3, [r3, #0]
 80062e4:	613b      	str	r3, [r7, #16]
 80062e6:	e00b      	b.n	8006300 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	b2da      	uxtb	r2, r3
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	1c59      	adds	r1, r3, #1
 80062f0:	6179      	str	r1, [r7, #20]
 80062f2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062f6:	b2d2      	uxtb	r2, r2
 80062f8:	701a      	strb	r2, [r3, #0]
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	09db      	lsrs	r3, r3, #7
 80062fe:	613b      	str	r3, [r7, #16]
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	2b7f      	cmp	r3, #127	; 0x7f
 8006304:	d8f0      	bhi.n	80062e8 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	1c5a      	adds	r2, r3, #1
 800630a:	617a      	str	r2, [r7, #20]
 800630c:	693a      	ldr	r2, [r7, #16]
 800630e:	b2d2      	uxtb	r2, r2
 8006310:	701a      	strb	r2, [r3, #0]
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8006316:	221b      	movs	r2, #27
 8006318:	6879      	ldr	r1, [r7, #4]
 800631a:	68b8      	ldr	r0, [r7, #8]
 800631c:	f7fe fbd0 	bl	8004ac0 <_SendPacket>
  RECORD_END();
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f383 8811 	msr	BASEPRI, r3
}
 8006326:	bf00      	nop
 8006328:	3718      	adds	r7, #24
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}
 800632e:	bf00      	nop
 8006330:	20014358 	.word	0x20014358
 8006334:	20014354 	.word	0x20014354

08006338 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8006338:	b40f      	push	{r0, r1, r2, r3}
 800633a:	b580      	push	{r7, lr}
 800633c:	b082      	sub	sp, #8
 800633e:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8006340:	f107 0314 	add.w	r3, r7, #20
 8006344:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8006346:	1d3b      	adds	r3, r7, #4
 8006348:	461a      	mov	r2, r3
 800634a:	2100      	movs	r1, #0
 800634c:	6938      	ldr	r0, [r7, #16]
 800634e:	f7fe fe41 	bl	8004fd4 <_VPrintTarget>
  va_end(ParamList);
}
 8006352:	bf00      	nop
 8006354:	3708      	adds	r7, #8
 8006356:	46bd      	mov	sp, r7
 8006358:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800635c:	b004      	add	sp, #16
 800635e:	4770      	bx	lr

08006360 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006360:	b580      	push	{r7, lr}
 8006362:	b08a      	sub	sp, #40	; 0x28
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006368:	f3ef 8311 	mrs	r3, BASEPRI
 800636c:	f04f 0120 	mov.w	r1, #32
 8006370:	f381 8811 	msr	BASEPRI, r1
 8006374:	617b      	str	r3, [r7, #20]
 8006376:	4827      	ldr	r0, [pc, #156]	; (8006414 <SEGGER_SYSVIEW_Warn+0xb4>)
 8006378:	f7fe faaf 	bl	80048da <_PreparePacket>
 800637c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800637e:	2280      	movs	r2, #128	; 0x80
 8006380:	6879      	ldr	r1, [r7, #4]
 8006382:	6938      	ldr	r0, [r7, #16]
 8006384:	f7fe fa5c 	bl	8004840 <_EncodeStr>
 8006388:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	627b      	str	r3, [r7, #36]	; 0x24
 800638e:	2301      	movs	r3, #1
 8006390:	623b      	str	r3, [r7, #32]
 8006392:	e00b      	b.n	80063ac <SEGGER_SYSVIEW_Warn+0x4c>
 8006394:	6a3b      	ldr	r3, [r7, #32]
 8006396:	b2da      	uxtb	r2, r3
 8006398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800639a:	1c59      	adds	r1, r3, #1
 800639c:	6279      	str	r1, [r7, #36]	; 0x24
 800639e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063a2:	b2d2      	uxtb	r2, r2
 80063a4:	701a      	strb	r2, [r3, #0]
 80063a6:	6a3b      	ldr	r3, [r7, #32]
 80063a8:	09db      	lsrs	r3, r3, #7
 80063aa:	623b      	str	r3, [r7, #32]
 80063ac:	6a3b      	ldr	r3, [r7, #32]
 80063ae:	2b7f      	cmp	r3, #127	; 0x7f
 80063b0:	d8f0      	bhi.n	8006394 <SEGGER_SYSVIEW_Warn+0x34>
 80063b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b4:	1c5a      	adds	r2, r3, #1
 80063b6:	627a      	str	r2, [r7, #36]	; 0x24
 80063b8:	6a3a      	ldr	r2, [r7, #32]
 80063ba:	b2d2      	uxtb	r2, r2
 80063bc:	701a      	strb	r2, [r3, #0]
 80063be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	61fb      	str	r3, [r7, #28]
 80063c6:	2300      	movs	r3, #0
 80063c8:	61bb      	str	r3, [r7, #24]
 80063ca:	e00b      	b.n	80063e4 <SEGGER_SYSVIEW_Warn+0x84>
 80063cc:	69bb      	ldr	r3, [r7, #24]
 80063ce:	b2da      	uxtb	r2, r3
 80063d0:	69fb      	ldr	r3, [r7, #28]
 80063d2:	1c59      	adds	r1, r3, #1
 80063d4:	61f9      	str	r1, [r7, #28]
 80063d6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063da:	b2d2      	uxtb	r2, r2
 80063dc:	701a      	strb	r2, [r3, #0]
 80063de:	69bb      	ldr	r3, [r7, #24]
 80063e0:	09db      	lsrs	r3, r3, #7
 80063e2:	61bb      	str	r3, [r7, #24]
 80063e4:	69bb      	ldr	r3, [r7, #24]
 80063e6:	2b7f      	cmp	r3, #127	; 0x7f
 80063e8:	d8f0      	bhi.n	80063cc <SEGGER_SYSVIEW_Warn+0x6c>
 80063ea:	69fb      	ldr	r3, [r7, #28]
 80063ec:	1c5a      	adds	r2, r3, #1
 80063ee:	61fa      	str	r2, [r7, #28]
 80063f0:	69ba      	ldr	r2, [r7, #24]
 80063f2:	b2d2      	uxtb	r2, r2
 80063f4:	701a      	strb	r2, [r3, #0]
 80063f6:	69fb      	ldr	r3, [r7, #28]
 80063f8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80063fa:	221a      	movs	r2, #26
 80063fc:	68f9      	ldr	r1, [r7, #12]
 80063fe:	6938      	ldr	r0, [r7, #16]
 8006400:	f7fe fb5e 	bl	8004ac0 <_SendPacket>
  RECORD_END();
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	f383 8811 	msr	BASEPRI, r3
}
 800640a:	bf00      	nop
 800640c:	3728      	adds	r7, #40	; 0x28
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}
 8006412:	bf00      	nop
 8006414:	20014358 	.word	0x20014358

08006418 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8006418:	b580      	push	{r7, lr}
 800641a:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800641c:	4b13      	ldr	r3, [pc, #76]	; (800646c <SEGGER_SYSVIEW_IsStarted+0x54>)
 800641e:	7e1b      	ldrb	r3, [r3, #24]
 8006420:	4619      	mov	r1, r3
 8006422:	4a13      	ldr	r2, [pc, #76]	; (8006470 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8006424:	460b      	mov	r3, r1
 8006426:	005b      	lsls	r3, r3, #1
 8006428:	440b      	add	r3, r1
 800642a:	00db      	lsls	r3, r3, #3
 800642c:	4413      	add	r3, r2
 800642e:	336c      	adds	r3, #108	; 0x6c
 8006430:	681a      	ldr	r2, [r3, #0]
 8006432:	4b0e      	ldr	r3, [pc, #56]	; (800646c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006434:	7e1b      	ldrb	r3, [r3, #24]
 8006436:	4618      	mov	r0, r3
 8006438:	490d      	ldr	r1, [pc, #52]	; (8006470 <SEGGER_SYSVIEW_IsStarted+0x58>)
 800643a:	4603      	mov	r3, r0
 800643c:	005b      	lsls	r3, r3, #1
 800643e:	4403      	add	r3, r0
 8006440:	00db      	lsls	r3, r3, #3
 8006442:	440b      	add	r3, r1
 8006444:	3370      	adds	r3, #112	; 0x70
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	429a      	cmp	r2, r3
 800644a:	d00b      	beq.n	8006464 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800644c:	4b07      	ldr	r3, [pc, #28]	; (800646c <SEGGER_SYSVIEW_IsStarted+0x54>)
 800644e:	789b      	ldrb	r3, [r3, #2]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d107      	bne.n	8006464 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8006454:	4b05      	ldr	r3, [pc, #20]	; (800646c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006456:	2201      	movs	r2, #1
 8006458:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800645a:	f7fe fa4b 	bl	80048f4 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800645e:	4b03      	ldr	r3, [pc, #12]	; (800646c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006460:	2200      	movs	r2, #0
 8006462:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8006464:	4b01      	ldr	r3, [pc, #4]	; (800646c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006466:	781b      	ldrb	r3, [r3, #0]
}
 8006468:	4618      	mov	r0, r3
 800646a:	bd80      	pop	{r7, pc}
 800646c:	20014328 	.word	0x20014328
 8006470:	20012e68 	.word	0x20012e68

08006474 <__libc_init_array>:
 8006474:	b570      	push	{r4, r5, r6, lr}
 8006476:	4d0d      	ldr	r5, [pc, #52]	; (80064ac <__libc_init_array+0x38>)
 8006478:	4c0d      	ldr	r4, [pc, #52]	; (80064b0 <__libc_init_array+0x3c>)
 800647a:	1b64      	subs	r4, r4, r5
 800647c:	10a4      	asrs	r4, r4, #2
 800647e:	2600      	movs	r6, #0
 8006480:	42a6      	cmp	r6, r4
 8006482:	d109      	bne.n	8006498 <__libc_init_array+0x24>
 8006484:	4d0b      	ldr	r5, [pc, #44]	; (80064b4 <__libc_init_array+0x40>)
 8006486:	4c0c      	ldr	r4, [pc, #48]	; (80064b8 <__libc_init_array+0x44>)
 8006488:	f000 f83e 	bl	8006508 <_init>
 800648c:	1b64      	subs	r4, r4, r5
 800648e:	10a4      	asrs	r4, r4, #2
 8006490:	2600      	movs	r6, #0
 8006492:	42a6      	cmp	r6, r4
 8006494:	d105      	bne.n	80064a2 <__libc_init_array+0x2e>
 8006496:	bd70      	pop	{r4, r5, r6, pc}
 8006498:	f855 3b04 	ldr.w	r3, [r5], #4
 800649c:	4798      	blx	r3
 800649e:	3601      	adds	r6, #1
 80064a0:	e7ee      	b.n	8006480 <__libc_init_array+0xc>
 80064a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80064a6:	4798      	blx	r3
 80064a8:	3601      	adds	r6, #1
 80064aa:	e7f2      	b.n	8006492 <__libc_init_array+0x1e>
 80064ac:	080066e0 	.word	0x080066e0
 80064b0:	080066e0 	.word	0x080066e0
 80064b4:	080066e0 	.word	0x080066e0
 80064b8:	080066e4 	.word	0x080066e4

080064bc <memcmp>:
 80064bc:	b510      	push	{r4, lr}
 80064be:	3901      	subs	r1, #1
 80064c0:	4402      	add	r2, r0
 80064c2:	4290      	cmp	r0, r2
 80064c4:	d101      	bne.n	80064ca <memcmp+0xe>
 80064c6:	2000      	movs	r0, #0
 80064c8:	e005      	b.n	80064d6 <memcmp+0x1a>
 80064ca:	7803      	ldrb	r3, [r0, #0]
 80064cc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80064d0:	42a3      	cmp	r3, r4
 80064d2:	d001      	beq.n	80064d8 <memcmp+0x1c>
 80064d4:	1b18      	subs	r0, r3, r4
 80064d6:	bd10      	pop	{r4, pc}
 80064d8:	3001      	adds	r0, #1
 80064da:	e7f2      	b.n	80064c2 <memcmp+0x6>

080064dc <memcpy>:
 80064dc:	440a      	add	r2, r1
 80064de:	4291      	cmp	r1, r2
 80064e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80064e4:	d100      	bne.n	80064e8 <memcpy+0xc>
 80064e6:	4770      	bx	lr
 80064e8:	b510      	push	{r4, lr}
 80064ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80064ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80064f2:	4291      	cmp	r1, r2
 80064f4:	d1f9      	bne.n	80064ea <memcpy+0xe>
 80064f6:	bd10      	pop	{r4, pc}

080064f8 <memset>:
 80064f8:	4402      	add	r2, r0
 80064fa:	4603      	mov	r3, r0
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d100      	bne.n	8006502 <memset+0xa>
 8006500:	4770      	bx	lr
 8006502:	f803 1b01 	strb.w	r1, [r3], #1
 8006506:	e7f9      	b.n	80064fc <memset+0x4>

08006508 <_init>:
 8006508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800650a:	bf00      	nop
 800650c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800650e:	bc08      	pop	{r3}
 8006510:	469e      	mov	lr, r3
 8006512:	4770      	bx	lr

08006514 <_fini>:
 8006514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006516:	bf00      	nop
 8006518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800651a:	bc08      	pop	{r3}
 800651c:	469e      	mov	lr, r3
 800651e:	4770      	bx	lr
