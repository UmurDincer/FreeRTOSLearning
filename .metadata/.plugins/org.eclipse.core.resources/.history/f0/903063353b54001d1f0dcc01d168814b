/*
 * task_handler.c
 *
 *  Created on: Oct 21, 2022
 *      Author: Umur DinÃ§er
 */

#include "main.h"


extern UART_HandleTypeDef huart2;

int extract_command(command_t* cmd);
void process_command(command_t *cmd);

const char *msg_inv = "////Invalid Option////\n";

void menu_task(void *parameter)
{
	uint32_t cmd_addr;

	command_t *cmd;

	int option;
	const char* msg_menu = "======================\n"
						   "|		 MENU		 |\n"
						   "======================\n"
						   " LED effect    --> 0\n"
						   " Date and Time --> 1\n"
						   " Exit		   --> 2\n"
						   " Enter your choice here : ";

	while(1)
	{
		xQueueSend(q_print, &msg_menu, portMAX_DELAY);

		//wait for the menu commands
		xTaskNotifyWait(0, 0, &cmd_addr, portMAX_DELAY);
		cmd = (command_t*)cmd_addr;

		if(cmd->len == 1)
		{
			option = cmd->payload[0] - 48;
			switch(option)
			{
			case 0:
				curr_state = sLedEffect;
				xTaskNotify(handle_led_task, 0, eNoAction);
				break;
			case 1:
				curr_state = sRtcMenu;
				xTaskNotify(handle_rtc_task, 0, eNoAction);
				break;
			case 2: //exit
				break;
			default:
				xQueueSend(q_print, &msg_inv, portMAX_DELAY);
				continue;
			}
		}
		else
		{
			//invalid entry
			xQueueSend(q_print, &msg_inv, portMAX_DELAY);
			continue;
		}

		//wait to run again when some other task notifies
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
	}

}

void led_task(void *parameter)
{
	uint32_t cmd_addr;
	command_t *cmd;
	const char* msg_led = "======================\n"
						  "|	 LED EFFECT     |\n"
						  "======================\n"
						  "(none, e1, e2, e3, e4)\n"
						  "Enter your choice here: ";

	while(1)
	{
		//wait for notification (notify wait)
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
		//print LED menu
		xQueueSend(q_print, &msg_led, portMAX_DELAY);

		/*wait for LED command (Notify wait) */
		xTaskNotifyWait(0,0,&cmd_addr,portMAX_DELAY);
		cmd = (command_t*)cmd_addr;

		if(cmd->len <= 4)
		{
			if(! strcmp((char*)cmd->payload, "none"))
				led_effect_stop();
			else if(! strcmp((char*)cmd->payload, "e1"))
				led_effect(1);
			else if(! strcmp((char*)cmd->payload, "e2"))
				led_effect(2);
			else if(! strcmp((char*)cmd->payload, "e3"))
				led_effect(3);
			else if(! strcmp((char*)cmd->payload, "e4"))
				led_effect(4);
			else
				xQueueSend(q_print, &msg_inv, portMAX_DELAY); //print invalid message
		}else
			xQueueSend(q_print, &msg_inv, portMAX_DELAY);

		//update state variable
		curr_state = sMainMenu;

		//notify menu task
		xTaskNotify(handle_menu_task, 0, eNoAction);

	}
}

void rtc_task(void *parameter)
{
	const char* msg_rtc1 = "========================\n"
							"|         RTC          |\n"
							"========================\n";

	const char* msg_rtc2 = "Configure Time            ----> 0\n"
							"Configure Date            ----> 1\n"
							"Enable reporting          ----> 2\n"
							"Exit                      ----> 4\n"
							"Enter your choice here : ";


	const char *msg_rtc_hh = "Enter hour(1-12):";
	const char *msg_rtc_mm = "Enter minutes(0-59):";
	const char *msg_rtc_ss = "Enter seconds(0-59):";

	const char *msg_rtc_dd  = "Enter date(1-31):";
	const char *msg_rtc_mo  ="Enter month(1-12):";
	const char *msg_rtc_dow  = "Enter day(1-7 sun:1):";
	const char *msg_rtc_yr  = "Enter year(0-99):";

	const char *msg_conf = "Configuration successful\n";
	const char *msg_rtc_report = "Enable time&date reporting(y/n)?: ";


	uint32_t cmd_addr;
	command_t *cmd;


	while(1){
		/*Notify wait (wait till someone notifies)*/
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
		/*Print the menu and show current date and time information */


		while(curr_state != sMainMenu){

			/*TODO: Wait for command notification (Notify wait) */

			switch(curr_state)
			{
				case sRtcMenu:{

					/*TODO: process RTC menu commands */
					break;}

				case sRtcTimeConfig:{
					/*TODO : get hh, mm, ss infor and configure RTC */

					/*TODO: take care of invalid entries */
					break;}

				case sRtcDateConfig:{

					/*TODO : get date, month, day , year info and configure RTC */

					/*TODO: take care of invalid entries */

					break;}

				case sRtcReport:{
					/*TODO: enable or disable RTC current time reporting over ITM printf */
					break;}

			}// switch end

		} //while end

		   /*TODO : Notify menu task */


		}//while super loop end
}
}

void print_task(void *parameter)
{
	uint32_t* msg;
	while(1)
	{
		xQueueReceive(q_print, &msg, portMAX_DELAY);
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen((char*)msg), HAL_MAX_DELAY);

	}
}

void cmd_handler_task(void *parameter)
{
	BaseType_t ret;
	command_t cmd;
	while(1)
	{
		ret = xTaskNotifyWait(0,0, NULL, portMAX_DELAY); //impelementation of notify wait
		if(ret == pdTRUE){
			//process the user data(command) stored in input data queue
			process_command(&cmd);
		}
	}
}
void process_command(command_t *cmd)
{
	extract_command(cmd);

	switch(curr_state)
	{
	case sMainMenu:
		//notify menu task with the command
		xTaskNotify(handle_menu_task, (uint32_t)cmd, eSetValueWithOverwrite);
		break;
	case sLedEffect:
		//notify LED task with the command
		xTaskNotify(handle_led_task, (uint32_t)cmd, eSetValueWithOverwrite);
		break;
	case sRtcMenu:
	case sRtcTimeConfig:
	case sRtcDateConfig:
	case sRtcReport:
		//notify RTC task with the command
		xTaskNotify(handle_rtc_task, (uint32_t)cmd, eSetValueWithOverwrite);
	break;
	}
}

int extract_command(command_t* cmd)
{
	uint8_t item;
	BaseType_t status;

	status = uxQueueMessagesWaiting(q_data);
	if(!status) return -1;
	uint8_t i = 0;

	do{
		status = xQueueReceive(q_data, &item, 0);
		if(status == pdTRUE) cmd->payload[i++] = item;
	}while(item != '\n');

	cmd->payload[i-1] = '\0';
	cmd->len = i-1; //save length of the command excluding null char

	return 0;
}
