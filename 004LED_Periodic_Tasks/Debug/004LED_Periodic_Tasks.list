
004LED_Periodic_Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a78  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  08005c08  08005c08  00015c08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d88  08005d88  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08005d88  08005d88  00015d88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d90  08005d90  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d90  08005d90  00015d90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d94  08005d94  00015d94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08005d98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002001c  2**0
                  CONTENTS
 10 .bss          00014414  2000001c  2000001c  0002001c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20014430  20014430  0002001c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012ad7  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b08  00000000  00000000  00032b23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001140  00000000  00000000  00035630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fd8  00000000  00000000  00036770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023877  00000000  00000000  00037748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000131a0  00000000  00000000  0005afbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d851c  00000000  00000000  0006e15f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014667b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000047a0  00000000  00000000  001466cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000001c 	.word	0x2000001c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005bf0 	.word	0x08005bf0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000020 	.word	0x20000020
 80001cc:	08005bf0 	.word	0x08005bf0

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012e5c 	.word	0x20012e5c

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295
 8000274:	f04f 30ff 	movne.w	r0, #4294967295
 8000278:	f000 b974 	b.w	8000564 <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9d08      	ldr	r5, [sp, #32]
 800029a:	4604      	mov	r4, r0
 800029c:	468e      	mov	lr, r1
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d14d      	bne.n	800033e <__udivmoddi4+0xaa>
 80002a2:	428a      	cmp	r2, r1
 80002a4:	4694      	mov	ip, r2
 80002a6:	d969      	bls.n	800037c <__udivmoddi4+0xe8>
 80002a8:	fab2 f282 	clz	r2, r2
 80002ac:	b152      	cbz	r2, 80002c4 <__udivmoddi4+0x30>
 80002ae:	fa01 f302 	lsl.w	r3, r1, r2
 80002b2:	f1c2 0120 	rsb	r1, r2, #32
 80002b6:	fa20 f101 	lsr.w	r1, r0, r1
 80002ba:	fa0c fc02 	lsl.w	ip, ip, r2
 80002be:	ea41 0e03 	orr.w	lr, r1, r3
 80002c2:	4094      	lsls	r4, r2
 80002c4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002c8:	0c21      	lsrs	r1, r4, #16
 80002ca:	fbbe f6f8 	udiv	r6, lr, r8
 80002ce:	fa1f f78c 	uxth.w	r7, ip
 80002d2:	fb08 e316 	mls	r3, r8, r6, lr
 80002d6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002da:	fb06 f107 	mul.w	r1, r6, r7
 80002de:	4299      	cmp	r1, r3
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x64>
 80002e2:	eb1c 0303 	adds.w	r3, ip, r3
 80002e6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ea:	f080 811f 	bcs.w	800052c <__udivmoddi4+0x298>
 80002ee:	4299      	cmp	r1, r3
 80002f0:	f240 811c 	bls.w	800052c <__udivmoddi4+0x298>
 80002f4:	3e02      	subs	r6, #2
 80002f6:	4463      	add	r3, ip
 80002f8:	1a5b      	subs	r3, r3, r1
 80002fa:	b2a4      	uxth	r4, r4
 80002fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000300:	fb08 3310 	mls	r3, r8, r0, r3
 8000304:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000308:	fb00 f707 	mul.w	r7, r0, r7
 800030c:	42a7      	cmp	r7, r4
 800030e:	d90a      	bls.n	8000326 <__udivmoddi4+0x92>
 8000310:	eb1c 0404 	adds.w	r4, ip, r4
 8000314:	f100 33ff 	add.w	r3, r0, #4294967295
 8000318:	f080 810a 	bcs.w	8000530 <__udivmoddi4+0x29c>
 800031c:	42a7      	cmp	r7, r4
 800031e:	f240 8107 	bls.w	8000530 <__udivmoddi4+0x29c>
 8000322:	4464      	add	r4, ip
 8000324:	3802      	subs	r0, #2
 8000326:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800032a:	1be4      	subs	r4, r4, r7
 800032c:	2600      	movs	r6, #0
 800032e:	b11d      	cbz	r5, 8000338 <__udivmoddi4+0xa4>
 8000330:	40d4      	lsrs	r4, r2
 8000332:	2300      	movs	r3, #0
 8000334:	e9c5 4300 	strd	r4, r3, [r5]
 8000338:	4631      	mov	r1, r6
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	428b      	cmp	r3, r1
 8000340:	d909      	bls.n	8000356 <__udivmoddi4+0xc2>
 8000342:	2d00      	cmp	r5, #0
 8000344:	f000 80ef 	beq.w	8000526 <__udivmoddi4+0x292>
 8000348:	2600      	movs	r6, #0
 800034a:	e9c5 0100 	strd	r0, r1, [r5]
 800034e:	4630      	mov	r0, r6
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	fab3 f683 	clz	r6, r3
 800035a:	2e00      	cmp	r6, #0
 800035c:	d14a      	bne.n	80003f4 <__udivmoddi4+0x160>
 800035e:	428b      	cmp	r3, r1
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xd4>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 80f9 	bhi.w	800055a <__udivmoddi4+0x2c6>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb61 0303 	sbc.w	r3, r1, r3
 800036e:	2001      	movs	r0, #1
 8000370:	469e      	mov	lr, r3
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e0      	beq.n	8000338 <__udivmoddi4+0xa4>
 8000376:	e9c5 4e00 	strd	r4, lr, [r5]
 800037a:	e7dd      	b.n	8000338 <__udivmoddi4+0xa4>
 800037c:	b902      	cbnz	r2, 8000380 <__udivmoddi4+0xec>
 800037e:	deff      	udf	#255	; 0xff
 8000380:	fab2 f282 	clz	r2, r2
 8000384:	2a00      	cmp	r2, #0
 8000386:	f040 8092 	bne.w	80004ae <__udivmoddi4+0x21a>
 800038a:	eba1 010c 	sub.w	r1, r1, ip
 800038e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000392:	fa1f fe8c 	uxth.w	lr, ip
 8000396:	2601      	movs	r6, #1
 8000398:	0c20      	lsrs	r0, r4, #16
 800039a:	fbb1 f3f7 	udiv	r3, r1, r7
 800039e:	fb07 1113 	mls	r1, r7, r3, r1
 80003a2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a6:	fb0e f003 	mul.w	r0, lr, r3
 80003aa:	4288      	cmp	r0, r1
 80003ac:	d908      	bls.n	80003c0 <__udivmoddi4+0x12c>
 80003ae:	eb1c 0101 	adds.w	r1, ip, r1
 80003b2:	f103 38ff 	add.w	r8, r3, #4294967295
 80003b6:	d202      	bcs.n	80003be <__udivmoddi4+0x12a>
 80003b8:	4288      	cmp	r0, r1
 80003ba:	f200 80cb 	bhi.w	8000554 <__udivmoddi4+0x2c0>
 80003be:	4643      	mov	r3, r8
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f7 	udiv	r0, r1, r7
 80003c8:	fb07 1110 	mls	r1, r7, r0, r1
 80003cc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003d0:	fb0e fe00 	mul.w	lr, lr, r0
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x156>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80003e0:	d202      	bcs.n	80003e8 <__udivmoddi4+0x154>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	f200 80bb 	bhi.w	800055e <__udivmoddi4+0x2ca>
 80003e8:	4608      	mov	r0, r1
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003f2:	e79c      	b.n	800032e <__udivmoddi4+0x9a>
 80003f4:	f1c6 0720 	rsb	r7, r6, #32
 80003f8:	40b3      	lsls	r3, r6
 80003fa:	fa22 fc07 	lsr.w	ip, r2, r7
 80003fe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000402:	fa20 f407 	lsr.w	r4, r0, r7
 8000406:	fa01 f306 	lsl.w	r3, r1, r6
 800040a:	431c      	orrs	r4, r3
 800040c:	40f9      	lsrs	r1, r7
 800040e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000412:	fa00 f306 	lsl.w	r3, r0, r6
 8000416:	fbb1 f8f9 	udiv	r8, r1, r9
 800041a:	0c20      	lsrs	r0, r4, #16
 800041c:	fa1f fe8c 	uxth.w	lr, ip
 8000420:	fb09 1118 	mls	r1, r9, r8, r1
 8000424:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000428:	fb08 f00e 	mul.w	r0, r8, lr
 800042c:	4288      	cmp	r0, r1
 800042e:	fa02 f206 	lsl.w	r2, r2, r6
 8000432:	d90b      	bls.n	800044c <__udivmoddi4+0x1b8>
 8000434:	eb1c 0101 	adds.w	r1, ip, r1
 8000438:	f108 3aff 	add.w	sl, r8, #4294967295
 800043c:	f080 8088 	bcs.w	8000550 <__udivmoddi4+0x2bc>
 8000440:	4288      	cmp	r0, r1
 8000442:	f240 8085 	bls.w	8000550 <__udivmoddi4+0x2bc>
 8000446:	f1a8 0802 	sub.w	r8, r8, #2
 800044a:	4461      	add	r1, ip
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f9 	udiv	r0, r1, r9
 8000454:	fb09 1110 	mls	r1, r9, r0, r1
 8000458:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800045c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000460:	458e      	cmp	lr, r1
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x1e2>
 8000464:	eb1c 0101 	adds.w	r1, ip, r1
 8000468:	f100 34ff 	add.w	r4, r0, #4294967295
 800046c:	d26c      	bcs.n	8000548 <__udivmoddi4+0x2b4>
 800046e:	458e      	cmp	lr, r1
 8000470:	d96a      	bls.n	8000548 <__udivmoddi4+0x2b4>
 8000472:	3802      	subs	r0, #2
 8000474:	4461      	add	r1, ip
 8000476:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800047a:	fba0 9402 	umull	r9, r4, r0, r2
 800047e:	eba1 010e 	sub.w	r1, r1, lr
 8000482:	42a1      	cmp	r1, r4
 8000484:	46c8      	mov	r8, r9
 8000486:	46a6      	mov	lr, r4
 8000488:	d356      	bcc.n	8000538 <__udivmoddi4+0x2a4>
 800048a:	d053      	beq.n	8000534 <__udivmoddi4+0x2a0>
 800048c:	b15d      	cbz	r5, 80004a6 <__udivmoddi4+0x212>
 800048e:	ebb3 0208 	subs.w	r2, r3, r8
 8000492:	eb61 010e 	sbc.w	r1, r1, lr
 8000496:	fa01 f707 	lsl.w	r7, r1, r7
 800049a:	fa22 f306 	lsr.w	r3, r2, r6
 800049e:	40f1      	lsrs	r1, r6
 80004a0:	431f      	orrs	r7, r3
 80004a2:	e9c5 7100 	strd	r7, r1, [r5]
 80004a6:	2600      	movs	r6, #0
 80004a8:	4631      	mov	r1, r6
 80004aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ae:	f1c2 0320 	rsb	r3, r2, #32
 80004b2:	40d8      	lsrs	r0, r3
 80004b4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b8:	fa21 f303 	lsr.w	r3, r1, r3
 80004bc:	4091      	lsls	r1, r2
 80004be:	4301      	orrs	r1, r0
 80004c0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c4:	fa1f fe8c 	uxth.w	lr, ip
 80004c8:	fbb3 f0f7 	udiv	r0, r3, r7
 80004cc:	fb07 3610 	mls	r6, r7, r0, r3
 80004d0:	0c0b      	lsrs	r3, r1, #16
 80004d2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004d6:	fb00 f60e 	mul.w	r6, r0, lr
 80004da:	429e      	cmp	r6, r3
 80004dc:	fa04 f402 	lsl.w	r4, r4, r2
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x260>
 80004e2:	eb1c 0303 	adds.w	r3, ip, r3
 80004e6:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ea:	d22f      	bcs.n	800054c <__udivmoddi4+0x2b8>
 80004ec:	429e      	cmp	r6, r3
 80004ee:	d92d      	bls.n	800054c <__udivmoddi4+0x2b8>
 80004f0:	3802      	subs	r0, #2
 80004f2:	4463      	add	r3, ip
 80004f4:	1b9b      	subs	r3, r3, r6
 80004f6:	b289      	uxth	r1, r1
 80004f8:	fbb3 f6f7 	udiv	r6, r3, r7
 80004fc:	fb07 3316 	mls	r3, r7, r6, r3
 8000500:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000504:	fb06 f30e 	mul.w	r3, r6, lr
 8000508:	428b      	cmp	r3, r1
 800050a:	d908      	bls.n	800051e <__udivmoddi4+0x28a>
 800050c:	eb1c 0101 	adds.w	r1, ip, r1
 8000510:	f106 38ff 	add.w	r8, r6, #4294967295
 8000514:	d216      	bcs.n	8000544 <__udivmoddi4+0x2b0>
 8000516:	428b      	cmp	r3, r1
 8000518:	d914      	bls.n	8000544 <__udivmoddi4+0x2b0>
 800051a:	3e02      	subs	r6, #2
 800051c:	4461      	add	r1, ip
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000524:	e738      	b.n	8000398 <__udivmoddi4+0x104>
 8000526:	462e      	mov	r6, r5
 8000528:	4628      	mov	r0, r5
 800052a:	e705      	b.n	8000338 <__udivmoddi4+0xa4>
 800052c:	4606      	mov	r6, r0
 800052e:	e6e3      	b.n	80002f8 <__udivmoddi4+0x64>
 8000530:	4618      	mov	r0, r3
 8000532:	e6f8      	b.n	8000326 <__udivmoddi4+0x92>
 8000534:	454b      	cmp	r3, r9
 8000536:	d2a9      	bcs.n	800048c <__udivmoddi4+0x1f8>
 8000538:	ebb9 0802 	subs.w	r8, r9, r2
 800053c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000540:	3801      	subs	r0, #1
 8000542:	e7a3      	b.n	800048c <__udivmoddi4+0x1f8>
 8000544:	4646      	mov	r6, r8
 8000546:	e7ea      	b.n	800051e <__udivmoddi4+0x28a>
 8000548:	4620      	mov	r0, r4
 800054a:	e794      	b.n	8000476 <__udivmoddi4+0x1e2>
 800054c:	4640      	mov	r0, r8
 800054e:	e7d1      	b.n	80004f4 <__udivmoddi4+0x260>
 8000550:	46d0      	mov	r8, sl
 8000552:	e77b      	b.n	800044c <__udivmoddi4+0x1b8>
 8000554:	3b02      	subs	r3, #2
 8000556:	4461      	add	r1, ip
 8000558:	e732      	b.n	80003c0 <__udivmoddi4+0x12c>
 800055a:	4630      	mov	r0, r6
 800055c:	e709      	b.n	8000372 <__udivmoddi4+0xde>
 800055e:	4464      	add	r4, ip
 8000560:	3802      	subs	r0, #2
 8000562:	e742      	b.n	80003ea <__udivmoddi4+0x156>

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b08a      	sub	sp, #40	; 0x28
 800056c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056e:	f000 fa83 	bl	8000a78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000572:	f000 f86d 	bl	8000650 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000576:	f000 f8d5 	bl	8000724 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  SEGGER_UART_init(250000);
 800057a:	482d      	ldr	r0, [pc, #180]	; (8000630 <main+0xc8>)
 800057c:	f003 f9a8 	bl	80038d0 <SEGGER_UART_init>

  DWT_CTRL |= (1 << 0);
 8000580:	4b2c      	ldr	r3, [pc, #176]	; (8000634 <main+0xcc>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a2b      	ldr	r2, [pc, #172]	; (8000634 <main+0xcc>)
 8000586:	f043 0301 	orr.w	r3, r3, #1
 800058a:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 800058c:	f002 ffca 	bl	8003524 <SEGGER_SYSVIEW_Conf>

  status = xTaskCreate(led_blue_handler, "LED_blue_task", 200, NULL, 2, &task1_handle);
 8000590:	f107 030c 	add.w	r3, r7, #12
 8000594:	9301      	str	r3, [sp, #4]
 8000596:	2302      	movs	r3, #2
 8000598:	9300      	str	r3, [sp, #0]
 800059a:	2300      	movs	r3, #0
 800059c:	22c8      	movs	r2, #200	; 0xc8
 800059e:	4926      	ldr	r1, [pc, #152]	; (8000638 <main+0xd0>)
 80005a0:	4826      	ldr	r0, [pc, #152]	; (800063c <main+0xd4>)
 80005a2:	f001 fd75 	bl	8002090 <xTaskCreate>
 80005a6:	61f8      	str	r0, [r7, #28]

  configASSERT(status == pdPASS);
 80005a8:	69fb      	ldr	r3, [r7, #28]
 80005aa:	2b01      	cmp	r3, #1
 80005ac:	d00a      	beq.n	80005c4 <main+0x5c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005b2:	f383 8811 	msr	BASEPRI, r3
 80005b6:	f3bf 8f6f 	isb	sy
 80005ba:	f3bf 8f4f 	dsb	sy
 80005be:	61bb      	str	r3, [r7, #24]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005c0:	bf00      	nop
 80005c2:	e7fe      	b.n	80005c2 <main+0x5a>

  status = xTaskCreate(led_red_handler, "LED_red_task", 200, NULL, 2, &task2_handle);
 80005c4:	f107 0308 	add.w	r3, r7, #8
 80005c8:	9301      	str	r3, [sp, #4]
 80005ca:	2302      	movs	r3, #2
 80005cc:	9300      	str	r3, [sp, #0]
 80005ce:	2300      	movs	r3, #0
 80005d0:	22c8      	movs	r2, #200	; 0xc8
 80005d2:	491b      	ldr	r1, [pc, #108]	; (8000640 <main+0xd8>)
 80005d4:	481b      	ldr	r0, [pc, #108]	; (8000644 <main+0xdc>)
 80005d6:	f001 fd5b 	bl	8002090 <xTaskCreate>
 80005da:	61f8      	str	r0, [r7, #28]

  configASSERT(status == pdPASS);
 80005dc:	69fb      	ldr	r3, [r7, #28]
 80005de:	2b01      	cmp	r3, #1
 80005e0:	d00a      	beq.n	80005f8 <main+0x90>
        __asm volatile
 80005e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005e6:	f383 8811 	msr	BASEPRI, r3
 80005ea:	f3bf 8f6f 	isb	sy
 80005ee:	f3bf 8f4f 	dsb	sy
 80005f2:	617b      	str	r3, [r7, #20]
    }
 80005f4:	bf00      	nop
 80005f6:	e7fe      	b.n	80005f6 <main+0x8e>

  status = xTaskCreate(led_orange_handler, "LED_orange_task", 200, NULL, 2, &task3_handle);
 80005f8:	1d3b      	adds	r3, r7, #4
 80005fa:	9301      	str	r3, [sp, #4]
 80005fc:	2302      	movs	r3, #2
 80005fe:	9300      	str	r3, [sp, #0]
 8000600:	2300      	movs	r3, #0
 8000602:	22c8      	movs	r2, #200	; 0xc8
 8000604:	4910      	ldr	r1, [pc, #64]	; (8000648 <main+0xe0>)
 8000606:	4811      	ldr	r0, [pc, #68]	; (800064c <main+0xe4>)
 8000608:	f001 fd42 	bl	8002090 <xTaskCreate>
 800060c:	61f8      	str	r0, [r7, #28]

  configASSERT(status == pdPASS);
 800060e:	69fb      	ldr	r3, [r7, #28]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d00a      	beq.n	800062a <main+0xc2>
        __asm volatile
 8000614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000618:	f383 8811 	msr	BASEPRI, r3
 800061c:	f3bf 8f6f 	isb	sy
 8000620:	f3bf 8f4f 	dsb	sy
 8000624:	613b      	str	r3, [r7, #16]
    }
 8000626:	bf00      	nop
 8000628:	e7fe      	b.n	8000628 <main+0xc0>

  vTaskStartScheduler();
 800062a:	f001 ff17 	bl	800245c <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800062e:	e7fe      	b.n	800062e <main+0xc6>
 8000630:	0003d090 	.word	0x0003d090
 8000634:	e0001000 	.word	0xe0001000
 8000638:	08005c08 	.word	0x08005c08
 800063c:	080007e5 	.word	0x080007e5
 8000640:	08005c18 	.word	0x08005c18
 8000644:	0800081d 	.word	0x0800081d
 8000648:	08005c28 	.word	0x08005c28
 800064c:	08000855 	.word	0x08000855

08000650 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b094      	sub	sp, #80	; 0x50
 8000654:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000656:	f107 0320 	add.w	r3, r7, #32
 800065a:	2230      	movs	r2, #48	; 0x30
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f005 fabe 	bl	8005be0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000664:	f107 030c 	add.w	r3, r7, #12
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
 8000672:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000674:	2300      	movs	r3, #0
 8000676:	60bb      	str	r3, [r7, #8]
 8000678:	4b28      	ldr	r3, [pc, #160]	; (800071c <SystemClock_Config+0xcc>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800067c:	4a27      	ldr	r2, [pc, #156]	; (800071c <SystemClock_Config+0xcc>)
 800067e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000682:	6413      	str	r3, [r2, #64]	; 0x40
 8000684:	4b25      	ldr	r3, [pc, #148]	; (800071c <SystemClock_Config+0xcc>)
 8000686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000688:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800068c:	60bb      	str	r3, [r7, #8]
 800068e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000690:	2300      	movs	r3, #0
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	4b22      	ldr	r3, [pc, #136]	; (8000720 <SystemClock_Config+0xd0>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a21      	ldr	r2, [pc, #132]	; (8000720 <SystemClock_Config+0xd0>)
 800069a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800069e:	6013      	str	r3, [r2, #0]
 80006a0:	4b1f      	ldr	r3, [pc, #124]	; (8000720 <SystemClock_Config+0xd0>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006a8:	607b      	str	r3, [r7, #4]
 80006aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006ac:	2302      	movs	r3, #2
 80006ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b0:	2301      	movs	r3, #1
 80006b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b4:	2310      	movs	r3, #16
 80006b6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b8:	2302      	movs	r3, #2
 80006ba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006bc:	2300      	movs	r3, #0
 80006be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006c0:	2308      	movs	r3, #8
 80006c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80006c4:	2332      	movs	r3, #50	; 0x32
 80006c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006c8:	2304      	movs	r3, #4
 80006ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006cc:	2307      	movs	r3, #7
 80006ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d0:	f107 0320 	add.w	r3, r7, #32
 80006d4:	4618      	mov	r0, r3
 80006d6:	f000 fcc3 	bl	8001060 <HAL_RCC_OscConfig>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006e0:	f000 f8e6 	bl	80008b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e4:	230f      	movs	r3, #15
 80006e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e8:	2302      	movs	r3, #2
 80006ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ec:	2300      	movs	r3, #0
 80006ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006f0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006fc:	f107 030c 	add.w	r3, r7, #12
 8000700:	2100      	movs	r1, #0
 8000702:	4618      	mov	r0, r3
 8000704:	f000 ff24 	bl	8001550 <HAL_RCC_ClockConfig>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800070e:	f000 f8cf 	bl	80008b0 <Error_Handler>
  }
}
 8000712:	bf00      	nop
 8000714:	3750      	adds	r7, #80	; 0x50
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	40023800 	.word	0x40023800
 8000720:	40007000 	.word	0x40007000

08000724 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b08a      	sub	sp, #40	; 0x28
 8000728:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072a:	f107 0314 	add.w	r3, r7, #20
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]
 8000734:	609a      	str	r2, [r3, #8]
 8000736:	60da      	str	r2, [r3, #12]
 8000738:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	613b      	str	r3, [r7, #16]
 800073e:	4b27      	ldr	r3, [pc, #156]	; (80007dc <MX_GPIO_Init+0xb8>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4a26      	ldr	r2, [pc, #152]	; (80007dc <MX_GPIO_Init+0xb8>)
 8000744:	f043 0304 	orr.w	r3, r3, #4
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4b24      	ldr	r3, [pc, #144]	; (80007dc <MX_GPIO_Init+0xb8>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f003 0304 	and.w	r3, r3, #4
 8000752:	613b      	str	r3, [r7, #16]
 8000754:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	60fb      	str	r3, [r7, #12]
 800075a:	4b20      	ldr	r3, [pc, #128]	; (80007dc <MX_GPIO_Init+0xb8>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a1f      	ldr	r2, [pc, #124]	; (80007dc <MX_GPIO_Init+0xb8>)
 8000760:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
 8000766:	4b1d      	ldr	r3, [pc, #116]	; (80007dc <MX_GPIO_Init+0xb8>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800076e:	60fb      	str	r3, [r7, #12]
 8000770:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	60bb      	str	r3, [r7, #8]
 8000776:	4b19      	ldr	r3, [pc, #100]	; (80007dc <MX_GPIO_Init+0xb8>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	4a18      	ldr	r2, [pc, #96]	; (80007dc <MX_GPIO_Init+0xb8>)
 800077c:	f043 0301 	orr.w	r3, r3, #1
 8000780:	6313      	str	r3, [r2, #48]	; 0x30
 8000782:	4b16      	ldr	r3, [pc, #88]	; (80007dc <MX_GPIO_Init+0xb8>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	f003 0301 	and.w	r3, r3, #1
 800078a:	60bb      	str	r3, [r7, #8]
 800078c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	607b      	str	r3, [r7, #4]
 8000792:	4b12      	ldr	r3, [pc, #72]	; (80007dc <MX_GPIO_Init+0xb8>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4a11      	ldr	r2, [pc, #68]	; (80007dc <MX_GPIO_Init+0xb8>)
 8000798:	f043 0308 	orr.w	r3, r3, #8
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b0f      	ldr	r3, [pc, #60]	; (80007dc <MX_GPIO_Init+0xb8>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0308 	and.w	r3, r3, #8
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80007aa:	2200      	movs	r2, #0
 80007ac:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80007b0:	480b      	ldr	r0, [pc, #44]	; (80007e0 <MX_GPIO_Init+0xbc>)
 80007b2:	f000 fc21 	bl	8000ff8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80007b6:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80007ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007bc:	2301      	movs	r3, #1
 80007be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c0:	2300      	movs	r3, #0
 80007c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c4:	2300      	movs	r3, #0
 80007c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007c8:	f107 0314 	add.w	r3, r7, #20
 80007cc:	4619      	mov	r1, r3
 80007ce:	4804      	ldr	r0, [pc, #16]	; (80007e0 <MX_GPIO_Init+0xbc>)
 80007d0:	f000 fa76 	bl	8000cc0 <HAL_GPIO_Init>

}
 80007d4:	bf00      	nop
 80007d6:	3728      	adds	r7, #40	; 0x28
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	40023800 	.word	0x40023800
 80007e0:	40020c00 	.word	0x40020c00

080007e4 <led_blue_handler>:

/* USER CODE BEGIN 4 */
static void led_blue_handler(void* parameters)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b084      	sub	sp, #16
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
	TickType_t	last_wakeup_time;

	last_wakeup_time = xTaskGetTickCount();
 80007ec:	f001 ff40 	bl	8002670 <xTaskGetTickCount>
 80007f0:	4603      	mov	r3, r0
 80007f2:	60fb      	str	r3, [r7, #12]

	while(1)
	{
		//blue PD15
		SEGGER_SYSVIEW_PrintfTarget("Toggling blue LED");
 80007f4:	4807      	ldr	r0, [pc, #28]	; (8000814 <led_blue_handler+0x30>)
 80007f6:	f005 f913 	bl	8005a20 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 80007fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007fe:	4806      	ldr	r0, [pc, #24]	; (8000818 <led_blue_handler+0x34>)
 8000800:	f000 fc13 	bl	800102a <HAL_GPIO_TogglePin>
		vTaskDelayUntil(&last_wakeup_time, pdMS_TO_TICKS(1000));
 8000804:	f107 030c 	add.w	r3, r7, #12
 8000808:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800080c:	4618      	mov	r0, r3
 800080e:	f001 fda3 	bl	8002358 <xTaskDelayUntil>
		SEGGER_SYSVIEW_PrintfTarget("Toggling blue LED");
 8000812:	e7ef      	b.n	80007f4 <led_blue_handler+0x10>
 8000814:	08005c38 	.word	0x08005c38
 8000818:	40020c00 	.word	0x40020c00

0800081c <led_red_handler>:
	}
}

static void led_red_handler(void* parameters)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b084      	sub	sp, #16
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
	TickType_t	last_wakeup_time;

	last_wakeup_time = xTaskGetTickCount();
 8000824:	f001 ff24 	bl	8002670 <xTaskGetTickCount>
 8000828:	4603      	mov	r3, r0
 800082a:	60fb      	str	r3, [r7, #12]
	while(1)
	{
		//red PD14

		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 800082c:	4807      	ldr	r0, [pc, #28]	; (800084c <led_red_handler+0x30>)
 800082e:	f005 f8f7 	bl	8005a20 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000832:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000836:	4806      	ldr	r0, [pc, #24]	; (8000850 <led_red_handler+0x34>)
 8000838:	f000 fbf7 	bl	800102a <HAL_GPIO_TogglePin>
		vTaskDelayUntil(&last_wakeup_time, pdMS_TO_TICKS(800));
 800083c:	f107 030c 	add.w	r3, r7, #12
 8000840:	f44f 7148 	mov.w	r1, #800	; 0x320
 8000844:	4618      	mov	r0, r3
 8000846:	f001 fd87 	bl	8002358 <xTaskDelayUntil>
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 800084a:	e7ef      	b.n	800082c <led_red_handler+0x10>
 800084c:	08005c4c 	.word	0x08005c4c
 8000850:	40020c00 	.word	0x40020c00

08000854 <led_orange_handler>:
	}
}

static void led_orange_handler(void* parameters)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b084      	sub	sp, #16
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
	TickType_t	last_wakeup_time;

	last_wakeup_time = xTaskGetTickCount();
 800085c:	f001 ff08 	bl	8002670 <xTaskGetTickCount>
 8000860:	4603      	mov	r3, r0
 8000862:	60fb      	str	r3, [r7, #12]
	while(1)
	{
		//orange PD13

		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 8000864:	4807      	ldr	r0, [pc, #28]	; (8000884 <led_orange_handler+0x30>)
 8000866:	f005 f8db 	bl	8005a20 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 800086a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800086e:	4806      	ldr	r0, [pc, #24]	; (8000888 <led_orange_handler+0x34>)
 8000870:	f000 fbdb 	bl	800102a <HAL_GPIO_TogglePin>
		vTaskDelayUntil(&last_wakeup_time, pdMS_TO_TICKS(400));
 8000874:	f107 030c 	add.w	r3, r7, #12
 8000878:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800087c:	4618      	mov	r0, r3
 800087e:	f001 fd6b 	bl	8002358 <xTaskDelayUntil>
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 8000882:	e7ef      	b.n	8000864 <led_orange_handler+0x10>
 8000884:	08005c60 	.word	0x08005c60
 8000888:	40020c00 	.word	0x40020c00

0800088c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a04      	ldr	r2, [pc, #16]	; (80008ac <HAL_TIM_PeriodElapsedCallback+0x20>)
 800089a:	4293      	cmp	r3, r2
 800089c:	d101      	bne.n	80008a2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800089e:	f000 f90d 	bl	8000abc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008a2:	bf00      	nop
 80008a4:	3708      	adds	r7, #8
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	40001000 	.word	0x40001000

080008b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008b4:	b672      	cpsid	i
}
 80008b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008b8:	e7fe      	b.n	80008b8 <Error_Handler+0x8>
	...

080008bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	607b      	str	r3, [r7, #4]
 80008c6:	4b10      	ldr	r3, [pc, #64]	; (8000908 <HAL_MspInit+0x4c>)
 80008c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ca:	4a0f      	ldr	r2, [pc, #60]	; (8000908 <HAL_MspInit+0x4c>)
 80008cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008d0:	6453      	str	r3, [r2, #68]	; 0x44
 80008d2:	4b0d      	ldr	r3, [pc, #52]	; (8000908 <HAL_MspInit+0x4c>)
 80008d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008da:	607b      	str	r3, [r7, #4]
 80008dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	603b      	str	r3, [r7, #0]
 80008e2:	4b09      	ldr	r3, [pc, #36]	; (8000908 <HAL_MspInit+0x4c>)
 80008e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e6:	4a08      	ldr	r2, [pc, #32]	; (8000908 <HAL_MspInit+0x4c>)
 80008e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008ec:	6413      	str	r3, [r2, #64]	; 0x40
 80008ee:	4b06      	ldr	r3, [pc, #24]	; (8000908 <HAL_MspInit+0x4c>)
 80008f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008f6:	603b      	str	r3, [r7, #0]
 80008f8:	683b      	ldr	r3, [r7, #0]

  vInitPrioGroupValue();
 80008fa:	f002 fa5d 	bl	8002db8 <vInitPrioGroupValue>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008fe:	bf00      	nop
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	40023800 	.word	0x40023800

0800090c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b08c      	sub	sp, #48	; 0x30
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000914:	2300      	movs	r3, #0
 8000916:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000918:	2300      	movs	r3, #0
 800091a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800091c:	2200      	movs	r2, #0
 800091e:	6879      	ldr	r1, [r7, #4]
 8000920:	2036      	movs	r0, #54	; 0x36
 8000922:	f000 f9a3 	bl	8000c6c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000926:	2036      	movs	r0, #54	; 0x36
 8000928:	f000 f9bc 	bl	8000ca4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800092c:	2300      	movs	r3, #0
 800092e:	60fb      	str	r3, [r7, #12]
 8000930:	4b1f      	ldr	r3, [pc, #124]	; (80009b0 <HAL_InitTick+0xa4>)
 8000932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000934:	4a1e      	ldr	r2, [pc, #120]	; (80009b0 <HAL_InitTick+0xa4>)
 8000936:	f043 0310 	orr.w	r3, r3, #16
 800093a:	6413      	str	r3, [r2, #64]	; 0x40
 800093c:	4b1c      	ldr	r3, [pc, #112]	; (80009b0 <HAL_InitTick+0xa4>)
 800093e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000940:	f003 0310 	and.w	r3, r3, #16
 8000944:	60fb      	str	r3, [r7, #12]
 8000946:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000948:	f107 0210 	add.w	r2, r7, #16
 800094c:	f107 0314 	add.w	r3, r7, #20
 8000950:	4611      	mov	r1, r2
 8000952:	4618      	mov	r0, r3
 8000954:	f001 f808 	bl	8001968 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000958:	f000 fff2 	bl	8001940 <HAL_RCC_GetPCLK1Freq>
 800095c:	4603      	mov	r3, r0
 800095e:	005b      	lsls	r3, r3, #1
 8000960:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000964:	4a13      	ldr	r2, [pc, #76]	; (80009b4 <HAL_InitTick+0xa8>)
 8000966:	fba2 2303 	umull	r2, r3, r2, r3
 800096a:	0c9b      	lsrs	r3, r3, #18
 800096c:	3b01      	subs	r3, #1
 800096e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000970:	4b11      	ldr	r3, [pc, #68]	; (80009b8 <HAL_InitTick+0xac>)
 8000972:	4a12      	ldr	r2, [pc, #72]	; (80009bc <HAL_InitTick+0xb0>)
 8000974:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000976:	4b10      	ldr	r3, [pc, #64]	; (80009b8 <HAL_InitTick+0xac>)
 8000978:	f240 32e7 	movw	r2, #999	; 0x3e7
 800097c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800097e:	4a0e      	ldr	r2, [pc, #56]	; (80009b8 <HAL_InitTick+0xac>)
 8000980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000982:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000984:	4b0c      	ldr	r3, [pc, #48]	; (80009b8 <HAL_InitTick+0xac>)
 8000986:	2200      	movs	r2, #0
 8000988:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800098a:	4b0b      	ldr	r3, [pc, #44]	; (80009b8 <HAL_InitTick+0xac>)
 800098c:	2200      	movs	r2, #0
 800098e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000990:	4809      	ldr	r0, [pc, #36]	; (80009b8 <HAL_InitTick+0xac>)
 8000992:	f001 f81b 	bl	80019cc <HAL_TIM_Base_Init>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d104      	bne.n	80009a6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800099c:	4806      	ldr	r0, [pc, #24]	; (80009b8 <HAL_InitTick+0xac>)
 800099e:	f001 f86f 	bl	8001a80 <HAL_TIM_Base_Start_IT>
 80009a2:	4603      	mov	r3, r0
 80009a4:	e000      	b.n	80009a8 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80009a6:	2301      	movs	r3, #1
}
 80009a8:	4618      	mov	r0, r3
 80009aa:	3730      	adds	r7, #48	; 0x30
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	40023800 	.word	0x40023800
 80009b4:	431bde83 	.word	0x431bde83
 80009b8:	20000038 	.word	0x20000038
 80009bc:	40001000 	.word	0x40001000

080009c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009c4:	e7fe      	b.n	80009c4 <NMI_Handler+0x4>

080009c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009c6:	b480      	push	{r7}
 80009c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ca:	e7fe      	b.n	80009ca <HardFault_Handler+0x4>

080009cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009d0:	e7fe      	b.n	80009d0 <MemManage_Handler+0x4>

080009d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009d2:	b480      	push	{r7}
 80009d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009d6:	e7fe      	b.n	80009d6 <BusFault_Handler+0x4>

080009d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009dc:	e7fe      	b.n	80009dc <UsageFault_Handler+0x4>

080009de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009de:	b480      	push	{r7}
 80009e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009e2:	bf00      	nop
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr

080009ec <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80009f0:	4802      	ldr	r0, [pc, #8]	; (80009fc <TIM6_DAC_IRQHandler+0x10>)
 80009f2:	f001 f8b5 	bl	8001b60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80009f6:	bf00      	nop
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	20000038 	.word	0x20000038

08000a00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a04:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <SystemInit+0x20>)
 8000a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a0a:	4a05      	ldr	r2, [pc, #20]	; (8000a20 <SystemInit+0x20>)
 8000a0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a14:	bf00      	nop
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	e000ed00 	.word	0xe000ed00

08000a24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a5c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a28:	480d      	ldr	r0, [pc, #52]	; (8000a60 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a2a:	490e      	ldr	r1, [pc, #56]	; (8000a64 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a2c:	4a0e      	ldr	r2, [pc, #56]	; (8000a68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a30:	e002      	b.n	8000a38 <LoopCopyDataInit>

08000a32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a36:	3304      	adds	r3, #4

08000a38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a3c:	d3f9      	bcc.n	8000a32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a3e:	4a0b      	ldr	r2, [pc, #44]	; (8000a6c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a40:	4c0b      	ldr	r4, [pc, #44]	; (8000a70 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a44:	e001      	b.n	8000a4a <LoopFillZerobss>

08000a46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a48:	3204      	adds	r2, #4

08000a4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a4c:	d3fb      	bcc.n	8000a46 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a4e:	f7ff ffd7 	bl	8000a00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a52:	f005 f883 	bl	8005b5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a56:	f7ff fd87 	bl	8000568 <main>
  bx  lr    
 8000a5a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000a5c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a64:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000a68:	08005d98 	.word	0x08005d98
  ldr r2, =_sbss
 8000a6c:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000a70:	20014430 	.word	0x20014430

08000a74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a74:	e7fe      	b.n	8000a74 <ADC_IRQHandler>
	...

08000a78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a7c:	4b0e      	ldr	r3, [pc, #56]	; (8000ab8 <HAL_Init+0x40>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a0d      	ldr	r2, [pc, #52]	; (8000ab8 <HAL_Init+0x40>)
 8000a82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a88:	4b0b      	ldr	r3, [pc, #44]	; (8000ab8 <HAL_Init+0x40>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a0a      	ldr	r2, [pc, #40]	; (8000ab8 <HAL_Init+0x40>)
 8000a8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a94:	4b08      	ldr	r3, [pc, #32]	; (8000ab8 <HAL_Init+0x40>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a07      	ldr	r2, [pc, #28]	; (8000ab8 <HAL_Init+0x40>)
 8000a9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aa0:	2003      	movs	r0, #3
 8000aa2:	f000 f8d8 	bl	8000c56 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aa6:	2000      	movs	r0, #0
 8000aa8:	f7ff ff30 	bl	800090c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000aac:	f7ff ff06 	bl	80008bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ab0:	2300      	movs	r3, #0
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40023c00 	.word	0x40023c00

08000abc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ac0:	4b06      	ldr	r3, [pc, #24]	; (8000adc <HAL_IncTick+0x20>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	461a      	mov	r2, r3
 8000ac6:	4b06      	ldr	r3, [pc, #24]	; (8000ae0 <HAL_IncTick+0x24>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	4413      	add	r3, r2
 8000acc:	4a04      	ldr	r2, [pc, #16]	; (8000ae0 <HAL_IncTick+0x24>)
 8000ace:	6013      	str	r3, [r2, #0]
}
 8000ad0:	bf00      	nop
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	20000008 	.word	0x20000008
 8000ae0:	20000080 	.word	0x20000080

08000ae4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ae8:	4b03      	ldr	r3, [pc, #12]	; (8000af8 <HAL_GetTick+0x14>)
 8000aea:	681b      	ldr	r3, [r3, #0]
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	20000080 	.word	0x20000080

08000afc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b085      	sub	sp, #20
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	f003 0307 	and.w	r3, r3, #7
 8000b0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b0c:	4b0c      	ldr	r3, [pc, #48]	; (8000b40 <__NVIC_SetPriorityGrouping+0x44>)
 8000b0e:	68db      	ldr	r3, [r3, #12]
 8000b10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b12:	68ba      	ldr	r2, [r7, #8]
 8000b14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b18:	4013      	ands	r3, r2
 8000b1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b20:	68bb      	ldr	r3, [r7, #8]
 8000b22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b2e:	4a04      	ldr	r2, [pc, #16]	; (8000b40 <__NVIC_SetPriorityGrouping+0x44>)
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	60d3      	str	r3, [r2, #12]
}
 8000b34:	bf00      	nop
 8000b36:	3714      	adds	r7, #20
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr
 8000b40:	e000ed00 	.word	0xe000ed00

08000b44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b48:	4b04      	ldr	r3, [pc, #16]	; (8000b5c <__NVIC_GetPriorityGrouping+0x18>)
 8000b4a:	68db      	ldr	r3, [r3, #12]
 8000b4c:	0a1b      	lsrs	r3, r3, #8
 8000b4e:	f003 0307 	and.w	r3, r3, #7
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr
 8000b5c:	e000ed00 	.word	0xe000ed00

08000b60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	4603      	mov	r3, r0
 8000b68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	db0b      	blt.n	8000b8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b72:	79fb      	ldrb	r3, [r7, #7]
 8000b74:	f003 021f 	and.w	r2, r3, #31
 8000b78:	4907      	ldr	r1, [pc, #28]	; (8000b98 <__NVIC_EnableIRQ+0x38>)
 8000b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7e:	095b      	lsrs	r3, r3, #5
 8000b80:	2001      	movs	r0, #1
 8000b82:	fa00 f202 	lsl.w	r2, r0, r2
 8000b86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b8a:	bf00      	nop
 8000b8c:	370c      	adds	r7, #12
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	e000e100 	.word	0xe000e100

08000b9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	6039      	str	r1, [r7, #0]
 8000ba6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	db0a      	blt.n	8000bc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	b2da      	uxtb	r2, r3
 8000bb4:	490c      	ldr	r1, [pc, #48]	; (8000be8 <__NVIC_SetPriority+0x4c>)
 8000bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bba:	0112      	lsls	r2, r2, #4
 8000bbc:	b2d2      	uxtb	r2, r2
 8000bbe:	440b      	add	r3, r1
 8000bc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bc4:	e00a      	b.n	8000bdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	b2da      	uxtb	r2, r3
 8000bca:	4908      	ldr	r1, [pc, #32]	; (8000bec <__NVIC_SetPriority+0x50>)
 8000bcc:	79fb      	ldrb	r3, [r7, #7]
 8000bce:	f003 030f 	and.w	r3, r3, #15
 8000bd2:	3b04      	subs	r3, #4
 8000bd4:	0112      	lsls	r2, r2, #4
 8000bd6:	b2d2      	uxtb	r2, r2
 8000bd8:	440b      	add	r3, r1
 8000bda:	761a      	strb	r2, [r3, #24]
}
 8000bdc:	bf00      	nop
 8000bde:	370c      	adds	r7, #12
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr
 8000be8:	e000e100 	.word	0xe000e100
 8000bec:	e000ed00 	.word	0xe000ed00

08000bf0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b089      	sub	sp, #36	; 0x24
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	60f8      	str	r0, [r7, #12]
 8000bf8:	60b9      	str	r1, [r7, #8]
 8000bfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	f003 0307 	and.w	r3, r3, #7
 8000c02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c04:	69fb      	ldr	r3, [r7, #28]
 8000c06:	f1c3 0307 	rsb	r3, r3, #7
 8000c0a:	2b04      	cmp	r3, #4
 8000c0c:	bf28      	it	cs
 8000c0e:	2304      	movcs	r3, #4
 8000c10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c12:	69fb      	ldr	r3, [r7, #28]
 8000c14:	3304      	adds	r3, #4
 8000c16:	2b06      	cmp	r3, #6
 8000c18:	d902      	bls.n	8000c20 <NVIC_EncodePriority+0x30>
 8000c1a:	69fb      	ldr	r3, [r7, #28]
 8000c1c:	3b03      	subs	r3, #3
 8000c1e:	e000      	b.n	8000c22 <NVIC_EncodePriority+0x32>
 8000c20:	2300      	movs	r3, #0
 8000c22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c24:	f04f 32ff 	mov.w	r2, #4294967295
 8000c28:	69bb      	ldr	r3, [r7, #24]
 8000c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2e:	43da      	mvns	r2, r3
 8000c30:	68bb      	ldr	r3, [r7, #8]
 8000c32:	401a      	ands	r2, r3
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c38:	f04f 31ff 	mov.w	r1, #4294967295
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c42:	43d9      	mvns	r1, r3
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c48:	4313      	orrs	r3, r2
         );
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3724      	adds	r7, #36	; 0x24
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr

08000c56 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c56:	b580      	push	{r7, lr}
 8000c58:	b082      	sub	sp, #8
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c5e:	6878      	ldr	r0, [r7, #4]
 8000c60:	f7ff ff4c 	bl	8000afc <__NVIC_SetPriorityGrouping>
}
 8000c64:	bf00      	nop
 8000c66:	3708      	adds	r7, #8
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}

08000c6c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b086      	sub	sp, #24
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	4603      	mov	r3, r0
 8000c74:	60b9      	str	r1, [r7, #8]
 8000c76:	607a      	str	r2, [r7, #4]
 8000c78:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c7e:	f7ff ff61 	bl	8000b44 <__NVIC_GetPriorityGrouping>
 8000c82:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c84:	687a      	ldr	r2, [r7, #4]
 8000c86:	68b9      	ldr	r1, [r7, #8]
 8000c88:	6978      	ldr	r0, [r7, #20]
 8000c8a:	f7ff ffb1 	bl	8000bf0 <NVIC_EncodePriority>
 8000c8e:	4602      	mov	r2, r0
 8000c90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c94:	4611      	mov	r1, r2
 8000c96:	4618      	mov	r0, r3
 8000c98:	f7ff ff80 	bl	8000b9c <__NVIC_SetPriority>
}
 8000c9c:	bf00      	nop
 8000c9e:	3718      	adds	r7, #24
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}

08000ca4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	4603      	mov	r3, r0
 8000cac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f7ff ff54 	bl	8000b60 <__NVIC_EnableIRQ>
}
 8000cb8:	bf00      	nop
 8000cba:	3708      	adds	r7, #8
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}

08000cc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b089      	sub	sp, #36	; 0x24
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
 8000cc8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	61fb      	str	r3, [r7, #28]
 8000cda:	e16b      	b.n	8000fb4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000cdc:	2201      	movs	r2, #1
 8000cde:	69fb      	ldr	r3, [r7, #28]
 8000ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	697a      	ldr	r2, [r7, #20]
 8000cec:	4013      	ands	r3, r2
 8000cee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000cf0:	693a      	ldr	r2, [r7, #16]
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	f040 815a 	bne.w	8000fae <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	f003 0303 	and.w	r3, r3, #3
 8000d02:	2b01      	cmp	r3, #1
 8000d04:	d005      	beq.n	8000d12 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d0e:	2b02      	cmp	r3, #2
 8000d10:	d130      	bne.n	8000d74 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	689b      	ldr	r3, [r3, #8]
 8000d16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d18:	69fb      	ldr	r3, [r7, #28]
 8000d1a:	005b      	lsls	r3, r3, #1
 8000d1c:	2203      	movs	r2, #3
 8000d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d22:	43db      	mvns	r3, r3
 8000d24:	69ba      	ldr	r2, [r7, #24]
 8000d26:	4013      	ands	r3, r2
 8000d28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	68da      	ldr	r2, [r3, #12]
 8000d2e:	69fb      	ldr	r3, [r7, #28]
 8000d30:	005b      	lsls	r3, r3, #1
 8000d32:	fa02 f303 	lsl.w	r3, r2, r3
 8000d36:	69ba      	ldr	r2, [r7, #24]
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	69ba      	ldr	r2, [r7, #24]
 8000d40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d48:	2201      	movs	r2, #1
 8000d4a:	69fb      	ldr	r3, [r7, #28]
 8000d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d50:	43db      	mvns	r3, r3
 8000d52:	69ba      	ldr	r2, [r7, #24]
 8000d54:	4013      	ands	r3, r2
 8000d56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	091b      	lsrs	r3, r3, #4
 8000d5e:	f003 0201 	and.w	r2, r3, #1
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	fa02 f303 	lsl.w	r3, r2, r3
 8000d68:	69ba      	ldr	r2, [r7, #24]
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	69ba      	ldr	r2, [r7, #24]
 8000d72:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	f003 0303 	and.w	r3, r3, #3
 8000d7c:	2b03      	cmp	r3, #3
 8000d7e:	d017      	beq.n	8000db0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	68db      	ldr	r3, [r3, #12]
 8000d84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	005b      	lsls	r3, r3, #1
 8000d8a:	2203      	movs	r2, #3
 8000d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d90:	43db      	mvns	r3, r3
 8000d92:	69ba      	ldr	r2, [r7, #24]
 8000d94:	4013      	ands	r3, r2
 8000d96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	689a      	ldr	r2, [r3, #8]
 8000d9c:	69fb      	ldr	r3, [r7, #28]
 8000d9e:	005b      	lsls	r3, r3, #1
 8000da0:	fa02 f303 	lsl.w	r3, r2, r3
 8000da4:	69ba      	ldr	r2, [r7, #24]
 8000da6:	4313      	orrs	r3, r2
 8000da8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	69ba      	ldr	r2, [r7, #24]
 8000dae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	f003 0303 	and.w	r3, r3, #3
 8000db8:	2b02      	cmp	r3, #2
 8000dba:	d123      	bne.n	8000e04 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000dbc:	69fb      	ldr	r3, [r7, #28]
 8000dbe:	08da      	lsrs	r2, r3, #3
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	3208      	adds	r2, #8
 8000dc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	f003 0307 	and.w	r3, r3, #7
 8000dd0:	009b      	lsls	r3, r3, #2
 8000dd2:	220f      	movs	r2, #15
 8000dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd8:	43db      	mvns	r3, r3
 8000dda:	69ba      	ldr	r2, [r7, #24]
 8000ddc:	4013      	ands	r3, r2
 8000dde:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	691a      	ldr	r2, [r3, #16]
 8000de4:	69fb      	ldr	r3, [r7, #28]
 8000de6:	f003 0307 	and.w	r3, r3, #7
 8000dea:	009b      	lsls	r3, r3, #2
 8000dec:	fa02 f303 	lsl.w	r3, r2, r3
 8000df0:	69ba      	ldr	r2, [r7, #24]
 8000df2:	4313      	orrs	r3, r2
 8000df4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	08da      	lsrs	r2, r3, #3
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	3208      	adds	r2, #8
 8000dfe:	69b9      	ldr	r1, [r7, #24]
 8000e00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	005b      	lsls	r3, r3, #1
 8000e0e:	2203      	movs	r2, #3
 8000e10:	fa02 f303 	lsl.w	r3, r2, r3
 8000e14:	43db      	mvns	r3, r3
 8000e16:	69ba      	ldr	r2, [r7, #24]
 8000e18:	4013      	ands	r3, r2
 8000e1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	f003 0203 	and.w	r2, r3, #3
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	005b      	lsls	r3, r3, #1
 8000e28:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2c:	69ba      	ldr	r2, [r7, #24]
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	69ba      	ldr	r2, [r7, #24]
 8000e36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	f000 80b4 	beq.w	8000fae <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e46:	2300      	movs	r3, #0
 8000e48:	60fb      	str	r3, [r7, #12]
 8000e4a:	4b60      	ldr	r3, [pc, #384]	; (8000fcc <HAL_GPIO_Init+0x30c>)
 8000e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e4e:	4a5f      	ldr	r2, [pc, #380]	; (8000fcc <HAL_GPIO_Init+0x30c>)
 8000e50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e54:	6453      	str	r3, [r2, #68]	; 0x44
 8000e56:	4b5d      	ldr	r3, [pc, #372]	; (8000fcc <HAL_GPIO_Init+0x30c>)
 8000e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e5e:	60fb      	str	r3, [r7, #12]
 8000e60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e62:	4a5b      	ldr	r2, [pc, #364]	; (8000fd0 <HAL_GPIO_Init+0x310>)
 8000e64:	69fb      	ldr	r3, [r7, #28]
 8000e66:	089b      	lsrs	r3, r3, #2
 8000e68:	3302      	adds	r3, #2
 8000e6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e70:	69fb      	ldr	r3, [r7, #28]
 8000e72:	f003 0303 	and.w	r3, r3, #3
 8000e76:	009b      	lsls	r3, r3, #2
 8000e78:	220f      	movs	r2, #15
 8000e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7e:	43db      	mvns	r3, r3
 8000e80:	69ba      	ldr	r2, [r7, #24]
 8000e82:	4013      	ands	r3, r2
 8000e84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4a52      	ldr	r2, [pc, #328]	; (8000fd4 <HAL_GPIO_Init+0x314>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d02b      	beq.n	8000ee6 <HAL_GPIO_Init+0x226>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4a51      	ldr	r2, [pc, #324]	; (8000fd8 <HAL_GPIO_Init+0x318>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d025      	beq.n	8000ee2 <HAL_GPIO_Init+0x222>
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4a50      	ldr	r2, [pc, #320]	; (8000fdc <HAL_GPIO_Init+0x31c>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d01f      	beq.n	8000ede <HAL_GPIO_Init+0x21e>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4a4f      	ldr	r2, [pc, #316]	; (8000fe0 <HAL_GPIO_Init+0x320>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d019      	beq.n	8000eda <HAL_GPIO_Init+0x21a>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4a4e      	ldr	r2, [pc, #312]	; (8000fe4 <HAL_GPIO_Init+0x324>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d013      	beq.n	8000ed6 <HAL_GPIO_Init+0x216>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4a4d      	ldr	r2, [pc, #308]	; (8000fe8 <HAL_GPIO_Init+0x328>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d00d      	beq.n	8000ed2 <HAL_GPIO_Init+0x212>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4a4c      	ldr	r2, [pc, #304]	; (8000fec <HAL_GPIO_Init+0x32c>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d007      	beq.n	8000ece <HAL_GPIO_Init+0x20e>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4a4b      	ldr	r2, [pc, #300]	; (8000ff0 <HAL_GPIO_Init+0x330>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d101      	bne.n	8000eca <HAL_GPIO_Init+0x20a>
 8000ec6:	2307      	movs	r3, #7
 8000ec8:	e00e      	b.n	8000ee8 <HAL_GPIO_Init+0x228>
 8000eca:	2308      	movs	r3, #8
 8000ecc:	e00c      	b.n	8000ee8 <HAL_GPIO_Init+0x228>
 8000ece:	2306      	movs	r3, #6
 8000ed0:	e00a      	b.n	8000ee8 <HAL_GPIO_Init+0x228>
 8000ed2:	2305      	movs	r3, #5
 8000ed4:	e008      	b.n	8000ee8 <HAL_GPIO_Init+0x228>
 8000ed6:	2304      	movs	r3, #4
 8000ed8:	e006      	b.n	8000ee8 <HAL_GPIO_Init+0x228>
 8000eda:	2303      	movs	r3, #3
 8000edc:	e004      	b.n	8000ee8 <HAL_GPIO_Init+0x228>
 8000ede:	2302      	movs	r3, #2
 8000ee0:	e002      	b.n	8000ee8 <HAL_GPIO_Init+0x228>
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	e000      	b.n	8000ee8 <HAL_GPIO_Init+0x228>
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	69fa      	ldr	r2, [r7, #28]
 8000eea:	f002 0203 	and.w	r2, r2, #3
 8000eee:	0092      	lsls	r2, r2, #2
 8000ef0:	4093      	lsls	r3, r2
 8000ef2:	69ba      	ldr	r2, [r7, #24]
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ef8:	4935      	ldr	r1, [pc, #212]	; (8000fd0 <HAL_GPIO_Init+0x310>)
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	089b      	lsrs	r3, r3, #2
 8000efe:	3302      	adds	r3, #2
 8000f00:	69ba      	ldr	r2, [r7, #24]
 8000f02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f06:	4b3b      	ldr	r3, [pc, #236]	; (8000ff4 <HAL_GPIO_Init+0x334>)
 8000f08:	689b      	ldr	r3, [r3, #8]
 8000f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f0c:	693b      	ldr	r3, [r7, #16]
 8000f0e:	43db      	mvns	r3, r3
 8000f10:	69ba      	ldr	r2, [r7, #24]
 8000f12:	4013      	ands	r3, r2
 8000f14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d003      	beq.n	8000f2a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000f22:	69ba      	ldr	r2, [r7, #24]
 8000f24:	693b      	ldr	r3, [r7, #16]
 8000f26:	4313      	orrs	r3, r2
 8000f28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f2a:	4a32      	ldr	r2, [pc, #200]	; (8000ff4 <HAL_GPIO_Init+0x334>)
 8000f2c:	69bb      	ldr	r3, [r7, #24]
 8000f2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f30:	4b30      	ldr	r3, [pc, #192]	; (8000ff4 <HAL_GPIO_Init+0x334>)
 8000f32:	68db      	ldr	r3, [r3, #12]
 8000f34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f36:	693b      	ldr	r3, [r7, #16]
 8000f38:	43db      	mvns	r3, r3
 8000f3a:	69ba      	ldr	r2, [r7, #24]
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d003      	beq.n	8000f54 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	693b      	ldr	r3, [r7, #16]
 8000f50:	4313      	orrs	r3, r2
 8000f52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f54:	4a27      	ldr	r2, [pc, #156]	; (8000ff4 <HAL_GPIO_Init+0x334>)
 8000f56:	69bb      	ldr	r3, [r7, #24]
 8000f58:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f5a:	4b26      	ldr	r3, [pc, #152]	; (8000ff4 <HAL_GPIO_Init+0x334>)
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f60:	693b      	ldr	r3, [r7, #16]
 8000f62:	43db      	mvns	r3, r3
 8000f64:	69ba      	ldr	r2, [r7, #24]
 8000f66:	4013      	ands	r3, r2
 8000f68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d003      	beq.n	8000f7e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000f76:	69ba      	ldr	r2, [r7, #24]
 8000f78:	693b      	ldr	r3, [r7, #16]
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f7e:	4a1d      	ldr	r2, [pc, #116]	; (8000ff4 <HAL_GPIO_Init+0x334>)
 8000f80:	69bb      	ldr	r3, [r7, #24]
 8000f82:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f84:	4b1b      	ldr	r3, [pc, #108]	; (8000ff4 <HAL_GPIO_Init+0x334>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f8a:	693b      	ldr	r3, [r7, #16]
 8000f8c:	43db      	mvns	r3, r3
 8000f8e:	69ba      	ldr	r2, [r7, #24]
 8000f90:	4013      	ands	r3, r2
 8000f92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d003      	beq.n	8000fa8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	693b      	ldr	r3, [r7, #16]
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000fa8:	4a12      	ldr	r2, [pc, #72]	; (8000ff4 <HAL_GPIO_Init+0x334>)
 8000faa:	69bb      	ldr	r3, [r7, #24]
 8000fac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	61fb      	str	r3, [r7, #28]
 8000fb4:	69fb      	ldr	r3, [r7, #28]
 8000fb6:	2b0f      	cmp	r3, #15
 8000fb8:	f67f ae90 	bls.w	8000cdc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000fbc:	bf00      	nop
 8000fbe:	bf00      	nop
 8000fc0:	3724      	adds	r7, #36	; 0x24
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	40023800 	.word	0x40023800
 8000fd0:	40013800 	.word	0x40013800
 8000fd4:	40020000 	.word	0x40020000
 8000fd8:	40020400 	.word	0x40020400
 8000fdc:	40020800 	.word	0x40020800
 8000fe0:	40020c00 	.word	0x40020c00
 8000fe4:	40021000 	.word	0x40021000
 8000fe8:	40021400 	.word	0x40021400
 8000fec:	40021800 	.word	0x40021800
 8000ff0:	40021c00 	.word	0x40021c00
 8000ff4:	40013c00 	.word	0x40013c00

08000ff8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	460b      	mov	r3, r1
 8001002:	807b      	strh	r3, [r7, #2]
 8001004:	4613      	mov	r3, r2
 8001006:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001008:	787b      	ldrb	r3, [r7, #1]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d003      	beq.n	8001016 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800100e:	887a      	ldrh	r2, [r7, #2]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001014:	e003      	b.n	800101e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001016:	887b      	ldrh	r3, [r7, #2]
 8001018:	041a      	lsls	r2, r3, #16
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	619a      	str	r2, [r3, #24]
}
 800101e:	bf00      	nop
 8001020:	370c      	adds	r7, #12
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr

0800102a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800102a:	b480      	push	{r7}
 800102c:	b085      	sub	sp, #20
 800102e:	af00      	add	r7, sp, #0
 8001030:	6078      	str	r0, [r7, #4]
 8001032:	460b      	mov	r3, r1
 8001034:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	695b      	ldr	r3, [r3, #20]
 800103a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800103c:	887a      	ldrh	r2, [r7, #2]
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	4013      	ands	r3, r2
 8001042:	041a      	lsls	r2, r3, #16
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	43d9      	mvns	r1, r3
 8001048:	887b      	ldrh	r3, [r7, #2]
 800104a:	400b      	ands	r3, r1
 800104c:	431a      	orrs	r2, r3
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	619a      	str	r2, [r3, #24]
}
 8001052:	bf00      	nop
 8001054:	3714      	adds	r7, #20
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
	...

08001060 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b086      	sub	sp, #24
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d101      	bne.n	8001072 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800106e:	2301      	movs	r3, #1
 8001070:	e267      	b.n	8001542 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f003 0301 	and.w	r3, r3, #1
 800107a:	2b00      	cmp	r3, #0
 800107c:	d075      	beq.n	800116a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800107e:	4b88      	ldr	r3, [pc, #544]	; (80012a0 <HAL_RCC_OscConfig+0x240>)
 8001080:	689b      	ldr	r3, [r3, #8]
 8001082:	f003 030c 	and.w	r3, r3, #12
 8001086:	2b04      	cmp	r3, #4
 8001088:	d00c      	beq.n	80010a4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800108a:	4b85      	ldr	r3, [pc, #532]	; (80012a0 <HAL_RCC_OscConfig+0x240>)
 800108c:	689b      	ldr	r3, [r3, #8]
 800108e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001092:	2b08      	cmp	r3, #8
 8001094:	d112      	bne.n	80010bc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001096:	4b82      	ldr	r3, [pc, #520]	; (80012a0 <HAL_RCC_OscConfig+0x240>)
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800109e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80010a2:	d10b      	bne.n	80010bc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010a4:	4b7e      	ldr	r3, [pc, #504]	; (80012a0 <HAL_RCC_OscConfig+0x240>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d05b      	beq.n	8001168 <HAL_RCC_OscConfig+0x108>
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d157      	bne.n	8001168 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80010b8:	2301      	movs	r3, #1
 80010ba:	e242      	b.n	8001542 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010c4:	d106      	bne.n	80010d4 <HAL_RCC_OscConfig+0x74>
 80010c6:	4b76      	ldr	r3, [pc, #472]	; (80012a0 <HAL_RCC_OscConfig+0x240>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4a75      	ldr	r2, [pc, #468]	; (80012a0 <HAL_RCC_OscConfig+0x240>)
 80010cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010d0:	6013      	str	r3, [r2, #0]
 80010d2:	e01d      	b.n	8001110 <HAL_RCC_OscConfig+0xb0>
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010dc:	d10c      	bne.n	80010f8 <HAL_RCC_OscConfig+0x98>
 80010de:	4b70      	ldr	r3, [pc, #448]	; (80012a0 <HAL_RCC_OscConfig+0x240>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a6f      	ldr	r2, [pc, #444]	; (80012a0 <HAL_RCC_OscConfig+0x240>)
 80010e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010e8:	6013      	str	r3, [r2, #0]
 80010ea:	4b6d      	ldr	r3, [pc, #436]	; (80012a0 <HAL_RCC_OscConfig+0x240>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4a6c      	ldr	r2, [pc, #432]	; (80012a0 <HAL_RCC_OscConfig+0x240>)
 80010f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010f4:	6013      	str	r3, [r2, #0]
 80010f6:	e00b      	b.n	8001110 <HAL_RCC_OscConfig+0xb0>
 80010f8:	4b69      	ldr	r3, [pc, #420]	; (80012a0 <HAL_RCC_OscConfig+0x240>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a68      	ldr	r2, [pc, #416]	; (80012a0 <HAL_RCC_OscConfig+0x240>)
 80010fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001102:	6013      	str	r3, [r2, #0]
 8001104:	4b66      	ldr	r3, [pc, #408]	; (80012a0 <HAL_RCC_OscConfig+0x240>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a65      	ldr	r2, [pc, #404]	; (80012a0 <HAL_RCC_OscConfig+0x240>)
 800110a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800110e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d013      	beq.n	8001140 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001118:	f7ff fce4 	bl	8000ae4 <HAL_GetTick>
 800111c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800111e:	e008      	b.n	8001132 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001120:	f7ff fce0 	bl	8000ae4 <HAL_GetTick>
 8001124:	4602      	mov	r2, r0
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	2b64      	cmp	r3, #100	; 0x64
 800112c:	d901      	bls.n	8001132 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800112e:	2303      	movs	r3, #3
 8001130:	e207      	b.n	8001542 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001132:	4b5b      	ldr	r3, [pc, #364]	; (80012a0 <HAL_RCC_OscConfig+0x240>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800113a:	2b00      	cmp	r3, #0
 800113c:	d0f0      	beq.n	8001120 <HAL_RCC_OscConfig+0xc0>
 800113e:	e014      	b.n	800116a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001140:	f7ff fcd0 	bl	8000ae4 <HAL_GetTick>
 8001144:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001146:	e008      	b.n	800115a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001148:	f7ff fccc 	bl	8000ae4 <HAL_GetTick>
 800114c:	4602      	mov	r2, r0
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	1ad3      	subs	r3, r2, r3
 8001152:	2b64      	cmp	r3, #100	; 0x64
 8001154:	d901      	bls.n	800115a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001156:	2303      	movs	r3, #3
 8001158:	e1f3      	b.n	8001542 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800115a:	4b51      	ldr	r3, [pc, #324]	; (80012a0 <HAL_RCC_OscConfig+0x240>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001162:	2b00      	cmp	r3, #0
 8001164:	d1f0      	bne.n	8001148 <HAL_RCC_OscConfig+0xe8>
 8001166:	e000      	b.n	800116a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001168:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f003 0302 	and.w	r3, r3, #2
 8001172:	2b00      	cmp	r3, #0
 8001174:	d063      	beq.n	800123e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001176:	4b4a      	ldr	r3, [pc, #296]	; (80012a0 <HAL_RCC_OscConfig+0x240>)
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	f003 030c 	and.w	r3, r3, #12
 800117e:	2b00      	cmp	r3, #0
 8001180:	d00b      	beq.n	800119a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001182:	4b47      	ldr	r3, [pc, #284]	; (80012a0 <HAL_RCC_OscConfig+0x240>)
 8001184:	689b      	ldr	r3, [r3, #8]
 8001186:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800118a:	2b08      	cmp	r3, #8
 800118c:	d11c      	bne.n	80011c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800118e:	4b44      	ldr	r3, [pc, #272]	; (80012a0 <HAL_RCC_OscConfig+0x240>)
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001196:	2b00      	cmp	r3, #0
 8001198:	d116      	bne.n	80011c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800119a:	4b41      	ldr	r3, [pc, #260]	; (80012a0 <HAL_RCC_OscConfig+0x240>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f003 0302 	and.w	r3, r3, #2
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d005      	beq.n	80011b2 <HAL_RCC_OscConfig+0x152>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	68db      	ldr	r3, [r3, #12]
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	d001      	beq.n	80011b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
 80011b0:	e1c7      	b.n	8001542 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011b2:	4b3b      	ldr	r3, [pc, #236]	; (80012a0 <HAL_RCC_OscConfig+0x240>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	691b      	ldr	r3, [r3, #16]
 80011be:	00db      	lsls	r3, r3, #3
 80011c0:	4937      	ldr	r1, [pc, #220]	; (80012a0 <HAL_RCC_OscConfig+0x240>)
 80011c2:	4313      	orrs	r3, r2
 80011c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011c6:	e03a      	b.n	800123e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d020      	beq.n	8001212 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011d0:	4b34      	ldr	r3, [pc, #208]	; (80012a4 <HAL_RCC_OscConfig+0x244>)
 80011d2:	2201      	movs	r2, #1
 80011d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011d6:	f7ff fc85 	bl	8000ae4 <HAL_GetTick>
 80011da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011dc:	e008      	b.n	80011f0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011de:	f7ff fc81 	bl	8000ae4 <HAL_GetTick>
 80011e2:	4602      	mov	r2, r0
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	1ad3      	subs	r3, r2, r3
 80011e8:	2b02      	cmp	r3, #2
 80011ea:	d901      	bls.n	80011f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80011ec:	2303      	movs	r3, #3
 80011ee:	e1a8      	b.n	8001542 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011f0:	4b2b      	ldr	r3, [pc, #172]	; (80012a0 <HAL_RCC_OscConfig+0x240>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f003 0302 	and.w	r3, r3, #2
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d0f0      	beq.n	80011de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011fc:	4b28      	ldr	r3, [pc, #160]	; (80012a0 <HAL_RCC_OscConfig+0x240>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	691b      	ldr	r3, [r3, #16]
 8001208:	00db      	lsls	r3, r3, #3
 800120a:	4925      	ldr	r1, [pc, #148]	; (80012a0 <HAL_RCC_OscConfig+0x240>)
 800120c:	4313      	orrs	r3, r2
 800120e:	600b      	str	r3, [r1, #0]
 8001210:	e015      	b.n	800123e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001212:	4b24      	ldr	r3, [pc, #144]	; (80012a4 <HAL_RCC_OscConfig+0x244>)
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001218:	f7ff fc64 	bl	8000ae4 <HAL_GetTick>
 800121c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800121e:	e008      	b.n	8001232 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001220:	f7ff fc60 	bl	8000ae4 <HAL_GetTick>
 8001224:	4602      	mov	r2, r0
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	1ad3      	subs	r3, r2, r3
 800122a:	2b02      	cmp	r3, #2
 800122c:	d901      	bls.n	8001232 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800122e:	2303      	movs	r3, #3
 8001230:	e187      	b.n	8001542 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001232:	4b1b      	ldr	r3, [pc, #108]	; (80012a0 <HAL_RCC_OscConfig+0x240>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f003 0302 	and.w	r3, r3, #2
 800123a:	2b00      	cmp	r3, #0
 800123c:	d1f0      	bne.n	8001220 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f003 0308 	and.w	r3, r3, #8
 8001246:	2b00      	cmp	r3, #0
 8001248:	d036      	beq.n	80012b8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	695b      	ldr	r3, [r3, #20]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d016      	beq.n	8001280 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001252:	4b15      	ldr	r3, [pc, #84]	; (80012a8 <HAL_RCC_OscConfig+0x248>)
 8001254:	2201      	movs	r2, #1
 8001256:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001258:	f7ff fc44 	bl	8000ae4 <HAL_GetTick>
 800125c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800125e:	e008      	b.n	8001272 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001260:	f7ff fc40 	bl	8000ae4 <HAL_GetTick>
 8001264:	4602      	mov	r2, r0
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	2b02      	cmp	r3, #2
 800126c:	d901      	bls.n	8001272 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800126e:	2303      	movs	r3, #3
 8001270:	e167      	b.n	8001542 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001272:	4b0b      	ldr	r3, [pc, #44]	; (80012a0 <HAL_RCC_OscConfig+0x240>)
 8001274:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001276:	f003 0302 	and.w	r3, r3, #2
 800127a:	2b00      	cmp	r3, #0
 800127c:	d0f0      	beq.n	8001260 <HAL_RCC_OscConfig+0x200>
 800127e:	e01b      	b.n	80012b8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001280:	4b09      	ldr	r3, [pc, #36]	; (80012a8 <HAL_RCC_OscConfig+0x248>)
 8001282:	2200      	movs	r2, #0
 8001284:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001286:	f7ff fc2d 	bl	8000ae4 <HAL_GetTick>
 800128a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800128c:	e00e      	b.n	80012ac <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800128e:	f7ff fc29 	bl	8000ae4 <HAL_GetTick>
 8001292:	4602      	mov	r2, r0
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	1ad3      	subs	r3, r2, r3
 8001298:	2b02      	cmp	r3, #2
 800129a:	d907      	bls.n	80012ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800129c:	2303      	movs	r3, #3
 800129e:	e150      	b.n	8001542 <HAL_RCC_OscConfig+0x4e2>
 80012a0:	40023800 	.word	0x40023800
 80012a4:	42470000 	.word	0x42470000
 80012a8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012ac:	4b88      	ldr	r3, [pc, #544]	; (80014d0 <HAL_RCC_OscConfig+0x470>)
 80012ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012b0:	f003 0302 	and.w	r3, r3, #2
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d1ea      	bne.n	800128e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f003 0304 	and.w	r3, r3, #4
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	f000 8097 	beq.w	80013f4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012c6:	2300      	movs	r3, #0
 80012c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012ca:	4b81      	ldr	r3, [pc, #516]	; (80014d0 <HAL_RCC_OscConfig+0x470>)
 80012cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d10f      	bne.n	80012f6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012d6:	2300      	movs	r3, #0
 80012d8:	60bb      	str	r3, [r7, #8]
 80012da:	4b7d      	ldr	r3, [pc, #500]	; (80014d0 <HAL_RCC_OscConfig+0x470>)
 80012dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012de:	4a7c      	ldr	r2, [pc, #496]	; (80014d0 <HAL_RCC_OscConfig+0x470>)
 80012e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012e4:	6413      	str	r3, [r2, #64]	; 0x40
 80012e6:	4b7a      	ldr	r3, [pc, #488]	; (80014d0 <HAL_RCC_OscConfig+0x470>)
 80012e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ee:	60bb      	str	r3, [r7, #8]
 80012f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012f2:	2301      	movs	r3, #1
 80012f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012f6:	4b77      	ldr	r3, [pc, #476]	; (80014d4 <HAL_RCC_OscConfig+0x474>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d118      	bne.n	8001334 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001302:	4b74      	ldr	r3, [pc, #464]	; (80014d4 <HAL_RCC_OscConfig+0x474>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a73      	ldr	r2, [pc, #460]	; (80014d4 <HAL_RCC_OscConfig+0x474>)
 8001308:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800130c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800130e:	f7ff fbe9 	bl	8000ae4 <HAL_GetTick>
 8001312:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001314:	e008      	b.n	8001328 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001316:	f7ff fbe5 	bl	8000ae4 <HAL_GetTick>
 800131a:	4602      	mov	r2, r0
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	1ad3      	subs	r3, r2, r3
 8001320:	2b02      	cmp	r3, #2
 8001322:	d901      	bls.n	8001328 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001324:	2303      	movs	r3, #3
 8001326:	e10c      	b.n	8001542 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001328:	4b6a      	ldr	r3, [pc, #424]	; (80014d4 <HAL_RCC_OscConfig+0x474>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001330:	2b00      	cmp	r3, #0
 8001332:	d0f0      	beq.n	8001316 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	2b01      	cmp	r3, #1
 800133a:	d106      	bne.n	800134a <HAL_RCC_OscConfig+0x2ea>
 800133c:	4b64      	ldr	r3, [pc, #400]	; (80014d0 <HAL_RCC_OscConfig+0x470>)
 800133e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001340:	4a63      	ldr	r2, [pc, #396]	; (80014d0 <HAL_RCC_OscConfig+0x470>)
 8001342:	f043 0301 	orr.w	r3, r3, #1
 8001346:	6713      	str	r3, [r2, #112]	; 0x70
 8001348:	e01c      	b.n	8001384 <HAL_RCC_OscConfig+0x324>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	2b05      	cmp	r3, #5
 8001350:	d10c      	bne.n	800136c <HAL_RCC_OscConfig+0x30c>
 8001352:	4b5f      	ldr	r3, [pc, #380]	; (80014d0 <HAL_RCC_OscConfig+0x470>)
 8001354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001356:	4a5e      	ldr	r2, [pc, #376]	; (80014d0 <HAL_RCC_OscConfig+0x470>)
 8001358:	f043 0304 	orr.w	r3, r3, #4
 800135c:	6713      	str	r3, [r2, #112]	; 0x70
 800135e:	4b5c      	ldr	r3, [pc, #368]	; (80014d0 <HAL_RCC_OscConfig+0x470>)
 8001360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001362:	4a5b      	ldr	r2, [pc, #364]	; (80014d0 <HAL_RCC_OscConfig+0x470>)
 8001364:	f043 0301 	orr.w	r3, r3, #1
 8001368:	6713      	str	r3, [r2, #112]	; 0x70
 800136a:	e00b      	b.n	8001384 <HAL_RCC_OscConfig+0x324>
 800136c:	4b58      	ldr	r3, [pc, #352]	; (80014d0 <HAL_RCC_OscConfig+0x470>)
 800136e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001370:	4a57      	ldr	r2, [pc, #348]	; (80014d0 <HAL_RCC_OscConfig+0x470>)
 8001372:	f023 0301 	bic.w	r3, r3, #1
 8001376:	6713      	str	r3, [r2, #112]	; 0x70
 8001378:	4b55      	ldr	r3, [pc, #340]	; (80014d0 <HAL_RCC_OscConfig+0x470>)
 800137a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800137c:	4a54      	ldr	r2, [pc, #336]	; (80014d0 <HAL_RCC_OscConfig+0x470>)
 800137e:	f023 0304 	bic.w	r3, r3, #4
 8001382:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	689b      	ldr	r3, [r3, #8]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d015      	beq.n	80013b8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800138c:	f7ff fbaa 	bl	8000ae4 <HAL_GetTick>
 8001390:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001392:	e00a      	b.n	80013aa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001394:	f7ff fba6 	bl	8000ae4 <HAL_GetTick>
 8001398:	4602      	mov	r2, r0
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	f241 3288 	movw	r2, #5000	; 0x1388
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d901      	bls.n	80013aa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80013a6:	2303      	movs	r3, #3
 80013a8:	e0cb      	b.n	8001542 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013aa:	4b49      	ldr	r3, [pc, #292]	; (80014d0 <HAL_RCC_OscConfig+0x470>)
 80013ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013ae:	f003 0302 	and.w	r3, r3, #2
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d0ee      	beq.n	8001394 <HAL_RCC_OscConfig+0x334>
 80013b6:	e014      	b.n	80013e2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013b8:	f7ff fb94 	bl	8000ae4 <HAL_GetTick>
 80013bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013be:	e00a      	b.n	80013d6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013c0:	f7ff fb90 	bl	8000ae4 <HAL_GetTick>
 80013c4:	4602      	mov	r2, r0
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d901      	bls.n	80013d6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80013d2:	2303      	movs	r3, #3
 80013d4:	e0b5      	b.n	8001542 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013d6:	4b3e      	ldr	r3, [pc, #248]	; (80014d0 <HAL_RCC_OscConfig+0x470>)
 80013d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013da:	f003 0302 	and.w	r3, r3, #2
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d1ee      	bne.n	80013c0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80013e2:	7dfb      	ldrb	r3, [r7, #23]
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d105      	bne.n	80013f4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013e8:	4b39      	ldr	r3, [pc, #228]	; (80014d0 <HAL_RCC_OscConfig+0x470>)
 80013ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ec:	4a38      	ldr	r2, [pc, #224]	; (80014d0 <HAL_RCC_OscConfig+0x470>)
 80013ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013f2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	699b      	ldr	r3, [r3, #24]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	f000 80a1 	beq.w	8001540 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80013fe:	4b34      	ldr	r3, [pc, #208]	; (80014d0 <HAL_RCC_OscConfig+0x470>)
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	f003 030c 	and.w	r3, r3, #12
 8001406:	2b08      	cmp	r3, #8
 8001408:	d05c      	beq.n	80014c4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	699b      	ldr	r3, [r3, #24]
 800140e:	2b02      	cmp	r3, #2
 8001410:	d141      	bne.n	8001496 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001412:	4b31      	ldr	r3, [pc, #196]	; (80014d8 <HAL_RCC_OscConfig+0x478>)
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001418:	f7ff fb64 	bl	8000ae4 <HAL_GetTick>
 800141c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800141e:	e008      	b.n	8001432 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001420:	f7ff fb60 	bl	8000ae4 <HAL_GetTick>
 8001424:	4602      	mov	r2, r0
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	2b02      	cmp	r3, #2
 800142c:	d901      	bls.n	8001432 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800142e:	2303      	movs	r3, #3
 8001430:	e087      	b.n	8001542 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001432:	4b27      	ldr	r3, [pc, #156]	; (80014d0 <HAL_RCC_OscConfig+0x470>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d1f0      	bne.n	8001420 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	69da      	ldr	r2, [r3, #28]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6a1b      	ldr	r3, [r3, #32]
 8001446:	431a      	orrs	r2, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800144c:	019b      	lsls	r3, r3, #6
 800144e:	431a      	orrs	r2, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001454:	085b      	lsrs	r3, r3, #1
 8001456:	3b01      	subs	r3, #1
 8001458:	041b      	lsls	r3, r3, #16
 800145a:	431a      	orrs	r2, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001460:	061b      	lsls	r3, r3, #24
 8001462:	491b      	ldr	r1, [pc, #108]	; (80014d0 <HAL_RCC_OscConfig+0x470>)
 8001464:	4313      	orrs	r3, r2
 8001466:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001468:	4b1b      	ldr	r3, [pc, #108]	; (80014d8 <HAL_RCC_OscConfig+0x478>)
 800146a:	2201      	movs	r2, #1
 800146c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800146e:	f7ff fb39 	bl	8000ae4 <HAL_GetTick>
 8001472:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001474:	e008      	b.n	8001488 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001476:	f7ff fb35 	bl	8000ae4 <HAL_GetTick>
 800147a:	4602      	mov	r2, r0
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	1ad3      	subs	r3, r2, r3
 8001480:	2b02      	cmp	r3, #2
 8001482:	d901      	bls.n	8001488 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001484:	2303      	movs	r3, #3
 8001486:	e05c      	b.n	8001542 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001488:	4b11      	ldr	r3, [pc, #68]	; (80014d0 <HAL_RCC_OscConfig+0x470>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001490:	2b00      	cmp	r3, #0
 8001492:	d0f0      	beq.n	8001476 <HAL_RCC_OscConfig+0x416>
 8001494:	e054      	b.n	8001540 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001496:	4b10      	ldr	r3, [pc, #64]	; (80014d8 <HAL_RCC_OscConfig+0x478>)
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800149c:	f7ff fb22 	bl	8000ae4 <HAL_GetTick>
 80014a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014a2:	e008      	b.n	80014b6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014a4:	f7ff fb1e 	bl	8000ae4 <HAL_GetTick>
 80014a8:	4602      	mov	r2, r0
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	2b02      	cmp	r3, #2
 80014b0:	d901      	bls.n	80014b6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80014b2:	2303      	movs	r3, #3
 80014b4:	e045      	b.n	8001542 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014b6:	4b06      	ldr	r3, [pc, #24]	; (80014d0 <HAL_RCC_OscConfig+0x470>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d1f0      	bne.n	80014a4 <HAL_RCC_OscConfig+0x444>
 80014c2:	e03d      	b.n	8001540 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	699b      	ldr	r3, [r3, #24]
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d107      	bne.n	80014dc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80014cc:	2301      	movs	r3, #1
 80014ce:	e038      	b.n	8001542 <HAL_RCC_OscConfig+0x4e2>
 80014d0:	40023800 	.word	0x40023800
 80014d4:	40007000 	.word	0x40007000
 80014d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80014dc:	4b1b      	ldr	r3, [pc, #108]	; (800154c <HAL_RCC_OscConfig+0x4ec>)
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	699b      	ldr	r3, [r3, #24]
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d028      	beq.n	800153c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d121      	bne.n	800153c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001502:	429a      	cmp	r2, r3
 8001504:	d11a      	bne.n	800153c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001506:	68fa      	ldr	r2, [r7, #12]
 8001508:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800150c:	4013      	ands	r3, r2
 800150e:	687a      	ldr	r2, [r7, #4]
 8001510:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001512:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001514:	4293      	cmp	r3, r2
 8001516:	d111      	bne.n	800153c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001522:	085b      	lsrs	r3, r3, #1
 8001524:	3b01      	subs	r3, #1
 8001526:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001528:	429a      	cmp	r2, r3
 800152a:	d107      	bne.n	800153c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001536:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001538:	429a      	cmp	r2, r3
 800153a:	d001      	beq.n	8001540 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800153c:	2301      	movs	r3, #1
 800153e:	e000      	b.n	8001542 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001540:	2300      	movs	r3, #0
}
 8001542:	4618      	mov	r0, r3
 8001544:	3718      	adds	r7, #24
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	40023800 	.word	0x40023800

08001550 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d101      	bne.n	8001564 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001560:	2301      	movs	r3, #1
 8001562:	e0cc      	b.n	80016fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001564:	4b68      	ldr	r3, [pc, #416]	; (8001708 <HAL_RCC_ClockConfig+0x1b8>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f003 0307 	and.w	r3, r3, #7
 800156c:	683a      	ldr	r2, [r7, #0]
 800156e:	429a      	cmp	r2, r3
 8001570:	d90c      	bls.n	800158c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001572:	4b65      	ldr	r3, [pc, #404]	; (8001708 <HAL_RCC_ClockConfig+0x1b8>)
 8001574:	683a      	ldr	r2, [r7, #0]
 8001576:	b2d2      	uxtb	r2, r2
 8001578:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800157a:	4b63      	ldr	r3, [pc, #396]	; (8001708 <HAL_RCC_ClockConfig+0x1b8>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 0307 	and.w	r3, r3, #7
 8001582:	683a      	ldr	r2, [r7, #0]
 8001584:	429a      	cmp	r2, r3
 8001586:	d001      	beq.n	800158c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001588:	2301      	movs	r3, #1
 800158a:	e0b8      	b.n	80016fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 0302 	and.w	r3, r3, #2
 8001594:	2b00      	cmp	r3, #0
 8001596:	d020      	beq.n	80015da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 0304 	and.w	r3, r3, #4
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d005      	beq.n	80015b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015a4:	4b59      	ldr	r3, [pc, #356]	; (800170c <HAL_RCC_ClockConfig+0x1bc>)
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	4a58      	ldr	r2, [pc, #352]	; (800170c <HAL_RCC_ClockConfig+0x1bc>)
 80015aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80015ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 0308 	and.w	r3, r3, #8
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d005      	beq.n	80015c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015bc:	4b53      	ldr	r3, [pc, #332]	; (800170c <HAL_RCC_ClockConfig+0x1bc>)
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	4a52      	ldr	r2, [pc, #328]	; (800170c <HAL_RCC_ClockConfig+0x1bc>)
 80015c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80015c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015c8:	4b50      	ldr	r3, [pc, #320]	; (800170c <HAL_RCC_ClockConfig+0x1bc>)
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	494d      	ldr	r1, [pc, #308]	; (800170c <HAL_RCC_ClockConfig+0x1bc>)
 80015d6:	4313      	orrs	r3, r2
 80015d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 0301 	and.w	r3, r3, #1
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d044      	beq.n	8001670 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d107      	bne.n	80015fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ee:	4b47      	ldr	r3, [pc, #284]	; (800170c <HAL_RCC_ClockConfig+0x1bc>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d119      	bne.n	800162e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e07f      	b.n	80016fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	2b02      	cmp	r3, #2
 8001604:	d003      	beq.n	800160e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800160a:	2b03      	cmp	r3, #3
 800160c:	d107      	bne.n	800161e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800160e:	4b3f      	ldr	r3, [pc, #252]	; (800170c <HAL_RCC_ClockConfig+0x1bc>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d109      	bne.n	800162e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e06f      	b.n	80016fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800161e:	4b3b      	ldr	r3, [pc, #236]	; (800170c <HAL_RCC_ClockConfig+0x1bc>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 0302 	and.w	r3, r3, #2
 8001626:	2b00      	cmp	r3, #0
 8001628:	d101      	bne.n	800162e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e067      	b.n	80016fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800162e:	4b37      	ldr	r3, [pc, #220]	; (800170c <HAL_RCC_ClockConfig+0x1bc>)
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	f023 0203 	bic.w	r2, r3, #3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	4934      	ldr	r1, [pc, #208]	; (800170c <HAL_RCC_ClockConfig+0x1bc>)
 800163c:	4313      	orrs	r3, r2
 800163e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001640:	f7ff fa50 	bl	8000ae4 <HAL_GetTick>
 8001644:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001646:	e00a      	b.n	800165e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001648:	f7ff fa4c 	bl	8000ae4 <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	f241 3288 	movw	r2, #5000	; 0x1388
 8001656:	4293      	cmp	r3, r2
 8001658:	d901      	bls.n	800165e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800165a:	2303      	movs	r3, #3
 800165c:	e04f      	b.n	80016fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800165e:	4b2b      	ldr	r3, [pc, #172]	; (800170c <HAL_RCC_ClockConfig+0x1bc>)
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	f003 020c 	and.w	r2, r3, #12
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	429a      	cmp	r2, r3
 800166e:	d1eb      	bne.n	8001648 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001670:	4b25      	ldr	r3, [pc, #148]	; (8001708 <HAL_RCC_ClockConfig+0x1b8>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f003 0307 	and.w	r3, r3, #7
 8001678:	683a      	ldr	r2, [r7, #0]
 800167a:	429a      	cmp	r2, r3
 800167c:	d20c      	bcs.n	8001698 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800167e:	4b22      	ldr	r3, [pc, #136]	; (8001708 <HAL_RCC_ClockConfig+0x1b8>)
 8001680:	683a      	ldr	r2, [r7, #0]
 8001682:	b2d2      	uxtb	r2, r2
 8001684:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001686:	4b20      	ldr	r3, [pc, #128]	; (8001708 <HAL_RCC_ClockConfig+0x1b8>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 0307 	and.w	r3, r3, #7
 800168e:	683a      	ldr	r2, [r7, #0]
 8001690:	429a      	cmp	r2, r3
 8001692:	d001      	beq.n	8001698 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001694:	2301      	movs	r3, #1
 8001696:	e032      	b.n	80016fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 0304 	and.w	r3, r3, #4
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d008      	beq.n	80016b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016a4:	4b19      	ldr	r3, [pc, #100]	; (800170c <HAL_RCC_ClockConfig+0x1bc>)
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	4916      	ldr	r1, [pc, #88]	; (800170c <HAL_RCC_ClockConfig+0x1bc>)
 80016b2:	4313      	orrs	r3, r2
 80016b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 0308 	and.w	r3, r3, #8
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d009      	beq.n	80016d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016c2:	4b12      	ldr	r3, [pc, #72]	; (800170c <HAL_RCC_ClockConfig+0x1bc>)
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	691b      	ldr	r3, [r3, #16]
 80016ce:	00db      	lsls	r3, r3, #3
 80016d0:	490e      	ldr	r1, [pc, #56]	; (800170c <HAL_RCC_ClockConfig+0x1bc>)
 80016d2:	4313      	orrs	r3, r2
 80016d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80016d6:	f000 f821 	bl	800171c <HAL_RCC_GetSysClockFreq>
 80016da:	4602      	mov	r2, r0
 80016dc:	4b0b      	ldr	r3, [pc, #44]	; (800170c <HAL_RCC_ClockConfig+0x1bc>)
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	091b      	lsrs	r3, r3, #4
 80016e2:	f003 030f 	and.w	r3, r3, #15
 80016e6:	490a      	ldr	r1, [pc, #40]	; (8001710 <HAL_RCC_ClockConfig+0x1c0>)
 80016e8:	5ccb      	ldrb	r3, [r1, r3]
 80016ea:	fa22 f303 	lsr.w	r3, r2, r3
 80016ee:	4a09      	ldr	r2, [pc, #36]	; (8001714 <HAL_RCC_ClockConfig+0x1c4>)
 80016f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80016f2:	4b09      	ldr	r3, [pc, #36]	; (8001718 <HAL_RCC_ClockConfig+0x1c8>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7ff f908 	bl	800090c <HAL_InitTick>

  return HAL_OK;
 80016fc:	2300      	movs	r3, #0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3710      	adds	r7, #16
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	40023c00 	.word	0x40023c00
 800170c:	40023800 	.word	0x40023800
 8001710:	08005d48 	.word	0x08005d48
 8001714:	20000000 	.word	0x20000000
 8001718:	20000004 	.word	0x20000004

0800171c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800171c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001720:	b094      	sub	sp, #80	; 0x50
 8001722:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001724:	2300      	movs	r3, #0
 8001726:	647b      	str	r3, [r7, #68]	; 0x44
 8001728:	2300      	movs	r3, #0
 800172a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800172c:	2300      	movs	r3, #0
 800172e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001730:	2300      	movs	r3, #0
 8001732:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001734:	4b79      	ldr	r3, [pc, #484]	; (800191c <HAL_RCC_GetSysClockFreq+0x200>)
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	f003 030c 	and.w	r3, r3, #12
 800173c:	2b08      	cmp	r3, #8
 800173e:	d00d      	beq.n	800175c <HAL_RCC_GetSysClockFreq+0x40>
 8001740:	2b08      	cmp	r3, #8
 8001742:	f200 80e1 	bhi.w	8001908 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001746:	2b00      	cmp	r3, #0
 8001748:	d002      	beq.n	8001750 <HAL_RCC_GetSysClockFreq+0x34>
 800174a:	2b04      	cmp	r3, #4
 800174c:	d003      	beq.n	8001756 <HAL_RCC_GetSysClockFreq+0x3a>
 800174e:	e0db      	b.n	8001908 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001750:	4b73      	ldr	r3, [pc, #460]	; (8001920 <HAL_RCC_GetSysClockFreq+0x204>)
 8001752:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001754:	e0db      	b.n	800190e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001756:	4b73      	ldr	r3, [pc, #460]	; (8001924 <HAL_RCC_GetSysClockFreq+0x208>)
 8001758:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800175a:	e0d8      	b.n	800190e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800175c:	4b6f      	ldr	r3, [pc, #444]	; (800191c <HAL_RCC_GetSysClockFreq+0x200>)
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001764:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001766:	4b6d      	ldr	r3, [pc, #436]	; (800191c <HAL_RCC_GetSysClockFreq+0x200>)
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800176e:	2b00      	cmp	r3, #0
 8001770:	d063      	beq.n	800183a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001772:	4b6a      	ldr	r3, [pc, #424]	; (800191c <HAL_RCC_GetSysClockFreq+0x200>)
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	099b      	lsrs	r3, r3, #6
 8001778:	2200      	movs	r2, #0
 800177a:	63bb      	str	r3, [r7, #56]	; 0x38
 800177c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800177e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001780:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001784:	633b      	str	r3, [r7, #48]	; 0x30
 8001786:	2300      	movs	r3, #0
 8001788:	637b      	str	r3, [r7, #52]	; 0x34
 800178a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800178e:	4622      	mov	r2, r4
 8001790:	462b      	mov	r3, r5
 8001792:	f04f 0000 	mov.w	r0, #0
 8001796:	f04f 0100 	mov.w	r1, #0
 800179a:	0159      	lsls	r1, r3, #5
 800179c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017a0:	0150      	lsls	r0, r2, #5
 80017a2:	4602      	mov	r2, r0
 80017a4:	460b      	mov	r3, r1
 80017a6:	4621      	mov	r1, r4
 80017a8:	1a51      	subs	r1, r2, r1
 80017aa:	6139      	str	r1, [r7, #16]
 80017ac:	4629      	mov	r1, r5
 80017ae:	eb63 0301 	sbc.w	r3, r3, r1
 80017b2:	617b      	str	r3, [r7, #20]
 80017b4:	f04f 0200 	mov.w	r2, #0
 80017b8:	f04f 0300 	mov.w	r3, #0
 80017bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80017c0:	4659      	mov	r1, fp
 80017c2:	018b      	lsls	r3, r1, #6
 80017c4:	4651      	mov	r1, sl
 80017c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017ca:	4651      	mov	r1, sl
 80017cc:	018a      	lsls	r2, r1, #6
 80017ce:	4651      	mov	r1, sl
 80017d0:	ebb2 0801 	subs.w	r8, r2, r1
 80017d4:	4659      	mov	r1, fp
 80017d6:	eb63 0901 	sbc.w	r9, r3, r1
 80017da:	f04f 0200 	mov.w	r2, #0
 80017de:	f04f 0300 	mov.w	r3, #0
 80017e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80017e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80017ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80017ee:	4690      	mov	r8, r2
 80017f0:	4699      	mov	r9, r3
 80017f2:	4623      	mov	r3, r4
 80017f4:	eb18 0303 	adds.w	r3, r8, r3
 80017f8:	60bb      	str	r3, [r7, #8]
 80017fa:	462b      	mov	r3, r5
 80017fc:	eb49 0303 	adc.w	r3, r9, r3
 8001800:	60fb      	str	r3, [r7, #12]
 8001802:	f04f 0200 	mov.w	r2, #0
 8001806:	f04f 0300 	mov.w	r3, #0
 800180a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800180e:	4629      	mov	r1, r5
 8001810:	024b      	lsls	r3, r1, #9
 8001812:	4621      	mov	r1, r4
 8001814:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001818:	4621      	mov	r1, r4
 800181a:	024a      	lsls	r2, r1, #9
 800181c:	4610      	mov	r0, r2
 800181e:	4619      	mov	r1, r3
 8001820:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001822:	2200      	movs	r2, #0
 8001824:	62bb      	str	r3, [r7, #40]	; 0x28
 8001826:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001828:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800182c:	f7fe fd1a 	bl	8000264 <__aeabi_uldivmod>
 8001830:	4602      	mov	r2, r0
 8001832:	460b      	mov	r3, r1
 8001834:	4613      	mov	r3, r2
 8001836:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001838:	e058      	b.n	80018ec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800183a:	4b38      	ldr	r3, [pc, #224]	; (800191c <HAL_RCC_GetSysClockFreq+0x200>)
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	099b      	lsrs	r3, r3, #6
 8001840:	2200      	movs	r2, #0
 8001842:	4618      	mov	r0, r3
 8001844:	4611      	mov	r1, r2
 8001846:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800184a:	623b      	str	r3, [r7, #32]
 800184c:	2300      	movs	r3, #0
 800184e:	627b      	str	r3, [r7, #36]	; 0x24
 8001850:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001854:	4642      	mov	r2, r8
 8001856:	464b      	mov	r3, r9
 8001858:	f04f 0000 	mov.w	r0, #0
 800185c:	f04f 0100 	mov.w	r1, #0
 8001860:	0159      	lsls	r1, r3, #5
 8001862:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001866:	0150      	lsls	r0, r2, #5
 8001868:	4602      	mov	r2, r0
 800186a:	460b      	mov	r3, r1
 800186c:	4641      	mov	r1, r8
 800186e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001872:	4649      	mov	r1, r9
 8001874:	eb63 0b01 	sbc.w	fp, r3, r1
 8001878:	f04f 0200 	mov.w	r2, #0
 800187c:	f04f 0300 	mov.w	r3, #0
 8001880:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001884:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001888:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800188c:	ebb2 040a 	subs.w	r4, r2, sl
 8001890:	eb63 050b 	sbc.w	r5, r3, fp
 8001894:	f04f 0200 	mov.w	r2, #0
 8001898:	f04f 0300 	mov.w	r3, #0
 800189c:	00eb      	lsls	r3, r5, #3
 800189e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018a2:	00e2      	lsls	r2, r4, #3
 80018a4:	4614      	mov	r4, r2
 80018a6:	461d      	mov	r5, r3
 80018a8:	4643      	mov	r3, r8
 80018aa:	18e3      	adds	r3, r4, r3
 80018ac:	603b      	str	r3, [r7, #0]
 80018ae:	464b      	mov	r3, r9
 80018b0:	eb45 0303 	adc.w	r3, r5, r3
 80018b4:	607b      	str	r3, [r7, #4]
 80018b6:	f04f 0200 	mov.w	r2, #0
 80018ba:	f04f 0300 	mov.w	r3, #0
 80018be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80018c2:	4629      	mov	r1, r5
 80018c4:	028b      	lsls	r3, r1, #10
 80018c6:	4621      	mov	r1, r4
 80018c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80018cc:	4621      	mov	r1, r4
 80018ce:	028a      	lsls	r2, r1, #10
 80018d0:	4610      	mov	r0, r2
 80018d2:	4619      	mov	r1, r3
 80018d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018d6:	2200      	movs	r2, #0
 80018d8:	61bb      	str	r3, [r7, #24]
 80018da:	61fa      	str	r2, [r7, #28]
 80018dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80018e0:	f7fe fcc0 	bl	8000264 <__aeabi_uldivmod>
 80018e4:	4602      	mov	r2, r0
 80018e6:	460b      	mov	r3, r1
 80018e8:	4613      	mov	r3, r2
 80018ea:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80018ec:	4b0b      	ldr	r3, [pc, #44]	; (800191c <HAL_RCC_GetSysClockFreq+0x200>)
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	0c1b      	lsrs	r3, r3, #16
 80018f2:	f003 0303 	and.w	r3, r3, #3
 80018f6:	3301      	adds	r3, #1
 80018f8:	005b      	lsls	r3, r3, #1
 80018fa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80018fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80018fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001900:	fbb2 f3f3 	udiv	r3, r2, r3
 8001904:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001906:	e002      	b.n	800190e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001908:	4b05      	ldr	r3, [pc, #20]	; (8001920 <HAL_RCC_GetSysClockFreq+0x204>)
 800190a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800190c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800190e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001910:	4618      	mov	r0, r3
 8001912:	3750      	adds	r7, #80	; 0x50
 8001914:	46bd      	mov	sp, r7
 8001916:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800191a:	bf00      	nop
 800191c:	40023800 	.word	0x40023800
 8001920:	00f42400 	.word	0x00f42400
 8001924:	007a1200 	.word	0x007a1200

08001928 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800192c:	4b03      	ldr	r3, [pc, #12]	; (800193c <HAL_RCC_GetHCLKFreq+0x14>)
 800192e:	681b      	ldr	r3, [r3, #0]
}
 8001930:	4618      	mov	r0, r3
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	20000000 	.word	0x20000000

08001940 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001944:	f7ff fff0 	bl	8001928 <HAL_RCC_GetHCLKFreq>
 8001948:	4602      	mov	r2, r0
 800194a:	4b05      	ldr	r3, [pc, #20]	; (8001960 <HAL_RCC_GetPCLK1Freq+0x20>)
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	0a9b      	lsrs	r3, r3, #10
 8001950:	f003 0307 	and.w	r3, r3, #7
 8001954:	4903      	ldr	r1, [pc, #12]	; (8001964 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001956:	5ccb      	ldrb	r3, [r1, r3]
 8001958:	fa22 f303 	lsr.w	r3, r2, r3
}
 800195c:	4618      	mov	r0, r3
 800195e:	bd80      	pop	{r7, pc}
 8001960:	40023800 	.word	0x40023800
 8001964:	08005d58 	.word	0x08005d58

08001968 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	220f      	movs	r2, #15
 8001976:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001978:	4b12      	ldr	r3, [pc, #72]	; (80019c4 <HAL_RCC_GetClockConfig+0x5c>)
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	f003 0203 	and.w	r2, r3, #3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001984:	4b0f      	ldr	r3, [pc, #60]	; (80019c4 <HAL_RCC_GetClockConfig+0x5c>)
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001990:	4b0c      	ldr	r3, [pc, #48]	; (80019c4 <HAL_RCC_GetClockConfig+0x5c>)
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800199c:	4b09      	ldr	r3, [pc, #36]	; (80019c4 <HAL_RCC_GetClockConfig+0x5c>)
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	08db      	lsrs	r3, r3, #3
 80019a2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80019aa:	4b07      	ldr	r3, [pc, #28]	; (80019c8 <HAL_RCC_GetClockConfig+0x60>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 0207 	and.w	r2, r3, #7
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	601a      	str	r2, [r3, #0]
}
 80019b6:	bf00      	nop
 80019b8:	370c      	adds	r7, #12
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	40023800 	.word	0x40023800
 80019c8:	40023c00 	.word	0x40023c00

080019cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d101      	bne.n	80019de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e041      	b.n	8001a62 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d106      	bne.n	80019f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2200      	movs	r2, #0
 80019ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f000 f839 	bl	8001a6a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2202      	movs	r2, #2
 80019fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	3304      	adds	r3, #4
 8001a08:	4619      	mov	r1, r3
 8001a0a:	4610      	mov	r0, r2
 8001a0c:	f000 f9d8 	bl	8001dc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2201      	movs	r2, #1
 8001a14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2201      	movs	r2, #1
 8001a24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2201      	movs	r2, #1
 8001a34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2201      	movs	r2, #1
 8001a44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2201      	movs	r2, #1
 8001a54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001a60:	2300      	movs	r3, #0
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3708      	adds	r7, #8
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}

08001a6a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	b083      	sub	sp, #12
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001a72:	bf00      	nop
 8001a74:	370c      	adds	r7, #12
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
	...

08001a80 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b085      	sub	sp, #20
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d001      	beq.n	8001a98 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e04e      	b.n	8001b36 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2202      	movs	r2, #2
 8001a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	68da      	ldr	r2, [r3, #12]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f042 0201 	orr.w	r2, r2, #1
 8001aae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a23      	ldr	r2, [pc, #140]	; (8001b44 <HAL_TIM_Base_Start_IT+0xc4>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d022      	beq.n	8001b00 <HAL_TIM_Base_Start_IT+0x80>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ac2:	d01d      	beq.n	8001b00 <HAL_TIM_Base_Start_IT+0x80>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a1f      	ldr	r2, [pc, #124]	; (8001b48 <HAL_TIM_Base_Start_IT+0xc8>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d018      	beq.n	8001b00 <HAL_TIM_Base_Start_IT+0x80>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a1e      	ldr	r2, [pc, #120]	; (8001b4c <HAL_TIM_Base_Start_IT+0xcc>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d013      	beq.n	8001b00 <HAL_TIM_Base_Start_IT+0x80>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a1c      	ldr	r2, [pc, #112]	; (8001b50 <HAL_TIM_Base_Start_IT+0xd0>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d00e      	beq.n	8001b00 <HAL_TIM_Base_Start_IT+0x80>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a1b      	ldr	r2, [pc, #108]	; (8001b54 <HAL_TIM_Base_Start_IT+0xd4>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d009      	beq.n	8001b00 <HAL_TIM_Base_Start_IT+0x80>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a19      	ldr	r2, [pc, #100]	; (8001b58 <HAL_TIM_Base_Start_IT+0xd8>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d004      	beq.n	8001b00 <HAL_TIM_Base_Start_IT+0x80>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a18      	ldr	r2, [pc, #96]	; (8001b5c <HAL_TIM_Base_Start_IT+0xdc>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d111      	bne.n	8001b24 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	f003 0307 	and.w	r3, r3, #7
 8001b0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	2b06      	cmp	r3, #6
 8001b10:	d010      	beq.n	8001b34 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f042 0201 	orr.w	r2, r2, #1
 8001b20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b22:	e007      	b.n	8001b34 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f042 0201 	orr.w	r2, r2, #1
 8001b32:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b34:	2300      	movs	r3, #0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3714      	adds	r7, #20
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	40010000 	.word	0x40010000
 8001b48:	40000400 	.word	0x40000400
 8001b4c:	40000800 	.word	0x40000800
 8001b50:	40000c00 	.word	0x40000c00
 8001b54:	40010400 	.word	0x40010400
 8001b58:	40014000 	.word	0x40014000
 8001b5c:	40001800 	.word	0x40001800

08001b60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	691b      	ldr	r3, [r3, #16]
 8001b6e:	f003 0302 	and.w	r3, r3, #2
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d122      	bne.n	8001bbc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	f003 0302 	and.w	r3, r3, #2
 8001b80:	2b02      	cmp	r3, #2
 8001b82:	d11b      	bne.n	8001bbc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f06f 0202 	mvn.w	r2, #2
 8001b8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2201      	movs	r2, #1
 8001b92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	699b      	ldr	r3, [r3, #24]
 8001b9a:	f003 0303 	and.w	r3, r3, #3
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d003      	beq.n	8001baa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f000 f8ee 	bl	8001d84 <HAL_TIM_IC_CaptureCallback>
 8001ba8:	e005      	b.n	8001bb6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f000 f8e0 	bl	8001d70 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	f000 f8f1 	bl	8001d98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	691b      	ldr	r3, [r3, #16]
 8001bc2:	f003 0304 	and.w	r3, r3, #4
 8001bc6:	2b04      	cmp	r3, #4
 8001bc8:	d122      	bne.n	8001c10 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	f003 0304 	and.w	r3, r3, #4
 8001bd4:	2b04      	cmp	r3, #4
 8001bd6:	d11b      	bne.n	8001c10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f06f 0204 	mvn.w	r2, #4
 8001be0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2202      	movs	r2, #2
 8001be6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	699b      	ldr	r3, [r3, #24]
 8001bee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d003      	beq.n	8001bfe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f000 f8c4 	bl	8001d84 <HAL_TIM_IC_CaptureCallback>
 8001bfc:	e005      	b.n	8001c0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f000 f8b6 	bl	8001d70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f000 f8c7 	bl	8001d98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	691b      	ldr	r3, [r3, #16]
 8001c16:	f003 0308 	and.w	r3, r3, #8
 8001c1a:	2b08      	cmp	r3, #8
 8001c1c:	d122      	bne.n	8001c64 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	f003 0308 	and.w	r3, r3, #8
 8001c28:	2b08      	cmp	r3, #8
 8001c2a:	d11b      	bne.n	8001c64 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f06f 0208 	mvn.w	r2, #8
 8001c34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2204      	movs	r2, #4
 8001c3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	69db      	ldr	r3, [r3, #28]
 8001c42:	f003 0303 	and.w	r3, r3, #3
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d003      	beq.n	8001c52 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f000 f89a 	bl	8001d84 <HAL_TIM_IC_CaptureCallback>
 8001c50:	e005      	b.n	8001c5e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f000 f88c 	bl	8001d70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c58:	6878      	ldr	r0, [r7, #4]
 8001c5a:	f000 f89d 	bl	8001d98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2200      	movs	r2, #0
 8001c62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	691b      	ldr	r3, [r3, #16]
 8001c6a:	f003 0310 	and.w	r3, r3, #16
 8001c6e:	2b10      	cmp	r3, #16
 8001c70:	d122      	bne.n	8001cb8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	f003 0310 	and.w	r3, r3, #16
 8001c7c:	2b10      	cmp	r3, #16
 8001c7e:	d11b      	bne.n	8001cb8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f06f 0210 	mvn.w	r2, #16
 8001c88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2208      	movs	r2, #8
 8001c8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	69db      	ldr	r3, [r3, #28]
 8001c96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d003      	beq.n	8001ca6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f000 f870 	bl	8001d84 <HAL_TIM_IC_CaptureCallback>
 8001ca4:	e005      	b.n	8001cb2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f000 f862 	bl	8001d70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f000 f873 	bl	8001d98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	691b      	ldr	r3, [r3, #16]
 8001cbe:	f003 0301 	and.w	r3, r3, #1
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d10e      	bne.n	8001ce4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	f003 0301 	and.w	r3, r3, #1
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d107      	bne.n	8001ce4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f06f 0201 	mvn.w	r2, #1
 8001cdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f7fe fdd4 	bl	800088c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	691b      	ldr	r3, [r3, #16]
 8001cea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cee:	2b80      	cmp	r3, #128	; 0x80
 8001cf0:	d10e      	bne.n	8001d10 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cfc:	2b80      	cmp	r3, #128	; 0x80
 8001cfe:	d107      	bne.n	8001d10 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001d08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f000 f902 	bl	8001f14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	691b      	ldr	r3, [r3, #16]
 8001d16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d1a:	2b40      	cmp	r3, #64	; 0x40
 8001d1c:	d10e      	bne.n	8001d3c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d28:	2b40      	cmp	r3, #64	; 0x40
 8001d2a:	d107      	bne.n	8001d3c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001d34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f000 f838 	bl	8001dac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	691b      	ldr	r3, [r3, #16]
 8001d42:	f003 0320 	and.w	r3, r3, #32
 8001d46:	2b20      	cmp	r3, #32
 8001d48:	d10e      	bne.n	8001d68 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	f003 0320 	and.w	r3, r3, #32
 8001d54:	2b20      	cmp	r3, #32
 8001d56:	d107      	bne.n	8001d68 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f06f 0220 	mvn.w	r2, #32
 8001d60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f000 f8cc 	bl	8001f00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d68:	bf00      	nop
 8001d6a:	3708      	adds	r7, #8
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}

08001d70 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001d78:	bf00      	nop
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001d8c:	bf00      	nop
 8001d8e:	370c      	adds	r7, #12
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr

08001d98 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001da0:	bf00      	nop
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001db4:	bf00      	nop
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr

08001dc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b085      	sub	sp, #20
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	4a40      	ldr	r2, [pc, #256]	; (8001ed4 <TIM_Base_SetConfig+0x114>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d013      	beq.n	8001e00 <TIM_Base_SetConfig+0x40>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dde:	d00f      	beq.n	8001e00 <TIM_Base_SetConfig+0x40>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	4a3d      	ldr	r2, [pc, #244]	; (8001ed8 <TIM_Base_SetConfig+0x118>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d00b      	beq.n	8001e00 <TIM_Base_SetConfig+0x40>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	4a3c      	ldr	r2, [pc, #240]	; (8001edc <TIM_Base_SetConfig+0x11c>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d007      	beq.n	8001e00 <TIM_Base_SetConfig+0x40>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	4a3b      	ldr	r2, [pc, #236]	; (8001ee0 <TIM_Base_SetConfig+0x120>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d003      	beq.n	8001e00 <TIM_Base_SetConfig+0x40>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	4a3a      	ldr	r2, [pc, #232]	; (8001ee4 <TIM_Base_SetConfig+0x124>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d108      	bne.n	8001e12 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	68fa      	ldr	r2, [r7, #12]
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a2f      	ldr	r2, [pc, #188]	; (8001ed4 <TIM_Base_SetConfig+0x114>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d02b      	beq.n	8001e72 <TIM_Base_SetConfig+0xb2>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e20:	d027      	beq.n	8001e72 <TIM_Base_SetConfig+0xb2>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4a2c      	ldr	r2, [pc, #176]	; (8001ed8 <TIM_Base_SetConfig+0x118>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d023      	beq.n	8001e72 <TIM_Base_SetConfig+0xb2>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4a2b      	ldr	r2, [pc, #172]	; (8001edc <TIM_Base_SetConfig+0x11c>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d01f      	beq.n	8001e72 <TIM_Base_SetConfig+0xb2>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4a2a      	ldr	r2, [pc, #168]	; (8001ee0 <TIM_Base_SetConfig+0x120>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d01b      	beq.n	8001e72 <TIM_Base_SetConfig+0xb2>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a29      	ldr	r2, [pc, #164]	; (8001ee4 <TIM_Base_SetConfig+0x124>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d017      	beq.n	8001e72 <TIM_Base_SetConfig+0xb2>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a28      	ldr	r2, [pc, #160]	; (8001ee8 <TIM_Base_SetConfig+0x128>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d013      	beq.n	8001e72 <TIM_Base_SetConfig+0xb2>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a27      	ldr	r2, [pc, #156]	; (8001eec <TIM_Base_SetConfig+0x12c>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d00f      	beq.n	8001e72 <TIM_Base_SetConfig+0xb2>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a26      	ldr	r2, [pc, #152]	; (8001ef0 <TIM_Base_SetConfig+0x130>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d00b      	beq.n	8001e72 <TIM_Base_SetConfig+0xb2>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a25      	ldr	r2, [pc, #148]	; (8001ef4 <TIM_Base_SetConfig+0x134>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d007      	beq.n	8001e72 <TIM_Base_SetConfig+0xb2>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a24      	ldr	r2, [pc, #144]	; (8001ef8 <TIM_Base_SetConfig+0x138>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d003      	beq.n	8001e72 <TIM_Base_SetConfig+0xb2>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a23      	ldr	r2, [pc, #140]	; (8001efc <TIM_Base_SetConfig+0x13c>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d108      	bne.n	8001e84 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	68fa      	ldr	r2, [r7, #12]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	695b      	ldr	r3, [r3, #20]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	68fa      	ldr	r2, [r7, #12]
 8001e96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	689a      	ldr	r2, [r3, #8]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	4a0a      	ldr	r2, [pc, #40]	; (8001ed4 <TIM_Base_SetConfig+0x114>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d003      	beq.n	8001eb8 <TIM_Base_SetConfig+0xf8>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	4a0c      	ldr	r2, [pc, #48]	; (8001ee4 <TIM_Base_SetConfig+0x124>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d103      	bne.n	8001ec0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	691a      	ldr	r2, [r3, #16]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	615a      	str	r2, [r3, #20]
}
 8001ec6:	bf00      	nop
 8001ec8:	3714      	adds	r7, #20
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	40010000 	.word	0x40010000
 8001ed8:	40000400 	.word	0x40000400
 8001edc:	40000800 	.word	0x40000800
 8001ee0:	40000c00 	.word	0x40000c00
 8001ee4:	40010400 	.word	0x40010400
 8001ee8:	40014000 	.word	0x40014000
 8001eec:	40014400 	.word	0x40014400
 8001ef0:	40014800 	.word	0x40014800
 8001ef4:	40001800 	.word	0x40001800
 8001ef8:	40001c00 	.word	0x40001c00
 8001efc:	40002000 	.word	0x40002000

08001f00 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001f08:	bf00      	nop
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001f1c:	bf00      	nop
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	f103 0208 	add.w	r2, r3, #8
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f40:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	f103 0208 	add.w	r2, r3, #8
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f103 0208 	add.w	r2, r3, #8
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001f5c:	bf00      	nop
 8001f5e:	370c      	adds	r7, #12
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr

08001f68 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2200      	movs	r2, #0
 8001f74:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001f76:	bf00      	nop
 8001f78:	370c      	adds	r7, #12
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr

08001f82 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8001f82:	b480      	push	{r7}
 8001f84:	b085      	sub	sp, #20
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
 8001f8a:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	68fa      	ldr	r2, [r7, #12]
 8001f96:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	689a      	ldr	r2, [r3, #8]
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	683a      	ldr	r2, [r7, #0]
 8001fa6:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	683a      	ldr	r2, [r7, #0]
 8001fac:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	687a      	ldr	r2, [r7, #4]
 8001fb2:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	1c5a      	adds	r2, r3, #1
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	601a      	str	r2, [r3, #0]
}
 8001fbe:	bf00      	nop
 8001fc0:	3714      	adds	r7, #20
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr

08001fca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8001fca:	b480      	push	{r7}
 8001fcc:	b085      	sub	sp, #20
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
 8001fd2:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fe0:	d103      	bne.n	8001fea <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	691b      	ldr	r3, [r3, #16]
 8001fe6:	60fb      	str	r3, [r7, #12]
 8001fe8:	e00c      	b.n	8002004 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	3308      	adds	r3, #8
 8001fee:	60fb      	str	r3, [r7, #12]
 8001ff0:	e002      	b.n	8001ff8 <vListInsert+0x2e>
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	60fb      	str	r3, [r7, #12]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	68ba      	ldr	r2, [r7, #8]
 8002000:	429a      	cmp	r2, r3
 8002002:	d2f6      	bcs.n	8001ff2 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	685a      	ldr	r2, [r3, #4]
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	683a      	ldr	r2, [r7, #0]
 8002012:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	68fa      	ldr	r2, [r7, #12]
 8002018:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	683a      	ldr	r2, [r7, #0]
 800201e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	1c5a      	adds	r2, r3, #1
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	601a      	str	r2, [r3, #0]
}
 8002030:	bf00      	nop
 8002032:	3714      	adds	r7, #20
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800203c:	b480      	push	{r7}
 800203e:	b085      	sub	sp, #20
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	691b      	ldr	r3, [r3, #16]
 8002048:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	6892      	ldr	r2, [r2, #8]
 8002052:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	6852      	ldr	r2, [r2, #4]
 800205c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	429a      	cmp	r2, r3
 8002066:	d103      	bne.n	8002070 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	689a      	ldr	r2, [r3, #8]
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2200      	movs	r2, #0
 8002074:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	1e5a      	subs	r2, r3, #1
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
}
 8002084:	4618      	mov	r0, r3
 8002086:	3714      	adds	r7, #20
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr

08002090 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002090:	b580      	push	{r7, lr}
 8002092:	b08c      	sub	sp, #48	; 0x30
 8002094:	af04      	add	r7, sp, #16
 8002096:	60f8      	str	r0, [r7, #12]
 8002098:	60b9      	str	r1, [r7, #8]
 800209a:	603b      	str	r3, [r7, #0]
 800209c:	4613      	mov	r3, r2
 800209e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80020a0:	88fb      	ldrh	r3, [r7, #6]
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	4618      	mov	r0, r3
 80020a6:	f001 f831 	bl	800310c <pvPortMalloc>
 80020aa:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d00e      	beq.n	80020d0 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80020b2:	2058      	movs	r0, #88	; 0x58
 80020b4:	f001 f82a 	bl	800310c <pvPortMalloc>
 80020b8:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d003      	beq.n	80020c8 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	697a      	ldr	r2, [r7, #20]
 80020c4:	631a      	str	r2, [r3, #48]	; 0x30
 80020c6:	e005      	b.n	80020d4 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80020c8:	6978      	ldr	r0, [r7, #20]
 80020ca:	f001 f8ff 	bl	80032cc <vPortFree>
 80020ce:	e001      	b.n	80020d4 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80020d0:	2300      	movs	r3, #0
 80020d2:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d013      	beq.n	8002102 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80020da:	88fa      	ldrh	r2, [r7, #6]
 80020dc:	2300      	movs	r3, #0
 80020de:	9303      	str	r3, [sp, #12]
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	9302      	str	r3, [sp, #8]
 80020e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020e6:	9301      	str	r3, [sp, #4]
 80020e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020ea:	9300      	str	r3, [sp, #0]
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	68b9      	ldr	r1, [r7, #8]
 80020f0:	68f8      	ldr	r0, [r7, #12]
 80020f2:	f000 f80e 	bl	8002112 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80020f6:	69f8      	ldr	r0, [r7, #28]
 80020f8:	f000 f8a2 	bl	8002240 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80020fc:	2301      	movs	r3, #1
 80020fe:	61bb      	str	r3, [r7, #24]
 8002100:	e002      	b.n	8002108 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002102:	f04f 33ff 	mov.w	r3, #4294967295
 8002106:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002108:	69bb      	ldr	r3, [r7, #24]
    }
 800210a:	4618      	mov	r0, r3
 800210c:	3720      	adds	r7, #32
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}

08002112 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002112:	b580      	push	{r7, lr}
 8002114:	b088      	sub	sp, #32
 8002116:	af00      	add	r7, sp, #0
 8002118:	60f8      	str	r0, [r7, #12]
 800211a:	60b9      	str	r1, [r7, #8]
 800211c:	607a      	str	r2, [r7, #4]
 800211e:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002122:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	461a      	mov	r2, r3
 800212a:	21a5      	movs	r1, #165	; 0xa5
 800212c:	f003 fd58 	bl	8005be0 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002132:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800213a:	3b01      	subs	r3, #1
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	4413      	add	r3, r2
 8002140:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002142:	69bb      	ldr	r3, [r7, #24]
 8002144:	f023 0307 	bic.w	r3, r3, #7
 8002148:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	f003 0307 	and.w	r3, r3, #7
 8002150:	2b00      	cmp	r3, #0
 8002152:	d00a      	beq.n	800216a <prvInitialiseNewTask+0x58>
        __asm volatile
 8002154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002158:	f383 8811 	msr	BASEPRI, r3
 800215c:	f3bf 8f6f 	isb	sy
 8002160:	f3bf 8f4f 	dsb	sy
 8002164:	617b      	str	r3, [r7, #20]
    }
 8002166:	bf00      	nop
 8002168:	e7fe      	b.n	8002168 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d01f      	beq.n	80021b0 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002170:	2300      	movs	r3, #0
 8002172:	61fb      	str	r3, [r7, #28]
 8002174:	e012      	b.n	800219c <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002176:	68ba      	ldr	r2, [r7, #8]
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	4413      	add	r3, r2
 800217c:	7819      	ldrb	r1, [r3, #0]
 800217e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	4413      	add	r3, r2
 8002184:	3334      	adds	r3, #52	; 0x34
 8002186:	460a      	mov	r2, r1
 8002188:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800218a:	68ba      	ldr	r2, [r7, #8]
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	4413      	add	r3, r2
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d006      	beq.n	80021a4 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	3301      	adds	r3, #1
 800219a:	61fb      	str	r3, [r7, #28]
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	2b09      	cmp	r3, #9
 80021a0:	d9e9      	bls.n	8002176 <prvInitialiseNewTask+0x64>
 80021a2:	e000      	b.n	80021a6 <prvInitialiseNewTask+0x94>
            {
                break;
 80021a4:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80021a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021a8:	2200      	movs	r2, #0
 80021aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80021ae:	e003      	b.n	80021b8 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80021b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021b2:	2200      	movs	r2, #0
 80021b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80021b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021ba:	2b04      	cmp	r3, #4
 80021bc:	d901      	bls.n	80021c2 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80021be:	2304      	movs	r3, #4
 80021c0:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80021c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80021c6:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80021c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80021cc:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80021ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021d0:	2200      	movs	r2, #0
 80021d2:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80021d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021d6:	3304      	adds	r3, #4
 80021d8:	4618      	mov	r0, r3
 80021da:	f7ff fec5 	bl	8001f68 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80021de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021e0:	3318      	adds	r3, #24
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7ff fec0 	bl	8001f68 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80021e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80021ec:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80021ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021f0:	f1c3 0205 	rsb	r2, r3, #5
 80021f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021f6:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80021f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80021fc:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80021fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002200:	3350      	adds	r3, #80	; 0x50
 8002202:	2204      	movs	r2, #4
 8002204:	2100      	movs	r1, #0
 8002206:	4618      	mov	r0, r3
 8002208:	f003 fcea 	bl	8005be0 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 800220c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800220e:	3354      	adds	r3, #84	; 0x54
 8002210:	2201      	movs	r2, #1
 8002212:	2100      	movs	r1, #0
 8002214:	4618      	mov	r0, r3
 8002216:	f003 fce3 	bl	8005be0 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800221a:	683a      	ldr	r2, [r7, #0]
 800221c:	68f9      	ldr	r1, [r7, #12]
 800221e:	69b8      	ldr	r0, [r7, #24]
 8002220:	f000 fc98 	bl	8002b54 <pxPortInitialiseStack>
 8002224:	4602      	mov	r2, r0
 8002226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002228:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800222a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800222c:	2b00      	cmp	r3, #0
 800222e:	d002      	beq.n	8002236 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002232:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002234:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002236:	bf00      	nop
 8002238:	3720      	adds	r7, #32
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
	...

08002240 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002240:	b5b0      	push	{r4, r5, r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af02      	add	r7, sp, #8
 8002246:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002248:	f000 fe34 	bl	8002eb4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800224c:	4b3b      	ldr	r3, [pc, #236]	; (800233c <prvAddNewTaskToReadyList+0xfc>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	3301      	adds	r3, #1
 8002252:	4a3a      	ldr	r2, [pc, #232]	; (800233c <prvAddNewTaskToReadyList+0xfc>)
 8002254:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002256:	4b3a      	ldr	r3, [pc, #232]	; (8002340 <prvAddNewTaskToReadyList+0x100>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d109      	bne.n	8002272 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800225e:	4a38      	ldr	r2, [pc, #224]	; (8002340 <prvAddNewTaskToReadyList+0x100>)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002264:	4b35      	ldr	r3, [pc, #212]	; (800233c <prvAddNewTaskToReadyList+0xfc>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	2b01      	cmp	r3, #1
 800226a:	d110      	bne.n	800228e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800226c:	f000 fb60 	bl	8002930 <prvInitialiseTaskLists>
 8002270:	e00d      	b.n	800228e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002272:	4b34      	ldr	r3, [pc, #208]	; (8002344 <prvAddNewTaskToReadyList+0x104>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d109      	bne.n	800228e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800227a:	4b31      	ldr	r3, [pc, #196]	; (8002340 <prvAddNewTaskToReadyList+0x100>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002284:	429a      	cmp	r2, r3
 8002286:	d802      	bhi.n	800228e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002288:	4a2d      	ldr	r2, [pc, #180]	; (8002340 <prvAddNewTaskToReadyList+0x100>)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800228e:	4b2e      	ldr	r3, [pc, #184]	; (8002348 <prvAddNewTaskToReadyList+0x108>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	3301      	adds	r3, #1
 8002294:	4a2c      	ldr	r2, [pc, #176]	; (8002348 <prvAddNewTaskToReadyList+0x108>)
 8002296:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002298:	4b2b      	ldr	r3, [pc, #172]	; (8002348 <prvAddNewTaskToReadyList+0x108>)
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d016      	beq.n	80022d4 <prvAddNewTaskToReadyList+0x94>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4618      	mov	r0, r3
 80022aa:	f003 f9b7 	bl	800561c <SEGGER_SYSVIEW_OnTaskCreate>
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022be:	461d      	mov	r5, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	461c      	mov	r4, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ca:	1ae3      	subs	r3, r4, r3
 80022cc:	9300      	str	r3, [sp, #0]
 80022ce:	462b      	mov	r3, r5
 80022d0:	f001 f9ca 	bl	8003668 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	4618      	mov	r0, r3
 80022d8:	f003 fa24 	bl	8005724 <SEGGER_SYSVIEW_OnTaskStartReady>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e0:	2201      	movs	r2, #1
 80022e2:	409a      	lsls	r2, r3
 80022e4:	4b19      	ldr	r3, [pc, #100]	; (800234c <prvAddNewTaskToReadyList+0x10c>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4313      	orrs	r3, r2
 80022ea:	4a18      	ldr	r2, [pc, #96]	; (800234c <prvAddNewTaskToReadyList+0x10c>)
 80022ec:	6013      	str	r3, [r2, #0]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022f2:	4613      	mov	r3, r2
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	4413      	add	r3, r2
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	4a15      	ldr	r2, [pc, #84]	; (8002350 <prvAddNewTaskToReadyList+0x110>)
 80022fc:	441a      	add	r2, r3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	3304      	adds	r3, #4
 8002302:	4619      	mov	r1, r3
 8002304:	4610      	mov	r0, r2
 8002306:	f7ff fe3c 	bl	8001f82 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800230a:	f000 fe03 	bl	8002f14 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800230e:	4b0d      	ldr	r3, [pc, #52]	; (8002344 <prvAddNewTaskToReadyList+0x104>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d00e      	beq.n	8002334 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002316:	4b0a      	ldr	r3, [pc, #40]	; (8002340 <prvAddNewTaskToReadyList+0x100>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002320:	429a      	cmp	r2, r3
 8002322:	d207      	bcs.n	8002334 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002324:	4b0b      	ldr	r3, [pc, #44]	; (8002354 <prvAddNewTaskToReadyList+0x114>)
 8002326:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800232a:	601a      	str	r2, [r3, #0]
 800232c:	f3bf 8f4f 	dsb	sy
 8002330:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002334:	bf00      	nop
 8002336:	3708      	adds	r7, #8
 8002338:	46bd      	mov	sp, r7
 800233a:	bdb0      	pop	{r4, r5, r7, pc}
 800233c:	2000015c 	.word	0x2000015c
 8002340:	20000084 	.word	0x20000084
 8002344:	20000168 	.word	0x20000168
 8002348:	20000178 	.word	0x20000178
 800234c:	20000164 	.word	0x20000164
 8002350:	20000088 	.word	0x20000088
 8002354:	e000ed04 	.word	0xe000ed04

08002358 <xTaskDelayUntil>:

#if ( INCLUDE_xTaskDelayUntil == 1 )

    BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                                const TickType_t xTimeIncrement )
    {
 8002358:	b580      	push	{r7, lr}
 800235a:	b08a      	sub	sp, #40	; 0x28
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	6039      	str	r1, [r7, #0]
        TickType_t xTimeToWake;
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8002362:	2300      	movs	r3, #0
 8002364:	627b      	str	r3, [r7, #36]	; 0x24

        configASSERT( pxPreviousWakeTime );
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d10a      	bne.n	8002382 <xTaskDelayUntil+0x2a>
        __asm volatile
 800236c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002370:	f383 8811 	msr	BASEPRI, r3
 8002374:	f3bf 8f6f 	isb	sy
 8002378:	f3bf 8f4f 	dsb	sy
 800237c:	617b      	str	r3, [r7, #20]
    }
 800237e:	bf00      	nop
 8002380:	e7fe      	b.n	8002380 <xTaskDelayUntil+0x28>
        configASSERT( ( xTimeIncrement > 0U ) );
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d10a      	bne.n	800239e <xTaskDelayUntil+0x46>
        __asm volatile
 8002388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800238c:	f383 8811 	msr	BASEPRI, r3
 8002390:	f3bf 8f6f 	isb	sy
 8002394:	f3bf 8f4f 	dsb	sy
 8002398:	613b      	str	r3, [r7, #16]
    }
 800239a:	bf00      	nop
 800239c:	e7fe      	b.n	800239c <xTaskDelayUntil+0x44>
        configASSERT( uxSchedulerSuspended == 0 );
 800239e:	4b2c      	ldr	r3, [pc, #176]	; (8002450 <xTaskDelayUntil+0xf8>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d00a      	beq.n	80023bc <xTaskDelayUntil+0x64>
        __asm volatile
 80023a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023aa:	f383 8811 	msr	BASEPRI, r3
 80023ae:	f3bf 8f6f 	isb	sy
 80023b2:	f3bf 8f4f 	dsb	sy
 80023b6:	60fb      	str	r3, [r7, #12]
    }
 80023b8:	bf00      	nop
 80023ba:	e7fe      	b.n	80023ba <xTaskDelayUntil+0x62>

        vTaskSuspendAll();
 80023bc:	f000 f8aa 	bl	8002514 <vTaskSuspendAll>
        {
            /* Minor optimisation.  The tick count cannot change in this
             * block. */
            const TickType_t xConstTickCount = xTickCount;
 80023c0:	4b24      	ldr	r3, [pc, #144]	; (8002454 <xTaskDelayUntil+0xfc>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	623b      	str	r3, [r7, #32]

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	683a      	ldr	r2, [r7, #0]
 80023cc:	4413      	add	r3, r2
 80023ce:	61fb      	str	r3, [r7, #28]

            if( xConstTickCount < *pxPreviousWakeTime )
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	6a3a      	ldr	r2, [r7, #32]
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d20b      	bcs.n	80023f2 <xTaskDelayUntil+0x9a>
                /* The tick count has overflowed since this function was
                 * lasted called.  In this case the only time we should ever
                 * actually delay is if the wake time has also  overflowed,
                 * and the wake time is greater than the tick time.  When this
                 * is the case it is as if neither time had overflowed. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	69fa      	ldr	r2, [r7, #28]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d211      	bcs.n	8002408 <xTaskDelayUntil+0xb0>
 80023e4:	69fa      	ldr	r2, [r7, #28]
 80023e6:	6a3b      	ldr	r3, [r7, #32]
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d90d      	bls.n	8002408 <xTaskDelayUntil+0xb0>
                {
                    xShouldDelay = pdTRUE;
 80023ec:	2301      	movs	r3, #1
 80023ee:	627b      	str	r3, [r7, #36]	; 0x24
 80023f0:	e00a      	b.n	8002408 <xTaskDelayUntil+0xb0>
            else
            {
                /* The tick time has not overflowed.  In this case we will
                 * delay if either the wake time has overflowed, and/or the
                 * tick time is less than the wake time. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	69fa      	ldr	r2, [r7, #28]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d303      	bcc.n	8002404 <xTaskDelayUntil+0xac>
 80023fc:	69fa      	ldr	r2, [r7, #28]
 80023fe:	6a3b      	ldr	r3, [r7, #32]
 8002400:	429a      	cmp	r2, r3
 8002402:	d901      	bls.n	8002408 <xTaskDelayUntil+0xb0>
                {
                    xShouldDelay = pdTRUE;
 8002404:	2301      	movs	r3, #1
 8002406:	627b      	str	r3, [r7, #36]	; 0x24
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            /* Update the wake time ready for the next call. */
            *pxPreviousWakeTime = xTimeToWake;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	69fa      	ldr	r2, [r7, #28]
 800240c:	601a      	str	r2, [r3, #0]

            if( xShouldDelay != pdFALSE )
 800240e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002410:	2b00      	cmp	r3, #0
 8002412:	d009      	beq.n	8002428 <xTaskDelayUntil+0xd0>
            {
                traceTASK_DELAY_UNTIL( xTimeToWake );
 8002414:	2024      	movs	r0, #36	; 0x24
 8002416:	f002 fced 	bl	8004df4 <SEGGER_SYSVIEW_RecordVoid>

                /* prvAddCurrentTaskToDelayedList() needs the block time, not
                 * the time to wake, so subtract the current tick count. */
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800241a:	69fa      	ldr	r2, [r7, #28]
 800241c:	6a3b      	ldr	r3, [r7, #32]
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	2100      	movs	r1, #0
 8002422:	4618      	mov	r0, r3
 8002424:	f000 fb1e 	bl	8002a64 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 8002428:	f000 f882 	bl	8002530 <xTaskResumeAll>
 800242c:	61b8      	str	r0, [r7, #24]

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800242e:	69bb      	ldr	r3, [r7, #24]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d107      	bne.n	8002444 <xTaskDelayUntil+0xec>
        {
            portYIELD_WITHIN_API();
 8002434:	4b08      	ldr	r3, [pc, #32]	; (8002458 <xTaskDelayUntil+0x100>)
 8002436:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800243a:	601a      	str	r2, [r3, #0]
 800243c:	f3bf 8f4f 	dsb	sy
 8002440:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xShouldDelay;
 8002444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002446:	4618      	mov	r0, r3
 8002448:	3728      	adds	r7, #40	; 0x28
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	20000184 	.word	0x20000184
 8002454:	20000160 	.word	0x20000160
 8002458:	e000ed04 	.word	0xe000ed04

0800245c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b086      	sub	sp, #24
 8002460:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002462:	4b24      	ldr	r3, [pc, #144]	; (80024f4 <vTaskStartScheduler+0x98>)
 8002464:	9301      	str	r3, [sp, #4]
 8002466:	2300      	movs	r3, #0
 8002468:	9300      	str	r3, [sp, #0]
 800246a:	2300      	movs	r3, #0
 800246c:	2282      	movs	r2, #130	; 0x82
 800246e:	4922      	ldr	r1, [pc, #136]	; (80024f8 <vTaskStartScheduler+0x9c>)
 8002470:	4822      	ldr	r0, [pc, #136]	; (80024fc <vTaskStartScheduler+0xa0>)
 8002472:	f7ff fe0d 	bl	8002090 <xTaskCreate>
 8002476:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2b01      	cmp	r3, #1
 800247c:	d124      	bne.n	80024c8 <vTaskStartScheduler+0x6c>
        __asm volatile
 800247e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002482:	f383 8811 	msr	BASEPRI, r3
 8002486:	f3bf 8f6f 	isb	sy
 800248a:	f3bf 8f4f 	dsb	sy
 800248e:	60bb      	str	r3, [r7, #8]
    }
 8002490:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002492:	4b1b      	ldr	r3, [pc, #108]	; (8002500 <vTaskStartScheduler+0xa4>)
 8002494:	f04f 32ff 	mov.w	r2, #4294967295
 8002498:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800249a:	4b1a      	ldr	r3, [pc, #104]	; (8002504 <vTaskStartScheduler+0xa8>)
 800249c:	2201      	movs	r2, #1
 800249e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80024a0:	4b19      	ldr	r3, [pc, #100]	; (8002508 <vTaskStartScheduler+0xac>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80024a6:	4b19      	ldr	r3, [pc, #100]	; (800250c <vTaskStartScheduler+0xb0>)
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	4b12      	ldr	r3, [pc, #72]	; (80024f4 <vTaskStartScheduler+0x98>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d102      	bne.n	80024b8 <vTaskStartScheduler+0x5c>
 80024b2:	f003 f897 	bl	80055e4 <SEGGER_SYSVIEW_OnIdle>
 80024b6:	e004      	b.n	80024c2 <vTaskStartScheduler+0x66>
 80024b8:	4b14      	ldr	r3, [pc, #80]	; (800250c <vTaskStartScheduler+0xb0>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4618      	mov	r0, r3
 80024be:	f003 f8ef 	bl	80056a0 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80024c2:	f000 fbd7 	bl	8002c74 <xPortStartScheduler>
 80024c6:	e00e      	b.n	80024e6 <vTaskStartScheduler+0x8a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024ce:	d10a      	bne.n	80024e6 <vTaskStartScheduler+0x8a>
        __asm volatile
 80024d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024d4:	f383 8811 	msr	BASEPRI, r3
 80024d8:	f3bf 8f6f 	isb	sy
 80024dc:	f3bf 8f4f 	dsb	sy
 80024e0:	607b      	str	r3, [r7, #4]
    }
 80024e2:	bf00      	nop
 80024e4:	e7fe      	b.n	80024e4 <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80024e6:	4b0a      	ldr	r3, [pc, #40]	; (8002510 <vTaskStartScheduler+0xb4>)
 80024e8:	681b      	ldr	r3, [r3, #0]
}
 80024ea:	bf00      	nop
 80024ec:	3710      	adds	r7, #16
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	20000180 	.word	0x20000180
 80024f8:	08005c74 	.word	0x08005c74
 80024fc:	08002901 	.word	0x08002901
 8002500:	2000017c 	.word	0x2000017c
 8002504:	20000168 	.word	0x20000168
 8002508:	20000160 	.word	0x20000160
 800250c:	20000084 	.word	0x20000084
 8002510:	2000000c 	.word	0x2000000c

08002514 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002518:	4b04      	ldr	r3, [pc, #16]	; (800252c <vTaskSuspendAll+0x18>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	3301      	adds	r3, #1
 800251e:	4a03      	ldr	r2, [pc, #12]	; (800252c <vTaskSuspendAll+0x18>)
 8002520:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002522:	bf00      	nop
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr
 800252c:	20000184 	.word	0x20000184

08002530 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b084      	sub	sp, #16
 8002534:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002536:	2300      	movs	r3, #0
 8002538:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800253a:	2300      	movs	r3, #0
 800253c:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800253e:	4b43      	ldr	r3, [pc, #268]	; (800264c <xTaskResumeAll+0x11c>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d10a      	bne.n	800255c <xTaskResumeAll+0x2c>
        __asm volatile
 8002546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800254a:	f383 8811 	msr	BASEPRI, r3
 800254e:	f3bf 8f6f 	isb	sy
 8002552:	f3bf 8f4f 	dsb	sy
 8002556:	603b      	str	r3, [r7, #0]
    }
 8002558:	bf00      	nop
 800255a:	e7fe      	b.n	800255a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800255c:	f000 fcaa 	bl	8002eb4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002560:	4b3a      	ldr	r3, [pc, #232]	; (800264c <xTaskResumeAll+0x11c>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	3b01      	subs	r3, #1
 8002566:	4a39      	ldr	r2, [pc, #228]	; (800264c <xTaskResumeAll+0x11c>)
 8002568:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800256a:	4b38      	ldr	r3, [pc, #224]	; (800264c <xTaskResumeAll+0x11c>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d165      	bne.n	800263e <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002572:	4b37      	ldr	r3, [pc, #220]	; (8002650 <xTaskResumeAll+0x120>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d061      	beq.n	800263e <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800257a:	e032      	b.n	80025e2 <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800257c:	4b35      	ldr	r3, [pc, #212]	; (8002654 <xTaskResumeAll+0x124>)
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	3318      	adds	r3, #24
 8002588:	4618      	mov	r0, r3
 800258a:	f7ff fd57 	bl	800203c <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	3304      	adds	r3, #4
 8002592:	4618      	mov	r0, r3
 8002594:	f7ff fd52 	bl	800203c <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	4618      	mov	r0, r3
 800259c:	f003 f8c2 	bl	8005724 <SEGGER_SYSVIEW_OnTaskStartReady>
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a4:	2201      	movs	r2, #1
 80025a6:	409a      	lsls	r2, r3
 80025a8:	4b2b      	ldr	r3, [pc, #172]	; (8002658 <xTaskResumeAll+0x128>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	4a2a      	ldr	r2, [pc, #168]	; (8002658 <xTaskResumeAll+0x128>)
 80025b0:	6013      	str	r3, [r2, #0]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025b6:	4613      	mov	r3, r2
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	4413      	add	r3, r2
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	4a27      	ldr	r2, [pc, #156]	; (800265c <xTaskResumeAll+0x12c>)
 80025c0:	441a      	add	r2, r3
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	3304      	adds	r3, #4
 80025c6:	4619      	mov	r1, r3
 80025c8:	4610      	mov	r0, r2
 80025ca:	f7ff fcda 	bl	8001f82 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025d2:	4b23      	ldr	r3, [pc, #140]	; (8002660 <xTaskResumeAll+0x130>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d8:	429a      	cmp	r2, r3
 80025da:	d302      	bcc.n	80025e2 <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 80025dc:	4b21      	ldr	r3, [pc, #132]	; (8002664 <xTaskResumeAll+0x134>)
 80025de:	2201      	movs	r2, #1
 80025e0:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80025e2:	4b1c      	ldr	r3, [pc, #112]	; (8002654 <xTaskResumeAll+0x124>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d1c8      	bne.n	800257c <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d001      	beq.n	80025f4 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80025f0:	f000 fa1c 	bl	8002a2c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80025f4:	4b1c      	ldr	r3, [pc, #112]	; (8002668 <xTaskResumeAll+0x138>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d010      	beq.n	8002622 <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002600:	f000 f858 	bl	80026b4 <xTaskIncrementTick>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d002      	beq.n	8002610 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 800260a:	4b16      	ldr	r3, [pc, #88]	; (8002664 <xTaskResumeAll+0x134>)
 800260c:	2201      	movs	r2, #1
 800260e:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	3b01      	subs	r3, #1
 8002614:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d1f1      	bne.n	8002600 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 800261c:	4b12      	ldr	r3, [pc, #72]	; (8002668 <xTaskResumeAll+0x138>)
 800261e:	2200      	movs	r2, #0
 8002620:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002622:	4b10      	ldr	r3, [pc, #64]	; (8002664 <xTaskResumeAll+0x134>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d009      	beq.n	800263e <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800262a:	2301      	movs	r3, #1
 800262c:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800262e:	4b0f      	ldr	r3, [pc, #60]	; (800266c <xTaskResumeAll+0x13c>)
 8002630:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002634:	601a      	str	r2, [r3, #0]
 8002636:	f3bf 8f4f 	dsb	sy
 800263a:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800263e:	f000 fc69 	bl	8002f14 <vPortExitCritical>

    return xAlreadyYielded;
 8002642:	68bb      	ldr	r3, [r7, #8]
}
 8002644:	4618      	mov	r0, r3
 8002646:	3710      	adds	r7, #16
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}
 800264c:	20000184 	.word	0x20000184
 8002650:	2000015c 	.word	0x2000015c
 8002654:	2000011c 	.word	0x2000011c
 8002658:	20000164 	.word	0x20000164
 800265c:	20000088 	.word	0x20000088
 8002660:	20000084 	.word	0x20000084
 8002664:	20000170 	.word	0x20000170
 8002668:	2000016c 	.word	0x2000016c
 800266c:	e000ed04 	.word	0xe000ed04

08002670 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002676:	4b05      	ldr	r3, [pc, #20]	; (800268c <xTaskGetTickCount+0x1c>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800267c:	687b      	ldr	r3, [r7, #4]
}
 800267e:	4618      	mov	r0, r3
 8002680:	370c      	adds	r7, #12
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	20000160 	.word	0x20000160

08002690 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002696:	f000 fcf9 	bl	800308c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800269a:	2300      	movs	r3, #0
 800269c:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 800269e:	4b04      	ldr	r3, [pc, #16]	; (80026b0 <xTaskGetTickCountFromISR+0x20>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80026a4:	683b      	ldr	r3, [r7, #0]
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3708      	adds	r7, #8
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	20000160 	.word	0x20000160

080026b4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b086      	sub	sp, #24
 80026b8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80026ba:	2300      	movs	r3, #0
 80026bc:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80026be:	4b50      	ldr	r3, [pc, #320]	; (8002800 <xTaskIncrementTick+0x14c>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	f040 8092 	bne.w	80027ec <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80026c8:	4b4e      	ldr	r3, [pc, #312]	; (8002804 <xTaskIncrementTick+0x150>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	3301      	adds	r3, #1
 80026ce:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80026d0:	4a4c      	ldr	r2, [pc, #304]	; (8002804 <xTaskIncrementTick+0x150>)
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d120      	bne.n	800271e <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80026dc:	4b4a      	ldr	r3, [pc, #296]	; (8002808 <xTaskIncrementTick+0x154>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d00a      	beq.n	80026fc <xTaskIncrementTick+0x48>
        __asm volatile
 80026e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026ea:	f383 8811 	msr	BASEPRI, r3
 80026ee:	f3bf 8f6f 	isb	sy
 80026f2:	f3bf 8f4f 	dsb	sy
 80026f6:	603b      	str	r3, [r7, #0]
    }
 80026f8:	bf00      	nop
 80026fa:	e7fe      	b.n	80026fa <xTaskIncrementTick+0x46>
 80026fc:	4b42      	ldr	r3, [pc, #264]	; (8002808 <xTaskIncrementTick+0x154>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	60fb      	str	r3, [r7, #12]
 8002702:	4b42      	ldr	r3, [pc, #264]	; (800280c <xTaskIncrementTick+0x158>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a40      	ldr	r2, [pc, #256]	; (8002808 <xTaskIncrementTick+0x154>)
 8002708:	6013      	str	r3, [r2, #0]
 800270a:	4a40      	ldr	r2, [pc, #256]	; (800280c <xTaskIncrementTick+0x158>)
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	6013      	str	r3, [r2, #0]
 8002710:	4b3f      	ldr	r3, [pc, #252]	; (8002810 <xTaskIncrementTick+0x15c>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	3301      	adds	r3, #1
 8002716:	4a3e      	ldr	r2, [pc, #248]	; (8002810 <xTaskIncrementTick+0x15c>)
 8002718:	6013      	str	r3, [r2, #0]
 800271a:	f000 f987 	bl	8002a2c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800271e:	4b3d      	ldr	r3, [pc, #244]	; (8002814 <xTaskIncrementTick+0x160>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	693a      	ldr	r2, [r7, #16]
 8002724:	429a      	cmp	r2, r3
 8002726:	d34c      	bcc.n	80027c2 <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002728:	4b37      	ldr	r3, [pc, #220]	; (8002808 <xTaskIncrementTick+0x154>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d104      	bne.n	800273c <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002732:	4b38      	ldr	r3, [pc, #224]	; (8002814 <xTaskIncrementTick+0x160>)
 8002734:	f04f 32ff 	mov.w	r2, #4294967295
 8002738:	601a      	str	r2, [r3, #0]
                    break;
 800273a:	e042      	b.n	80027c2 <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800273c:	4b32      	ldr	r3, [pc, #200]	; (8002808 <xTaskIncrementTick+0x154>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 800274c:	693a      	ldr	r2, [r7, #16]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	429a      	cmp	r2, r3
 8002752:	d203      	bcs.n	800275c <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002754:	4a2f      	ldr	r2, [pc, #188]	; (8002814 <xTaskIncrementTick+0x160>)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800275a:	e032      	b.n	80027c2 <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	3304      	adds	r3, #4
 8002760:	4618      	mov	r0, r3
 8002762:	f7ff fc6b 	bl	800203c <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800276a:	2b00      	cmp	r3, #0
 800276c:	d004      	beq.n	8002778 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	3318      	adds	r3, #24
 8002772:	4618      	mov	r0, r3
 8002774:	f7ff fc62 	bl	800203c <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	4618      	mov	r0, r3
 800277c:	f002 ffd2 	bl	8005724 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002784:	2201      	movs	r2, #1
 8002786:	409a      	lsls	r2, r3
 8002788:	4b23      	ldr	r3, [pc, #140]	; (8002818 <xTaskIncrementTick+0x164>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4313      	orrs	r3, r2
 800278e:	4a22      	ldr	r2, [pc, #136]	; (8002818 <xTaskIncrementTick+0x164>)
 8002790:	6013      	str	r3, [r2, #0]
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002796:	4613      	mov	r3, r2
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	4413      	add	r3, r2
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	4a1f      	ldr	r2, [pc, #124]	; (800281c <xTaskIncrementTick+0x168>)
 80027a0:	441a      	add	r2, r3
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	3304      	adds	r3, #4
 80027a6:	4619      	mov	r1, r3
 80027a8:	4610      	mov	r0, r2
 80027aa:	f7ff fbea 	bl	8001f82 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027b2:	4b1b      	ldr	r3, [pc, #108]	; (8002820 <xTaskIncrementTick+0x16c>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d3b5      	bcc.n	8002728 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 80027bc:	2301      	movs	r3, #1
 80027be:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80027c0:	e7b2      	b.n	8002728 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80027c2:	4b17      	ldr	r3, [pc, #92]	; (8002820 <xTaskIncrementTick+0x16c>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027c8:	4914      	ldr	r1, [pc, #80]	; (800281c <xTaskIncrementTick+0x168>)
 80027ca:	4613      	mov	r3, r2
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	4413      	add	r3, r2
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	440b      	add	r3, r1
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d901      	bls.n	80027de <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 80027da:	2301      	movs	r3, #1
 80027dc:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80027de:	4b11      	ldr	r3, [pc, #68]	; (8002824 <xTaskIncrementTick+0x170>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d007      	beq.n	80027f6 <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 80027e6:	2301      	movs	r3, #1
 80027e8:	617b      	str	r3, [r7, #20]
 80027ea:	e004      	b.n	80027f6 <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80027ec:	4b0e      	ldr	r3, [pc, #56]	; (8002828 <xTaskIncrementTick+0x174>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	3301      	adds	r3, #1
 80027f2:	4a0d      	ldr	r2, [pc, #52]	; (8002828 <xTaskIncrementTick+0x174>)
 80027f4:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80027f6:	697b      	ldr	r3, [r7, #20]
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3718      	adds	r7, #24
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	20000184 	.word	0x20000184
 8002804:	20000160 	.word	0x20000160
 8002808:	20000114 	.word	0x20000114
 800280c:	20000118 	.word	0x20000118
 8002810:	20000174 	.word	0x20000174
 8002814:	2000017c 	.word	0x2000017c
 8002818:	20000164 	.word	0x20000164
 800281c:	20000088 	.word	0x20000088
 8002820:	20000084 	.word	0x20000084
 8002824:	20000170 	.word	0x20000170
 8002828:	2000016c 	.word	0x2000016c

0800282c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b086      	sub	sp, #24
 8002830:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002832:	4b2d      	ldr	r3, [pc, #180]	; (80028e8 <vTaskSwitchContext+0xbc>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d003      	beq.n	8002842 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800283a:	4b2c      	ldr	r3, [pc, #176]	; (80028ec <vTaskSwitchContext+0xc0>)
 800283c:	2201      	movs	r2, #1
 800283e:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002840:	e04d      	b.n	80028de <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8002842:	4b2a      	ldr	r3, [pc, #168]	; (80028ec <vTaskSwitchContext+0xc0>)
 8002844:	2200      	movs	r2, #0
 8002846:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002848:	4b29      	ldr	r3, [pc, #164]	; (80028f0 <vTaskSwitchContext+0xc4>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	fab3 f383 	clz	r3, r3
 8002854:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002856:	7afb      	ldrb	r3, [r7, #11]
 8002858:	f1c3 031f 	rsb	r3, r3, #31
 800285c:	617b      	str	r3, [r7, #20]
 800285e:	4925      	ldr	r1, [pc, #148]	; (80028f4 <vTaskSwitchContext+0xc8>)
 8002860:	697a      	ldr	r2, [r7, #20]
 8002862:	4613      	mov	r3, r2
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	4413      	add	r3, r2
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	440b      	add	r3, r1
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d10a      	bne.n	8002888 <vTaskSwitchContext+0x5c>
        __asm volatile
 8002872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002876:	f383 8811 	msr	BASEPRI, r3
 800287a:	f3bf 8f6f 	isb	sy
 800287e:	f3bf 8f4f 	dsb	sy
 8002882:	607b      	str	r3, [r7, #4]
    }
 8002884:	bf00      	nop
 8002886:	e7fe      	b.n	8002886 <vTaskSwitchContext+0x5a>
 8002888:	697a      	ldr	r2, [r7, #20]
 800288a:	4613      	mov	r3, r2
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	4413      	add	r3, r2
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	4a18      	ldr	r2, [pc, #96]	; (80028f4 <vTaskSwitchContext+0xc8>)
 8002894:	4413      	add	r3, r2
 8002896:	613b      	str	r3, [r7, #16]
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	685a      	ldr	r2, [r3, #4]
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	605a      	str	r2, [r3, #4]
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	685a      	ldr	r2, [r3, #4]
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	3308      	adds	r3, #8
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d104      	bne.n	80028b8 <vTaskSwitchContext+0x8c>
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	685a      	ldr	r2, [r3, #4]
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	605a      	str	r2, [r3, #4]
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	4a0e      	ldr	r2, [pc, #56]	; (80028f8 <vTaskSwitchContext+0xcc>)
 80028c0:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80028c2:	4b0d      	ldr	r3, [pc, #52]	; (80028f8 <vTaskSwitchContext+0xcc>)
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	4b0d      	ldr	r3, [pc, #52]	; (80028fc <vTaskSwitchContext+0xd0>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d102      	bne.n	80028d4 <vTaskSwitchContext+0xa8>
 80028ce:	f002 fe89 	bl	80055e4 <SEGGER_SYSVIEW_OnIdle>
}
 80028d2:	e004      	b.n	80028de <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 80028d4:	4b08      	ldr	r3, [pc, #32]	; (80028f8 <vTaskSwitchContext+0xcc>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4618      	mov	r0, r3
 80028da:	f002 fee1 	bl	80056a0 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80028de:	bf00      	nop
 80028e0:	3718      	adds	r7, #24
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	20000184 	.word	0x20000184
 80028ec:	20000170 	.word	0x20000170
 80028f0:	20000164 	.word	0x20000164
 80028f4:	20000088 	.word	0x20000088
 80028f8:	20000084 	.word	0x20000084
 80028fc:	20000180 	.word	0x20000180

08002900 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b082      	sub	sp, #8
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002908:	f000 f852 	bl	80029b0 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800290c:	4b06      	ldr	r3, [pc, #24]	; (8002928 <prvIdleTask+0x28>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2b01      	cmp	r3, #1
 8002912:	d9f9      	bls.n	8002908 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8002914:	4b05      	ldr	r3, [pc, #20]	; (800292c <prvIdleTask+0x2c>)
 8002916:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800291a:	601a      	str	r2, [r3, #0]
 800291c:	f3bf 8f4f 	dsb	sy
 8002920:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002924:	e7f0      	b.n	8002908 <prvIdleTask+0x8>
 8002926:	bf00      	nop
 8002928:	20000088 	.word	0x20000088
 800292c:	e000ed04 	.word	0xe000ed04

08002930 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002936:	2300      	movs	r3, #0
 8002938:	607b      	str	r3, [r7, #4]
 800293a:	e00c      	b.n	8002956 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	4613      	mov	r3, r2
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	4413      	add	r3, r2
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	4a12      	ldr	r2, [pc, #72]	; (8002990 <prvInitialiseTaskLists+0x60>)
 8002948:	4413      	add	r3, r2
 800294a:	4618      	mov	r0, r3
 800294c:	f7ff faec 	bl	8001f28 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	3301      	adds	r3, #1
 8002954:	607b      	str	r3, [r7, #4]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2b04      	cmp	r3, #4
 800295a:	d9ef      	bls.n	800293c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800295c:	480d      	ldr	r0, [pc, #52]	; (8002994 <prvInitialiseTaskLists+0x64>)
 800295e:	f7ff fae3 	bl	8001f28 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002962:	480d      	ldr	r0, [pc, #52]	; (8002998 <prvInitialiseTaskLists+0x68>)
 8002964:	f7ff fae0 	bl	8001f28 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002968:	480c      	ldr	r0, [pc, #48]	; (800299c <prvInitialiseTaskLists+0x6c>)
 800296a:	f7ff fadd 	bl	8001f28 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800296e:	480c      	ldr	r0, [pc, #48]	; (80029a0 <prvInitialiseTaskLists+0x70>)
 8002970:	f7ff fada 	bl	8001f28 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8002974:	480b      	ldr	r0, [pc, #44]	; (80029a4 <prvInitialiseTaskLists+0x74>)
 8002976:	f7ff fad7 	bl	8001f28 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800297a:	4b0b      	ldr	r3, [pc, #44]	; (80029a8 <prvInitialiseTaskLists+0x78>)
 800297c:	4a05      	ldr	r2, [pc, #20]	; (8002994 <prvInitialiseTaskLists+0x64>)
 800297e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002980:	4b0a      	ldr	r3, [pc, #40]	; (80029ac <prvInitialiseTaskLists+0x7c>)
 8002982:	4a05      	ldr	r2, [pc, #20]	; (8002998 <prvInitialiseTaskLists+0x68>)
 8002984:	601a      	str	r2, [r3, #0]
}
 8002986:	bf00      	nop
 8002988:	3708      	adds	r7, #8
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	20000088 	.word	0x20000088
 8002994:	200000ec 	.word	0x200000ec
 8002998:	20000100 	.word	0x20000100
 800299c:	2000011c 	.word	0x2000011c
 80029a0:	20000130 	.word	0x20000130
 80029a4:	20000148 	.word	0x20000148
 80029a8:	20000114 	.word	0x20000114
 80029ac:	20000118 	.word	0x20000118

080029b0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80029b6:	e019      	b.n	80029ec <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80029b8:	f000 fa7c 	bl	8002eb4 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80029bc:	4b10      	ldr	r3, [pc, #64]	; (8002a00 <prvCheckTasksWaitingTermination+0x50>)
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	3304      	adds	r3, #4
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7ff fb37 	bl	800203c <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80029ce:	4b0d      	ldr	r3, [pc, #52]	; (8002a04 <prvCheckTasksWaitingTermination+0x54>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	3b01      	subs	r3, #1
 80029d4:	4a0b      	ldr	r2, [pc, #44]	; (8002a04 <prvCheckTasksWaitingTermination+0x54>)
 80029d6:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80029d8:	4b0b      	ldr	r3, [pc, #44]	; (8002a08 <prvCheckTasksWaitingTermination+0x58>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	3b01      	subs	r3, #1
 80029de:	4a0a      	ldr	r2, [pc, #40]	; (8002a08 <prvCheckTasksWaitingTermination+0x58>)
 80029e0:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80029e2:	f000 fa97 	bl	8002f14 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f000 f810 	bl	8002a0c <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80029ec:	4b06      	ldr	r3, [pc, #24]	; (8002a08 <prvCheckTasksWaitingTermination+0x58>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d1e1      	bne.n	80029b8 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80029f4:	bf00      	nop
 80029f6:	bf00      	nop
 80029f8:	3708      	adds	r7, #8
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	20000130 	.word	0x20000130
 8002a04:	2000015c 	.word	0x2000015c
 8002a08:	20000144 	.word	0x20000144

08002a0c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f000 fc57 	bl	80032cc <vPortFree>
                vPortFree( pxTCB );
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f000 fc54 	bl	80032cc <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002a24:	bf00      	nop
 8002a26:	3708      	adds	r7, #8
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}

08002a2c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002a30:	4b0a      	ldr	r3, [pc, #40]	; (8002a5c <prvResetNextTaskUnblockTime+0x30>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d104      	bne.n	8002a44 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002a3a:	4b09      	ldr	r3, [pc, #36]	; (8002a60 <prvResetNextTaskUnblockTime+0x34>)
 8002a3c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a40:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002a42:	e005      	b.n	8002a50 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002a44:	4b05      	ldr	r3, [pc, #20]	; (8002a5c <prvResetNextTaskUnblockTime+0x30>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a04      	ldr	r2, [pc, #16]	; (8002a60 <prvResetNextTaskUnblockTime+0x34>)
 8002a4e:	6013      	str	r3, [r2, #0]
}
 8002a50:	bf00      	nop
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr
 8002a5a:	bf00      	nop
 8002a5c:	20000114 	.word	0x20000114
 8002a60:	2000017c 	.word	0x2000017c

08002a64 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8002a6e:	4b32      	ldr	r3, [pc, #200]	; (8002b38 <prvAddCurrentTaskToDelayedList+0xd4>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002a74:	4b31      	ldr	r3, [pc, #196]	; (8002b3c <prvAddCurrentTaskToDelayedList+0xd8>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	3304      	adds	r3, #4
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f7ff fade 	bl	800203c <uxListRemove>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d10b      	bne.n	8002a9e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002a86:	4b2d      	ldr	r3, [pc, #180]	; (8002b3c <prvAddCurrentTaskToDelayedList+0xd8>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a92:	43da      	mvns	r2, r3
 8002a94:	4b2a      	ldr	r3, [pc, #168]	; (8002b40 <prvAddCurrentTaskToDelayedList+0xdc>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4013      	ands	r3, r2
 8002a9a:	4a29      	ldr	r2, [pc, #164]	; (8002b40 <prvAddCurrentTaskToDelayedList+0xdc>)
 8002a9c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aa4:	d110      	bne.n	8002ac8 <prvAddCurrentTaskToDelayedList+0x64>
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d00d      	beq.n	8002ac8 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8002aac:	4b23      	ldr	r3, [pc, #140]	; (8002b3c <prvAddCurrentTaskToDelayedList+0xd8>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	211b      	movs	r1, #27
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f002 fe78 	bl	80057a8 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002ab8:	4b20      	ldr	r3, [pc, #128]	; (8002b3c <prvAddCurrentTaskToDelayedList+0xd8>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	3304      	adds	r3, #4
 8002abe:	4619      	mov	r1, r3
 8002ac0:	4820      	ldr	r0, [pc, #128]	; (8002b44 <prvAddCurrentTaskToDelayedList+0xe0>)
 8002ac2:	f7ff fa5e 	bl	8001f82 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8002ac6:	e032      	b.n	8002b2e <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8002ac8:	68fa      	ldr	r2, [r7, #12]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4413      	add	r3, r2
 8002ace:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002ad0:	4b1a      	ldr	r3, [pc, #104]	; (8002b3c <prvAddCurrentTaskToDelayedList+0xd8>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	68ba      	ldr	r2, [r7, #8]
 8002ad6:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8002ad8:	68ba      	ldr	r2, [r7, #8]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d20f      	bcs.n	8002b00 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8002ae0:	4b16      	ldr	r3, [pc, #88]	; (8002b3c <prvAddCurrentTaskToDelayedList+0xd8>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	2104      	movs	r1, #4
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f002 fe5e 	bl	80057a8 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002aec:	4b16      	ldr	r3, [pc, #88]	; (8002b48 <prvAddCurrentTaskToDelayedList+0xe4>)
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	4b12      	ldr	r3, [pc, #72]	; (8002b3c <prvAddCurrentTaskToDelayedList+0xd8>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	3304      	adds	r3, #4
 8002af6:	4619      	mov	r1, r3
 8002af8:	4610      	mov	r0, r2
 8002afa:	f7ff fa66 	bl	8001fca <vListInsert>
}
 8002afe:	e016      	b.n	8002b2e <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8002b00:	4b0e      	ldr	r3, [pc, #56]	; (8002b3c <prvAddCurrentTaskToDelayedList+0xd8>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	2104      	movs	r1, #4
 8002b06:	4618      	mov	r0, r3
 8002b08:	f002 fe4e 	bl	80057a8 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002b0c:	4b0f      	ldr	r3, [pc, #60]	; (8002b4c <prvAddCurrentTaskToDelayedList+0xe8>)
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	4b0a      	ldr	r3, [pc, #40]	; (8002b3c <prvAddCurrentTaskToDelayedList+0xd8>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	3304      	adds	r3, #4
 8002b16:	4619      	mov	r1, r3
 8002b18:	4610      	mov	r0, r2
 8002b1a:	f7ff fa56 	bl	8001fca <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8002b1e:	4b0c      	ldr	r3, [pc, #48]	; (8002b50 <prvAddCurrentTaskToDelayedList+0xec>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	68ba      	ldr	r2, [r7, #8]
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d202      	bcs.n	8002b2e <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8002b28:	4a09      	ldr	r2, [pc, #36]	; (8002b50 <prvAddCurrentTaskToDelayedList+0xec>)
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	6013      	str	r3, [r2, #0]
}
 8002b2e:	bf00      	nop
 8002b30:	3710      	adds	r7, #16
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	20000160 	.word	0x20000160
 8002b3c:	20000084 	.word	0x20000084
 8002b40:	20000164 	.word	0x20000164
 8002b44:	20000148 	.word	0x20000148
 8002b48:	20000118 	.word	0x20000118
 8002b4c:	20000114 	.word	0x20000114
 8002b50:	2000017c 	.word	0x2000017c

08002b54 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002b54:	b480      	push	{r7}
 8002b56:	b085      	sub	sp, #20
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	60f8      	str	r0, [r7, #12]
 8002b5c:	60b9      	str	r1, [r7, #8]
 8002b5e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	3b04      	subs	r3, #4
 8002b64:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002b6c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	3b04      	subs	r3, #4
 8002b72:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	f023 0201 	bic.w	r2, r3, #1
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	3b04      	subs	r3, #4
 8002b82:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002b84:	4a0c      	ldr	r2, [pc, #48]	; (8002bb8 <pxPortInitialiseStack+0x64>)
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	3b14      	subs	r3, #20
 8002b8e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	3b04      	subs	r3, #4
 8002b9a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	f06f 0202 	mvn.w	r2, #2
 8002ba2:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	3b20      	subs	r3, #32
 8002ba8:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002baa:	68fb      	ldr	r3, [r7, #12]
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3714      	adds	r7, #20
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr
 8002bb8:	08002bbd 	.word	0x08002bbd

08002bbc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b085      	sub	sp, #20
 8002bc0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002bc6:	4b12      	ldr	r3, [pc, #72]	; (8002c10 <prvTaskExitError+0x54>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bce:	d00a      	beq.n	8002be6 <prvTaskExitError+0x2a>
        __asm volatile
 8002bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bd4:	f383 8811 	msr	BASEPRI, r3
 8002bd8:	f3bf 8f6f 	isb	sy
 8002bdc:	f3bf 8f4f 	dsb	sy
 8002be0:	60fb      	str	r3, [r7, #12]
    }
 8002be2:	bf00      	nop
 8002be4:	e7fe      	b.n	8002be4 <prvTaskExitError+0x28>
        __asm volatile
 8002be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bea:	f383 8811 	msr	BASEPRI, r3
 8002bee:	f3bf 8f6f 	isb	sy
 8002bf2:	f3bf 8f4f 	dsb	sy
 8002bf6:	60bb      	str	r3, [r7, #8]
    }
 8002bf8:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002bfa:	bf00      	nop
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d0fc      	beq.n	8002bfc <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002c02:	bf00      	nop
 8002c04:	bf00      	nop
 8002c06:	3714      	adds	r7, #20
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr
 8002c10:	20000010 	.word	0x20000010
	...

08002c20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002c20:	4b07      	ldr	r3, [pc, #28]	; (8002c40 <pxCurrentTCBConst2>)
 8002c22:	6819      	ldr	r1, [r3, #0]
 8002c24:	6808      	ldr	r0, [r1, #0]
 8002c26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c2a:	f380 8809 	msr	PSP, r0
 8002c2e:	f3bf 8f6f 	isb	sy
 8002c32:	f04f 0000 	mov.w	r0, #0
 8002c36:	f380 8811 	msr	BASEPRI, r0
 8002c3a:	4770      	bx	lr
 8002c3c:	f3af 8000 	nop.w

08002c40 <pxCurrentTCBConst2>:
 8002c40:	20000084 	.word	0x20000084
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002c44:	bf00      	nop
 8002c46:	bf00      	nop

08002c48 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002c48:	4808      	ldr	r0, [pc, #32]	; (8002c6c <prvPortStartFirstTask+0x24>)
 8002c4a:	6800      	ldr	r0, [r0, #0]
 8002c4c:	6800      	ldr	r0, [r0, #0]
 8002c4e:	f380 8808 	msr	MSP, r0
 8002c52:	f04f 0000 	mov.w	r0, #0
 8002c56:	f380 8814 	msr	CONTROL, r0
 8002c5a:	b662      	cpsie	i
 8002c5c:	b661      	cpsie	f
 8002c5e:	f3bf 8f4f 	dsb	sy
 8002c62:	f3bf 8f6f 	isb	sy
 8002c66:	df00      	svc	0
 8002c68:	bf00      	nop
 8002c6a:	0000      	.short	0x0000
 8002c6c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002c70:	bf00      	nop
 8002c72:	bf00      	nop

08002c74 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b086      	sub	sp, #24
 8002c78:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002c7a:	4b46      	ldr	r3, [pc, #280]	; (8002d94 <xPortStartScheduler+0x120>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a46      	ldr	r2, [pc, #280]	; (8002d98 <xPortStartScheduler+0x124>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d10a      	bne.n	8002c9a <xPortStartScheduler+0x26>
        __asm volatile
 8002c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c88:	f383 8811 	msr	BASEPRI, r3
 8002c8c:	f3bf 8f6f 	isb	sy
 8002c90:	f3bf 8f4f 	dsb	sy
 8002c94:	613b      	str	r3, [r7, #16]
    }
 8002c96:	bf00      	nop
 8002c98:	e7fe      	b.n	8002c98 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002c9a:	4b3e      	ldr	r3, [pc, #248]	; (8002d94 <xPortStartScheduler+0x120>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a3f      	ldr	r2, [pc, #252]	; (8002d9c <xPortStartScheduler+0x128>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d10a      	bne.n	8002cba <xPortStartScheduler+0x46>
        __asm volatile
 8002ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ca8:	f383 8811 	msr	BASEPRI, r3
 8002cac:	f3bf 8f6f 	isb	sy
 8002cb0:	f3bf 8f4f 	dsb	sy
 8002cb4:	60fb      	str	r3, [r7, #12]
    }
 8002cb6:	bf00      	nop
 8002cb8:	e7fe      	b.n	8002cb8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002cba:	4b39      	ldr	r3, [pc, #228]	; (8002da0 <xPortStartScheduler+0x12c>)
 8002cbc:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	22ff      	movs	r2, #255	; 0xff
 8002cca:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002cd4:	78fb      	ldrb	r3, [r7, #3]
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002cdc:	b2da      	uxtb	r2, r3
 8002cde:	4b31      	ldr	r3, [pc, #196]	; (8002da4 <xPortStartScheduler+0x130>)
 8002ce0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002ce2:	4b31      	ldr	r3, [pc, #196]	; (8002da8 <xPortStartScheduler+0x134>)
 8002ce4:	2207      	movs	r2, #7
 8002ce6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002ce8:	e009      	b.n	8002cfe <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8002cea:	4b2f      	ldr	r3, [pc, #188]	; (8002da8 <xPortStartScheduler+0x134>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	3b01      	subs	r3, #1
 8002cf0:	4a2d      	ldr	r2, [pc, #180]	; (8002da8 <xPortStartScheduler+0x134>)
 8002cf2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002cf4:	78fb      	ldrb	r3, [r7, #3]
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	005b      	lsls	r3, r3, #1
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002cfe:	78fb      	ldrb	r3, [r7, #3]
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d06:	2b80      	cmp	r3, #128	; 0x80
 8002d08:	d0ef      	beq.n	8002cea <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002d0a:	4b27      	ldr	r3, [pc, #156]	; (8002da8 <xPortStartScheduler+0x134>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f1c3 0307 	rsb	r3, r3, #7
 8002d12:	2b04      	cmp	r3, #4
 8002d14:	d00a      	beq.n	8002d2c <xPortStartScheduler+0xb8>
        __asm volatile
 8002d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d1a:	f383 8811 	msr	BASEPRI, r3
 8002d1e:	f3bf 8f6f 	isb	sy
 8002d22:	f3bf 8f4f 	dsb	sy
 8002d26:	60bb      	str	r3, [r7, #8]
    }
 8002d28:	bf00      	nop
 8002d2a:	e7fe      	b.n	8002d2a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002d2c:	4b1e      	ldr	r3, [pc, #120]	; (8002da8 <xPortStartScheduler+0x134>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	021b      	lsls	r3, r3, #8
 8002d32:	4a1d      	ldr	r2, [pc, #116]	; (8002da8 <xPortStartScheduler+0x134>)
 8002d34:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002d36:	4b1c      	ldr	r3, [pc, #112]	; (8002da8 <xPortStartScheduler+0x134>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002d3e:	4a1a      	ldr	r2, [pc, #104]	; (8002da8 <xPortStartScheduler+0x134>)
 8002d40:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	b2da      	uxtb	r2, r3
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002d4a:	4b18      	ldr	r3, [pc, #96]	; (8002dac <xPortStartScheduler+0x138>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a17      	ldr	r2, [pc, #92]	; (8002dac <xPortStartScheduler+0x138>)
 8002d50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d54:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002d56:	4b15      	ldr	r3, [pc, #84]	; (8002dac <xPortStartScheduler+0x138>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a14      	ldr	r2, [pc, #80]	; (8002dac <xPortStartScheduler+0x138>)
 8002d5c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002d60:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002d62:	f000 f963 	bl	800302c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002d66:	4b12      	ldr	r3, [pc, #72]	; (8002db0 <xPortStartScheduler+0x13c>)
 8002d68:	2200      	movs	r2, #0
 8002d6a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8002d6c:	f000 f982 	bl	8003074 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002d70:	4b10      	ldr	r3, [pc, #64]	; (8002db4 <xPortStartScheduler+0x140>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a0f      	ldr	r2, [pc, #60]	; (8002db4 <xPortStartScheduler+0x140>)
 8002d76:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002d7a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8002d7c:	f7ff ff64 	bl	8002c48 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002d80:	f7ff fd54 	bl	800282c <vTaskSwitchContext>
    prvTaskExitError();
 8002d84:	f7ff ff1a 	bl	8002bbc <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002d88:	2300      	movs	r3, #0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3718      	adds	r7, #24
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	e000ed00 	.word	0xe000ed00
 8002d98:	410fc271 	.word	0x410fc271
 8002d9c:	410fc270 	.word	0x410fc270
 8002da0:	e000e400 	.word	0xe000e400
 8002da4:	20000188 	.word	0x20000188
 8002da8:	2000018c 	.word	0x2000018c
 8002dac:	e000ed20 	.word	0xe000ed20
 8002db0:	20000010 	.word	0x20000010
 8002db4:	e000ef34 	.word	0xe000ef34

08002db8 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b087      	sub	sp, #28
 8002dbc:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002dbe:	4b37      	ldr	r3, [pc, #220]	; (8002e9c <vInitPrioGroupValue+0xe4>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a37      	ldr	r2, [pc, #220]	; (8002ea0 <vInitPrioGroupValue+0xe8>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d10a      	bne.n	8002dde <vInitPrioGroupValue+0x26>
        __asm volatile
 8002dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dcc:	f383 8811 	msr	BASEPRI, r3
 8002dd0:	f3bf 8f6f 	isb	sy
 8002dd4:	f3bf 8f4f 	dsb	sy
 8002dd8:	613b      	str	r3, [r7, #16]
    }
 8002dda:	bf00      	nop
 8002ddc:	e7fe      	b.n	8002ddc <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002dde:	4b2f      	ldr	r3, [pc, #188]	; (8002e9c <vInitPrioGroupValue+0xe4>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a30      	ldr	r2, [pc, #192]	; (8002ea4 <vInitPrioGroupValue+0xec>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d10a      	bne.n	8002dfe <vInitPrioGroupValue+0x46>
        __asm volatile
 8002de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dec:	f383 8811 	msr	BASEPRI, r3
 8002df0:	f3bf 8f6f 	isb	sy
 8002df4:	f3bf 8f4f 	dsb	sy
 8002df8:	60fb      	str	r3, [r7, #12]
    }
 8002dfa:	bf00      	nop
 8002dfc:	e7fe      	b.n	8002dfc <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002dfe:	4b2a      	ldr	r3, [pc, #168]	; (8002ea8 <vInitPrioGroupValue+0xf0>)
 8002e00:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	22ff      	movs	r2, #255	; 0xff
 8002e0e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002e18:	78fb      	ldrb	r3, [r7, #3]
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002e20:	b2da      	uxtb	r2, r3
 8002e22:	4b22      	ldr	r3, [pc, #136]	; (8002eac <vInitPrioGroupValue+0xf4>)
 8002e24:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002e26:	4b22      	ldr	r3, [pc, #136]	; (8002eb0 <vInitPrioGroupValue+0xf8>)
 8002e28:	2207      	movs	r2, #7
 8002e2a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002e2c:	e009      	b.n	8002e42 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8002e2e:	4b20      	ldr	r3, [pc, #128]	; (8002eb0 <vInitPrioGroupValue+0xf8>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	3b01      	subs	r3, #1
 8002e34:	4a1e      	ldr	r2, [pc, #120]	; (8002eb0 <vInitPrioGroupValue+0xf8>)
 8002e36:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002e38:	78fb      	ldrb	r3, [r7, #3]
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	005b      	lsls	r3, r3, #1
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002e42:	78fb      	ldrb	r3, [r7, #3]
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e4a:	2b80      	cmp	r3, #128	; 0x80
 8002e4c:	d0ef      	beq.n	8002e2e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002e4e:	4b18      	ldr	r3, [pc, #96]	; (8002eb0 <vInitPrioGroupValue+0xf8>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f1c3 0307 	rsb	r3, r3, #7
 8002e56:	2b04      	cmp	r3, #4
 8002e58:	d00a      	beq.n	8002e70 <vInitPrioGroupValue+0xb8>
        __asm volatile
 8002e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e5e:	f383 8811 	msr	BASEPRI, r3
 8002e62:	f3bf 8f6f 	isb	sy
 8002e66:	f3bf 8f4f 	dsb	sy
 8002e6a:	60bb      	str	r3, [r7, #8]
    }
 8002e6c:	bf00      	nop
 8002e6e:	e7fe      	b.n	8002e6e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002e70:	4b0f      	ldr	r3, [pc, #60]	; (8002eb0 <vInitPrioGroupValue+0xf8>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	021b      	lsls	r3, r3, #8
 8002e76:	4a0e      	ldr	r2, [pc, #56]	; (8002eb0 <vInitPrioGroupValue+0xf8>)
 8002e78:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002e7a:	4b0d      	ldr	r3, [pc, #52]	; (8002eb0 <vInitPrioGroupValue+0xf8>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002e82:	4a0b      	ldr	r2, [pc, #44]	; (8002eb0 <vInitPrioGroupValue+0xf8>)
 8002e84:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	b2da      	uxtb	r2, r3
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8002e8e:	bf00      	nop
 8002e90:	371c      	adds	r7, #28
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr
 8002e9a:	bf00      	nop
 8002e9c:	e000ed00 	.word	0xe000ed00
 8002ea0:	410fc271 	.word	0x410fc271
 8002ea4:	410fc270 	.word	0x410fc270
 8002ea8:	e000e400 	.word	0xe000e400
 8002eac:	20000188 	.word	0x20000188
 8002eb0:	2000018c 	.word	0x2000018c

08002eb4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
        __asm volatile
 8002eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ebe:	f383 8811 	msr	BASEPRI, r3
 8002ec2:	f3bf 8f6f 	isb	sy
 8002ec6:	f3bf 8f4f 	dsb	sy
 8002eca:	607b      	str	r3, [r7, #4]
    }
 8002ecc:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002ece:	4b0f      	ldr	r3, [pc, #60]	; (8002f0c <vPortEnterCritical+0x58>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	4a0d      	ldr	r2, [pc, #52]	; (8002f0c <vPortEnterCritical+0x58>)
 8002ed6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8002ed8:	4b0c      	ldr	r3, [pc, #48]	; (8002f0c <vPortEnterCritical+0x58>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d10f      	bne.n	8002f00 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002ee0:	4b0b      	ldr	r3, [pc, #44]	; (8002f10 <vPortEnterCritical+0x5c>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d00a      	beq.n	8002f00 <vPortEnterCritical+0x4c>
        __asm volatile
 8002eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eee:	f383 8811 	msr	BASEPRI, r3
 8002ef2:	f3bf 8f6f 	isb	sy
 8002ef6:	f3bf 8f4f 	dsb	sy
 8002efa:	603b      	str	r3, [r7, #0]
    }
 8002efc:	bf00      	nop
 8002efe:	e7fe      	b.n	8002efe <vPortEnterCritical+0x4a>
    }
}
 8002f00:	bf00      	nop
 8002f02:	370c      	adds	r7, #12
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr
 8002f0c:	20000010 	.word	0x20000010
 8002f10:	e000ed04 	.word	0xe000ed04

08002f14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8002f1a:	4b12      	ldr	r3, [pc, #72]	; (8002f64 <vPortExitCritical+0x50>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d10a      	bne.n	8002f38 <vPortExitCritical+0x24>
        __asm volatile
 8002f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f26:	f383 8811 	msr	BASEPRI, r3
 8002f2a:	f3bf 8f6f 	isb	sy
 8002f2e:	f3bf 8f4f 	dsb	sy
 8002f32:	607b      	str	r3, [r7, #4]
    }
 8002f34:	bf00      	nop
 8002f36:	e7fe      	b.n	8002f36 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8002f38:	4b0a      	ldr	r3, [pc, #40]	; (8002f64 <vPortExitCritical+0x50>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	3b01      	subs	r3, #1
 8002f3e:	4a09      	ldr	r2, [pc, #36]	; (8002f64 <vPortExitCritical+0x50>)
 8002f40:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002f42:	4b08      	ldr	r3, [pc, #32]	; (8002f64 <vPortExitCritical+0x50>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d105      	bne.n	8002f56 <vPortExitCritical+0x42>
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002f54:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8002f56:	bf00      	nop
 8002f58:	370c      	adds	r7, #12
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr
 8002f62:	bf00      	nop
 8002f64:	20000010 	.word	0x20000010
	...

08002f70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002f70:	f3ef 8009 	mrs	r0, PSP
 8002f74:	f3bf 8f6f 	isb	sy
 8002f78:	4b15      	ldr	r3, [pc, #84]	; (8002fd0 <pxCurrentTCBConst>)
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	f01e 0f10 	tst.w	lr, #16
 8002f80:	bf08      	it	eq
 8002f82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002f86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f8a:	6010      	str	r0, [r2, #0]
 8002f8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002f90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002f94:	f380 8811 	msr	BASEPRI, r0
 8002f98:	f3bf 8f4f 	dsb	sy
 8002f9c:	f3bf 8f6f 	isb	sy
 8002fa0:	f7ff fc44 	bl	800282c <vTaskSwitchContext>
 8002fa4:	f04f 0000 	mov.w	r0, #0
 8002fa8:	f380 8811 	msr	BASEPRI, r0
 8002fac:	bc09      	pop	{r0, r3}
 8002fae:	6819      	ldr	r1, [r3, #0]
 8002fb0:	6808      	ldr	r0, [r1, #0]
 8002fb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fb6:	f01e 0f10 	tst.w	lr, #16
 8002fba:	bf08      	it	eq
 8002fbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002fc0:	f380 8809 	msr	PSP, r0
 8002fc4:	f3bf 8f6f 	isb	sy
 8002fc8:	4770      	bx	lr
 8002fca:	bf00      	nop
 8002fcc:	f3af 8000 	nop.w

08002fd0 <pxCurrentTCBConst>:
 8002fd0:	20000084 	.word	0x20000084
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002fd4:	bf00      	nop
 8002fd6:	bf00      	nop

08002fd8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0
        __asm volatile
 8002fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fe2:	f383 8811 	msr	BASEPRI, r3
 8002fe6:	f3bf 8f6f 	isb	sy
 8002fea:	f3bf 8f4f 	dsb	sy
 8002fee:	607b      	str	r3, [r7, #4]
    }
 8002ff0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8002ff2:	f002 fa7d 	bl	80054f0 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002ff6:	f7ff fb5d 	bl	80026b4 <xTaskIncrementTick>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d006      	beq.n	800300e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8003000:	f002 fad4 	bl	80055ac <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003004:	4b08      	ldr	r3, [pc, #32]	; (8003028 <SysTick_Handler+0x50>)
 8003006:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800300a:	601a      	str	r2, [r3, #0]
 800300c:	e001      	b.n	8003012 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800300e:	f002 fab1 	bl	8005574 <SEGGER_SYSVIEW_RecordExitISR>
 8003012:	2300      	movs	r3, #0
 8003014:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	f383 8811 	msr	BASEPRI, r3
    }
 800301c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800301e:	bf00      	nop
 8003020:	3708      	adds	r7, #8
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	e000ed04 	.word	0xe000ed04

0800302c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800302c:	b480      	push	{r7}
 800302e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003030:	4b0b      	ldr	r3, [pc, #44]	; (8003060 <vPortSetupTimerInterrupt+0x34>)
 8003032:	2200      	movs	r2, #0
 8003034:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003036:	4b0b      	ldr	r3, [pc, #44]	; (8003064 <vPortSetupTimerInterrupt+0x38>)
 8003038:	2200      	movs	r2, #0
 800303a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800303c:	4b0a      	ldr	r3, [pc, #40]	; (8003068 <vPortSetupTimerInterrupt+0x3c>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a0a      	ldr	r2, [pc, #40]	; (800306c <vPortSetupTimerInterrupt+0x40>)
 8003042:	fba2 2303 	umull	r2, r3, r2, r3
 8003046:	099b      	lsrs	r3, r3, #6
 8003048:	4a09      	ldr	r2, [pc, #36]	; (8003070 <vPortSetupTimerInterrupt+0x44>)
 800304a:	3b01      	subs	r3, #1
 800304c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800304e:	4b04      	ldr	r3, [pc, #16]	; (8003060 <vPortSetupTimerInterrupt+0x34>)
 8003050:	2207      	movs	r2, #7
 8003052:	601a      	str	r2, [r3, #0]
}
 8003054:	bf00      	nop
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop
 8003060:	e000e010 	.word	0xe000e010
 8003064:	e000e018 	.word	0xe000e018
 8003068:	20000000 	.word	0x20000000
 800306c:	10624dd3 	.word	0x10624dd3
 8003070:	e000e014 	.word	0xe000e014

08003074 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003074:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003084 <vPortEnableVFP+0x10>
 8003078:	6801      	ldr	r1, [r0, #0]
 800307a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800307e:	6001      	str	r1, [r0, #0]
 8003080:	4770      	bx	lr
 8003082:	0000      	.short	0x0000
 8003084:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003088:	bf00      	nop
 800308a:	bf00      	nop

0800308c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800308c:	b480      	push	{r7}
 800308e:	b085      	sub	sp, #20
 8003090:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8003092:	f3ef 8305 	mrs	r3, IPSR
 8003096:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2b0f      	cmp	r3, #15
 800309c:	d914      	bls.n	80030c8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800309e:	4a17      	ldr	r2, [pc, #92]	; (80030fc <vPortValidateInterruptPriority+0x70>)
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	4413      	add	r3, r2
 80030a4:	781b      	ldrb	r3, [r3, #0]
 80030a6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80030a8:	4b15      	ldr	r3, [pc, #84]	; (8003100 <vPortValidateInterruptPriority+0x74>)
 80030aa:	781b      	ldrb	r3, [r3, #0]
 80030ac:	7afa      	ldrb	r2, [r7, #11]
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d20a      	bcs.n	80030c8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80030b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030b6:	f383 8811 	msr	BASEPRI, r3
 80030ba:	f3bf 8f6f 	isb	sy
 80030be:	f3bf 8f4f 	dsb	sy
 80030c2:	607b      	str	r3, [r7, #4]
    }
 80030c4:	bf00      	nop
 80030c6:	e7fe      	b.n	80030c6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80030c8:	4b0e      	ldr	r3, [pc, #56]	; (8003104 <vPortValidateInterruptPriority+0x78>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80030d0:	4b0d      	ldr	r3, [pc, #52]	; (8003108 <vPortValidateInterruptPriority+0x7c>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d90a      	bls.n	80030ee <vPortValidateInterruptPriority+0x62>
        __asm volatile
 80030d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030dc:	f383 8811 	msr	BASEPRI, r3
 80030e0:	f3bf 8f6f 	isb	sy
 80030e4:	f3bf 8f4f 	dsb	sy
 80030e8:	603b      	str	r3, [r7, #0]
    }
 80030ea:	bf00      	nop
 80030ec:	e7fe      	b.n	80030ec <vPortValidateInterruptPriority+0x60>
    }
 80030ee:	bf00      	nop
 80030f0:	3714      	adds	r7, #20
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr
 80030fa:	bf00      	nop
 80030fc:	e000e3f0 	.word	0xe000e3f0
 8003100:	20000188 	.word	0x20000188
 8003104:	e000ed0c 	.word	0xe000ed0c
 8003108:	2000018c 	.word	0x2000018c

0800310c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b08a      	sub	sp, #40	; 0x28
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8003114:	2300      	movs	r3, #0
 8003116:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8003118:	f7ff f9fc 	bl	8002514 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800311c:	4b65      	ldr	r3, [pc, #404]	; (80032b4 <pvPortMalloc+0x1a8>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d101      	bne.n	8003128 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003124:	f000 f934 	bl	8003390 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003128:	4b63      	ldr	r3, [pc, #396]	; (80032b8 <pvPortMalloc+0x1ac>)
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	4013      	ands	r3, r2
 8003130:	2b00      	cmp	r3, #0
 8003132:	f040 80a7 	bne.w	8003284 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d02d      	beq.n	8003198 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800313c:	2208      	movs	r2, #8
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	429a      	cmp	r2, r3
 8003146:	d227      	bcs.n	8003198 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8003148:	2208      	movs	r2, #8
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4413      	add	r3, r2
 800314e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	f003 0307 	and.w	r3, r3, #7
 8003156:	2b00      	cmp	r3, #0
 8003158:	d021      	beq.n	800319e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f023 0307 	bic.w	r3, r3, #7
 8003160:	3308      	adds	r3, #8
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	429a      	cmp	r2, r3
 8003166:	d214      	bcs.n	8003192 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f023 0307 	bic.w	r3, r3, #7
 800316e:	3308      	adds	r3, #8
 8003170:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f003 0307 	and.w	r3, r3, #7
 8003178:	2b00      	cmp	r3, #0
 800317a:	d010      	beq.n	800319e <pvPortMalloc+0x92>
        __asm volatile
 800317c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003180:	f383 8811 	msr	BASEPRI, r3
 8003184:	f3bf 8f6f 	isb	sy
 8003188:	f3bf 8f4f 	dsb	sy
 800318c:	617b      	str	r3, [r7, #20]
    }
 800318e:	bf00      	nop
 8003190:	e7fe      	b.n	8003190 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8003192:	2300      	movs	r3, #0
 8003194:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003196:	e002      	b.n	800319e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8003198:	2300      	movs	r3, #0
 800319a:	607b      	str	r3, [r7, #4]
 800319c:	e000      	b.n	80031a0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800319e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d06e      	beq.n	8003284 <pvPortMalloc+0x178>
 80031a6:	4b45      	ldr	r3, [pc, #276]	; (80032bc <pvPortMalloc+0x1b0>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d869      	bhi.n	8003284 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80031b0:	4b43      	ldr	r3, [pc, #268]	; (80032c0 <pvPortMalloc+0x1b4>)
 80031b2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80031b4:	4b42      	ldr	r3, [pc, #264]	; (80032c0 <pvPortMalloc+0x1b4>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80031ba:	e004      	b.n	80031c6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 80031bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031be:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80031c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80031c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d903      	bls.n	80031d8 <pvPortMalloc+0xcc>
 80031d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d1f1      	bne.n	80031bc <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80031d8:	4b36      	ldr	r3, [pc, #216]	; (80032b4 <pvPortMalloc+0x1a8>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031de:	429a      	cmp	r2, r3
 80031e0:	d050      	beq.n	8003284 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80031e2:	6a3b      	ldr	r3, [r7, #32]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	2208      	movs	r2, #8
 80031e8:	4413      	add	r3, r2
 80031ea:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80031ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	6a3b      	ldr	r3, [r7, #32]
 80031f2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80031f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f6:	685a      	ldr	r2, [r3, #4]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	1ad2      	subs	r2, r2, r3
 80031fc:	2308      	movs	r3, #8
 80031fe:	005b      	lsls	r3, r3, #1
 8003200:	429a      	cmp	r2, r3
 8003202:	d91f      	bls.n	8003244 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003204:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4413      	add	r3, r2
 800320a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800320c:	69bb      	ldr	r3, [r7, #24]
 800320e:	f003 0307 	and.w	r3, r3, #7
 8003212:	2b00      	cmp	r3, #0
 8003214:	d00a      	beq.n	800322c <pvPortMalloc+0x120>
        __asm volatile
 8003216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800321a:	f383 8811 	msr	BASEPRI, r3
 800321e:	f3bf 8f6f 	isb	sy
 8003222:	f3bf 8f4f 	dsb	sy
 8003226:	613b      	str	r3, [r7, #16]
    }
 8003228:	bf00      	nop
 800322a:	e7fe      	b.n	800322a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800322c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322e:	685a      	ldr	r2, [r3, #4]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	1ad2      	subs	r2, r2, r3
 8003234:	69bb      	ldr	r3, [r7, #24]
 8003236:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800323e:	69b8      	ldr	r0, [r7, #24]
 8003240:	f000 f908 	bl	8003454 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003244:	4b1d      	ldr	r3, [pc, #116]	; (80032bc <pvPortMalloc+0x1b0>)
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	4a1b      	ldr	r2, [pc, #108]	; (80032bc <pvPortMalloc+0x1b0>)
 8003250:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003252:	4b1a      	ldr	r3, [pc, #104]	; (80032bc <pvPortMalloc+0x1b0>)
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	4b1b      	ldr	r3, [pc, #108]	; (80032c4 <pvPortMalloc+0x1b8>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	429a      	cmp	r2, r3
 800325c:	d203      	bcs.n	8003266 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800325e:	4b17      	ldr	r3, [pc, #92]	; (80032bc <pvPortMalloc+0x1b0>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a18      	ldr	r2, [pc, #96]	; (80032c4 <pvPortMalloc+0x1b8>)
 8003264:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003268:	685a      	ldr	r2, [r3, #4]
 800326a:	4b13      	ldr	r3, [pc, #76]	; (80032b8 <pvPortMalloc+0x1ac>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	431a      	orrs	r2, r3
 8003270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003272:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003276:	2200      	movs	r2, #0
 8003278:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800327a:	4b13      	ldr	r3, [pc, #76]	; (80032c8 <pvPortMalloc+0x1bc>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	3301      	adds	r3, #1
 8003280:	4a11      	ldr	r2, [pc, #68]	; (80032c8 <pvPortMalloc+0x1bc>)
 8003282:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003284:	f7ff f954 	bl	8002530 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	f003 0307 	and.w	r3, r3, #7
 800328e:	2b00      	cmp	r3, #0
 8003290:	d00a      	beq.n	80032a8 <pvPortMalloc+0x19c>
        __asm volatile
 8003292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003296:	f383 8811 	msr	BASEPRI, r3
 800329a:	f3bf 8f6f 	isb	sy
 800329e:	f3bf 8f4f 	dsb	sy
 80032a2:	60fb      	str	r3, [r7, #12]
    }
 80032a4:	bf00      	nop
 80032a6:	e7fe      	b.n	80032a6 <pvPortMalloc+0x19a>
    return pvReturn;
 80032a8:	69fb      	ldr	r3, [r7, #28]
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3728      	adds	r7, #40	; 0x28
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	20012d98 	.word	0x20012d98
 80032b8:	20012dac 	.word	0x20012dac
 80032bc:	20012d9c 	.word	0x20012d9c
 80032c0:	20012d90 	.word	0x20012d90
 80032c4:	20012da0 	.word	0x20012da0
 80032c8:	20012da4 	.word	0x20012da4

080032cc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b086      	sub	sp, #24
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d04d      	beq.n	800337a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80032de:	2308      	movs	r3, #8
 80032e0:	425b      	negs	r3, r3
 80032e2:	697a      	ldr	r2, [r7, #20]
 80032e4:	4413      	add	r3, r2
 80032e6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	685a      	ldr	r2, [r3, #4]
 80032f0:	4b24      	ldr	r3, [pc, #144]	; (8003384 <vPortFree+0xb8>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4013      	ands	r3, r2
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d10a      	bne.n	8003310 <vPortFree+0x44>
        __asm volatile
 80032fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032fe:	f383 8811 	msr	BASEPRI, r3
 8003302:	f3bf 8f6f 	isb	sy
 8003306:	f3bf 8f4f 	dsb	sy
 800330a:	60fb      	str	r3, [r7, #12]
    }
 800330c:	bf00      	nop
 800330e:	e7fe      	b.n	800330e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d00a      	beq.n	800332e <vPortFree+0x62>
        __asm volatile
 8003318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800331c:	f383 8811 	msr	BASEPRI, r3
 8003320:	f3bf 8f6f 	isb	sy
 8003324:	f3bf 8f4f 	dsb	sy
 8003328:	60bb      	str	r3, [r7, #8]
    }
 800332a:	bf00      	nop
 800332c:	e7fe      	b.n	800332c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	685a      	ldr	r2, [r3, #4]
 8003332:	4b14      	ldr	r3, [pc, #80]	; (8003384 <vPortFree+0xb8>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4013      	ands	r3, r2
 8003338:	2b00      	cmp	r3, #0
 800333a:	d01e      	beq.n	800337a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d11a      	bne.n	800337a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	685a      	ldr	r2, [r3, #4]
 8003348:	4b0e      	ldr	r3, [pc, #56]	; (8003384 <vPortFree+0xb8>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	43db      	mvns	r3, r3
 800334e:	401a      	ands	r2, r3
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8003354:	f7ff f8de 	bl	8002514 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	685a      	ldr	r2, [r3, #4]
 800335c:	4b0a      	ldr	r3, [pc, #40]	; (8003388 <vPortFree+0xbc>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4413      	add	r3, r2
 8003362:	4a09      	ldr	r2, [pc, #36]	; (8003388 <vPortFree+0xbc>)
 8003364:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003366:	6938      	ldr	r0, [r7, #16]
 8003368:	f000 f874 	bl	8003454 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800336c:	4b07      	ldr	r3, [pc, #28]	; (800338c <vPortFree+0xc0>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	3301      	adds	r3, #1
 8003372:	4a06      	ldr	r2, [pc, #24]	; (800338c <vPortFree+0xc0>)
 8003374:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003376:	f7ff f8db 	bl	8002530 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800337a:	bf00      	nop
 800337c:	3718      	adds	r7, #24
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop
 8003384:	20012dac 	.word	0x20012dac
 8003388:	20012d9c 	.word	0x20012d9c
 800338c:	20012da8 	.word	0x20012da8

08003390 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003390:	b480      	push	{r7}
 8003392:	b085      	sub	sp, #20
 8003394:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003396:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800339a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800339c:	4b27      	ldr	r3, [pc, #156]	; (800343c <prvHeapInit+0xac>)
 800339e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	f003 0307 	and.w	r3, r3, #7
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d00c      	beq.n	80033c4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	3307      	adds	r3, #7
 80033ae:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f023 0307 	bic.w	r3, r3, #7
 80033b6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80033b8:	68ba      	ldr	r2, [r7, #8]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	4a1f      	ldr	r2, [pc, #124]	; (800343c <prvHeapInit+0xac>)
 80033c0:	4413      	add	r3, r2
 80033c2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80033c8:	4a1d      	ldr	r2, [pc, #116]	; (8003440 <prvHeapInit+0xb0>)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80033ce:	4b1c      	ldr	r3, [pc, #112]	; (8003440 <prvHeapInit+0xb0>)
 80033d0:	2200      	movs	r2, #0
 80033d2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	68ba      	ldr	r2, [r7, #8]
 80033d8:	4413      	add	r3, r2
 80033da:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80033dc:	2208      	movs	r2, #8
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	1a9b      	subs	r3, r3, r2
 80033e2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f023 0307 	bic.w	r3, r3, #7
 80033ea:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	4a15      	ldr	r2, [pc, #84]	; (8003444 <prvHeapInit+0xb4>)
 80033f0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80033f2:	4b14      	ldr	r3, [pc, #80]	; (8003444 <prvHeapInit+0xb4>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	2200      	movs	r2, #0
 80033f8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80033fa:	4b12      	ldr	r3, [pc, #72]	; (8003444 <prvHeapInit+0xb4>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	2200      	movs	r2, #0
 8003400:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	68fa      	ldr	r2, [r7, #12]
 800340a:	1ad2      	subs	r2, r2, r3
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003410:	4b0c      	ldr	r3, [pc, #48]	; (8003444 <prvHeapInit+0xb4>)
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	4a0a      	ldr	r2, [pc, #40]	; (8003448 <prvHeapInit+0xb8>)
 800341e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	4a09      	ldr	r2, [pc, #36]	; (800344c <prvHeapInit+0xbc>)
 8003426:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003428:	4b09      	ldr	r3, [pc, #36]	; (8003450 <prvHeapInit+0xc0>)
 800342a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800342e:	601a      	str	r2, [r3, #0]
}
 8003430:	bf00      	nop
 8003432:	3714      	adds	r7, #20
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr
 800343c:	20000190 	.word	0x20000190
 8003440:	20012d90 	.word	0x20012d90
 8003444:	20012d98 	.word	0x20012d98
 8003448:	20012da0 	.word	0x20012da0
 800344c:	20012d9c 	.word	0x20012d9c
 8003450:	20012dac 	.word	0x20012dac

08003454 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003454:	b480      	push	{r7}
 8003456:	b085      	sub	sp, #20
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800345c:	4b28      	ldr	r3, [pc, #160]	; (8003500 <prvInsertBlockIntoFreeList+0xac>)
 800345e:	60fb      	str	r3, [r7, #12]
 8003460:	e002      	b.n	8003468 <prvInsertBlockIntoFreeList+0x14>
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	60fb      	str	r3, [r7, #12]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	429a      	cmp	r2, r3
 8003470:	d8f7      	bhi.n	8003462 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	68ba      	ldr	r2, [r7, #8]
 800347c:	4413      	add	r3, r2
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	429a      	cmp	r2, r3
 8003482:	d108      	bne.n	8003496 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	685a      	ldr	r2, [r3, #4]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	441a      	add	r2, r3
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	68ba      	ldr	r2, [r7, #8]
 80034a0:	441a      	add	r2, r3
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d118      	bne.n	80034dc <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	4b15      	ldr	r3, [pc, #84]	; (8003504 <prvInsertBlockIntoFreeList+0xb0>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d00d      	beq.n	80034d2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	685a      	ldr	r2, [r3, #4]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	441a      	add	r2, r3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	601a      	str	r2, [r3, #0]
 80034d0:	e008      	b.n	80034e4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80034d2:	4b0c      	ldr	r3, [pc, #48]	; (8003504 <prvInsertBlockIntoFreeList+0xb0>)
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	601a      	str	r2, [r3, #0]
 80034da:	e003      	b.n	80034e4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80034e4:	68fa      	ldr	r2, [r7, #12]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d002      	beq.n	80034f2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80034f2:	bf00      	nop
 80034f4:	3714      	adds	r7, #20
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr
 80034fe:	bf00      	nop
 8003500:	20012d90 	.word	0x20012d90
 8003504:	20012d98 	.word	0x20012d98

08003508 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8003508:	b580      	push	{r7, lr}
 800350a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 800350c:	4803      	ldr	r0, [pc, #12]	; (800351c <_cbSendSystemDesc+0x14>)
 800350e:	f001 ff99 	bl	8005444 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8003512:	4803      	ldr	r0, [pc, #12]	; (8003520 <_cbSendSystemDesc+0x18>)
 8003514:	f001 ff96 	bl	8005444 <SEGGER_SYSVIEW_SendSysDesc>
}
 8003518:	bf00      	nop
 800351a:	bd80      	pop	{r7, pc}
 800351c:	08005c7c 	.word	0x08005c7c
 8003520:	08005cc0 	.word	0x08005cc0

08003524 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8003524:	b580      	push	{r7, lr}
 8003526:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8003528:	4b06      	ldr	r3, [pc, #24]	; (8003544 <SEGGER_SYSVIEW_Conf+0x20>)
 800352a:	6818      	ldr	r0, [r3, #0]
 800352c:	4b05      	ldr	r3, [pc, #20]	; (8003544 <SEGGER_SYSVIEW_Conf+0x20>)
 800352e:	6819      	ldr	r1, [r3, #0]
 8003530:	4b05      	ldr	r3, [pc, #20]	; (8003548 <SEGGER_SYSVIEW_Conf+0x24>)
 8003532:	4a06      	ldr	r2, [pc, #24]	; (800354c <SEGGER_SYSVIEW_Conf+0x28>)
 8003534:	f001 fc0a 	bl	8004d4c <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8003538:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800353c:	f001 fc4a 	bl	8004dd4 <SEGGER_SYSVIEW_SetRAMBase>
}
 8003540:	bf00      	nop
 8003542:	bd80      	pop	{r7, pc}
 8003544:	20000000 	.word	0x20000000
 8003548:	08003509 	.word	0x08003509
 800354c:	08005d60 	.word	0x08005d60

08003550 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8003550:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003552:	b085      	sub	sp, #20
 8003554:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8003556:	2300      	movs	r3, #0
 8003558:	607b      	str	r3, [r7, #4]
 800355a:	e033      	b.n	80035c4 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 800355c:	491e      	ldr	r1, [pc, #120]	; (80035d8 <_cbSendTaskList+0x88>)
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	4613      	mov	r3, r2
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	4413      	add	r3, r2
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	440b      	add	r3, r1
 800356a:	6818      	ldr	r0, [r3, #0]
 800356c:	491a      	ldr	r1, [pc, #104]	; (80035d8 <_cbSendTaskList+0x88>)
 800356e:	687a      	ldr	r2, [r7, #4]
 8003570:	4613      	mov	r3, r2
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	4413      	add	r3, r2
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	440b      	add	r3, r1
 800357a:	3304      	adds	r3, #4
 800357c:	6819      	ldr	r1, [r3, #0]
 800357e:	4c16      	ldr	r4, [pc, #88]	; (80035d8 <_cbSendTaskList+0x88>)
 8003580:	687a      	ldr	r2, [r7, #4]
 8003582:	4613      	mov	r3, r2
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	4413      	add	r3, r2
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	4423      	add	r3, r4
 800358c:	3308      	adds	r3, #8
 800358e:	681c      	ldr	r4, [r3, #0]
 8003590:	4d11      	ldr	r5, [pc, #68]	; (80035d8 <_cbSendTaskList+0x88>)
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	4613      	mov	r3, r2
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	4413      	add	r3, r2
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	442b      	add	r3, r5
 800359e:	330c      	adds	r3, #12
 80035a0:	681d      	ldr	r5, [r3, #0]
 80035a2:	4e0d      	ldr	r6, [pc, #52]	; (80035d8 <_cbSendTaskList+0x88>)
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	4613      	mov	r3, r2
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	4413      	add	r3, r2
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	4433      	add	r3, r6
 80035b0:	3310      	adds	r3, #16
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	9300      	str	r3, [sp, #0]
 80035b6:	462b      	mov	r3, r5
 80035b8:	4622      	mov	r2, r4
 80035ba:	f000 f8bd 	bl	8003738 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	3301      	adds	r3, #1
 80035c2:	607b      	str	r3, [r7, #4]
 80035c4:	4b05      	ldr	r3, [pc, #20]	; (80035dc <_cbSendTaskList+0x8c>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	687a      	ldr	r2, [r7, #4]
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d3c6      	bcc.n	800355c <_cbSendTaskList+0xc>
  }
}
 80035ce:	bf00      	nop
 80035d0:	bf00      	nop
 80035d2:	370c      	adds	r7, #12
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035d8:	20012db0 	.word	0x20012db0
 80035dc:	20012e50 	.word	0x20012e50

080035e0 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 80035e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035e4:	b082      	sub	sp, #8
 80035e6:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 80035e8:	f7ff f852 	bl	8002690 <xTaskGetTickCountFromISR>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2200      	movs	r2, #0
 80035f0:	469a      	mov	sl, r3
 80035f2:	4693      	mov	fp, r2
 80035f4:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 80035f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80035fc:	4602      	mov	r2, r0
 80035fe:	460b      	mov	r3, r1
 8003600:	f04f 0a00 	mov.w	sl, #0
 8003604:	f04f 0b00 	mov.w	fp, #0
 8003608:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 800360c:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8003610:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8003614:	4652      	mov	r2, sl
 8003616:	465b      	mov	r3, fp
 8003618:	1a14      	subs	r4, r2, r0
 800361a:	eb63 0501 	sbc.w	r5, r3, r1
 800361e:	f04f 0200 	mov.w	r2, #0
 8003622:	f04f 0300 	mov.w	r3, #0
 8003626:	00ab      	lsls	r3, r5, #2
 8003628:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800362c:	00a2      	lsls	r2, r4, #2
 800362e:	4614      	mov	r4, r2
 8003630:	461d      	mov	r5, r3
 8003632:	eb14 0800 	adds.w	r8, r4, r0
 8003636:	eb45 0901 	adc.w	r9, r5, r1
 800363a:	f04f 0200 	mov.w	r2, #0
 800363e:	f04f 0300 	mov.w	r3, #0
 8003642:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003646:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800364a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800364e:	4690      	mov	r8, r2
 8003650:	4699      	mov	r9, r3
 8003652:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8003656:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800365a:	4610      	mov	r0, r2
 800365c:	4619      	mov	r1, r3
 800365e:	3708      	adds	r7, #8
 8003660:	46bd      	mov	sp, r7
 8003662:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08003668 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8003668:	b580      	push	{r7, lr}
 800366a:	b086      	sub	sp, #24
 800366c:	af02      	add	r7, sp, #8
 800366e:	60f8      	str	r0, [r7, #12]
 8003670:	60b9      	str	r1, [r7, #8]
 8003672:	607a      	str	r2, [r7, #4]
 8003674:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003676:	2205      	movs	r2, #5
 8003678:	492b      	ldr	r1, [pc, #172]	; (8003728 <SYSVIEW_AddTask+0xc0>)
 800367a:	68b8      	ldr	r0, [r7, #8]
 800367c:	f002 fa92 	bl	8005ba4 <memcmp>
 8003680:	4603      	mov	r3, r0
 8003682:	2b00      	cmp	r3, #0
 8003684:	d04b      	beq.n	800371e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8003686:	4b29      	ldr	r3, [pc, #164]	; (800372c <SYSVIEW_AddTask+0xc4>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	2b07      	cmp	r3, #7
 800368c:	d903      	bls.n	8003696 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800368e:	4828      	ldr	r0, [pc, #160]	; (8003730 <SYSVIEW_AddTask+0xc8>)
 8003690:	f002 f9da 	bl	8005a48 <SEGGER_SYSVIEW_Warn>
    return;
 8003694:	e044      	b.n	8003720 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8003696:	4b25      	ldr	r3, [pc, #148]	; (800372c <SYSVIEW_AddTask+0xc4>)
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	4926      	ldr	r1, [pc, #152]	; (8003734 <SYSVIEW_AddTask+0xcc>)
 800369c:	4613      	mov	r3, r2
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	4413      	add	r3, r2
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	440b      	add	r3, r1
 80036a6:	68fa      	ldr	r2, [r7, #12]
 80036a8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80036aa:	4b20      	ldr	r3, [pc, #128]	; (800372c <SYSVIEW_AddTask+0xc4>)
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	4921      	ldr	r1, [pc, #132]	; (8003734 <SYSVIEW_AddTask+0xcc>)
 80036b0:	4613      	mov	r3, r2
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	4413      	add	r3, r2
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	440b      	add	r3, r1
 80036ba:	3304      	adds	r3, #4
 80036bc:	68ba      	ldr	r2, [r7, #8]
 80036be:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80036c0:	4b1a      	ldr	r3, [pc, #104]	; (800372c <SYSVIEW_AddTask+0xc4>)
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	491b      	ldr	r1, [pc, #108]	; (8003734 <SYSVIEW_AddTask+0xcc>)
 80036c6:	4613      	mov	r3, r2
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	4413      	add	r3, r2
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	440b      	add	r3, r1
 80036d0:	3308      	adds	r3, #8
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80036d6:	4b15      	ldr	r3, [pc, #84]	; (800372c <SYSVIEW_AddTask+0xc4>)
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	4916      	ldr	r1, [pc, #88]	; (8003734 <SYSVIEW_AddTask+0xcc>)
 80036dc:	4613      	mov	r3, r2
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	4413      	add	r3, r2
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	440b      	add	r3, r1
 80036e6:	330c      	adds	r3, #12
 80036e8:	683a      	ldr	r2, [r7, #0]
 80036ea:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80036ec:	4b0f      	ldr	r3, [pc, #60]	; (800372c <SYSVIEW_AddTask+0xc4>)
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	4910      	ldr	r1, [pc, #64]	; (8003734 <SYSVIEW_AddTask+0xcc>)
 80036f2:	4613      	mov	r3, r2
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	4413      	add	r3, r2
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	440b      	add	r3, r1
 80036fc:	3310      	adds	r3, #16
 80036fe:	69ba      	ldr	r2, [r7, #24]
 8003700:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8003702:	4b0a      	ldr	r3, [pc, #40]	; (800372c <SYSVIEW_AddTask+0xc4>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	3301      	adds	r3, #1
 8003708:	4a08      	ldr	r2, [pc, #32]	; (800372c <SYSVIEW_AddTask+0xc4>)
 800370a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800370c:	69bb      	ldr	r3, [r7, #24]
 800370e:	9300      	str	r3, [sp, #0]
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	68b9      	ldr	r1, [r7, #8]
 8003716:	68f8      	ldr	r0, [r7, #12]
 8003718:	f000 f80e 	bl	8003738 <SYSVIEW_SendTaskInfo>
 800371c:	e000      	b.n	8003720 <SYSVIEW_AddTask+0xb8>
    return;
 800371e:	bf00      	nop

}
 8003720:	3710      	adds	r7, #16
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
 8003726:	bf00      	nop
 8003728:	08005cd0 	.word	0x08005cd0
 800372c:	20012e50 	.word	0x20012e50
 8003730:	08005cd8 	.word	0x08005cd8
 8003734:	20012db0 	.word	0x20012db0

08003738 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8003738:	b580      	push	{r7, lr}
 800373a:	b08a      	sub	sp, #40	; 0x28
 800373c:	af00      	add	r7, sp, #0
 800373e:	60f8      	str	r0, [r7, #12]
 8003740:	60b9      	str	r1, [r7, #8]
 8003742:	607a      	str	r2, [r7, #4]
 8003744:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8003746:	f107 0314 	add.w	r3, r7, #20
 800374a:	2214      	movs	r2, #20
 800374c:	2100      	movs	r1, #0
 800374e:	4618      	mov	r0, r3
 8003750:	f002 fa46 	bl	8005be0 <memset>
  TaskInfo.TaskID     = TaskID;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8003764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003766:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8003768:	f107 0314 	add.w	r3, r7, #20
 800376c:	4618      	mov	r0, r3
 800376e:	f001 fd71 	bl	8005254 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8003772:	bf00      	nop
 8003774:	3728      	adds	r7, #40	; 0x28
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
	...

0800377c <__NVIC_EnableIRQ>:
{
 800377c:	b480      	push	{r7}
 800377e:	b083      	sub	sp, #12
 8003780:	af00      	add	r7, sp, #0
 8003782:	4603      	mov	r3, r0
 8003784:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800378a:	2b00      	cmp	r3, #0
 800378c:	db0b      	blt.n	80037a6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800378e:	79fb      	ldrb	r3, [r7, #7]
 8003790:	f003 021f 	and.w	r2, r3, #31
 8003794:	4907      	ldr	r1, [pc, #28]	; (80037b4 <__NVIC_EnableIRQ+0x38>)
 8003796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800379a:	095b      	lsrs	r3, r3, #5
 800379c:	2001      	movs	r0, #1
 800379e:	fa00 f202 	lsl.w	r2, r0, r2
 80037a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80037a6:	bf00      	nop
 80037a8:	370c      	adds	r7, #12
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr
 80037b2:	bf00      	nop
 80037b4:	e000e100 	.word	0xe000e100

080037b8 <__NVIC_SetPriority>:
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	4603      	mov	r3, r0
 80037c0:	6039      	str	r1, [r7, #0]
 80037c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	db0a      	blt.n	80037e2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	b2da      	uxtb	r2, r3
 80037d0:	490c      	ldr	r1, [pc, #48]	; (8003804 <__NVIC_SetPriority+0x4c>)
 80037d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037d6:	0112      	lsls	r2, r2, #4
 80037d8:	b2d2      	uxtb	r2, r2
 80037da:	440b      	add	r3, r1
 80037dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80037e0:	e00a      	b.n	80037f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	b2da      	uxtb	r2, r3
 80037e6:	4908      	ldr	r1, [pc, #32]	; (8003808 <__NVIC_SetPriority+0x50>)
 80037e8:	79fb      	ldrb	r3, [r7, #7]
 80037ea:	f003 030f 	and.w	r3, r3, #15
 80037ee:	3b04      	subs	r3, #4
 80037f0:	0112      	lsls	r2, r2, #4
 80037f2:	b2d2      	uxtb	r2, r2
 80037f4:	440b      	add	r3, r1
 80037f6:	761a      	strb	r2, [r3, #24]
}
 80037f8:	bf00      	nop
 80037fa:	370c      	adds	r7, #12
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr
 8003804:	e000e100 	.word	0xe000e100
 8003808:	e000ed00 	.word	0xe000ed00

0800380c <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 800380c:	b580      	push	{r7, lr}
 800380e:	b082      	sub	sp, #8
 8003810:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 8003812:	f002 f975 	bl	8005b00 <SEGGER_SYSVIEW_IsStarted>
 8003816:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d101      	bne.n	8003822 <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 800381e:	f001 fb9d 	bl	8004f5c <SEGGER_SYSVIEW_Start>
  }
}
 8003822:	bf00      	nop
 8003824:	3708      	adds	r7, #8
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
	...

0800382c <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 800382c:	b580      	push	{r7, lr}
 800382e:	b082      	sub	sp, #8
 8003830:	af00      	add	r7, sp, #0
 8003832:	4603      	mov	r3, r0
 8003834:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8003836:	4b0c      	ldr	r3, [pc, #48]	; (8003868 <_cbOnUARTRx+0x3c>)
 8003838:	781b      	ldrb	r3, [r3, #0]
 800383a:	2b03      	cmp	r3, #3
 800383c:	d806      	bhi.n	800384c <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 800383e:	4b0a      	ldr	r3, [pc, #40]	; (8003868 <_cbOnUARTRx+0x3c>)
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	3301      	adds	r3, #1
 8003844:	b2da      	uxtb	r2, r3
 8003846:	4b08      	ldr	r3, [pc, #32]	; (8003868 <_cbOnUARTRx+0x3c>)
 8003848:	701a      	strb	r2, [r3, #0]
    goto Done;
 800384a:	e009      	b.n	8003860 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 800384c:	f7ff ffde 	bl	800380c <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8003850:	4b05      	ldr	r3, [pc, #20]	; (8003868 <_cbOnUARTRx+0x3c>)
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	4618      	mov	r0, r3
 8003856:	1dfb      	adds	r3, r7, #7
 8003858:	2201      	movs	r2, #1
 800385a:	4619      	mov	r1, r3
 800385c:	f000 fb9a 	bl	8003f94 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8003860:	bf00      	nop
}
 8003862:	3708      	adds	r7, #8
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}
 8003868:	20000014 	.word	0x20000014

0800386c <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 800386c:	b580      	push	{r7, lr}
 800386e:	b084      	sub	sp, #16
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8003874:	4b14      	ldr	r3, [pc, #80]	; (80038c8 <_cbOnUARTTx+0x5c>)
 8003876:	785b      	ldrb	r3, [r3, #1]
 8003878:	2b03      	cmp	r3, #3
 800387a:	d80f      	bhi.n	800389c <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 800387c:	4b12      	ldr	r3, [pc, #72]	; (80038c8 <_cbOnUARTTx+0x5c>)
 800387e:	785b      	ldrb	r3, [r3, #1]
 8003880:	461a      	mov	r2, r3
 8003882:	4b12      	ldr	r3, [pc, #72]	; (80038cc <_cbOnUARTTx+0x60>)
 8003884:	5c9a      	ldrb	r2, [r3, r2]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 800388a:	4b0f      	ldr	r3, [pc, #60]	; (80038c8 <_cbOnUARTTx+0x5c>)
 800388c:	785b      	ldrb	r3, [r3, #1]
 800388e:	3301      	adds	r3, #1
 8003890:	b2da      	uxtb	r2, r3
 8003892:	4b0d      	ldr	r3, [pc, #52]	; (80038c8 <_cbOnUARTTx+0x5c>)
 8003894:	705a      	strb	r2, [r3, #1]
    r = 1;
 8003896:	2301      	movs	r3, #1
 8003898:	60fb      	str	r3, [r7, #12]
    goto Done;
 800389a:	e00f      	b.n	80038bc <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 800389c:	4b0a      	ldr	r3, [pc, #40]	; (80038c8 <_cbOnUARTTx+0x5c>)
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	2201      	movs	r2, #1
 80038a2:	6879      	ldr	r1, [r7, #4]
 80038a4:	4618      	mov	r0, r3
 80038a6:	f000 fa19 	bl	8003cdc <SEGGER_RTT_ReadUpBufferNoLock>
 80038aa:	4603      	mov	r3, r0
 80038ac:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	da02      	bge.n	80038ba <_cbOnUARTTx+0x4e>
    r = 0;
 80038b4:	2300      	movs	r3, #0
 80038b6:	60fb      	str	r3, [r7, #12]
 80038b8:	e000      	b.n	80038bc <_cbOnUARTTx+0x50>
  }
Done:
 80038ba:	bf00      	nop
  return r;
 80038bc:	68fb      	ldr	r3, [r7, #12]
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3710      	adds	r7, #16
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	20000014 	.word	0x20000014
 80038cc:	08005d68 	.word	0x08005d68

080038d0 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b082      	sub	sp, #8
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 80038d8:	4a04      	ldr	r2, [pc, #16]	; (80038ec <SEGGER_UART_init+0x1c>)
 80038da:	4905      	ldr	r1, [pc, #20]	; (80038f0 <SEGGER_UART_init+0x20>)
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	f000 f863 	bl	80039a8 <HIF_UART_Init>
}
 80038e2:	bf00      	nop
 80038e4:	3708      	adds	r7, #8
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	0800382d 	.word	0x0800382d
 80038f0:	0800386d 	.word	0x0800386d

080038f4 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b084      	sub	sp, #16
 80038f8:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 80038fa:	4b1e      	ldr	r3, [pc, #120]	; (8003974 <USART2_IRQHandler+0x80>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f003 0320 	and.w	r3, r3, #32
 8003906:	2b00      	cmp	r3, #0
 8003908:	d011      	beq.n	800392e <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 800390a:	4b1b      	ldr	r3, [pc, #108]	; (8003978 <USART2_IRQHandler+0x84>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	b2db      	uxtb	r3, r3
 8003910:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	f003 030b 	and.w	r3, r3, #11
 8003918:	2b00      	cmp	r3, #0
 800391a:	d108      	bne.n	800392e <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 800391c:	4b17      	ldr	r3, [pc, #92]	; (800397c <USART2_IRQHandler+0x88>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d004      	beq.n	800392e <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8003924:	4b15      	ldr	r3, [pc, #84]	; (800397c <USART2_IRQHandler+0x88>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	79fa      	ldrb	r2, [r7, #7]
 800392a:	4610      	mov	r0, r2
 800392c:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003934:	2b00      	cmp	r3, #0
 8003936:	d01a      	beq.n	800396e <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8003938:	4b11      	ldr	r3, [pc, #68]	; (8003980 <USART2_IRQHandler+0x8c>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d015      	beq.n	800396c <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8003940:	4b0f      	ldr	r3, [pc, #60]	; (8003980 <USART2_IRQHandler+0x8c>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	1dfa      	adds	r2, r7, #7
 8003946:	4610      	mov	r0, r2
 8003948:	4798      	blx	r3
 800394a:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d106      	bne.n	8003960 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8003952:	4b0c      	ldr	r3, [pc, #48]	; (8003984 <USART2_IRQHandler+0x90>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a0b      	ldr	r2, [pc, #44]	; (8003984 <USART2_IRQHandler+0x90>)
 8003958:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800395c:	6013      	str	r3, [r2, #0]
 800395e:	e006      	b.n	800396e <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8003960:	4b04      	ldr	r3, [pc, #16]	; (8003974 <USART2_IRQHandler+0x80>)
 8003962:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8003964:	79fa      	ldrb	r2, [r7, #7]
 8003966:	4b04      	ldr	r3, [pc, #16]	; (8003978 <USART2_IRQHandler+0x84>)
 8003968:	601a      	str	r2, [r3, #0]
 800396a:	e000      	b.n	800396e <USART2_IRQHandler+0x7a>
      return;
 800396c:	bf00      	nop
    }
  }
}
 800396e:	3710      	adds	r7, #16
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}
 8003974:	40004400 	.word	0x40004400
 8003978:	40004404 	.word	0x40004404
 800397c:	20012e54 	.word	0x20012e54
 8003980:	20012e58 	.word	0x20012e58
 8003984:	4000440c 	.word	0x4000440c

08003988 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8003988:	b480      	push	{r7}
 800398a:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 800398c:	4b05      	ldr	r3, [pc, #20]	; (80039a4 <HIF_UART_EnableTXEInterrupt+0x1c>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a04      	ldr	r2, [pc, #16]	; (80039a4 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8003992:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003996:	6013      	str	r3, [r2, #0]
}
 8003998:	bf00      	nop
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr
 80039a2:	bf00      	nop
 80039a4:	4000440c 	.word	0x4000440c

080039a8 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b086      	sub	sp, #24
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	60f8      	str	r0, [r7, #12]
 80039b0:	60b9      	str	r1, [r7, #8]
 80039b2:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 80039b4:	4b2e      	ldr	r3, [pc, #184]	; (8003a70 <HIF_UART_Init+0xc8>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a2d      	ldr	r2, [pc, #180]	; (8003a70 <HIF_UART_Init+0xc8>)
 80039ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039be:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 80039c0:	4b2c      	ldr	r3, [pc, #176]	; (8003a74 <HIF_UART_Init+0xcc>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a2b      	ldr	r2, [pc, #172]	; (8003a74 <HIF_UART_Init+0xcc>)
 80039c6:	f043 0301 	orr.w	r3, r3, #1
 80039ca:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 80039cc:	4b2a      	ldr	r3, [pc, #168]	; (8003a78 <HIF_UART_Init+0xd0>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039d8:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 80039e0:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 80039e2:	4a25      	ldr	r2, [pc, #148]	; (8003a78 <HIF_UART_Init+0xd0>)
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 80039e8:	4b24      	ldr	r3, [pc, #144]	; (8003a7c <HIF_UART_Init+0xd4>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039f4:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80039fc:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 80039fe:	4a1f      	ldr	r2, [pc, #124]	; (8003a7c <HIF_UART_Init+0xd4>)
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8003a04:	4b1e      	ldr	r3, [pc, #120]	; (8003a80 <HIF_UART_Init+0xd8>)
 8003a06:	f24a 022c 	movw	r2, #41004	; 0xa02c
 8003a0a:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8003a0c:	4b1d      	ldr	r3, [pc, #116]	; (8003a84 <HIF_UART_Init+0xdc>)
 8003a0e:	2200      	movs	r2, #0
 8003a10:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8003a12:	4b1d      	ldr	r3, [pc, #116]	; (8003a88 <HIF_UART_Init+0xe0>)
 8003a14:	2280      	movs	r2, #128	; 0x80
 8003a16:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	00db      	lsls	r3, r3, #3
 8003a1c:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 8003a1e:	4a1b      	ldr	r2, [pc, #108]	; (8003a8c <HIF_UART_Init+0xe4>)
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a26:	3301      	adds	r3, #1
 8003a28:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	085b      	lsrs	r3, r3, #1
 8003a2e:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a36:	d302      	bcc.n	8003a3e <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8003a38:	f640 73ff 	movw	r3, #4095	; 0xfff
 8003a3c:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d004      	beq.n	8003a4e <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	011b      	lsls	r3, r3, #4
 8003a48:	4a11      	ldr	r2, [pc, #68]	; (8003a90 <HIF_UART_Init+0xe8>)
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 8003a4e:	4a11      	ldr	r2, [pc, #68]	; (8003a94 <HIF_UART_Init+0xec>)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8003a54:	4a10      	ldr	r2, [pc, #64]	; (8003a98 <HIF_UART_Init+0xf0>)
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 8003a5a:	2106      	movs	r1, #6
 8003a5c:	2026      	movs	r0, #38	; 0x26
 8003a5e:	f7ff feab 	bl	80037b8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8003a62:	2026      	movs	r0, #38	; 0x26
 8003a64:	f7ff fe8a 	bl	800377c <__NVIC_EnableIRQ>
}
 8003a68:	bf00      	nop
 8003a6a:	3718      	adds	r7, #24
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	40023840 	.word	0x40023840
 8003a74:	40023830 	.word	0x40023830
 8003a78:	40020020 	.word	0x40020020
 8003a7c:	40020000 	.word	0x40020000
 8003a80:	4000440c 	.word	0x4000440c
 8003a84:	40004410 	.word	0x40004410
 8003a88:	40004414 	.word	0x40004414
 8003a8c:	0501bd00 	.word	0x0501bd00
 8003a90:	40004408 	.word	0x40004408
 8003a94:	20012e54 	.word	0x20012e54
 8003a98:	20012e58 	.word	0x20012e58

08003a9c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8003aa2:	4b24      	ldr	r3, [pc, #144]	; (8003b34 <_DoInit+0x98>)
 8003aa4:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2203      	movs	r2, #3
 8003aaa:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2203      	movs	r2, #3
 8003ab0:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a20      	ldr	r2, [pc, #128]	; (8003b38 <_DoInit+0x9c>)
 8003ab6:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	4a20      	ldr	r2, [pc, #128]	; (8003b3c <_DoInit+0xa0>)
 8003abc:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003ac4:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	4a17      	ldr	r2, [pc, #92]	; (8003b38 <_DoInit+0x9c>)
 8003adc:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a17      	ldr	r2, [pc, #92]	; (8003b40 <_DoInit+0xa4>)
 8003ae2:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2210      	movs	r2, #16
 8003ae8:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2200      	movs	r2, #0
 8003afa:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	3307      	adds	r3, #7
 8003b00:	4a10      	ldr	r2, [pc, #64]	; (8003b44 <_DoInit+0xa8>)
 8003b02:	6810      	ldr	r0, [r2, #0]
 8003b04:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003b06:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4a0e      	ldr	r2, [pc, #56]	; (8003b48 <_DoInit+0xac>)
 8003b0e:	6810      	ldr	r0, [r2, #0]
 8003b10:	6018      	str	r0, [r3, #0]
 8003b12:	8891      	ldrh	r1, [r2, #4]
 8003b14:	7992      	ldrb	r2, [r2, #6]
 8003b16:	8099      	strh	r1, [r3, #4]
 8003b18:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003b1a:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2220      	movs	r2, #32
 8003b22:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003b24:	f3bf 8f5f 	dmb	sy
}
 8003b28:	bf00      	nop
 8003b2a:	370c      	adds	r7, #12
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr
 8003b34:	20012e5c 	.word	0x20012e5c
 8003b38:	08005d28 	.word	0x08005d28
 8003b3c:	20012f04 	.word	0x20012f04
 8003b40:	20013304 	.word	0x20013304
 8003b44:	08005d34 	.word	0x08005d34
 8003b48:	08005d38 	.word	0x08005d38

08003b4c <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b08a      	sub	sp, #40	; 0x28
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	60f8      	str	r0, [r7, #12]
 8003b54:	60b9      	str	r1, [r7, #8]
 8003b56:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	68db      	ldr	r3, [r3, #12]
 8003b60:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	691b      	ldr	r3, [r3, #16]
 8003b66:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8003b68:	69ba      	ldr	r2, [r7, #24]
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d905      	bls.n	8003b7c <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8003b70:	69ba      	ldr	r2, [r7, #24]
 8003b72:	69fb      	ldr	r3, [r7, #28]
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	3b01      	subs	r3, #1
 8003b78:	627b      	str	r3, [r7, #36]	; 0x24
 8003b7a:	e007      	b.n	8003b8c <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	689a      	ldr	r2, [r3, #8]
 8003b80:	69b9      	ldr	r1, [r7, #24]
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	1acb      	subs	r3, r1, r3
 8003b86:	4413      	add	r3, r2
 8003b88:	3b01      	subs	r3, #1
 8003b8a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	689a      	ldr	r2, [r3, #8]
 8003b90:	69fb      	ldr	r3, [r7, #28]
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b96:	4293      	cmp	r3, r2
 8003b98:	bf28      	it	cs
 8003b9a:	4613      	movcs	r3, r2
 8003b9c:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8003b9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	bf28      	it	cs
 8003ba6:	4613      	movcs	r3, r2
 8003ba8:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	685a      	ldr	r2, [r3, #4]
 8003bae:	69fb      	ldr	r3, [r7, #28]
 8003bb0:	4413      	add	r3, r2
 8003bb2:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8003bb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bb6:	68b9      	ldr	r1, [r7, #8]
 8003bb8:	6978      	ldr	r0, [r7, #20]
 8003bba:	f002 f803 	bl	8005bc4 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8003bbe:	6a3a      	ldr	r2, [r7, #32]
 8003bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc2:	4413      	add	r3, r2
 8003bc4:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8003bc6:	68ba      	ldr	r2, [r7, #8]
 8003bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bca:	4413      	add	r3, r2
 8003bcc:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd2:	1ad3      	subs	r3, r2, r3
 8003bd4:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8003bd6:	69fa      	ldr	r2, [r7, #28]
 8003bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bda:	4413      	add	r3, r2
 8003bdc:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	69fa      	ldr	r2, [r7, #28]
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d101      	bne.n	8003bec <_WriteBlocking+0xa0>
      WrOff = 0u;
 8003be8:	2300      	movs	r3, #0
 8003bea:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003bec:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	69fa      	ldr	r2, [r7, #28]
 8003bf4:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d1b2      	bne.n	8003b62 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8003bfc:	6a3b      	ldr	r3, [r7, #32]
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3728      	adds	r7, #40	; 0x28
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}

08003c06 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8003c06:	b580      	push	{r7, lr}
 8003c08:	b088      	sub	sp, #32
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	60f8      	str	r0, [r7, #12]
 8003c0e:	60b9      	str	r1, [r7, #8]
 8003c10:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	68db      	ldr	r3, [r3, #12]
 8003c16:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	689a      	ldr	r2, [r3, #8]
 8003c1c:	69fb      	ldr	r3, [r7, #28]
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8003c22:	69ba      	ldr	r2, [r7, #24]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d911      	bls.n	8003c4e <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	685a      	ldr	r2, [r3, #4]
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	4413      	add	r3, r2
 8003c32:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	68b9      	ldr	r1, [r7, #8]
 8003c38:	6938      	ldr	r0, [r7, #16]
 8003c3a:	f001 ffc3 	bl	8005bc4 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003c3e:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8003c42:	69fa      	ldr	r2, [r7, #28]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	441a      	add	r2, r3
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8003c4c:	e01f      	b.n	8003c8e <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8003c4e:	69bb      	ldr	r3, [r7, #24]
 8003c50:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	685a      	ldr	r2, [r3, #4]
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	4413      	add	r3, r2
 8003c5a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8003c5c:	697a      	ldr	r2, [r7, #20]
 8003c5e:	68b9      	ldr	r1, [r7, #8]
 8003c60:	6938      	ldr	r0, [r7, #16]
 8003c62:	f001 ffaf 	bl	8005bc4 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	69bb      	ldr	r3, [r7, #24]
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8003c74:	68ba      	ldr	r2, [r7, #8]
 8003c76:	69bb      	ldr	r3, [r7, #24]
 8003c78:	4413      	add	r3, r2
 8003c7a:	697a      	ldr	r2, [r7, #20]
 8003c7c:	4619      	mov	r1, r3
 8003c7e:	6938      	ldr	r0, [r7, #16]
 8003c80:	f001 ffa0 	bl	8005bc4 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003c84:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	697a      	ldr	r2, [r7, #20]
 8003c8c:	60da      	str	r2, [r3, #12]
}
 8003c8e:	bf00      	nop
 8003c90:	3720      	adds	r7, #32
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}

08003c96 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8003c96:	b480      	push	{r7}
 8003c98:	b087      	sub	sp, #28
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	691b      	ldr	r3, [r3, #16]
 8003ca2:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8003caa:	693a      	ldr	r2, [r7, #16]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	d808      	bhi.n	8003cc4 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	689a      	ldr	r2, [r3, #8]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	1ad2      	subs	r2, r2, r3
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	4413      	add	r3, r2
 8003cbe:	3b01      	subs	r3, #1
 8003cc0:	617b      	str	r3, [r7, #20]
 8003cc2:	e004      	b.n	8003cce <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8003cc4:	693a      	ldr	r2, [r7, #16]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	3b01      	subs	r3, #1
 8003ccc:	617b      	str	r3, [r7, #20]
  }
  return r;
 8003cce:	697b      	ldr	r3, [r7, #20]
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	371c      	adds	r7, #28
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr

08003cdc <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b08c      	sub	sp, #48	; 0x30
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	60f8      	str	r0, [r7, #12]
 8003ce4:	60b9      	str	r1, [r7, #8]
 8003ce6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8003ce8:	4b3e      	ldr	r3, [pc, #248]	; (8003de4 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8003cea:	623b      	str	r3, [r7, #32]
 8003cec:	6a3b      	ldr	r3, [r7, #32]
 8003cee:	781b      	ldrb	r3, [r3, #0]
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d101      	bne.n	8003cfa <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8003cf6:	f7ff fed1 	bl	8003a9c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	1c5a      	adds	r2, r3, #1
 8003cfe:	4613      	mov	r3, r2
 8003d00:	005b      	lsls	r3, r3, #1
 8003d02:	4413      	add	r3, r2
 8003d04:	00db      	lsls	r3, r3, #3
 8003d06:	4a37      	ldr	r2, [pc, #220]	; (8003de4 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8003d08:	4413      	add	r3, r2
 8003d0a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8003d10:	69fb      	ldr	r3, [r7, #28]
 8003d12:	691b      	ldr	r3, [r3, #16]
 8003d14:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	68db      	ldr	r3, [r3, #12]
 8003d1a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003d20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d22:	69bb      	ldr	r3, [r7, #24]
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d92b      	bls.n	8003d80 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003d28:	69fb      	ldr	r3, [r7, #28]
 8003d2a:	689a      	ldr	r2, [r3, #8]
 8003d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d2e:	1ad3      	subs	r3, r2, r3
 8003d30:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003d32:	697a      	ldr	r2, [r7, #20]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	4293      	cmp	r3, r2
 8003d38:	bf28      	it	cs
 8003d3a:	4613      	movcs	r3, r2
 8003d3c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	685a      	ldr	r2, [r3, #4]
 8003d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d44:	4413      	add	r3, r2
 8003d46:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003d48:	697a      	ldr	r2, [r7, #20]
 8003d4a:	6939      	ldr	r1, [r7, #16]
 8003d4c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003d4e:	f001 ff39 	bl	8005bc4 <memcpy>
    NumBytesRead += NumBytesRem;
 8003d52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	4413      	add	r3, r2
 8003d58:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003d5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	4413      	add	r3, r2
 8003d60:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	1ad3      	subs	r3, r2, r3
 8003d68:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003d6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	4413      	add	r3, r2
 8003d70:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d101      	bne.n	8003d80 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003d80:	69ba      	ldr	r2, [r7, #24]
 8003d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003d88:	697a      	ldr	r2, [r7, #20]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	bf28      	it	cs
 8003d90:	4613      	movcs	r3, r2
 8003d92:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d019      	beq.n	8003dce <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	685a      	ldr	r2, [r3, #4]
 8003d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003da0:	4413      	add	r3, r2
 8003da2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003da4:	697a      	ldr	r2, [r7, #20]
 8003da6:	6939      	ldr	r1, [r7, #16]
 8003da8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003daa:	f001 ff0b 	bl	8005bc4 <memcpy>
    NumBytesRead += NumBytesRem;
 8003dae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	4413      	add	r3, r2
 8003db4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003db6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	4413      	add	r3, r2
 8003dbc:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003dc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	4413      	add	r3, r2
 8003dcc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8003dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d002      	beq.n	8003dda <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003dd4:	69fb      	ldr	r3, [r7, #28]
 8003dd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003dd8:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8003dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3730      	adds	r7, #48	; 0x30
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}
 8003de4:	20012e5c 	.word	0x20012e5c

08003de8 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b08c      	sub	sp, #48	; 0x30
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	60f8      	str	r0, [r7, #12]
 8003df0:	60b9      	str	r1, [r7, #8]
 8003df2:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8003df4:	4b3e      	ldr	r3, [pc, #248]	; (8003ef0 <SEGGER_RTT_ReadNoLock+0x108>)
 8003df6:	623b      	str	r3, [r7, #32]
 8003df8:	6a3b      	ldr	r3, [r7, #32]
 8003dfa:	781b      	ldrb	r3, [r3, #0]
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d101      	bne.n	8003e06 <SEGGER_RTT_ReadNoLock+0x1e>
 8003e02:	f7ff fe4b 	bl	8003a9c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003e06:	68fa      	ldr	r2, [r7, #12]
 8003e08:	4613      	mov	r3, r2
 8003e0a:	005b      	lsls	r3, r3, #1
 8003e0c:	4413      	add	r3, r2
 8003e0e:	00db      	lsls	r3, r3, #3
 8003e10:	3360      	adds	r3, #96	; 0x60
 8003e12:	4a37      	ldr	r2, [pc, #220]	; (8003ef0 <SEGGER_RTT_ReadNoLock+0x108>)
 8003e14:	4413      	add	r3, r2
 8003e16:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8003e1c:	69fb      	ldr	r3, [r7, #28]
 8003e1e:	691b      	ldr	r3, [r3, #16]
 8003e20:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8003e22:	69fb      	ldr	r3, [r7, #28]
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003e2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e2e:	69bb      	ldr	r3, [r7, #24]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d92b      	bls.n	8003e8c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	689a      	ldr	r2, [r3, #8]
 8003e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e3a:	1ad3      	subs	r3, r2, r3
 8003e3c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003e3e:	697a      	ldr	r2, [r7, #20]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	4293      	cmp	r3, r2
 8003e44:	bf28      	it	cs
 8003e46:	4613      	movcs	r3, r2
 8003e48:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003e4a:	69fb      	ldr	r3, [r7, #28]
 8003e4c:	685a      	ldr	r2, [r3, #4]
 8003e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e50:	4413      	add	r3, r2
 8003e52:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003e54:	697a      	ldr	r2, [r7, #20]
 8003e56:	6939      	ldr	r1, [r7, #16]
 8003e58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e5a:	f001 feb3 	bl	8005bc4 <memcpy>
    NumBytesRead += NumBytesRem;
 8003e5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	4413      	add	r3, r2
 8003e64:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003e66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	4413      	add	r3, r2
 8003e6c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003e76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	4413      	add	r3, r2
 8003e7c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003e7e:	69fb      	ldr	r3, [r7, #28]
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d101      	bne.n	8003e8c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003e8c:	69ba      	ldr	r2, [r7, #24]
 8003e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003e94:	697a      	ldr	r2, [r7, #20]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	bf28      	it	cs
 8003e9c:	4613      	movcs	r3, r2
 8003e9e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d019      	beq.n	8003eda <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	685a      	ldr	r2, [r3, #4]
 8003eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eac:	4413      	add	r3, r2
 8003eae:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003eb0:	697a      	ldr	r2, [r7, #20]
 8003eb2:	6939      	ldr	r1, [r7, #16]
 8003eb4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003eb6:	f001 fe85 	bl	8005bc4 <memcpy>
    NumBytesRead += NumBytesRem;
 8003eba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	4413      	add	r3, r2
 8003ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003ec2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	4413      	add	r3, r2
 8003ec8:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	1ad3      	subs	r3, r2, r3
 8003ed0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003ed2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	4413      	add	r3, r2
 8003ed8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8003eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d002      	beq.n	8003ee6 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003ee0:	69fb      	ldr	r3, [r7, #28]
 8003ee2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ee4:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8003ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3730      	adds	r7, #48	; 0x30
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}
 8003ef0:	20012e5c 	.word	0x20012e5c

08003ef4 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b088      	sub	sp, #32
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	60f8      	str	r0, [r7, #12]
 8003efc:	60b9      	str	r1, [r7, #8]
 8003efe:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003f04:	68fa      	ldr	r2, [r7, #12]
 8003f06:	4613      	mov	r3, r2
 8003f08:	005b      	lsls	r3, r3, #1
 8003f0a:	4413      	add	r3, r2
 8003f0c:	00db      	lsls	r3, r3, #3
 8003f0e:	3360      	adds	r3, #96	; 0x60
 8003f10:	4a1f      	ldr	r2, [pc, #124]	; (8003f90 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 8003f12:	4413      	add	r3, r2
 8003f14:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	695b      	ldr	r3, [r3, #20]
 8003f1a:	2b02      	cmp	r3, #2
 8003f1c:	d029      	beq.n	8003f72 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 8003f1e:	2b02      	cmp	r3, #2
 8003f20:	d82e      	bhi.n	8003f80 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d002      	beq.n	8003f2c <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d013      	beq.n	8003f52 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 8003f2a:	e029      	b.n	8003f80 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8003f2c:	6978      	ldr	r0, [r7, #20]
 8003f2e:	f7ff feb2 	bl	8003c96 <_GetAvailWriteSpace>
 8003f32:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8003f34:	693a      	ldr	r2, [r7, #16]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d202      	bcs.n	8003f42 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8003f40:	e021      	b.n	8003f86 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	69b9      	ldr	r1, [r7, #24]
 8003f4a:	6978      	ldr	r0, [r7, #20]
 8003f4c:	f7ff fe5b 	bl	8003c06 <_WriteNoCheck>
    break;
 8003f50:	e019      	b.n	8003f86 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8003f52:	6978      	ldr	r0, [r7, #20]
 8003f54:	f7ff fe9f 	bl	8003c96 <_GetAvailWriteSpace>
 8003f58:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	bf28      	it	cs
 8003f62:	4613      	movcs	r3, r2
 8003f64:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8003f66:	69fa      	ldr	r2, [r7, #28]
 8003f68:	69b9      	ldr	r1, [r7, #24]
 8003f6a:	6978      	ldr	r0, [r7, #20]
 8003f6c:	f7ff fe4b 	bl	8003c06 <_WriteNoCheck>
    break;
 8003f70:	e009      	b.n	8003f86 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	69b9      	ldr	r1, [r7, #24]
 8003f76:	6978      	ldr	r0, [r7, #20]
 8003f78:	f7ff fde8 	bl	8003b4c <_WriteBlocking>
 8003f7c:	61f8      	str	r0, [r7, #28]
    break;
 8003f7e:	e002      	b.n	8003f86 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8003f80:	2300      	movs	r3, #0
 8003f82:	61fb      	str	r3, [r7, #28]
    break;
 8003f84:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8003f86:	69fb      	ldr	r3, [r7, #28]
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3720      	adds	r7, #32
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}
 8003f90:	20012e5c 	.word	0x20012e5c

08003f94 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b088      	sub	sp, #32
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	60f8      	str	r0, [r7, #12]
 8003f9c:	60b9      	str	r1, [r7, #8]
 8003f9e:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8003fa0:	4b0e      	ldr	r3, [pc, #56]	; (8003fdc <SEGGER_RTT_WriteDownBuffer+0x48>)
 8003fa2:	61fb      	str	r3, [r7, #28]
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	781b      	ldrb	r3, [r3, #0]
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d101      	bne.n	8003fb2 <SEGGER_RTT_WriteDownBuffer+0x1e>
 8003fae:	f7ff fd75 	bl	8003a9c <_DoInit>
  SEGGER_RTT_LOCK();
 8003fb2:	f3ef 8311 	mrs	r3, BASEPRI
 8003fb6:	f04f 0120 	mov.w	r1, #32
 8003fba:	f381 8811 	msr	BASEPRI, r1
 8003fbe:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	68b9      	ldr	r1, [r7, #8]
 8003fc4:	68f8      	ldr	r0, [r7, #12]
 8003fc6:	f7ff ff95 	bl	8003ef4 <SEGGER_RTT_WriteDownBufferNoLock>
 8003fca:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8003fcc:	69bb      	ldr	r3, [r7, #24]
 8003fce:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8003fd2:	697b      	ldr	r3, [r7, #20]
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3720      	adds	r7, #32
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}
 8003fdc:	20012e5c 	.word	0x20012e5c

08003fe0 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b088      	sub	sp, #32
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	60f8      	str	r0, [r7, #12]
 8003fe8:	60b9      	str	r1, [r7, #8]
 8003fea:	607a      	str	r2, [r7, #4]
 8003fec:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8003fee:	4b3d      	ldr	r3, [pc, #244]	; (80040e4 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003ff0:	61bb      	str	r3, [r7, #24]
 8003ff2:	69bb      	ldr	r3, [r7, #24]
 8003ff4:	781b      	ldrb	r3, [r3, #0]
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d101      	bne.n	8004000 <SEGGER_RTT_AllocUpBuffer+0x20>
 8003ffc:	f7ff fd4e 	bl	8003a9c <_DoInit>
  SEGGER_RTT_LOCK();
 8004000:	f3ef 8311 	mrs	r3, BASEPRI
 8004004:	f04f 0120 	mov.w	r1, #32
 8004008:	f381 8811 	msr	BASEPRI, r1
 800400c:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800400e:	4b35      	ldr	r3, [pc, #212]	; (80040e4 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004010:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8004012:	2300      	movs	r3, #0
 8004014:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8004016:	6939      	ldr	r1, [r7, #16]
 8004018:	69fb      	ldr	r3, [r7, #28]
 800401a:	1c5a      	adds	r2, r3, #1
 800401c:	4613      	mov	r3, r2
 800401e:	005b      	lsls	r3, r3, #1
 8004020:	4413      	add	r3, r2
 8004022:	00db      	lsls	r3, r3, #3
 8004024:	440b      	add	r3, r1
 8004026:	3304      	adds	r3, #4
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d008      	beq.n	8004040 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800402e:	69fb      	ldr	r3, [r7, #28]
 8004030:	3301      	adds	r3, #1
 8004032:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	691b      	ldr	r3, [r3, #16]
 8004038:	69fa      	ldr	r2, [r7, #28]
 800403a:	429a      	cmp	r2, r3
 800403c:	dbeb      	blt.n	8004016 <SEGGER_RTT_AllocUpBuffer+0x36>
 800403e:	e000      	b.n	8004042 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8004040:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	691b      	ldr	r3, [r3, #16]
 8004046:	69fa      	ldr	r2, [r7, #28]
 8004048:	429a      	cmp	r2, r3
 800404a:	da3f      	bge.n	80040cc <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 800404c:	6939      	ldr	r1, [r7, #16]
 800404e:	69fb      	ldr	r3, [r7, #28]
 8004050:	1c5a      	adds	r2, r3, #1
 8004052:	4613      	mov	r3, r2
 8004054:	005b      	lsls	r3, r3, #1
 8004056:	4413      	add	r3, r2
 8004058:	00db      	lsls	r3, r3, #3
 800405a:	440b      	add	r3, r1
 800405c:	68fa      	ldr	r2, [r7, #12]
 800405e:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8004060:	6939      	ldr	r1, [r7, #16]
 8004062:	69fb      	ldr	r3, [r7, #28]
 8004064:	1c5a      	adds	r2, r3, #1
 8004066:	4613      	mov	r3, r2
 8004068:	005b      	lsls	r3, r3, #1
 800406a:	4413      	add	r3, r2
 800406c:	00db      	lsls	r3, r3, #3
 800406e:	440b      	add	r3, r1
 8004070:	3304      	adds	r3, #4
 8004072:	68ba      	ldr	r2, [r7, #8]
 8004074:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8004076:	6939      	ldr	r1, [r7, #16]
 8004078:	69fa      	ldr	r2, [r7, #28]
 800407a:	4613      	mov	r3, r2
 800407c:	005b      	lsls	r3, r3, #1
 800407e:	4413      	add	r3, r2
 8004080:	00db      	lsls	r3, r3, #3
 8004082:	440b      	add	r3, r1
 8004084:	3320      	adds	r3, #32
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800408a:	6939      	ldr	r1, [r7, #16]
 800408c:	69fa      	ldr	r2, [r7, #28]
 800408e:	4613      	mov	r3, r2
 8004090:	005b      	lsls	r3, r3, #1
 8004092:	4413      	add	r3, r2
 8004094:	00db      	lsls	r3, r3, #3
 8004096:	440b      	add	r3, r1
 8004098:	3328      	adds	r3, #40	; 0x28
 800409a:	2200      	movs	r2, #0
 800409c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800409e:	6939      	ldr	r1, [r7, #16]
 80040a0:	69fa      	ldr	r2, [r7, #28]
 80040a2:	4613      	mov	r3, r2
 80040a4:	005b      	lsls	r3, r3, #1
 80040a6:	4413      	add	r3, r2
 80040a8:	00db      	lsls	r3, r3, #3
 80040aa:	440b      	add	r3, r1
 80040ac:	3324      	adds	r3, #36	; 0x24
 80040ae:	2200      	movs	r2, #0
 80040b0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 80040b2:	6939      	ldr	r1, [r7, #16]
 80040b4:	69fa      	ldr	r2, [r7, #28]
 80040b6:	4613      	mov	r3, r2
 80040b8:	005b      	lsls	r3, r3, #1
 80040ba:	4413      	add	r3, r2
 80040bc:	00db      	lsls	r3, r3, #3
 80040be:	440b      	add	r3, r1
 80040c0:	332c      	adds	r3, #44	; 0x2c
 80040c2:	683a      	ldr	r2, [r7, #0]
 80040c4:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80040c6:	f3bf 8f5f 	dmb	sy
 80040ca:	e002      	b.n	80040d2 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 80040cc:	f04f 33ff 	mov.w	r3, #4294967295
 80040d0:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80040d8:	69fb      	ldr	r3, [r7, #28]
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3720      	adds	r7, #32
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	bf00      	nop
 80040e4:	20012e5c 	.word	0x20012e5c

080040e8 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b088      	sub	sp, #32
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	60f8      	str	r0, [r7, #12]
 80040f0:	60b9      	str	r1, [r7, #8]
 80040f2:	607a      	str	r2, [r7, #4]
 80040f4:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80040f6:	4b33      	ldr	r3, [pc, #204]	; (80041c4 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 80040f8:	61bb      	str	r3, [r7, #24]
 80040fa:	69bb      	ldr	r3, [r7, #24]
 80040fc:	781b      	ldrb	r3, [r3, #0]
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	2b00      	cmp	r3, #0
 8004102:	d101      	bne.n	8004108 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8004104:	f7ff fcca 	bl	8003a9c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004108:	4b2e      	ldr	r3, [pc, #184]	; (80041c4 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 800410a:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	695b      	ldr	r3, [r3, #20]
 8004110:	461a      	mov	r2, r3
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	4293      	cmp	r3, r2
 8004116:	d24d      	bcs.n	80041b4 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8004118:	f3ef 8311 	mrs	r3, BASEPRI
 800411c:	f04f 0120 	mov.w	r1, #32
 8004120:	f381 8811 	msr	BASEPRI, r1
 8004124:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d031      	beq.n	8004190 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 800412c:	6979      	ldr	r1, [r7, #20]
 800412e:	68fa      	ldr	r2, [r7, #12]
 8004130:	4613      	mov	r3, r2
 8004132:	005b      	lsls	r3, r3, #1
 8004134:	4413      	add	r3, r2
 8004136:	00db      	lsls	r3, r3, #3
 8004138:	440b      	add	r3, r1
 800413a:	3360      	adds	r3, #96	; 0x60
 800413c:	68ba      	ldr	r2, [r7, #8]
 800413e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8004140:	6979      	ldr	r1, [r7, #20]
 8004142:	68fa      	ldr	r2, [r7, #12]
 8004144:	4613      	mov	r3, r2
 8004146:	005b      	lsls	r3, r3, #1
 8004148:	4413      	add	r3, r2
 800414a:	00db      	lsls	r3, r3, #3
 800414c:	440b      	add	r3, r1
 800414e:	3364      	adds	r3, #100	; 0x64
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8004154:	6979      	ldr	r1, [r7, #20]
 8004156:	68fa      	ldr	r2, [r7, #12]
 8004158:	4613      	mov	r3, r2
 800415a:	005b      	lsls	r3, r3, #1
 800415c:	4413      	add	r3, r2
 800415e:	00db      	lsls	r3, r3, #3
 8004160:	440b      	add	r3, r1
 8004162:	3368      	adds	r3, #104	; 0x68
 8004164:	683a      	ldr	r2, [r7, #0]
 8004166:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8004168:	6979      	ldr	r1, [r7, #20]
 800416a:	68fa      	ldr	r2, [r7, #12]
 800416c:	4613      	mov	r3, r2
 800416e:	005b      	lsls	r3, r3, #1
 8004170:	4413      	add	r3, r2
 8004172:	00db      	lsls	r3, r3, #3
 8004174:	440b      	add	r3, r1
 8004176:	3370      	adds	r3, #112	; 0x70
 8004178:	2200      	movs	r2, #0
 800417a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 800417c:	6979      	ldr	r1, [r7, #20]
 800417e:	68fa      	ldr	r2, [r7, #12]
 8004180:	4613      	mov	r3, r2
 8004182:	005b      	lsls	r3, r3, #1
 8004184:	4413      	add	r3, r2
 8004186:	00db      	lsls	r3, r3, #3
 8004188:	440b      	add	r3, r1
 800418a:	336c      	adds	r3, #108	; 0x6c
 800418c:	2200      	movs	r2, #0
 800418e:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8004190:	6979      	ldr	r1, [r7, #20]
 8004192:	68fa      	ldr	r2, [r7, #12]
 8004194:	4613      	mov	r3, r2
 8004196:	005b      	lsls	r3, r3, #1
 8004198:	4413      	add	r3, r2
 800419a:	00db      	lsls	r3, r3, #3
 800419c:	440b      	add	r3, r1
 800419e:	3374      	adds	r3, #116	; 0x74
 80041a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041a2:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80041a4:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80041ae:	2300      	movs	r3, #0
 80041b0:	61fb      	str	r3, [r7, #28]
 80041b2:	e002      	b.n	80041ba <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 80041b4:	f04f 33ff 	mov.w	r3, #4294967295
 80041b8:	61fb      	str	r3, [r7, #28]
  }
  return r;
 80041ba:	69fb      	ldr	r3, [r7, #28]
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3720      	adds	r7, #32
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}
 80041c4:	20012e5c 	.word	0x20012e5c

080041c8 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80041c8:	b480      	push	{r7}
 80041ca:	b087      	sub	sp, #28
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	60f8      	str	r0, [r7, #12]
 80041d0:	60b9      	str	r1, [r7, #8]
 80041d2:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 80041d4:	2300      	movs	r3, #0
 80041d6:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80041d8:	e002      	b.n	80041e0 <_EncodeStr+0x18>
    Len++;
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	3301      	adds	r3, #1
 80041de:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80041e0:	68ba      	ldr	r2, [r7, #8]
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	4413      	add	r3, r2
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d1f6      	bne.n	80041da <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 80041ec:	693a      	ldr	r2, [r7, #16]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d901      	bls.n	80041f8 <_EncodeStr+0x30>
    Len = Limit;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	2bfe      	cmp	r3, #254	; 0xfe
 80041fc:	d806      	bhi.n	800420c <_EncodeStr+0x44>
    *pPayload++ = Len; 
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	1c5a      	adds	r2, r3, #1
 8004202:	60fa      	str	r2, [r7, #12]
 8004204:	693a      	ldr	r2, [r7, #16]
 8004206:	b2d2      	uxtb	r2, r2
 8004208:	701a      	strb	r2, [r3, #0]
 800420a:	e011      	b.n	8004230 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	1c5a      	adds	r2, r3, #1
 8004210:	60fa      	str	r2, [r7, #12]
 8004212:	22ff      	movs	r2, #255	; 0xff
 8004214:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	1c5a      	adds	r2, r3, #1
 800421a:	60fa      	str	r2, [r7, #12]
 800421c:	693a      	ldr	r2, [r7, #16]
 800421e:	b2d2      	uxtb	r2, r2
 8004220:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	0a19      	lsrs	r1, r3, #8
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	1c5a      	adds	r2, r3, #1
 800422a:	60fa      	str	r2, [r7, #12]
 800422c:	b2ca      	uxtb	r2, r1
 800422e:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8004230:	2300      	movs	r3, #0
 8004232:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8004234:	e00a      	b.n	800424c <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8004236:	68ba      	ldr	r2, [r7, #8]
 8004238:	1c53      	adds	r3, r2, #1
 800423a:	60bb      	str	r3, [r7, #8]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	1c59      	adds	r1, r3, #1
 8004240:	60f9      	str	r1, [r7, #12]
 8004242:	7812      	ldrb	r2, [r2, #0]
 8004244:	701a      	strb	r2, [r3, #0]
    n++;
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	3301      	adds	r3, #1
 800424a:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800424c:	697a      	ldr	r2, [r7, #20]
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	429a      	cmp	r2, r3
 8004252:	d3f0      	bcc.n	8004236 <_EncodeStr+0x6e>
  }
  return pPayload;
 8004254:	68fb      	ldr	r3, [r7, #12]
}
 8004256:	4618      	mov	r0, r3
 8004258:	371c      	adds	r7, #28
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr

08004262 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8004262:	b480      	push	{r7}
 8004264:	b083      	sub	sp, #12
 8004266:	af00      	add	r7, sp, #0
 8004268:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	3304      	adds	r3, #4
}
 800426e:	4618      	mov	r0, r3
 8004270:	370c      	adds	r7, #12
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr
	...

0800427c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800427c:	b580      	push	{r7, lr}
 800427e:	b082      	sub	sp, #8
 8004280:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004282:	4b36      	ldr	r3, [pc, #216]	; (800435c <_HandleIncomingPacket+0xe0>)
 8004284:	7e1b      	ldrb	r3, [r3, #24]
 8004286:	4618      	mov	r0, r3
 8004288:	1cfb      	adds	r3, r7, #3
 800428a:	2201      	movs	r2, #1
 800428c:	4619      	mov	r1, r3
 800428e:	f7ff fdab 	bl	8003de8 <SEGGER_RTT_ReadNoLock>
 8004292:	4603      	mov	r3, r0
 8004294:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2b00      	cmp	r3, #0
 800429a:	dd54      	ble.n	8004346 <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 800429c:	78fb      	ldrb	r3, [r7, #3]
 800429e:	2b80      	cmp	r3, #128	; 0x80
 80042a0:	d032      	beq.n	8004308 <_HandleIncomingPacket+0x8c>
 80042a2:	2b80      	cmp	r3, #128	; 0x80
 80042a4:	dc42      	bgt.n	800432c <_HandleIncomingPacket+0xb0>
 80042a6:	2b07      	cmp	r3, #7
 80042a8:	dc16      	bgt.n	80042d8 <_HandleIncomingPacket+0x5c>
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	dd3e      	ble.n	800432c <_HandleIncomingPacket+0xb0>
 80042ae:	3b01      	subs	r3, #1
 80042b0:	2b06      	cmp	r3, #6
 80042b2:	d83b      	bhi.n	800432c <_HandleIncomingPacket+0xb0>
 80042b4:	a201      	add	r2, pc, #4	; (adr r2, 80042bc <_HandleIncomingPacket+0x40>)
 80042b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ba:	bf00      	nop
 80042bc:	080042df 	.word	0x080042df
 80042c0:	080042e5 	.word	0x080042e5
 80042c4:	080042eb 	.word	0x080042eb
 80042c8:	080042f1 	.word	0x080042f1
 80042cc:	080042f7 	.word	0x080042f7
 80042d0:	080042fd 	.word	0x080042fd
 80042d4:	08004303 	.word	0x08004303
 80042d8:	2b7f      	cmp	r3, #127	; 0x7f
 80042da:	d036      	beq.n	800434a <_HandleIncomingPacket+0xce>
 80042dc:	e026      	b.n	800432c <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80042de:	f000 fe3d 	bl	8004f5c <SEGGER_SYSVIEW_Start>
      break;
 80042e2:	e037      	b.n	8004354 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80042e4:	f000 fef6 	bl	80050d4 <SEGGER_SYSVIEW_Stop>
      break;
 80042e8:	e034      	b.n	8004354 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80042ea:	f001 f8cf 	bl	800548c <SEGGER_SYSVIEW_RecordSystime>
      break;
 80042ee:	e031      	b.n	8004354 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80042f0:	f001 f894 	bl	800541c <SEGGER_SYSVIEW_SendTaskList>
      break;
 80042f4:	e02e      	b.n	8004354 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80042f6:	f000 ff13 	bl	8005120 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80042fa:	e02b      	b.n	8004354 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80042fc:	f001 fb52 	bl	80059a4 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8004300:	e028      	b.n	8004354 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8004302:	f001 fb31 	bl	8005968 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8004306:	e025      	b.n	8004354 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004308:	4b14      	ldr	r3, [pc, #80]	; (800435c <_HandleIncomingPacket+0xe0>)
 800430a:	7e1b      	ldrb	r3, [r3, #24]
 800430c:	4618      	mov	r0, r3
 800430e:	1cfb      	adds	r3, r7, #3
 8004310:	2201      	movs	r2, #1
 8004312:	4619      	mov	r1, r3
 8004314:	f7ff fd68 	bl	8003de8 <SEGGER_RTT_ReadNoLock>
 8004318:	4603      	mov	r3, r0
 800431a:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2b00      	cmp	r3, #0
 8004320:	dd15      	ble.n	800434e <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8004322:	78fb      	ldrb	r3, [r7, #3]
 8004324:	4618      	mov	r0, r3
 8004326:	f001 fa9f 	bl	8005868 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800432a:	e010      	b.n	800434e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800432c:	78fb      	ldrb	r3, [r7, #3]
 800432e:	b25b      	sxtb	r3, r3
 8004330:	2b00      	cmp	r3, #0
 8004332:	da0e      	bge.n	8004352 <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004334:	4b09      	ldr	r3, [pc, #36]	; (800435c <_HandleIncomingPacket+0xe0>)
 8004336:	7e1b      	ldrb	r3, [r3, #24]
 8004338:	4618      	mov	r0, r3
 800433a:	1cfb      	adds	r3, r7, #3
 800433c:	2201      	movs	r2, #1
 800433e:	4619      	mov	r1, r3
 8004340:	f7ff fd52 	bl	8003de8 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8004344:	e005      	b.n	8004352 <_HandleIncomingPacket+0xd6>
    }
  }
 8004346:	bf00      	nop
 8004348:	e004      	b.n	8004354 <_HandleIncomingPacket+0xd8>
      break;
 800434a:	bf00      	nop
 800434c:	e002      	b.n	8004354 <_HandleIncomingPacket+0xd8>
      break;
 800434e:	bf00      	nop
 8004350:	e000      	b.n	8004354 <_HandleIncomingPacket+0xd8>
      break;
 8004352:	bf00      	nop
}
 8004354:	bf00      	nop
 8004356:	3708      	adds	r7, #8
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}
 800435c:	2001431c 	.word	0x2001431c

08004360 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8004360:	b580      	push	{r7, lr}
 8004362:	b08c      	sub	sp, #48	; 0x30
 8004364:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8004366:	2301      	movs	r3, #1
 8004368:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800436a:	1d3b      	adds	r3, r7, #4
 800436c:	3301      	adds	r3, #1
 800436e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8004370:	69fb      	ldr	r3, [r7, #28]
 8004372:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004374:	4b32      	ldr	r3, [pc, #200]	; (8004440 <_TrySendOverflowPacket+0xe0>)
 8004376:	695b      	ldr	r3, [r3, #20]
 8004378:	62bb      	str	r3, [r7, #40]	; 0x28
 800437a:	e00b      	b.n	8004394 <_TrySendOverflowPacket+0x34>
 800437c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800437e:	b2da      	uxtb	r2, r3
 8004380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004382:	1c59      	adds	r1, r3, #1
 8004384:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004386:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800438a:	b2d2      	uxtb	r2, r2
 800438c:	701a      	strb	r2, [r3, #0]
 800438e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004390:	09db      	lsrs	r3, r3, #7
 8004392:	62bb      	str	r3, [r7, #40]	; 0x28
 8004394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004396:	2b7f      	cmp	r3, #127	; 0x7f
 8004398:	d8f0      	bhi.n	800437c <_TrySendOverflowPacket+0x1c>
 800439a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800439c:	1c5a      	adds	r2, r3, #1
 800439e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80043a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043a2:	b2d2      	uxtb	r2, r2
 80043a4:	701a      	strb	r2, [r3, #0]
 80043a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043a8:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80043aa:	4b26      	ldr	r3, [pc, #152]	; (8004444 <_TrySendOverflowPacket+0xe4>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80043b0:	4b23      	ldr	r3, [pc, #140]	; (8004440 <_TrySendOverflowPacket+0xe0>)
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	69ba      	ldr	r2, [r7, #24]
 80043b6:	1ad3      	subs	r3, r2, r3
 80043b8:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	627b      	str	r3, [r7, #36]	; 0x24
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	623b      	str	r3, [r7, #32]
 80043c2:	e00b      	b.n	80043dc <_TrySendOverflowPacket+0x7c>
 80043c4:	6a3b      	ldr	r3, [r7, #32]
 80043c6:	b2da      	uxtb	r2, r3
 80043c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ca:	1c59      	adds	r1, r3, #1
 80043cc:	6279      	str	r1, [r7, #36]	; 0x24
 80043ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80043d2:	b2d2      	uxtb	r2, r2
 80043d4:	701a      	strb	r2, [r3, #0]
 80043d6:	6a3b      	ldr	r3, [r7, #32]
 80043d8:	09db      	lsrs	r3, r3, #7
 80043da:	623b      	str	r3, [r7, #32]
 80043dc:	6a3b      	ldr	r3, [r7, #32]
 80043de:	2b7f      	cmp	r3, #127	; 0x7f
 80043e0:	d8f0      	bhi.n	80043c4 <_TrySendOverflowPacket+0x64>
 80043e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e4:	1c5a      	adds	r2, r3, #1
 80043e6:	627a      	str	r2, [r7, #36]	; 0x24
 80043e8:	6a3a      	ldr	r2, [r7, #32]
 80043ea:	b2d2      	uxtb	r2, r2
 80043ec:	701a      	strb	r2, [r3, #0]
 80043ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f0:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 80043f2:	4b13      	ldr	r3, [pc, #76]	; (8004440 <_TrySendOverflowPacket+0xe0>)
 80043f4:	785b      	ldrb	r3, [r3, #1]
 80043f6:	4618      	mov	r0, r3
 80043f8:	1d3b      	adds	r3, r7, #4
 80043fa:	69fa      	ldr	r2, [r7, #28]
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	461a      	mov	r2, r3
 8004400:	1d3b      	adds	r3, r7, #4
 8004402:	4619      	mov	r1, r3
 8004404:	f7fb fee4 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004408:	4603      	mov	r3, r0
 800440a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 800440c:	f7ff fabc 	bl	8003988 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d009      	beq.n	800442a <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004416:	4a0a      	ldr	r2, [pc, #40]	; (8004440 <_TrySendOverflowPacket+0xe0>)
 8004418:	69bb      	ldr	r3, [r7, #24]
 800441a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800441c:	4b08      	ldr	r3, [pc, #32]	; (8004440 <_TrySendOverflowPacket+0xe0>)
 800441e:	781b      	ldrb	r3, [r3, #0]
 8004420:	3b01      	subs	r3, #1
 8004422:	b2da      	uxtb	r2, r3
 8004424:	4b06      	ldr	r3, [pc, #24]	; (8004440 <_TrySendOverflowPacket+0xe0>)
 8004426:	701a      	strb	r2, [r3, #0]
 8004428:	e004      	b.n	8004434 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800442a:	4b05      	ldr	r3, [pc, #20]	; (8004440 <_TrySendOverflowPacket+0xe0>)
 800442c:	695b      	ldr	r3, [r3, #20]
 800442e:	3301      	adds	r3, #1
 8004430:	4a03      	ldr	r2, [pc, #12]	; (8004440 <_TrySendOverflowPacket+0xe0>)
 8004432:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8004434:	693b      	ldr	r3, [r7, #16]
}
 8004436:	4618      	mov	r0, r3
 8004438:	3730      	adds	r7, #48	; 0x30
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop
 8004440:	2001431c 	.word	0x2001431c
 8004444:	e0001004 	.word	0xe0001004

08004448 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004448:	b580      	push	{r7, lr}
 800444a:	b08a      	sub	sp, #40	; 0x28
 800444c:	af00      	add	r7, sp, #0
 800444e:	60f8      	str	r0, [r7, #12]
 8004450:	60b9      	str	r1, [r7, #8]
 8004452:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8004454:	4b6d      	ldr	r3, [pc, #436]	; (800460c <_SendPacket+0x1c4>)
 8004456:	781b      	ldrb	r3, [r3, #0]
 8004458:	2b01      	cmp	r3, #1
 800445a:	d010      	beq.n	800447e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800445c:	4b6b      	ldr	r3, [pc, #428]	; (800460c <_SendPacket+0x1c4>)
 800445e:	781b      	ldrb	r3, [r3, #0]
 8004460:	2b00      	cmp	r3, #0
 8004462:	f000 80a5 	beq.w	80045b0 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8004466:	4b69      	ldr	r3, [pc, #420]	; (800460c <_SendPacket+0x1c4>)
 8004468:	781b      	ldrb	r3, [r3, #0]
 800446a:	2b02      	cmp	r3, #2
 800446c:	d109      	bne.n	8004482 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800446e:	f7ff ff77 	bl	8004360 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8004472:	4b66      	ldr	r3, [pc, #408]	; (800460c <_SendPacket+0x1c4>)
 8004474:	781b      	ldrb	r3, [r3, #0]
 8004476:	2b01      	cmp	r3, #1
 8004478:	f040 809c 	bne.w	80045b4 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 800447c:	e001      	b.n	8004482 <_SendPacket+0x3a>
    goto Send;
 800447e:	bf00      	nop
 8004480:	e000      	b.n	8004484 <_SendPacket+0x3c>
Send:
 8004482:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2b1f      	cmp	r3, #31
 8004488:	d809      	bhi.n	800449e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800448a:	4b60      	ldr	r3, [pc, #384]	; (800460c <_SendPacket+0x1c4>)
 800448c:	69da      	ldr	r2, [r3, #28]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	fa22 f303 	lsr.w	r3, r2, r3
 8004494:	f003 0301 	and.w	r3, r3, #1
 8004498:	2b00      	cmp	r3, #0
 800449a:	f040 808d 	bne.w	80045b8 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2b17      	cmp	r3, #23
 80044a2:	d807      	bhi.n	80044b4 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	3b01      	subs	r3, #1
 80044a8:	60fb      	str	r3, [r7, #12]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	b2da      	uxtb	r2, r3
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	701a      	strb	r2, [r3, #0]
 80044b2:	e03d      	b.n	8004530 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 80044b4:	68ba      	ldr	r2, [r7, #8]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	1ad3      	subs	r3, r2, r3
 80044ba:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 80044bc:	69fb      	ldr	r3, [r7, #28]
 80044be:	2b7f      	cmp	r3, #127	; 0x7f
 80044c0:	d912      	bls.n	80044e8 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	09da      	lsrs	r2, r3, #7
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	3b01      	subs	r3, #1
 80044ca:	60fb      	str	r3, [r7, #12]
 80044cc:	b2d2      	uxtb	r2, r2
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 80044d2:	69fb      	ldr	r3, [r7, #28]
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	68fa      	ldr	r2, [r7, #12]
 80044d8:	3a01      	subs	r2, #1
 80044da:	60fa      	str	r2, [r7, #12]
 80044dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80044e0:	b2da      	uxtb	r2, r3
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	701a      	strb	r2, [r3, #0]
 80044e6:	e006      	b.n	80044f6 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	3b01      	subs	r3, #1
 80044ec:	60fb      	str	r3, [r7, #12]
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	b2da      	uxtb	r2, r3
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2b7f      	cmp	r3, #127	; 0x7f
 80044fa:	d912      	bls.n	8004522 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	09da      	lsrs	r2, r3, #7
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	3b01      	subs	r3, #1
 8004504:	60fb      	str	r3, [r7, #12]
 8004506:	b2d2      	uxtb	r2, r2
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	b2db      	uxtb	r3, r3
 8004510:	68fa      	ldr	r2, [r7, #12]
 8004512:	3a01      	subs	r2, #1
 8004514:	60fa      	str	r2, [r7, #12]
 8004516:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800451a:	b2da      	uxtb	r2, r3
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	701a      	strb	r2, [r3, #0]
 8004520:	e006      	b.n	8004530 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	3b01      	subs	r3, #1
 8004526:	60fb      	str	r3, [r7, #12]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	b2da      	uxtb	r2, r3
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004530:	4b37      	ldr	r3, [pc, #220]	; (8004610 <_SendPacket+0x1c8>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004536:	4b35      	ldr	r3, [pc, #212]	; (800460c <_SendPacket+0x1c4>)
 8004538:	68db      	ldr	r3, [r3, #12]
 800453a:	69ba      	ldr	r2, [r7, #24]
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	627b      	str	r3, [r7, #36]	; 0x24
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	623b      	str	r3, [r7, #32]
 8004548:	e00b      	b.n	8004562 <_SendPacket+0x11a>
 800454a:	6a3b      	ldr	r3, [r7, #32]
 800454c:	b2da      	uxtb	r2, r3
 800454e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004550:	1c59      	adds	r1, r3, #1
 8004552:	6279      	str	r1, [r7, #36]	; 0x24
 8004554:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004558:	b2d2      	uxtb	r2, r2
 800455a:	701a      	strb	r2, [r3, #0]
 800455c:	6a3b      	ldr	r3, [r7, #32]
 800455e:	09db      	lsrs	r3, r3, #7
 8004560:	623b      	str	r3, [r7, #32]
 8004562:	6a3b      	ldr	r3, [r7, #32]
 8004564:	2b7f      	cmp	r3, #127	; 0x7f
 8004566:	d8f0      	bhi.n	800454a <_SendPacket+0x102>
 8004568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456a:	1c5a      	adds	r2, r3, #1
 800456c:	627a      	str	r2, [r7, #36]	; 0x24
 800456e:	6a3a      	ldr	r2, [r7, #32]
 8004570:	b2d2      	uxtb	r2, r2
 8004572:	701a      	strb	r2, [r3, #0]
 8004574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004576:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8004578:	4b24      	ldr	r3, [pc, #144]	; (800460c <_SendPacket+0x1c4>)
 800457a:	785b      	ldrb	r3, [r3, #1]
 800457c:	4618      	mov	r0, r3
 800457e:	68ba      	ldr	r2, [r7, #8]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	1ad3      	subs	r3, r2, r3
 8004584:	461a      	mov	r2, r3
 8004586:	68f9      	ldr	r1, [r7, #12]
 8004588:	f7fb fe22 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800458c:	4603      	mov	r3, r0
 800458e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8004590:	f7ff f9fa 	bl	8003988 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d003      	beq.n	80045a2 <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800459a:	4a1c      	ldr	r2, [pc, #112]	; (800460c <_SendPacket+0x1c4>)
 800459c:	69bb      	ldr	r3, [r7, #24]
 800459e:	60d3      	str	r3, [r2, #12]
 80045a0:	e00b      	b.n	80045ba <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80045a2:	4b1a      	ldr	r3, [pc, #104]	; (800460c <_SendPacket+0x1c4>)
 80045a4:	781b      	ldrb	r3, [r3, #0]
 80045a6:	3301      	adds	r3, #1
 80045a8:	b2da      	uxtb	r2, r3
 80045aa:	4b18      	ldr	r3, [pc, #96]	; (800460c <_SendPacket+0x1c4>)
 80045ac:	701a      	strb	r2, [r3, #0]
 80045ae:	e004      	b.n	80045ba <_SendPacket+0x172>
    goto SendDone;
 80045b0:	bf00      	nop
 80045b2:	e002      	b.n	80045ba <_SendPacket+0x172>
      goto SendDone;
 80045b4:	bf00      	nop
 80045b6:	e000      	b.n	80045ba <_SendPacket+0x172>
      goto SendDone;
 80045b8:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80045ba:	4b14      	ldr	r3, [pc, #80]	; (800460c <_SendPacket+0x1c4>)
 80045bc:	7e1b      	ldrb	r3, [r3, #24]
 80045be:	4619      	mov	r1, r3
 80045c0:	4a14      	ldr	r2, [pc, #80]	; (8004614 <_SendPacket+0x1cc>)
 80045c2:	460b      	mov	r3, r1
 80045c4:	005b      	lsls	r3, r3, #1
 80045c6:	440b      	add	r3, r1
 80045c8:	00db      	lsls	r3, r3, #3
 80045ca:	4413      	add	r3, r2
 80045cc:	336c      	adds	r3, #108	; 0x6c
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	4b0e      	ldr	r3, [pc, #56]	; (800460c <_SendPacket+0x1c4>)
 80045d2:	7e1b      	ldrb	r3, [r3, #24]
 80045d4:	4618      	mov	r0, r3
 80045d6:	490f      	ldr	r1, [pc, #60]	; (8004614 <_SendPacket+0x1cc>)
 80045d8:	4603      	mov	r3, r0
 80045da:	005b      	lsls	r3, r3, #1
 80045dc:	4403      	add	r3, r0
 80045de:	00db      	lsls	r3, r3, #3
 80045e0:	440b      	add	r3, r1
 80045e2:	3370      	adds	r3, #112	; 0x70
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d00b      	beq.n	8004602 <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80045ea:	4b08      	ldr	r3, [pc, #32]	; (800460c <_SendPacket+0x1c4>)
 80045ec:	789b      	ldrb	r3, [r3, #2]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d107      	bne.n	8004602 <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80045f2:	4b06      	ldr	r3, [pc, #24]	; (800460c <_SendPacket+0x1c4>)
 80045f4:	2201      	movs	r2, #1
 80045f6:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80045f8:	f7ff fe40 	bl	800427c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80045fc:	4b03      	ldr	r3, [pc, #12]	; (800460c <_SendPacket+0x1c4>)
 80045fe:	2200      	movs	r2, #0
 8004600:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8004602:	bf00      	nop
 8004604:	3728      	adds	r7, #40	; 0x28
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
 800460a:	bf00      	nop
 800460c:	2001431c 	.word	0x2001431c
 8004610:	e0001004 	.word	0xe0001004
 8004614:	20012e5c 	.word	0x20012e5c

08004618 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8004618:	b580      	push	{r7, lr}
 800461a:	b08a      	sub	sp, #40	; 0x28
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
 8004620:	460b      	mov	r3, r1
 8004622:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	691b      	ldr	r3, [r3, #16]
 8004628:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	3301      	adds	r3, #1
 800462e:	2b80      	cmp	r3, #128	; 0x80
 8004630:	d80a      	bhi.n	8004648 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	1c59      	adds	r1, r3, #1
 8004638:	687a      	ldr	r2, [r7, #4]
 800463a:	6051      	str	r1, [r2, #4]
 800463c:	78fa      	ldrb	r2, [r7, #3]
 800463e:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	1c5a      	adds	r2, r3, #1
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	691b      	ldr	r3, [r3, #16]
 800464c:	2b80      	cmp	r3, #128	; 0x80
 800464e:	d15a      	bne.n	8004706 <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	691a      	ldr	r2, [r3, #16]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	b2d2      	uxtb	r2, r2
 800465a:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	68db      	ldr	r3, [r3, #12]
 8004666:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	627b      	str	r3, [r7, #36]	; 0x24
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	623b      	str	r3, [r7, #32]
 8004670:	e00b      	b.n	800468a <_StoreChar+0x72>
 8004672:	6a3b      	ldr	r3, [r7, #32]
 8004674:	b2da      	uxtb	r2, r3
 8004676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004678:	1c59      	adds	r1, r3, #1
 800467a:	6279      	str	r1, [r7, #36]	; 0x24
 800467c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004680:	b2d2      	uxtb	r2, r2
 8004682:	701a      	strb	r2, [r3, #0]
 8004684:	6a3b      	ldr	r3, [r7, #32]
 8004686:	09db      	lsrs	r3, r3, #7
 8004688:	623b      	str	r3, [r7, #32]
 800468a:	6a3b      	ldr	r3, [r7, #32]
 800468c:	2b7f      	cmp	r3, #127	; 0x7f
 800468e:	d8f0      	bhi.n	8004672 <_StoreChar+0x5a>
 8004690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004692:	1c5a      	adds	r2, r3, #1
 8004694:	627a      	str	r2, [r7, #36]	; 0x24
 8004696:	6a3a      	ldr	r2, [r7, #32]
 8004698:	b2d2      	uxtb	r2, r2
 800469a:	701a      	strb	r2, [r3, #0]
 800469c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469e:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	61fb      	str	r3, [r7, #28]
 80046a4:	2300      	movs	r3, #0
 80046a6:	61bb      	str	r3, [r7, #24]
 80046a8:	e00b      	b.n	80046c2 <_StoreChar+0xaa>
 80046aa:	69bb      	ldr	r3, [r7, #24]
 80046ac:	b2da      	uxtb	r2, r3
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	1c59      	adds	r1, r3, #1
 80046b2:	61f9      	str	r1, [r7, #28]
 80046b4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80046b8:	b2d2      	uxtb	r2, r2
 80046ba:	701a      	strb	r2, [r3, #0]
 80046bc:	69bb      	ldr	r3, [r7, #24]
 80046be:	09db      	lsrs	r3, r3, #7
 80046c0:	61bb      	str	r3, [r7, #24]
 80046c2:	69bb      	ldr	r3, [r7, #24]
 80046c4:	2b7f      	cmp	r3, #127	; 0x7f
 80046c6:	d8f0      	bhi.n	80046aa <_StoreChar+0x92>
 80046c8:	69fb      	ldr	r3, [r7, #28]
 80046ca:	1c5a      	adds	r2, r3, #1
 80046cc:	61fa      	str	r2, [r7, #28]
 80046ce:	69ba      	ldr	r2, [r7, #24]
 80046d0:	b2d2      	uxtb	r2, r2
 80046d2:	701a      	strb	r2, [r3, #0]
 80046d4:	69fb      	ldr	r3, [r7, #28]
 80046d6:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	221a      	movs	r2, #26
 80046de:	6939      	ldr	r1, [r7, #16]
 80046e0:	4618      	mov	r0, r3
 80046e2:	f7ff feb1 	bl	8004448 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4618      	mov	r0, r3
 80046ec:	f7ff fdb9 	bl	8004262 <_PreparePacket>
 80046f0:	4602      	mov	r2, r0
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	1c5a      	adds	r2, r3, #1
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2200      	movs	r2, #0
 8004704:	611a      	str	r2, [r3, #16]
  }
}
 8004706:	bf00      	nop
 8004708:	3728      	adds	r7, #40	; 0x28
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}
	...

08004710 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8004710:	b580      	push	{r7, lr}
 8004712:	b08a      	sub	sp, #40	; 0x28
 8004714:	af00      	add	r7, sp, #0
 8004716:	60f8      	str	r0, [r7, #12]
 8004718:	60b9      	str	r1, [r7, #8]
 800471a:	607a      	str	r2, [r7, #4]
 800471c:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8004722:	2301      	movs	r3, #1
 8004724:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8004726:	2301      	movs	r3, #1
 8004728:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 800472a:	e007      	b.n	800473c <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 800472c:	6a3a      	ldr	r2, [r7, #32]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	fbb2 f3f3 	udiv	r3, r2, r3
 8004734:	623b      	str	r3, [r7, #32]
    Width++;
 8004736:	69fb      	ldr	r3, [r7, #28]
 8004738:	3301      	adds	r3, #1
 800473a:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 800473c:	6a3a      	ldr	r2, [r7, #32]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	429a      	cmp	r2, r3
 8004742:	d2f3      	bcs.n	800472c <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8004744:	683a      	ldr	r2, [r7, #0]
 8004746:	69fb      	ldr	r3, [r7, #28]
 8004748:	429a      	cmp	r2, r3
 800474a:	d901      	bls.n	8004750 <_PrintUnsigned+0x40>
    Width = NumDigits;
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8004750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004752:	f003 0301 	and.w	r3, r3, #1
 8004756:	2b00      	cmp	r3, #0
 8004758:	d11f      	bne.n	800479a <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 800475a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800475c:	2b00      	cmp	r3, #0
 800475e:	d01c      	beq.n	800479a <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8004760:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004762:	f003 0302 	and.w	r3, r3, #2
 8004766:	2b00      	cmp	r3, #0
 8004768:	d005      	beq.n	8004776 <_PrintUnsigned+0x66>
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d102      	bne.n	8004776 <_PrintUnsigned+0x66>
        c = '0';
 8004770:	2330      	movs	r3, #48	; 0x30
 8004772:	76fb      	strb	r3, [r7, #27]
 8004774:	e001      	b.n	800477a <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8004776:	2320      	movs	r3, #32
 8004778:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800477a:	e007      	b.n	800478c <_PrintUnsigned+0x7c>
        FieldWidth--;
 800477c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800477e:	3b01      	subs	r3, #1
 8004780:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8004782:	7efb      	ldrb	r3, [r7, #27]
 8004784:	4619      	mov	r1, r3
 8004786:	68f8      	ldr	r0, [r7, #12]
 8004788:	f7ff ff46 	bl	8004618 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800478c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800478e:	2b00      	cmp	r3, #0
 8004790:	d003      	beq.n	800479a <_PrintUnsigned+0x8a>
 8004792:	69fa      	ldr	r2, [r7, #28]
 8004794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004796:	429a      	cmp	r2, r3
 8004798:	d3f0      	bcc.n	800477c <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	2b01      	cmp	r3, #1
 800479e:	d903      	bls.n	80047a8 <_PrintUnsigned+0x98>
      NumDigits--;
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	3b01      	subs	r3, #1
 80047a4:	603b      	str	r3, [r7, #0]
 80047a6:	e009      	b.n	80047bc <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 80047a8:	68ba      	ldr	r2, [r7, #8]
 80047aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80047b0:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 80047b2:	697a      	ldr	r2, [r7, #20]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d200      	bcs.n	80047bc <_PrintUnsigned+0xac>
        break;
 80047ba:	e005      	b.n	80047c8 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 80047bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	fb02 f303 	mul.w	r3, r2, r3
 80047c4:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80047c6:	e7e8      	b.n	800479a <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 80047c8:	68ba      	ldr	r2, [r7, #8]
 80047ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80047d0:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047d6:	fb02 f303 	mul.w	r3, r2, r3
 80047da:	68ba      	ldr	r2, [r7, #8]
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 80047e0:	4a15      	ldr	r2, [pc, #84]	; (8004838 <_PrintUnsigned+0x128>)
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	4413      	add	r3, r2
 80047e6:	781b      	ldrb	r3, [r3, #0]
 80047e8:	4619      	mov	r1, r3
 80047ea:	68f8      	ldr	r0, [r7, #12]
 80047ec:	f7ff ff14 	bl	8004618 <_StoreChar>
    Digit /= Base;
 80047f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80047f8:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 80047fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d1e3      	bne.n	80047c8 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8004800:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004802:	f003 0301 	and.w	r3, r3, #1
 8004806:	2b00      	cmp	r3, #0
 8004808:	d011      	beq.n	800482e <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 800480a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800480c:	2b00      	cmp	r3, #0
 800480e:	d00e      	beq.n	800482e <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004810:	e006      	b.n	8004820 <_PrintUnsigned+0x110>
        FieldWidth--;
 8004812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004814:	3b01      	subs	r3, #1
 8004816:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8004818:	2120      	movs	r1, #32
 800481a:	68f8      	ldr	r0, [r7, #12]
 800481c:	f7ff fefc 	bl	8004618 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004822:	2b00      	cmp	r3, #0
 8004824:	d003      	beq.n	800482e <_PrintUnsigned+0x11e>
 8004826:	69fa      	ldr	r2, [r7, #28]
 8004828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800482a:	429a      	cmp	r2, r3
 800482c:	d3f1      	bcc.n	8004812 <_PrintUnsigned+0x102>
      }
    }
  }
}
 800482e:	bf00      	nop
 8004830:	3728      	adds	r7, #40	; 0x28
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
 8004836:	bf00      	nop
 8004838:	08005d78 	.word	0x08005d78

0800483c <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 800483c:	b580      	push	{r7, lr}
 800483e:	b088      	sub	sp, #32
 8004840:	af02      	add	r7, sp, #8
 8004842:	60f8      	str	r0, [r7, #12]
 8004844:	60b9      	str	r1, [r7, #8]
 8004846:	607a      	str	r2, [r7, #4]
 8004848:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	2b00      	cmp	r3, #0
 800484e:	bfb8      	it	lt
 8004850:	425b      	neglt	r3, r3
 8004852:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8004854:	2301      	movs	r3, #1
 8004856:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8004858:	e007      	b.n	800486a <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	693a      	ldr	r2, [r7, #16]
 800485e:	fb92 f3f3 	sdiv	r3, r2, r3
 8004862:	613b      	str	r3, [r7, #16]
    Width++;
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	3301      	adds	r3, #1
 8004868:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	693a      	ldr	r2, [r7, #16]
 800486e:	429a      	cmp	r2, r3
 8004870:	daf3      	bge.n	800485a <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8004872:	683a      	ldr	r2, [r7, #0]
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	429a      	cmp	r2, r3
 8004878:	d901      	bls.n	800487e <_PrintInt+0x42>
    Width = NumDigits;
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 800487e:	6a3b      	ldr	r3, [r7, #32]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d00a      	beq.n	800489a <_PrintInt+0x5e>
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	2b00      	cmp	r3, #0
 8004888:	db04      	blt.n	8004894 <_PrintInt+0x58>
 800488a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488c:	f003 0304 	and.w	r3, r3, #4
 8004890:	2b00      	cmp	r3, #0
 8004892:	d002      	beq.n	800489a <_PrintInt+0x5e>
    FieldWidth--;
 8004894:	6a3b      	ldr	r3, [r7, #32]
 8004896:	3b01      	subs	r3, #1
 8004898:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 800489a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489c:	f003 0302 	and.w	r3, r3, #2
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d002      	beq.n	80048aa <_PrintInt+0x6e>
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d016      	beq.n	80048d8 <_PrintInt+0x9c>
 80048aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ac:	f003 0301 	and.w	r3, r3, #1
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d111      	bne.n	80048d8 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 80048b4:	6a3b      	ldr	r3, [r7, #32]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d00e      	beq.n	80048d8 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80048ba:	e006      	b.n	80048ca <_PrintInt+0x8e>
        FieldWidth--;
 80048bc:	6a3b      	ldr	r3, [r7, #32]
 80048be:	3b01      	subs	r3, #1
 80048c0:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 80048c2:	2120      	movs	r1, #32
 80048c4:	68f8      	ldr	r0, [r7, #12]
 80048c6:	f7ff fea7 	bl	8004618 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80048ca:	6a3b      	ldr	r3, [r7, #32]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d003      	beq.n	80048d8 <_PrintInt+0x9c>
 80048d0:	697a      	ldr	r2, [r7, #20]
 80048d2:	6a3b      	ldr	r3, [r7, #32]
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d3f1      	bcc.n	80048bc <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	da07      	bge.n	80048ee <_PrintInt+0xb2>
    v = -v;
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	425b      	negs	r3, r3
 80048e2:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 80048e4:	212d      	movs	r1, #45	; 0x2d
 80048e6:	68f8      	ldr	r0, [r7, #12]
 80048e8:	f7ff fe96 	bl	8004618 <_StoreChar>
 80048ec:	e008      	b.n	8004900 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 80048ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f0:	f003 0304 	and.w	r3, r3, #4
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d003      	beq.n	8004900 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 80048f8:	212b      	movs	r1, #43	; 0x2b
 80048fa:	68f8      	ldr	r0, [r7, #12]
 80048fc:	f7ff fe8c 	bl	8004618 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8004900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004902:	f003 0302 	and.w	r3, r3, #2
 8004906:	2b00      	cmp	r3, #0
 8004908:	d019      	beq.n	800493e <_PrintInt+0x102>
 800490a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490c:	f003 0301 	and.w	r3, r3, #1
 8004910:	2b00      	cmp	r3, #0
 8004912:	d114      	bne.n	800493e <_PrintInt+0x102>
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d111      	bne.n	800493e <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 800491a:	6a3b      	ldr	r3, [r7, #32]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d00e      	beq.n	800493e <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004920:	e006      	b.n	8004930 <_PrintInt+0xf4>
        FieldWidth--;
 8004922:	6a3b      	ldr	r3, [r7, #32]
 8004924:	3b01      	subs	r3, #1
 8004926:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8004928:	2130      	movs	r1, #48	; 0x30
 800492a:	68f8      	ldr	r0, [r7, #12]
 800492c:	f7ff fe74 	bl	8004618 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004930:	6a3b      	ldr	r3, [r7, #32]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d003      	beq.n	800493e <_PrintInt+0x102>
 8004936:	697a      	ldr	r2, [r7, #20]
 8004938:	6a3b      	ldr	r3, [r7, #32]
 800493a:	429a      	cmp	r2, r3
 800493c:	d3f1      	bcc.n	8004922 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 800493e:	68b9      	ldr	r1, [r7, #8]
 8004940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004942:	9301      	str	r3, [sp, #4]
 8004944:	6a3b      	ldr	r3, [r7, #32]
 8004946:	9300      	str	r3, [sp, #0]
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	68f8      	ldr	r0, [r7, #12]
 800494e:	f7ff fedf 	bl	8004710 <_PrintUnsigned>
}
 8004952:	bf00      	nop
 8004954:	3718      	adds	r7, #24
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}
	...

0800495c <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 800495c:	b580      	push	{r7, lr}
 800495e:	b098      	sub	sp, #96	; 0x60
 8004960:	af02      	add	r7, sp, #8
 8004962:	60f8      	str	r0, [r7, #12]
 8004964:	60b9      	str	r1, [r7, #8]
 8004966:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004968:	f3ef 8311 	mrs	r3, BASEPRI
 800496c:	f04f 0120 	mov.w	r1, #32
 8004970:	f381 8811 	msr	BASEPRI, r1
 8004974:	633b      	str	r3, [r7, #48]	; 0x30
 8004976:	48b7      	ldr	r0, [pc, #732]	; (8004c54 <_VPrintTarget+0x2f8>)
 8004978:	f7ff fc73 	bl	8004262 <_PreparePacket>
 800497c:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 800497e:	4bb5      	ldr	r3, [pc, #724]	; (8004c54 <_VPrintTarget+0x2f8>)
 8004980:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 8004982:	2300      	movs	r3, #0
 8004984:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 8004986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004988:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 800498a:	69fb      	ldr	r3, [r7, #28]
 800498c:	3301      	adds	r3, #1
 800498e:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	781b      	ldrb	r3, [r3, #0]
 8004998:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	3301      	adds	r3, #1
 80049a0:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 80049a2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	f000 8183 	beq.w	8004cb2 <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 80049ac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80049b0:	2b25      	cmp	r3, #37	; 0x25
 80049b2:	f040 8170 	bne.w	8004c96 <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 80049b6:	2300      	movs	r3, #0
 80049b8:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 80049ba:	2301      	movs	r3, #1
 80049bc:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	781b      	ldrb	r3, [r3, #0]
 80049c2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 80049c6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80049ca:	3b23      	subs	r3, #35	; 0x23
 80049cc:	2b0d      	cmp	r3, #13
 80049ce:	d83f      	bhi.n	8004a50 <_VPrintTarget+0xf4>
 80049d0:	a201      	add	r2, pc, #4	; (adr r2, 80049d8 <_VPrintTarget+0x7c>)
 80049d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049d6:	bf00      	nop
 80049d8:	08004a41 	.word	0x08004a41
 80049dc:	08004a51 	.word	0x08004a51
 80049e0:	08004a51 	.word	0x08004a51
 80049e4:	08004a51 	.word	0x08004a51
 80049e8:	08004a51 	.word	0x08004a51
 80049ec:	08004a51 	.word	0x08004a51
 80049f0:	08004a51 	.word	0x08004a51
 80049f4:	08004a51 	.word	0x08004a51
 80049f8:	08004a31 	.word	0x08004a31
 80049fc:	08004a51 	.word	0x08004a51
 8004a00:	08004a11 	.word	0x08004a11
 8004a04:	08004a51 	.word	0x08004a51
 8004a08:	08004a51 	.word	0x08004a51
 8004a0c:	08004a21 	.word	0x08004a21
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8004a10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a12:	f043 0301 	orr.w	r3, r3, #1
 8004a16:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	3301      	adds	r3, #1
 8004a1c:	60fb      	str	r3, [r7, #12]
 8004a1e:	e01a      	b.n	8004a56 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8004a20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a22:	f043 0302 	orr.w	r3, r3, #2
 8004a26:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	3301      	adds	r3, #1
 8004a2c:	60fb      	str	r3, [r7, #12]
 8004a2e:	e012      	b.n	8004a56 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8004a30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a32:	f043 0304 	orr.w	r3, r3, #4
 8004a36:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	3301      	adds	r3, #1
 8004a3c:	60fb      	str	r3, [r7, #12]
 8004a3e:	e00a      	b.n	8004a56 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8004a40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a42:	f043 0308 	orr.w	r3, r3, #8
 8004a46:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	3301      	adds	r3, #1
 8004a4c:	60fb      	str	r3, [r7, #12]
 8004a4e:	e002      	b.n	8004a56 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8004a50:	2300      	movs	r3, #0
 8004a52:	653b      	str	r3, [r7, #80]	; 0x50
 8004a54:	bf00      	nop
        }
      } while (v);
 8004a56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d1b0      	bne.n	80049be <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	781b      	ldrb	r3, [r3, #0]
 8004a64:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8004a68:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004a6c:	2b2f      	cmp	r3, #47	; 0x2f
 8004a6e:	d912      	bls.n	8004a96 <_VPrintTarget+0x13a>
 8004a70:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004a74:	2b39      	cmp	r3, #57	; 0x39
 8004a76:	d80e      	bhi.n	8004a96 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	3301      	adds	r3, #1
 8004a7c:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8004a7e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a80:	4613      	mov	r3, r2
 8004a82:	009b      	lsls	r3, r3, #2
 8004a84:	4413      	add	r3, r2
 8004a86:	005b      	lsls	r3, r3, #1
 8004a88:	461a      	mov	r2, r3
 8004a8a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004a8e:	4413      	add	r3, r2
 8004a90:	3b30      	subs	r3, #48	; 0x30
 8004a92:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8004a94:	e7e4      	b.n	8004a60 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8004a96:	2300      	movs	r3, #0
 8004a98:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	781b      	ldrb	r3, [r3, #0]
 8004a9e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 8004aa2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004aa6:	2b2e      	cmp	r3, #46	; 0x2e
 8004aa8:	d11d      	bne.n	8004ae6 <_VPrintTarget+0x18a>
        sFormat++;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	3301      	adds	r3, #1
 8004aae:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	781b      	ldrb	r3, [r3, #0]
 8004ab4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8004ab8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004abc:	2b2f      	cmp	r3, #47	; 0x2f
 8004abe:	d912      	bls.n	8004ae6 <_VPrintTarget+0x18a>
 8004ac0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004ac4:	2b39      	cmp	r3, #57	; 0x39
 8004ac6:	d80e      	bhi.n	8004ae6 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	3301      	adds	r3, #1
 8004acc:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8004ace:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004ad0:	4613      	mov	r3, r2
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	4413      	add	r3, r2
 8004ad6:	005b      	lsls	r3, r3, #1
 8004ad8:	461a      	mov	r2, r3
 8004ada:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004ade:	4413      	add	r3, r2
 8004ae0:	3b30      	subs	r3, #48	; 0x30
 8004ae2:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8004ae4:	e7e4      	b.n	8004ab0 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	781b      	ldrb	r3, [r3, #0]
 8004aea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8004aee:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004af2:	2b6c      	cmp	r3, #108	; 0x6c
 8004af4:	d003      	beq.n	8004afe <_VPrintTarget+0x1a2>
 8004af6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004afa:	2b68      	cmp	r3, #104	; 0x68
 8004afc:	d107      	bne.n	8004b0e <_VPrintTarget+0x1b2>
          c = *sFormat;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	781b      	ldrb	r3, [r3, #0]
 8004b02:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	3301      	adds	r3, #1
 8004b0a:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8004b0c:	e7ef      	b.n	8004aee <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8004b0e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004b12:	2b25      	cmp	r3, #37	; 0x25
 8004b14:	f000 80b3 	beq.w	8004c7e <_VPrintTarget+0x322>
 8004b18:	2b25      	cmp	r3, #37	; 0x25
 8004b1a:	f2c0 80b7 	blt.w	8004c8c <_VPrintTarget+0x330>
 8004b1e:	2b78      	cmp	r3, #120	; 0x78
 8004b20:	f300 80b4 	bgt.w	8004c8c <_VPrintTarget+0x330>
 8004b24:	2b58      	cmp	r3, #88	; 0x58
 8004b26:	f2c0 80b1 	blt.w	8004c8c <_VPrintTarget+0x330>
 8004b2a:	3b58      	subs	r3, #88	; 0x58
 8004b2c:	2b20      	cmp	r3, #32
 8004b2e:	f200 80ad 	bhi.w	8004c8c <_VPrintTarget+0x330>
 8004b32:	a201      	add	r2, pc, #4	; (adr r2, 8004b38 <_VPrintTarget+0x1dc>)
 8004b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b38:	08004c2f 	.word	0x08004c2f
 8004b3c:	08004c8d 	.word	0x08004c8d
 8004b40:	08004c8d 	.word	0x08004c8d
 8004b44:	08004c8d 	.word	0x08004c8d
 8004b48:	08004c8d 	.word	0x08004c8d
 8004b4c:	08004c8d 	.word	0x08004c8d
 8004b50:	08004c8d 	.word	0x08004c8d
 8004b54:	08004c8d 	.word	0x08004c8d
 8004b58:	08004c8d 	.word	0x08004c8d
 8004b5c:	08004c8d 	.word	0x08004c8d
 8004b60:	08004c8d 	.word	0x08004c8d
 8004b64:	08004bbd 	.word	0x08004bbd
 8004b68:	08004be3 	.word	0x08004be3
 8004b6c:	08004c8d 	.word	0x08004c8d
 8004b70:	08004c8d 	.word	0x08004c8d
 8004b74:	08004c8d 	.word	0x08004c8d
 8004b78:	08004c8d 	.word	0x08004c8d
 8004b7c:	08004c8d 	.word	0x08004c8d
 8004b80:	08004c8d 	.word	0x08004c8d
 8004b84:	08004c8d 	.word	0x08004c8d
 8004b88:	08004c8d 	.word	0x08004c8d
 8004b8c:	08004c8d 	.word	0x08004c8d
 8004b90:	08004c8d 	.word	0x08004c8d
 8004b94:	08004c8d 	.word	0x08004c8d
 8004b98:	08004c59 	.word	0x08004c59
 8004b9c:	08004c8d 	.word	0x08004c8d
 8004ba0:	08004c8d 	.word	0x08004c8d
 8004ba4:	08004c8d 	.word	0x08004c8d
 8004ba8:	08004c8d 	.word	0x08004c8d
 8004bac:	08004c09 	.word	0x08004c09
 8004bb0:	08004c8d 	.word	0x08004c8d
 8004bb4:	08004c8d 	.word	0x08004c8d
 8004bb8:	08004c2f 	.word	0x08004c2f
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	1d19      	adds	r1, r3, #4
 8004bc2:	687a      	ldr	r2, [r7, #4]
 8004bc4:	6011      	str	r1, [r2, #0]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8004bca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bcc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 8004bd0:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8004bd4:	f107 0314 	add.w	r3, r7, #20
 8004bd8:	4611      	mov	r1, r2
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f7ff fd1c 	bl	8004618 <_StoreChar>
        break;
 8004be0:	e055      	b.n	8004c8e <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	1d19      	adds	r1, r3, #4
 8004be8:	687a      	ldr	r2, [r7, #4]
 8004bea:	6011      	str	r1, [r2, #0]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8004bf0:	f107 0014 	add.w	r0, r7, #20
 8004bf4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bf6:	9301      	str	r3, [sp, #4]
 8004bf8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bfa:	9300      	str	r3, [sp, #0]
 8004bfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bfe:	220a      	movs	r2, #10
 8004c00:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004c02:	f7ff fe1b 	bl	800483c <_PrintInt>
        break;
 8004c06:	e042      	b.n	8004c8e <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	1d19      	adds	r1, r3, #4
 8004c0e:	687a      	ldr	r2, [r7, #4]
 8004c10:	6011      	str	r1, [r2, #0]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8004c16:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004c18:	f107 0014 	add.w	r0, r7, #20
 8004c1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c1e:	9301      	str	r3, [sp, #4]
 8004c20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c22:	9300      	str	r3, [sp, #0]
 8004c24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c26:	220a      	movs	r2, #10
 8004c28:	f7ff fd72 	bl	8004710 <_PrintUnsigned>
        break;
 8004c2c:	e02f      	b.n	8004c8e <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	1d19      	adds	r1, r3, #4
 8004c34:	687a      	ldr	r2, [r7, #4]
 8004c36:	6011      	str	r1, [r2, #0]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8004c3c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004c3e:	f107 0014 	add.w	r0, r7, #20
 8004c42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c44:	9301      	str	r3, [sp, #4]
 8004c46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c48:	9300      	str	r3, [sp, #0]
 8004c4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c4c:	2210      	movs	r2, #16
 8004c4e:	f7ff fd5f 	bl	8004710 <_PrintUnsigned>
        break;
 8004c52:	e01c      	b.n	8004c8e <_VPrintTarget+0x332>
 8004c54:	2001434c 	.word	0x2001434c
      case 'p':
        v = va_arg(*pParamList, int);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	1d19      	adds	r1, r3, #4
 8004c5e:	687a      	ldr	r2, [r7, #4]
 8004c60:	6011      	str	r1, [r2, #0]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8004c66:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004c68:	f107 0014 	add.w	r0, r7, #20
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	9301      	str	r3, [sp, #4]
 8004c70:	2308      	movs	r3, #8
 8004c72:	9300      	str	r3, [sp, #0]
 8004c74:	2308      	movs	r3, #8
 8004c76:	2210      	movs	r2, #16
 8004c78:	f7ff fd4a 	bl	8004710 <_PrintUnsigned>
        break;
 8004c7c:	e007      	b.n	8004c8e <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8004c7e:	f107 0314 	add.w	r3, r7, #20
 8004c82:	2125      	movs	r1, #37	; 0x25
 8004c84:	4618      	mov	r0, r3
 8004c86:	f7ff fcc7 	bl	8004618 <_StoreChar>
        break;
 8004c8a:	e000      	b.n	8004c8e <_VPrintTarget+0x332>
      default:
        break;
 8004c8c:	bf00      	nop
      }
      sFormat++;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	3301      	adds	r3, #1
 8004c92:	60fb      	str	r3, [r7, #12]
 8004c94:	e007      	b.n	8004ca6 <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 8004c96:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8004c9a:	f107 0314 	add.w	r3, r7, #20
 8004c9e:	4611      	mov	r1, r2
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f7ff fcb9 	bl	8004618 <_StoreChar>
    }
  } while (*sFormat);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	781b      	ldrb	r3, [r3, #0]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	f47f ae72 	bne.w	8004994 <_VPrintTarget+0x38>
 8004cb0:	e000      	b.n	8004cb4 <_VPrintTarget+0x358>
      break;
 8004cb2:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8004cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d041      	beq.n	8004d3e <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 8004cba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cbc:	69fb      	ldr	r3, [r7, #28]
 8004cbe:	b2d2      	uxtb	r2, r2
 8004cc0:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8004cc2:	69bb      	ldr	r3, [r7, #24]
 8004cc4:	643b      	str	r3, [r7, #64]	; 0x40
 8004cc6:	6a3b      	ldr	r3, [r7, #32]
 8004cc8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004cca:	e00b      	b.n	8004ce4 <_VPrintTarget+0x388>
 8004ccc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cce:	b2da      	uxtb	r2, r3
 8004cd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cd2:	1c59      	adds	r1, r3, #1
 8004cd4:	6439      	str	r1, [r7, #64]	; 0x40
 8004cd6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004cda:	b2d2      	uxtb	r2, r2
 8004cdc:	701a      	strb	r2, [r3, #0]
 8004cde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ce0:	09db      	lsrs	r3, r3, #7
 8004ce2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ce4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ce6:	2b7f      	cmp	r3, #127	; 0x7f
 8004ce8:	d8f0      	bhi.n	8004ccc <_VPrintTarget+0x370>
 8004cea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cec:	1c5a      	adds	r2, r3, #1
 8004cee:	643a      	str	r2, [r7, #64]	; 0x40
 8004cf0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004cf2:	b2d2      	uxtb	r2, r2
 8004cf4:	701a      	strb	r2, [r3, #0]
 8004cf6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cf8:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8004cfa:	69bb      	ldr	r3, [r7, #24]
 8004cfc:	63bb      	str	r3, [r7, #56]	; 0x38
 8004cfe:	2300      	movs	r3, #0
 8004d00:	637b      	str	r3, [r7, #52]	; 0x34
 8004d02:	e00b      	b.n	8004d1c <_VPrintTarget+0x3c0>
 8004d04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d06:	b2da      	uxtb	r2, r3
 8004d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d0a:	1c59      	adds	r1, r3, #1
 8004d0c:	63b9      	str	r1, [r7, #56]	; 0x38
 8004d0e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d12:	b2d2      	uxtb	r2, r2
 8004d14:	701a      	strb	r2, [r3, #0]
 8004d16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d18:	09db      	lsrs	r3, r3, #7
 8004d1a:	637b      	str	r3, [r7, #52]	; 0x34
 8004d1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d1e:	2b7f      	cmp	r3, #127	; 0x7f
 8004d20:	d8f0      	bhi.n	8004d04 <_VPrintTarget+0x3a8>
 8004d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d24:	1c5a      	adds	r2, r3, #1
 8004d26:	63ba      	str	r2, [r7, #56]	; 0x38
 8004d28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d2a:	b2d2      	uxtb	r2, r2
 8004d2c:	701a      	strb	r2, [r3, #0]
 8004d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d30:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004d32:	69fb      	ldr	r3, [r7, #28]
 8004d34:	69b9      	ldr	r1, [r7, #24]
 8004d36:	221a      	movs	r2, #26
 8004d38:	4618      	mov	r0, r3
 8004d3a:	f7ff fb85 	bl	8004448 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8004d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d40:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8004d44:	bf00      	nop
 8004d46:	3758      	adds	r7, #88	; 0x58
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}

08004d4c <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b086      	sub	sp, #24
 8004d50:	af02      	add	r7, sp, #8
 8004d52:	60f8      	str	r0, [r7, #12]
 8004d54:	60b9      	str	r1, [r7, #8]
 8004d56:	607a      	str	r2, [r7, #4]
 8004d58:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004d60:	4917      	ldr	r1, [pc, #92]	; (8004dc0 <SEGGER_SYSVIEW_Init+0x74>)
 8004d62:	4818      	ldr	r0, [pc, #96]	; (8004dc4 <SEGGER_SYSVIEW_Init+0x78>)
 8004d64:	f7ff f93c 	bl	8003fe0 <SEGGER_RTT_AllocUpBuffer>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	b2da      	uxtb	r2, r3
 8004d6c:	4b16      	ldr	r3, [pc, #88]	; (8004dc8 <SEGGER_SYSVIEW_Init+0x7c>)
 8004d6e:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8004d70:	4b15      	ldr	r3, [pc, #84]	; (8004dc8 <SEGGER_SYSVIEW_Init+0x7c>)
 8004d72:	785a      	ldrb	r2, [r3, #1]
 8004d74:	4b14      	ldr	r3, [pc, #80]	; (8004dc8 <SEGGER_SYSVIEW_Init+0x7c>)
 8004d76:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004d78:	4b13      	ldr	r3, [pc, #76]	; (8004dc8 <SEGGER_SYSVIEW_Init+0x7c>)
 8004d7a:	7e1b      	ldrb	r3, [r3, #24]
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	2300      	movs	r3, #0
 8004d80:	9300      	str	r3, [sp, #0]
 8004d82:	2308      	movs	r3, #8
 8004d84:	4a11      	ldr	r2, [pc, #68]	; (8004dcc <SEGGER_SYSVIEW_Init+0x80>)
 8004d86:	490f      	ldr	r1, [pc, #60]	; (8004dc4 <SEGGER_SYSVIEW_Init+0x78>)
 8004d88:	f7ff f9ae 	bl	80040e8 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8004d8c:	4b0e      	ldr	r3, [pc, #56]	; (8004dc8 <SEGGER_SYSVIEW_Init+0x7c>)
 8004d8e:	2200      	movs	r2, #0
 8004d90:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004d92:	4b0f      	ldr	r3, [pc, #60]	; (8004dd0 <SEGGER_SYSVIEW_Init+0x84>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a0c      	ldr	r2, [pc, #48]	; (8004dc8 <SEGGER_SYSVIEW_Init+0x7c>)
 8004d98:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8004d9a:	4a0b      	ldr	r2, [pc, #44]	; (8004dc8 <SEGGER_SYSVIEW_Init+0x7c>)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8004da0:	4a09      	ldr	r2, [pc, #36]	; (8004dc8 <SEGGER_SYSVIEW_Init+0x7c>)
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8004da6:	4a08      	ldr	r2, [pc, #32]	; (8004dc8 <SEGGER_SYSVIEW_Init+0x7c>)
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8004dac:	4a06      	ldr	r2, [pc, #24]	; (8004dc8 <SEGGER_SYSVIEW_Init+0x7c>)
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8004db2:	4b05      	ldr	r3, [pc, #20]	; (8004dc8 <SEGGER_SYSVIEW_Init+0x7c>)
 8004db4:	2200      	movs	r2, #0
 8004db6:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8004db8:	bf00      	nop
 8004dba:	3710      	adds	r7, #16
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}
 8004dc0:	20013314 	.word	0x20013314
 8004dc4:	08005d40 	.word	0x08005d40
 8004dc8:	2001431c 	.word	0x2001431c
 8004dcc:	20014314 	.word	0x20014314
 8004dd0:	e0001004 	.word	0xe0001004

08004dd4 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8004dd4:	b480      	push	{r7}
 8004dd6:	b083      	sub	sp, #12
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8004ddc:	4a04      	ldr	r2, [pc, #16]	; (8004df0 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6113      	str	r3, [r2, #16]
}
 8004de2:	bf00      	nop
 8004de4:	370c      	adds	r7, #12
 8004de6:	46bd      	mov	sp, r7
 8004de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dec:	4770      	bx	lr
 8004dee:	bf00      	nop
 8004df0:	2001431c 	.word	0x2001431c

08004df4 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b084      	sub	sp, #16
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004dfc:	f3ef 8311 	mrs	r3, BASEPRI
 8004e00:	f04f 0120 	mov.w	r1, #32
 8004e04:	f381 8811 	msr	BASEPRI, r1
 8004e08:	60fb      	str	r3, [r7, #12]
 8004e0a:	4808      	ldr	r0, [pc, #32]	; (8004e2c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8004e0c:	f7ff fa29 	bl	8004262 <_PreparePacket>
 8004e10:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8004e12:	687a      	ldr	r2, [r7, #4]
 8004e14:	68b9      	ldr	r1, [r7, #8]
 8004e16:	68b8      	ldr	r0, [r7, #8]
 8004e18:	f7ff fb16 	bl	8004448 <_SendPacket>
  RECORD_END();
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f383 8811 	msr	BASEPRI, r3
}
 8004e22:	bf00      	nop
 8004e24:	3710      	adds	r7, #16
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}
 8004e2a:	bf00      	nop
 8004e2c:	2001434c 	.word	0x2001434c

08004e30 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b088      	sub	sp, #32
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
 8004e38:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004e3a:	f3ef 8311 	mrs	r3, BASEPRI
 8004e3e:	f04f 0120 	mov.w	r1, #32
 8004e42:	f381 8811 	msr	BASEPRI, r1
 8004e46:	617b      	str	r3, [r7, #20]
 8004e48:	4816      	ldr	r0, [pc, #88]	; (8004ea4 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8004e4a:	f7ff fa0a 	bl	8004262 <_PreparePacket>
 8004e4e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	61fb      	str	r3, [r7, #28]
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	61bb      	str	r3, [r7, #24]
 8004e5c:	e00b      	b.n	8004e76 <SEGGER_SYSVIEW_RecordU32+0x46>
 8004e5e:	69bb      	ldr	r3, [r7, #24]
 8004e60:	b2da      	uxtb	r2, r3
 8004e62:	69fb      	ldr	r3, [r7, #28]
 8004e64:	1c59      	adds	r1, r3, #1
 8004e66:	61f9      	str	r1, [r7, #28]
 8004e68:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e6c:	b2d2      	uxtb	r2, r2
 8004e6e:	701a      	strb	r2, [r3, #0]
 8004e70:	69bb      	ldr	r3, [r7, #24]
 8004e72:	09db      	lsrs	r3, r3, #7
 8004e74:	61bb      	str	r3, [r7, #24]
 8004e76:	69bb      	ldr	r3, [r7, #24]
 8004e78:	2b7f      	cmp	r3, #127	; 0x7f
 8004e7a:	d8f0      	bhi.n	8004e5e <SEGGER_SYSVIEW_RecordU32+0x2e>
 8004e7c:	69fb      	ldr	r3, [r7, #28]
 8004e7e:	1c5a      	adds	r2, r3, #1
 8004e80:	61fa      	str	r2, [r7, #28]
 8004e82:	69ba      	ldr	r2, [r7, #24]
 8004e84:	b2d2      	uxtb	r2, r2
 8004e86:	701a      	strb	r2, [r3, #0]
 8004e88:	69fb      	ldr	r3, [r7, #28]
 8004e8a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004e8c:	687a      	ldr	r2, [r7, #4]
 8004e8e:	68f9      	ldr	r1, [r7, #12]
 8004e90:	6938      	ldr	r0, [r7, #16]
 8004e92:	f7ff fad9 	bl	8004448 <_SendPacket>
  RECORD_END();
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	f383 8811 	msr	BASEPRI, r3
}
 8004e9c:	bf00      	nop
 8004e9e:	3720      	adds	r7, #32
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}
 8004ea4:	2001434c 	.word	0x2001434c

08004ea8 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b08c      	sub	sp, #48	; 0x30
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	60f8      	str	r0, [r7, #12]
 8004eb0:	60b9      	str	r1, [r7, #8]
 8004eb2:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004eb4:	f3ef 8311 	mrs	r3, BASEPRI
 8004eb8:	f04f 0120 	mov.w	r1, #32
 8004ebc:	f381 8811 	msr	BASEPRI, r1
 8004ec0:	61fb      	str	r3, [r7, #28]
 8004ec2:	4825      	ldr	r0, [pc, #148]	; (8004f58 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8004ec4:	f7ff f9cd 	bl	8004262 <_PreparePacket>
 8004ec8:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004eca:	69bb      	ldr	r3, [r7, #24]
 8004ecc:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ed6:	e00b      	b.n	8004ef0 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8004ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eda:	b2da      	uxtb	r2, r3
 8004edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ede:	1c59      	adds	r1, r3, #1
 8004ee0:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004ee2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ee6:	b2d2      	uxtb	r2, r2
 8004ee8:	701a      	strb	r2, [r3, #0]
 8004eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eec:	09db      	lsrs	r3, r3, #7
 8004eee:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ef2:	2b7f      	cmp	r3, #127	; 0x7f
 8004ef4:	d8f0      	bhi.n	8004ed8 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8004ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ef8:	1c5a      	adds	r2, r3, #1
 8004efa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004efc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004efe:	b2d2      	uxtb	r2, r2
 8004f00:	701a      	strb	r2, [r3, #0]
 8004f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f04:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	627b      	str	r3, [r7, #36]	; 0x24
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	623b      	str	r3, [r7, #32]
 8004f0e:	e00b      	b.n	8004f28 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8004f10:	6a3b      	ldr	r3, [r7, #32]
 8004f12:	b2da      	uxtb	r2, r3
 8004f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f16:	1c59      	adds	r1, r3, #1
 8004f18:	6279      	str	r1, [r7, #36]	; 0x24
 8004f1a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f1e:	b2d2      	uxtb	r2, r2
 8004f20:	701a      	strb	r2, [r3, #0]
 8004f22:	6a3b      	ldr	r3, [r7, #32]
 8004f24:	09db      	lsrs	r3, r3, #7
 8004f26:	623b      	str	r3, [r7, #32]
 8004f28:	6a3b      	ldr	r3, [r7, #32]
 8004f2a:	2b7f      	cmp	r3, #127	; 0x7f
 8004f2c:	d8f0      	bhi.n	8004f10 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8004f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f30:	1c5a      	adds	r2, r3, #1
 8004f32:	627a      	str	r2, [r7, #36]	; 0x24
 8004f34:	6a3a      	ldr	r2, [r7, #32]
 8004f36:	b2d2      	uxtb	r2, r2
 8004f38:	701a      	strb	r2, [r3, #0]
 8004f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3c:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004f3e:	68fa      	ldr	r2, [r7, #12]
 8004f40:	6979      	ldr	r1, [r7, #20]
 8004f42:	69b8      	ldr	r0, [r7, #24]
 8004f44:	f7ff fa80 	bl	8004448 <_SendPacket>
  RECORD_END();
 8004f48:	69fb      	ldr	r3, [r7, #28]
 8004f4a:	f383 8811 	msr	BASEPRI, r3
}
 8004f4e:	bf00      	nop
 8004f50:	3730      	adds	r7, #48	; 0x30
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}
 8004f56:	bf00      	nop
 8004f58:	2001434c 	.word	0x2001434c

08004f5c <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b08c      	sub	sp, #48	; 0x30
 8004f60:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8004f62:	4b59      	ldr	r3, [pc, #356]	; (80050c8 <SEGGER_SYSVIEW_Start+0x16c>)
 8004f64:	2201      	movs	r2, #1
 8004f66:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8004f68:	f3ef 8311 	mrs	r3, BASEPRI
 8004f6c:	f04f 0120 	mov.w	r1, #32
 8004f70:	f381 8811 	msr	BASEPRI, r1
 8004f74:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8004f76:	4b54      	ldr	r3, [pc, #336]	; (80050c8 <SEGGER_SYSVIEW_Start+0x16c>)
 8004f78:	785b      	ldrb	r3, [r3, #1]
 8004f7a:	220a      	movs	r2, #10
 8004f7c:	4953      	ldr	r1, [pc, #332]	; (80050cc <SEGGER_SYSVIEW_Start+0x170>)
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f7fb f926 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8004f8a:	f7fe fcfd 	bl	8003988 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8004f8e:	200a      	movs	r0, #10
 8004f90:	f7ff ff30 	bl	8004df4 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004f94:	f3ef 8311 	mrs	r3, BASEPRI
 8004f98:	f04f 0120 	mov.w	r1, #32
 8004f9c:	f381 8811 	msr	BASEPRI, r1
 8004fa0:	60bb      	str	r3, [r7, #8]
 8004fa2:	484b      	ldr	r0, [pc, #300]	; (80050d0 <SEGGER_SYSVIEW_Start+0x174>)
 8004fa4:	f7ff f95d 	bl	8004262 <_PreparePacket>
 8004fa8:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fb2:	4b45      	ldr	r3, [pc, #276]	; (80050c8 <SEGGER_SYSVIEW_Start+0x16c>)
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fb8:	e00b      	b.n	8004fd2 <SEGGER_SYSVIEW_Start+0x76>
 8004fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fbc:	b2da      	uxtb	r2, r3
 8004fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fc0:	1c59      	adds	r1, r3, #1
 8004fc2:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004fc4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004fc8:	b2d2      	uxtb	r2, r2
 8004fca:	701a      	strb	r2, [r3, #0]
 8004fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fce:	09db      	lsrs	r3, r3, #7
 8004fd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fd4:	2b7f      	cmp	r3, #127	; 0x7f
 8004fd6:	d8f0      	bhi.n	8004fba <SEGGER_SYSVIEW_Start+0x5e>
 8004fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fda:	1c5a      	adds	r2, r3, #1
 8004fdc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004fde:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004fe0:	b2d2      	uxtb	r2, r2
 8004fe2:	701a      	strb	r2, [r3, #0]
 8004fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fe6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	627b      	str	r3, [r7, #36]	; 0x24
 8004fec:	4b36      	ldr	r3, [pc, #216]	; (80050c8 <SEGGER_SYSVIEW_Start+0x16c>)
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	623b      	str	r3, [r7, #32]
 8004ff2:	e00b      	b.n	800500c <SEGGER_SYSVIEW_Start+0xb0>
 8004ff4:	6a3b      	ldr	r3, [r7, #32]
 8004ff6:	b2da      	uxtb	r2, r3
 8004ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffa:	1c59      	adds	r1, r3, #1
 8004ffc:	6279      	str	r1, [r7, #36]	; 0x24
 8004ffe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005002:	b2d2      	uxtb	r2, r2
 8005004:	701a      	strb	r2, [r3, #0]
 8005006:	6a3b      	ldr	r3, [r7, #32]
 8005008:	09db      	lsrs	r3, r3, #7
 800500a:	623b      	str	r3, [r7, #32]
 800500c:	6a3b      	ldr	r3, [r7, #32]
 800500e:	2b7f      	cmp	r3, #127	; 0x7f
 8005010:	d8f0      	bhi.n	8004ff4 <SEGGER_SYSVIEW_Start+0x98>
 8005012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005014:	1c5a      	adds	r2, r3, #1
 8005016:	627a      	str	r2, [r7, #36]	; 0x24
 8005018:	6a3a      	ldr	r2, [r7, #32]
 800501a:	b2d2      	uxtb	r2, r2
 800501c:	701a      	strb	r2, [r3, #0]
 800501e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005020:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	61fb      	str	r3, [r7, #28]
 8005026:	4b28      	ldr	r3, [pc, #160]	; (80050c8 <SEGGER_SYSVIEW_Start+0x16c>)
 8005028:	691b      	ldr	r3, [r3, #16]
 800502a:	61bb      	str	r3, [r7, #24]
 800502c:	e00b      	b.n	8005046 <SEGGER_SYSVIEW_Start+0xea>
 800502e:	69bb      	ldr	r3, [r7, #24]
 8005030:	b2da      	uxtb	r2, r3
 8005032:	69fb      	ldr	r3, [r7, #28]
 8005034:	1c59      	adds	r1, r3, #1
 8005036:	61f9      	str	r1, [r7, #28]
 8005038:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800503c:	b2d2      	uxtb	r2, r2
 800503e:	701a      	strb	r2, [r3, #0]
 8005040:	69bb      	ldr	r3, [r7, #24]
 8005042:	09db      	lsrs	r3, r3, #7
 8005044:	61bb      	str	r3, [r7, #24]
 8005046:	69bb      	ldr	r3, [r7, #24]
 8005048:	2b7f      	cmp	r3, #127	; 0x7f
 800504a:	d8f0      	bhi.n	800502e <SEGGER_SYSVIEW_Start+0xd2>
 800504c:	69fb      	ldr	r3, [r7, #28]
 800504e:	1c5a      	adds	r2, r3, #1
 8005050:	61fa      	str	r2, [r7, #28]
 8005052:	69ba      	ldr	r2, [r7, #24]
 8005054:	b2d2      	uxtb	r2, r2
 8005056:	701a      	strb	r2, [r3, #0]
 8005058:	69fb      	ldr	r3, [r7, #28]
 800505a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	617b      	str	r3, [r7, #20]
 8005060:	2300      	movs	r3, #0
 8005062:	613b      	str	r3, [r7, #16]
 8005064:	e00b      	b.n	800507e <SEGGER_SYSVIEW_Start+0x122>
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	b2da      	uxtb	r2, r3
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	1c59      	adds	r1, r3, #1
 800506e:	6179      	str	r1, [r7, #20]
 8005070:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005074:	b2d2      	uxtb	r2, r2
 8005076:	701a      	strb	r2, [r3, #0]
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	09db      	lsrs	r3, r3, #7
 800507c:	613b      	str	r3, [r7, #16]
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	2b7f      	cmp	r3, #127	; 0x7f
 8005082:	d8f0      	bhi.n	8005066 <SEGGER_SYSVIEW_Start+0x10a>
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	1c5a      	adds	r2, r3, #1
 8005088:	617a      	str	r2, [r7, #20]
 800508a:	693a      	ldr	r2, [r7, #16]
 800508c:	b2d2      	uxtb	r2, r2
 800508e:	701a      	strb	r2, [r3, #0]
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005094:	2218      	movs	r2, #24
 8005096:	6839      	ldr	r1, [r7, #0]
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f7ff f9d5 	bl	8004448 <_SendPacket>
      RECORD_END();
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80050a4:	4b08      	ldr	r3, [pc, #32]	; (80050c8 <SEGGER_SYSVIEW_Start+0x16c>)
 80050a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d002      	beq.n	80050b2 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 80050ac:	4b06      	ldr	r3, [pc, #24]	; (80050c8 <SEGGER_SYSVIEW_Start+0x16c>)
 80050ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b0:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80050b2:	f000 f9eb 	bl	800548c <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80050b6:	f000 f9b1 	bl	800541c <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80050ba:	f000 fc73 	bl	80059a4 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80050be:	bf00      	nop
 80050c0:	3730      	adds	r7, #48	; 0x30
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	bf00      	nop
 80050c8:	2001431c 	.word	0x2001431c
 80050cc:	08005d6c 	.word	0x08005d6c
 80050d0:	2001434c 	.word	0x2001434c

080050d4 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b082      	sub	sp, #8
 80050d8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80050da:	f3ef 8311 	mrs	r3, BASEPRI
 80050de:	f04f 0120 	mov.w	r1, #32
 80050e2:	f381 8811 	msr	BASEPRI, r1
 80050e6:	607b      	str	r3, [r7, #4]
 80050e8:	480b      	ldr	r0, [pc, #44]	; (8005118 <SEGGER_SYSVIEW_Stop+0x44>)
 80050ea:	f7ff f8ba 	bl	8004262 <_PreparePacket>
 80050ee:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80050f0:	4b0a      	ldr	r3, [pc, #40]	; (800511c <SEGGER_SYSVIEW_Stop+0x48>)
 80050f2:	781b      	ldrb	r3, [r3, #0]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d007      	beq.n	8005108 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80050f8:	220b      	movs	r2, #11
 80050fa:	6839      	ldr	r1, [r7, #0]
 80050fc:	6838      	ldr	r0, [r7, #0]
 80050fe:	f7ff f9a3 	bl	8004448 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8005102:	4b06      	ldr	r3, [pc, #24]	; (800511c <SEGGER_SYSVIEW_Stop+0x48>)
 8005104:	2200      	movs	r2, #0
 8005106:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	f383 8811 	msr	BASEPRI, r3
}
 800510e:	bf00      	nop
 8005110:	3708      	adds	r7, #8
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}
 8005116:	bf00      	nop
 8005118:	2001434c 	.word	0x2001434c
 800511c:	2001431c 	.word	0x2001431c

08005120 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8005120:	b580      	push	{r7, lr}
 8005122:	b08c      	sub	sp, #48	; 0x30
 8005124:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005126:	f3ef 8311 	mrs	r3, BASEPRI
 800512a:	f04f 0120 	mov.w	r1, #32
 800512e:	f381 8811 	msr	BASEPRI, r1
 8005132:	60fb      	str	r3, [r7, #12]
 8005134:	4845      	ldr	r0, [pc, #276]	; (800524c <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8005136:	f7ff f894 	bl	8004262 <_PreparePacket>
 800513a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005144:	4b42      	ldr	r3, [pc, #264]	; (8005250 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	62bb      	str	r3, [r7, #40]	; 0x28
 800514a:	e00b      	b.n	8005164 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 800514c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800514e:	b2da      	uxtb	r2, r3
 8005150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005152:	1c59      	adds	r1, r3, #1
 8005154:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005156:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800515a:	b2d2      	uxtb	r2, r2
 800515c:	701a      	strb	r2, [r3, #0]
 800515e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005160:	09db      	lsrs	r3, r3, #7
 8005162:	62bb      	str	r3, [r7, #40]	; 0x28
 8005164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005166:	2b7f      	cmp	r3, #127	; 0x7f
 8005168:	d8f0      	bhi.n	800514c <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800516a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800516c:	1c5a      	adds	r2, r3, #1
 800516e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005170:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005172:	b2d2      	uxtb	r2, r2
 8005174:	701a      	strb	r2, [r3, #0]
 8005176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005178:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	627b      	str	r3, [r7, #36]	; 0x24
 800517e:	4b34      	ldr	r3, [pc, #208]	; (8005250 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	623b      	str	r3, [r7, #32]
 8005184:	e00b      	b.n	800519e <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8005186:	6a3b      	ldr	r3, [r7, #32]
 8005188:	b2da      	uxtb	r2, r3
 800518a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518c:	1c59      	adds	r1, r3, #1
 800518e:	6279      	str	r1, [r7, #36]	; 0x24
 8005190:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005194:	b2d2      	uxtb	r2, r2
 8005196:	701a      	strb	r2, [r3, #0]
 8005198:	6a3b      	ldr	r3, [r7, #32]
 800519a:	09db      	lsrs	r3, r3, #7
 800519c:	623b      	str	r3, [r7, #32]
 800519e:	6a3b      	ldr	r3, [r7, #32]
 80051a0:	2b7f      	cmp	r3, #127	; 0x7f
 80051a2:	d8f0      	bhi.n	8005186 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80051a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a6:	1c5a      	adds	r2, r3, #1
 80051a8:	627a      	str	r2, [r7, #36]	; 0x24
 80051aa:	6a3a      	ldr	r2, [r7, #32]
 80051ac:	b2d2      	uxtb	r2, r2
 80051ae:	701a      	strb	r2, [r3, #0]
 80051b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	61fb      	str	r3, [r7, #28]
 80051b8:	4b25      	ldr	r3, [pc, #148]	; (8005250 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80051ba:	691b      	ldr	r3, [r3, #16]
 80051bc:	61bb      	str	r3, [r7, #24]
 80051be:	e00b      	b.n	80051d8 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80051c0:	69bb      	ldr	r3, [r7, #24]
 80051c2:	b2da      	uxtb	r2, r3
 80051c4:	69fb      	ldr	r3, [r7, #28]
 80051c6:	1c59      	adds	r1, r3, #1
 80051c8:	61f9      	str	r1, [r7, #28]
 80051ca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051ce:	b2d2      	uxtb	r2, r2
 80051d0:	701a      	strb	r2, [r3, #0]
 80051d2:	69bb      	ldr	r3, [r7, #24]
 80051d4:	09db      	lsrs	r3, r3, #7
 80051d6:	61bb      	str	r3, [r7, #24]
 80051d8:	69bb      	ldr	r3, [r7, #24]
 80051da:	2b7f      	cmp	r3, #127	; 0x7f
 80051dc:	d8f0      	bhi.n	80051c0 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80051de:	69fb      	ldr	r3, [r7, #28]
 80051e0:	1c5a      	adds	r2, r3, #1
 80051e2:	61fa      	str	r2, [r7, #28]
 80051e4:	69ba      	ldr	r2, [r7, #24]
 80051e6:	b2d2      	uxtb	r2, r2
 80051e8:	701a      	strb	r2, [r3, #0]
 80051ea:	69fb      	ldr	r3, [r7, #28]
 80051ec:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	617b      	str	r3, [r7, #20]
 80051f2:	2300      	movs	r3, #0
 80051f4:	613b      	str	r3, [r7, #16]
 80051f6:	e00b      	b.n	8005210 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	b2da      	uxtb	r2, r3
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	1c59      	adds	r1, r3, #1
 8005200:	6179      	str	r1, [r7, #20]
 8005202:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005206:	b2d2      	uxtb	r2, r2
 8005208:	701a      	strb	r2, [r3, #0]
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	09db      	lsrs	r3, r3, #7
 800520e:	613b      	str	r3, [r7, #16]
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	2b7f      	cmp	r3, #127	; 0x7f
 8005214:	d8f0      	bhi.n	80051f8 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	1c5a      	adds	r2, r3, #1
 800521a:	617a      	str	r2, [r7, #20]
 800521c:	693a      	ldr	r2, [r7, #16]
 800521e:	b2d2      	uxtb	r2, r2
 8005220:	701a      	strb	r2, [r3, #0]
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005226:	2218      	movs	r2, #24
 8005228:	6879      	ldr	r1, [r7, #4]
 800522a:	68b8      	ldr	r0, [r7, #8]
 800522c:	f7ff f90c 	bl	8004448 <_SendPacket>
  RECORD_END();
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005236:	4b06      	ldr	r3, [pc, #24]	; (8005250 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523a:	2b00      	cmp	r3, #0
 800523c:	d002      	beq.n	8005244 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800523e:	4b04      	ldr	r3, [pc, #16]	; (8005250 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005242:	4798      	blx	r3
  }
}
 8005244:	bf00      	nop
 8005246:	3730      	adds	r7, #48	; 0x30
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}
 800524c:	2001434c 	.word	0x2001434c
 8005250:	2001431c 	.word	0x2001431c

08005254 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8005254:	b580      	push	{r7, lr}
 8005256:	b092      	sub	sp, #72	; 0x48
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 800525c:	f3ef 8311 	mrs	r3, BASEPRI
 8005260:	f04f 0120 	mov.w	r1, #32
 8005264:	f381 8811 	msr	BASEPRI, r1
 8005268:	617b      	str	r3, [r7, #20]
 800526a:	486a      	ldr	r0, [pc, #424]	; (8005414 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 800526c:	f7fe fff9 	bl	8004262 <_PreparePacket>
 8005270:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	647b      	str	r3, [r7, #68]	; 0x44
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	4b66      	ldr	r3, [pc, #408]	; (8005418 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005280:	691b      	ldr	r3, [r3, #16]
 8005282:	1ad3      	subs	r3, r2, r3
 8005284:	643b      	str	r3, [r7, #64]	; 0x40
 8005286:	e00b      	b.n	80052a0 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8005288:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800528a:	b2da      	uxtb	r2, r3
 800528c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800528e:	1c59      	adds	r1, r3, #1
 8005290:	6479      	str	r1, [r7, #68]	; 0x44
 8005292:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005296:	b2d2      	uxtb	r2, r2
 8005298:	701a      	strb	r2, [r3, #0]
 800529a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800529c:	09db      	lsrs	r3, r3, #7
 800529e:	643b      	str	r3, [r7, #64]	; 0x40
 80052a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052a2:	2b7f      	cmp	r3, #127	; 0x7f
 80052a4:	d8f0      	bhi.n	8005288 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80052a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052a8:	1c5a      	adds	r2, r3, #1
 80052aa:	647a      	str	r2, [r7, #68]	; 0x44
 80052ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80052ae:	b2d2      	uxtb	r2, r2
 80052b0:	701a      	strb	r2, [r3, #0]
 80052b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052b4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	63bb      	str	r3, [r7, #56]	; 0x38
 80052c0:	e00b      	b.n	80052da <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80052c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052c4:	b2da      	uxtb	r2, r3
 80052c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052c8:	1c59      	adds	r1, r3, #1
 80052ca:	63f9      	str	r1, [r7, #60]	; 0x3c
 80052cc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80052d0:	b2d2      	uxtb	r2, r2
 80052d2:	701a      	strb	r2, [r3, #0]
 80052d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052d6:	09db      	lsrs	r3, r3, #7
 80052d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80052da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052dc:	2b7f      	cmp	r3, #127	; 0x7f
 80052de:	d8f0      	bhi.n	80052c2 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80052e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052e2:	1c5a      	adds	r2, r3, #1
 80052e4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80052e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80052e8:	b2d2      	uxtb	r2, r2
 80052ea:	701a      	strb	r2, [r3, #0]
 80052ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052ee:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	2220      	movs	r2, #32
 80052f6:	4619      	mov	r1, r3
 80052f8:	68f8      	ldr	r0, [r7, #12]
 80052fa:	f7fe ff65 	bl	80041c8 <_EncodeStr>
 80052fe:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8005300:	2209      	movs	r2, #9
 8005302:	68f9      	ldr	r1, [r7, #12]
 8005304:	6938      	ldr	r0, [r7, #16]
 8005306:	f7ff f89f 	bl	8004448 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	637b      	str	r3, [r7, #52]	; 0x34
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	4b40      	ldr	r3, [pc, #256]	; (8005418 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005318:	691b      	ldr	r3, [r3, #16]
 800531a:	1ad3      	subs	r3, r2, r3
 800531c:	633b      	str	r3, [r7, #48]	; 0x30
 800531e:	e00b      	b.n	8005338 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8005320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005322:	b2da      	uxtb	r2, r3
 8005324:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005326:	1c59      	adds	r1, r3, #1
 8005328:	6379      	str	r1, [r7, #52]	; 0x34
 800532a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800532e:	b2d2      	uxtb	r2, r2
 8005330:	701a      	strb	r2, [r3, #0]
 8005332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005334:	09db      	lsrs	r3, r3, #7
 8005336:	633b      	str	r3, [r7, #48]	; 0x30
 8005338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800533a:	2b7f      	cmp	r3, #127	; 0x7f
 800533c:	d8f0      	bhi.n	8005320 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800533e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005340:	1c5a      	adds	r2, r3, #1
 8005342:	637a      	str	r2, [r7, #52]	; 0x34
 8005344:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005346:	b2d2      	uxtb	r2, r2
 8005348:	701a      	strb	r2, [r3, #0]
 800534a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800534c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	68db      	ldr	r3, [r3, #12]
 8005356:	62bb      	str	r3, [r7, #40]	; 0x28
 8005358:	e00b      	b.n	8005372 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800535a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800535c:	b2da      	uxtb	r2, r3
 800535e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005360:	1c59      	adds	r1, r3, #1
 8005362:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005364:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005368:	b2d2      	uxtb	r2, r2
 800536a:	701a      	strb	r2, [r3, #0]
 800536c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800536e:	09db      	lsrs	r3, r3, #7
 8005370:	62bb      	str	r3, [r7, #40]	; 0x28
 8005372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005374:	2b7f      	cmp	r3, #127	; 0x7f
 8005376:	d8f0      	bhi.n	800535a <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8005378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800537a:	1c5a      	adds	r2, r3, #1
 800537c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800537e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005380:	b2d2      	uxtb	r2, r2
 8005382:	701a      	strb	r2, [r3, #0]
 8005384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005386:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	627b      	str	r3, [r7, #36]	; 0x24
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	691b      	ldr	r3, [r3, #16]
 8005390:	623b      	str	r3, [r7, #32]
 8005392:	e00b      	b.n	80053ac <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8005394:	6a3b      	ldr	r3, [r7, #32]
 8005396:	b2da      	uxtb	r2, r3
 8005398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539a:	1c59      	adds	r1, r3, #1
 800539c:	6279      	str	r1, [r7, #36]	; 0x24
 800539e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053a2:	b2d2      	uxtb	r2, r2
 80053a4:	701a      	strb	r2, [r3, #0]
 80053a6:	6a3b      	ldr	r3, [r7, #32]
 80053a8:	09db      	lsrs	r3, r3, #7
 80053aa:	623b      	str	r3, [r7, #32]
 80053ac:	6a3b      	ldr	r3, [r7, #32]
 80053ae:	2b7f      	cmp	r3, #127	; 0x7f
 80053b0:	d8f0      	bhi.n	8005394 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80053b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b4:	1c5a      	adds	r2, r3, #1
 80053b6:	627a      	str	r2, [r7, #36]	; 0x24
 80053b8:	6a3a      	ldr	r2, [r7, #32]
 80053ba:	b2d2      	uxtb	r2, r2
 80053bc:	701a      	strb	r2, [r3, #0]
 80053be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	61fb      	str	r3, [r7, #28]
 80053c6:	2300      	movs	r3, #0
 80053c8:	61bb      	str	r3, [r7, #24]
 80053ca:	e00b      	b.n	80053e4 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 80053cc:	69bb      	ldr	r3, [r7, #24]
 80053ce:	b2da      	uxtb	r2, r3
 80053d0:	69fb      	ldr	r3, [r7, #28]
 80053d2:	1c59      	adds	r1, r3, #1
 80053d4:	61f9      	str	r1, [r7, #28]
 80053d6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053da:	b2d2      	uxtb	r2, r2
 80053dc:	701a      	strb	r2, [r3, #0]
 80053de:	69bb      	ldr	r3, [r7, #24]
 80053e0:	09db      	lsrs	r3, r3, #7
 80053e2:	61bb      	str	r3, [r7, #24]
 80053e4:	69bb      	ldr	r3, [r7, #24]
 80053e6:	2b7f      	cmp	r3, #127	; 0x7f
 80053e8:	d8f0      	bhi.n	80053cc <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 80053ea:	69fb      	ldr	r3, [r7, #28]
 80053ec:	1c5a      	adds	r2, r3, #1
 80053ee:	61fa      	str	r2, [r7, #28]
 80053f0:	69ba      	ldr	r2, [r7, #24]
 80053f2:	b2d2      	uxtb	r2, r2
 80053f4:	701a      	strb	r2, [r3, #0]
 80053f6:	69fb      	ldr	r3, [r7, #28]
 80053f8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80053fa:	2215      	movs	r2, #21
 80053fc:	68f9      	ldr	r1, [r7, #12]
 80053fe:	6938      	ldr	r0, [r7, #16]
 8005400:	f7ff f822 	bl	8004448 <_SendPacket>
  RECORD_END();
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	f383 8811 	msr	BASEPRI, r3
}
 800540a:	bf00      	nop
 800540c:	3748      	adds	r7, #72	; 0x48
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}
 8005412:	bf00      	nop
 8005414:	2001434c 	.word	0x2001434c
 8005418:	2001431c 	.word	0x2001431c

0800541c <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 800541c:	b580      	push	{r7, lr}
 800541e:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8005420:	4b07      	ldr	r3, [pc, #28]	; (8005440 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005422:	6a1b      	ldr	r3, [r3, #32]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d008      	beq.n	800543a <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8005428:	4b05      	ldr	r3, [pc, #20]	; (8005440 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800542a:	6a1b      	ldr	r3, [r3, #32]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d003      	beq.n	800543a <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8005432:	4b03      	ldr	r3, [pc, #12]	; (8005440 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005434:	6a1b      	ldr	r3, [r3, #32]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	4798      	blx	r3
  }
}
 800543a:	bf00      	nop
 800543c:	bd80      	pop	{r7, pc}
 800543e:	bf00      	nop
 8005440:	2001431c 	.word	0x2001431c

08005444 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8005444:	b580      	push	{r7, lr}
 8005446:	b086      	sub	sp, #24
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800544c:	f3ef 8311 	mrs	r3, BASEPRI
 8005450:	f04f 0120 	mov.w	r1, #32
 8005454:	f381 8811 	msr	BASEPRI, r1
 8005458:	617b      	str	r3, [r7, #20]
 800545a:	480b      	ldr	r0, [pc, #44]	; (8005488 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 800545c:	f7fe ff01 	bl	8004262 <_PreparePacket>
 8005460:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005462:	2280      	movs	r2, #128	; 0x80
 8005464:	6879      	ldr	r1, [r7, #4]
 8005466:	6938      	ldr	r0, [r7, #16]
 8005468:	f7fe feae 	bl	80041c8 <_EncodeStr>
 800546c:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800546e:	220e      	movs	r2, #14
 8005470:	68f9      	ldr	r1, [r7, #12]
 8005472:	6938      	ldr	r0, [r7, #16]
 8005474:	f7fe ffe8 	bl	8004448 <_SendPacket>
  RECORD_END();
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	f383 8811 	msr	BASEPRI, r3
}
 800547e:	bf00      	nop
 8005480:	3718      	adds	r7, #24
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}
 8005486:	bf00      	nop
 8005488:	2001434c 	.word	0x2001434c

0800548c <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800548c:	b590      	push	{r4, r7, lr}
 800548e:	b083      	sub	sp, #12
 8005490:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8005492:	4b15      	ldr	r3, [pc, #84]	; (80054e8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005494:	6a1b      	ldr	r3, [r3, #32]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d01a      	beq.n	80054d0 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800549a:	4b13      	ldr	r3, [pc, #76]	; (80054e8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800549c:	6a1b      	ldr	r3, [r3, #32]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d015      	beq.n	80054d0 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80054a4:	4b10      	ldr	r3, [pc, #64]	; (80054e8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80054a6:	6a1b      	ldr	r3, [r3, #32]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4798      	blx	r3
 80054ac:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80054b0:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80054b2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80054b6:	f04f 0200 	mov.w	r2, #0
 80054ba:	f04f 0300 	mov.w	r3, #0
 80054be:	000a      	movs	r2, r1
 80054c0:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80054c2:	4613      	mov	r3, r2
 80054c4:	461a      	mov	r2, r3
 80054c6:	4621      	mov	r1, r4
 80054c8:	200d      	movs	r0, #13
 80054ca:	f7ff fced 	bl	8004ea8 <SEGGER_SYSVIEW_RecordU32x2>
 80054ce:	e006      	b.n	80054de <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80054d0:	4b06      	ldr	r3, [pc, #24]	; (80054ec <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4619      	mov	r1, r3
 80054d6:	200c      	movs	r0, #12
 80054d8:	f7ff fcaa 	bl	8004e30 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80054dc:	bf00      	nop
 80054de:	bf00      	nop
 80054e0:	370c      	adds	r7, #12
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd90      	pop	{r4, r7, pc}
 80054e6:	bf00      	nop
 80054e8:	2001431c 	.word	0x2001431c
 80054ec:	e0001004 	.word	0xe0001004

080054f0 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b086      	sub	sp, #24
 80054f4:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80054f6:	f3ef 8311 	mrs	r3, BASEPRI
 80054fa:	f04f 0120 	mov.w	r1, #32
 80054fe:	f381 8811 	msr	BASEPRI, r1
 8005502:	60fb      	str	r3, [r7, #12]
 8005504:	4819      	ldr	r0, [pc, #100]	; (800556c <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8005506:	f7fe feac 	bl	8004262 <_PreparePacket>
 800550a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8005510:	4b17      	ldr	r3, [pc, #92]	; (8005570 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005518:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	617b      	str	r3, [r7, #20]
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	613b      	str	r3, [r7, #16]
 8005522:	e00b      	b.n	800553c <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	b2da      	uxtb	r2, r3
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	1c59      	adds	r1, r3, #1
 800552c:	6179      	str	r1, [r7, #20]
 800552e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005532:	b2d2      	uxtb	r2, r2
 8005534:	701a      	strb	r2, [r3, #0]
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	09db      	lsrs	r3, r3, #7
 800553a:	613b      	str	r3, [r7, #16]
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	2b7f      	cmp	r3, #127	; 0x7f
 8005540:	d8f0      	bhi.n	8005524 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	1c5a      	adds	r2, r3, #1
 8005546:	617a      	str	r2, [r7, #20]
 8005548:	693a      	ldr	r2, [r7, #16]
 800554a:	b2d2      	uxtb	r2, r2
 800554c:	701a      	strb	r2, [r3, #0]
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8005552:	2202      	movs	r2, #2
 8005554:	6879      	ldr	r1, [r7, #4]
 8005556:	68b8      	ldr	r0, [r7, #8]
 8005558:	f7fe ff76 	bl	8004448 <_SendPacket>
  RECORD_END();
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f383 8811 	msr	BASEPRI, r3
}
 8005562:	bf00      	nop
 8005564:	3718      	adds	r7, #24
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}
 800556a:	bf00      	nop
 800556c:	2001434c 	.word	0x2001434c
 8005570:	e000ed04 	.word	0xe000ed04

08005574 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8005574:	b580      	push	{r7, lr}
 8005576:	b082      	sub	sp, #8
 8005578:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800557a:	f3ef 8311 	mrs	r3, BASEPRI
 800557e:	f04f 0120 	mov.w	r1, #32
 8005582:	f381 8811 	msr	BASEPRI, r1
 8005586:	607b      	str	r3, [r7, #4]
 8005588:	4807      	ldr	r0, [pc, #28]	; (80055a8 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800558a:	f7fe fe6a 	bl	8004262 <_PreparePacket>
 800558e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8005590:	2203      	movs	r2, #3
 8005592:	6839      	ldr	r1, [r7, #0]
 8005594:	6838      	ldr	r0, [r7, #0]
 8005596:	f7fe ff57 	bl	8004448 <_SendPacket>
  RECORD_END();
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f383 8811 	msr	BASEPRI, r3
}
 80055a0:	bf00      	nop
 80055a2:	3708      	adds	r7, #8
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}
 80055a8:	2001434c 	.word	0x2001434c

080055ac <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b082      	sub	sp, #8
 80055b0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80055b2:	f3ef 8311 	mrs	r3, BASEPRI
 80055b6:	f04f 0120 	mov.w	r1, #32
 80055ba:	f381 8811 	msr	BASEPRI, r1
 80055be:	607b      	str	r3, [r7, #4]
 80055c0:	4807      	ldr	r0, [pc, #28]	; (80055e0 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80055c2:	f7fe fe4e 	bl	8004262 <_PreparePacket>
 80055c6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80055c8:	2212      	movs	r2, #18
 80055ca:	6839      	ldr	r1, [r7, #0]
 80055cc:	6838      	ldr	r0, [r7, #0]
 80055ce:	f7fe ff3b 	bl	8004448 <_SendPacket>
  RECORD_END();
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f383 8811 	msr	BASEPRI, r3
}
 80055d8:	bf00      	nop
 80055da:	3708      	adds	r7, #8
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}
 80055e0:	2001434c 	.word	0x2001434c

080055e4 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b082      	sub	sp, #8
 80055e8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80055ea:	f3ef 8311 	mrs	r3, BASEPRI
 80055ee:	f04f 0120 	mov.w	r1, #32
 80055f2:	f381 8811 	msr	BASEPRI, r1
 80055f6:	607b      	str	r3, [r7, #4]
 80055f8:	4807      	ldr	r0, [pc, #28]	; (8005618 <SEGGER_SYSVIEW_OnIdle+0x34>)
 80055fa:	f7fe fe32 	bl	8004262 <_PreparePacket>
 80055fe:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8005600:	2211      	movs	r2, #17
 8005602:	6839      	ldr	r1, [r7, #0]
 8005604:	6838      	ldr	r0, [r7, #0]
 8005606:	f7fe ff1f 	bl	8004448 <_SendPacket>
  RECORD_END();
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f383 8811 	msr	BASEPRI, r3
}
 8005610:	bf00      	nop
 8005612:	3708      	adds	r7, #8
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}
 8005618:	2001434c 	.word	0x2001434c

0800561c <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800561c:	b580      	push	{r7, lr}
 800561e:	b088      	sub	sp, #32
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005624:	f3ef 8311 	mrs	r3, BASEPRI
 8005628:	f04f 0120 	mov.w	r1, #32
 800562c:	f381 8811 	msr	BASEPRI, r1
 8005630:	617b      	str	r3, [r7, #20]
 8005632:	4819      	ldr	r0, [pc, #100]	; (8005698 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8005634:	f7fe fe15 	bl	8004262 <_PreparePacket>
 8005638:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800563e:	4b17      	ldr	r3, [pc, #92]	; (800569c <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8005640:	691b      	ldr	r3, [r3, #16]
 8005642:	687a      	ldr	r2, [r7, #4]
 8005644:	1ad3      	subs	r3, r2, r3
 8005646:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	61fb      	str	r3, [r7, #28]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	61bb      	str	r3, [r7, #24]
 8005650:	e00b      	b.n	800566a <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8005652:	69bb      	ldr	r3, [r7, #24]
 8005654:	b2da      	uxtb	r2, r3
 8005656:	69fb      	ldr	r3, [r7, #28]
 8005658:	1c59      	adds	r1, r3, #1
 800565a:	61f9      	str	r1, [r7, #28]
 800565c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005660:	b2d2      	uxtb	r2, r2
 8005662:	701a      	strb	r2, [r3, #0]
 8005664:	69bb      	ldr	r3, [r7, #24]
 8005666:	09db      	lsrs	r3, r3, #7
 8005668:	61bb      	str	r3, [r7, #24]
 800566a:	69bb      	ldr	r3, [r7, #24]
 800566c:	2b7f      	cmp	r3, #127	; 0x7f
 800566e:	d8f0      	bhi.n	8005652 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8005670:	69fb      	ldr	r3, [r7, #28]
 8005672:	1c5a      	adds	r2, r3, #1
 8005674:	61fa      	str	r2, [r7, #28]
 8005676:	69ba      	ldr	r2, [r7, #24]
 8005678:	b2d2      	uxtb	r2, r2
 800567a:	701a      	strb	r2, [r3, #0]
 800567c:	69fb      	ldr	r3, [r7, #28]
 800567e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8005680:	2208      	movs	r2, #8
 8005682:	68f9      	ldr	r1, [r7, #12]
 8005684:	6938      	ldr	r0, [r7, #16]
 8005686:	f7fe fedf 	bl	8004448 <_SendPacket>
  RECORD_END();
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	f383 8811 	msr	BASEPRI, r3
}
 8005690:	bf00      	nop
 8005692:	3720      	adds	r7, #32
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}
 8005698:	2001434c 	.word	0x2001434c
 800569c:	2001431c 	.word	0x2001431c

080056a0 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b088      	sub	sp, #32
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80056a8:	f3ef 8311 	mrs	r3, BASEPRI
 80056ac:	f04f 0120 	mov.w	r1, #32
 80056b0:	f381 8811 	msr	BASEPRI, r1
 80056b4:	617b      	str	r3, [r7, #20]
 80056b6:	4819      	ldr	r0, [pc, #100]	; (800571c <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80056b8:	f7fe fdd3 	bl	8004262 <_PreparePacket>
 80056bc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80056c2:	4b17      	ldr	r3, [pc, #92]	; (8005720 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80056c4:	691b      	ldr	r3, [r3, #16]
 80056c6:	687a      	ldr	r2, [r7, #4]
 80056c8:	1ad3      	subs	r3, r2, r3
 80056ca:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	61fb      	str	r3, [r7, #28]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	61bb      	str	r3, [r7, #24]
 80056d4:	e00b      	b.n	80056ee <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80056d6:	69bb      	ldr	r3, [r7, #24]
 80056d8:	b2da      	uxtb	r2, r3
 80056da:	69fb      	ldr	r3, [r7, #28]
 80056dc:	1c59      	adds	r1, r3, #1
 80056de:	61f9      	str	r1, [r7, #28]
 80056e0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80056e4:	b2d2      	uxtb	r2, r2
 80056e6:	701a      	strb	r2, [r3, #0]
 80056e8:	69bb      	ldr	r3, [r7, #24]
 80056ea:	09db      	lsrs	r3, r3, #7
 80056ec:	61bb      	str	r3, [r7, #24]
 80056ee:	69bb      	ldr	r3, [r7, #24]
 80056f0:	2b7f      	cmp	r3, #127	; 0x7f
 80056f2:	d8f0      	bhi.n	80056d6 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80056f4:	69fb      	ldr	r3, [r7, #28]
 80056f6:	1c5a      	adds	r2, r3, #1
 80056f8:	61fa      	str	r2, [r7, #28]
 80056fa:	69ba      	ldr	r2, [r7, #24]
 80056fc:	b2d2      	uxtb	r2, r2
 80056fe:	701a      	strb	r2, [r3, #0]
 8005700:	69fb      	ldr	r3, [r7, #28]
 8005702:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8005704:	2204      	movs	r2, #4
 8005706:	68f9      	ldr	r1, [r7, #12]
 8005708:	6938      	ldr	r0, [r7, #16]
 800570a:	f7fe fe9d 	bl	8004448 <_SendPacket>
  RECORD_END();
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	f383 8811 	msr	BASEPRI, r3
}
 8005714:	bf00      	nop
 8005716:	3720      	adds	r7, #32
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}
 800571c:	2001434c 	.word	0x2001434c
 8005720:	2001431c 	.word	0x2001431c

08005724 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8005724:	b580      	push	{r7, lr}
 8005726:	b088      	sub	sp, #32
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800572c:	f3ef 8311 	mrs	r3, BASEPRI
 8005730:	f04f 0120 	mov.w	r1, #32
 8005734:	f381 8811 	msr	BASEPRI, r1
 8005738:	617b      	str	r3, [r7, #20]
 800573a:	4819      	ldr	r0, [pc, #100]	; (80057a0 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 800573c:	f7fe fd91 	bl	8004262 <_PreparePacket>
 8005740:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005746:	4b17      	ldr	r3, [pc, #92]	; (80057a4 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8005748:	691b      	ldr	r3, [r3, #16]
 800574a:	687a      	ldr	r2, [r7, #4]
 800574c:	1ad3      	subs	r3, r2, r3
 800574e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	61fb      	str	r3, [r7, #28]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	61bb      	str	r3, [r7, #24]
 8005758:	e00b      	b.n	8005772 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800575a:	69bb      	ldr	r3, [r7, #24]
 800575c:	b2da      	uxtb	r2, r3
 800575e:	69fb      	ldr	r3, [r7, #28]
 8005760:	1c59      	adds	r1, r3, #1
 8005762:	61f9      	str	r1, [r7, #28]
 8005764:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005768:	b2d2      	uxtb	r2, r2
 800576a:	701a      	strb	r2, [r3, #0]
 800576c:	69bb      	ldr	r3, [r7, #24]
 800576e:	09db      	lsrs	r3, r3, #7
 8005770:	61bb      	str	r3, [r7, #24]
 8005772:	69bb      	ldr	r3, [r7, #24]
 8005774:	2b7f      	cmp	r3, #127	; 0x7f
 8005776:	d8f0      	bhi.n	800575a <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8005778:	69fb      	ldr	r3, [r7, #28]
 800577a:	1c5a      	adds	r2, r3, #1
 800577c:	61fa      	str	r2, [r7, #28]
 800577e:	69ba      	ldr	r2, [r7, #24]
 8005780:	b2d2      	uxtb	r2, r2
 8005782:	701a      	strb	r2, [r3, #0]
 8005784:	69fb      	ldr	r3, [r7, #28]
 8005786:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8005788:	2206      	movs	r2, #6
 800578a:	68f9      	ldr	r1, [r7, #12]
 800578c:	6938      	ldr	r0, [r7, #16]
 800578e:	f7fe fe5b 	bl	8004448 <_SendPacket>
  RECORD_END();
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	f383 8811 	msr	BASEPRI, r3
}
 8005798:	bf00      	nop
 800579a:	3720      	adds	r7, #32
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}
 80057a0:	2001434c 	.word	0x2001434c
 80057a4:	2001431c 	.word	0x2001431c

080057a8 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b08a      	sub	sp, #40	; 0x28
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
 80057b0:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80057b2:	f3ef 8311 	mrs	r3, BASEPRI
 80057b6:	f04f 0120 	mov.w	r1, #32
 80057ba:	f381 8811 	msr	BASEPRI, r1
 80057be:	617b      	str	r3, [r7, #20]
 80057c0:	4827      	ldr	r0, [pc, #156]	; (8005860 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 80057c2:	f7fe fd4e 	bl	8004262 <_PreparePacket>
 80057c6:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80057cc:	4b25      	ldr	r3, [pc, #148]	; (8005864 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 80057ce:	691b      	ldr	r3, [r3, #16]
 80057d0:	687a      	ldr	r2, [r7, #4]
 80057d2:	1ad3      	subs	r3, r2, r3
 80057d4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	627b      	str	r3, [r7, #36]	; 0x24
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	623b      	str	r3, [r7, #32]
 80057de:	e00b      	b.n	80057f8 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 80057e0:	6a3b      	ldr	r3, [r7, #32]
 80057e2:	b2da      	uxtb	r2, r3
 80057e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e6:	1c59      	adds	r1, r3, #1
 80057e8:	6279      	str	r1, [r7, #36]	; 0x24
 80057ea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80057ee:	b2d2      	uxtb	r2, r2
 80057f0:	701a      	strb	r2, [r3, #0]
 80057f2:	6a3b      	ldr	r3, [r7, #32]
 80057f4:	09db      	lsrs	r3, r3, #7
 80057f6:	623b      	str	r3, [r7, #32]
 80057f8:	6a3b      	ldr	r3, [r7, #32]
 80057fa:	2b7f      	cmp	r3, #127	; 0x7f
 80057fc:	d8f0      	bhi.n	80057e0 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 80057fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005800:	1c5a      	adds	r2, r3, #1
 8005802:	627a      	str	r2, [r7, #36]	; 0x24
 8005804:	6a3a      	ldr	r2, [r7, #32]
 8005806:	b2d2      	uxtb	r2, r2
 8005808:	701a      	strb	r2, [r3, #0]
 800580a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	61fb      	str	r3, [r7, #28]
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	61bb      	str	r3, [r7, #24]
 8005816:	e00b      	b.n	8005830 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8005818:	69bb      	ldr	r3, [r7, #24]
 800581a:	b2da      	uxtb	r2, r3
 800581c:	69fb      	ldr	r3, [r7, #28]
 800581e:	1c59      	adds	r1, r3, #1
 8005820:	61f9      	str	r1, [r7, #28]
 8005822:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005826:	b2d2      	uxtb	r2, r2
 8005828:	701a      	strb	r2, [r3, #0]
 800582a:	69bb      	ldr	r3, [r7, #24]
 800582c:	09db      	lsrs	r3, r3, #7
 800582e:	61bb      	str	r3, [r7, #24]
 8005830:	69bb      	ldr	r3, [r7, #24]
 8005832:	2b7f      	cmp	r3, #127	; 0x7f
 8005834:	d8f0      	bhi.n	8005818 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8005836:	69fb      	ldr	r3, [r7, #28]
 8005838:	1c5a      	adds	r2, r3, #1
 800583a:	61fa      	str	r2, [r7, #28]
 800583c:	69ba      	ldr	r2, [r7, #24]
 800583e:	b2d2      	uxtb	r2, r2
 8005840:	701a      	strb	r2, [r3, #0]
 8005842:	69fb      	ldr	r3, [r7, #28]
 8005844:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8005846:	2207      	movs	r2, #7
 8005848:	68f9      	ldr	r1, [r7, #12]
 800584a:	6938      	ldr	r0, [r7, #16]
 800584c:	f7fe fdfc 	bl	8004448 <_SendPacket>
  RECORD_END();
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	f383 8811 	msr	BASEPRI, r3
}
 8005856:	bf00      	nop
 8005858:	3728      	adds	r7, #40	; 0x28
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}
 800585e:	bf00      	nop
 8005860:	2001434c 	.word	0x2001434c
 8005864:	2001431c 	.word	0x2001431c

08005868 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8005868:	b580      	push	{r7, lr}
 800586a:	b08c      	sub	sp, #48	; 0x30
 800586c:	af00      	add	r7, sp, #0
 800586e:	4603      	mov	r3, r0
 8005870:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8005872:	4b3b      	ldr	r3, [pc, #236]	; (8005960 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d06d      	beq.n	8005956 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800587a:	4b39      	ldr	r3, [pc, #228]	; (8005960 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8005880:	2300      	movs	r3, #0
 8005882:	62bb      	str	r3, [r7, #40]	; 0x28
 8005884:	e008      	b.n	8005898 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8005886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005888:	691b      	ldr	r3, [r3, #16]
 800588a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 800588c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800588e:	2b00      	cmp	r3, #0
 8005890:	d007      	beq.n	80058a2 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8005892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005894:	3301      	adds	r3, #1
 8005896:	62bb      	str	r3, [r7, #40]	; 0x28
 8005898:	79fb      	ldrb	r3, [r7, #7]
 800589a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800589c:	429a      	cmp	r2, r3
 800589e:	d3f2      	bcc.n	8005886 <SEGGER_SYSVIEW_SendModule+0x1e>
 80058a0:	e000      	b.n	80058a4 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80058a2:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80058a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d055      	beq.n	8005956 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80058aa:	f3ef 8311 	mrs	r3, BASEPRI
 80058ae:	f04f 0120 	mov.w	r1, #32
 80058b2:	f381 8811 	msr	BASEPRI, r1
 80058b6:	617b      	str	r3, [r7, #20]
 80058b8:	482a      	ldr	r0, [pc, #168]	; (8005964 <SEGGER_SYSVIEW_SendModule+0xfc>)
 80058ba:	f7fe fcd2 	bl	8004262 <_PreparePacket>
 80058be:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	627b      	str	r3, [r7, #36]	; 0x24
 80058c8:	79fb      	ldrb	r3, [r7, #7]
 80058ca:	623b      	str	r3, [r7, #32]
 80058cc:	e00b      	b.n	80058e6 <SEGGER_SYSVIEW_SendModule+0x7e>
 80058ce:	6a3b      	ldr	r3, [r7, #32]
 80058d0:	b2da      	uxtb	r2, r3
 80058d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d4:	1c59      	adds	r1, r3, #1
 80058d6:	6279      	str	r1, [r7, #36]	; 0x24
 80058d8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80058dc:	b2d2      	uxtb	r2, r2
 80058de:	701a      	strb	r2, [r3, #0]
 80058e0:	6a3b      	ldr	r3, [r7, #32]
 80058e2:	09db      	lsrs	r3, r3, #7
 80058e4:	623b      	str	r3, [r7, #32]
 80058e6:	6a3b      	ldr	r3, [r7, #32]
 80058e8:	2b7f      	cmp	r3, #127	; 0x7f
 80058ea:	d8f0      	bhi.n	80058ce <SEGGER_SYSVIEW_SendModule+0x66>
 80058ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ee:	1c5a      	adds	r2, r3, #1
 80058f0:	627a      	str	r2, [r7, #36]	; 0x24
 80058f2:	6a3a      	ldr	r2, [r7, #32]
 80058f4:	b2d2      	uxtb	r2, r2
 80058f6:	701a      	strb	r2, [r3, #0]
 80058f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058fa:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	61fb      	str	r3, [r7, #28]
 8005900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	61bb      	str	r3, [r7, #24]
 8005906:	e00b      	b.n	8005920 <SEGGER_SYSVIEW_SendModule+0xb8>
 8005908:	69bb      	ldr	r3, [r7, #24]
 800590a:	b2da      	uxtb	r2, r3
 800590c:	69fb      	ldr	r3, [r7, #28]
 800590e:	1c59      	adds	r1, r3, #1
 8005910:	61f9      	str	r1, [r7, #28]
 8005912:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005916:	b2d2      	uxtb	r2, r2
 8005918:	701a      	strb	r2, [r3, #0]
 800591a:	69bb      	ldr	r3, [r7, #24]
 800591c:	09db      	lsrs	r3, r3, #7
 800591e:	61bb      	str	r3, [r7, #24]
 8005920:	69bb      	ldr	r3, [r7, #24]
 8005922:	2b7f      	cmp	r3, #127	; 0x7f
 8005924:	d8f0      	bhi.n	8005908 <SEGGER_SYSVIEW_SendModule+0xa0>
 8005926:	69fb      	ldr	r3, [r7, #28]
 8005928:	1c5a      	adds	r2, r3, #1
 800592a:	61fa      	str	r2, [r7, #28]
 800592c:	69ba      	ldr	r2, [r7, #24]
 800592e:	b2d2      	uxtb	r2, r2
 8005930:	701a      	strb	r2, [r3, #0]
 8005932:	69fb      	ldr	r3, [r7, #28]
 8005934:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	2280      	movs	r2, #128	; 0x80
 800593c:	4619      	mov	r1, r3
 800593e:	68f8      	ldr	r0, [r7, #12]
 8005940:	f7fe fc42 	bl	80041c8 <_EncodeStr>
 8005944:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8005946:	2216      	movs	r2, #22
 8005948:	68f9      	ldr	r1, [r7, #12]
 800594a:	6938      	ldr	r0, [r7, #16]
 800594c:	f7fe fd7c 	bl	8004448 <_SendPacket>
      RECORD_END();
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8005956:	bf00      	nop
 8005958:	3730      	adds	r7, #48	; 0x30
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}
 800595e:	bf00      	nop
 8005960:	20014344 	.word	0x20014344
 8005964:	2001434c 	.word	0x2001434c

08005968 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8005968:	b580      	push	{r7, lr}
 800596a:	b082      	sub	sp, #8
 800596c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800596e:	4b0c      	ldr	r3, [pc, #48]	; (80059a0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d00f      	beq.n	8005996 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8005976:	4b0a      	ldr	r3, [pc, #40]	; (80059a0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	68db      	ldr	r3, [r3, #12]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d002      	beq.n	800598a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	68db      	ldr	r3, [r3, #12]
 8005988:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	691b      	ldr	r3, [r3, #16]
 800598e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d1f2      	bne.n	800597c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8005996:	bf00      	nop
 8005998:	3708      	adds	r7, #8
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}
 800599e:	bf00      	nop
 80059a0:	20014344 	.word	0x20014344

080059a4 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b086      	sub	sp, #24
 80059a8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80059aa:	f3ef 8311 	mrs	r3, BASEPRI
 80059ae:	f04f 0120 	mov.w	r1, #32
 80059b2:	f381 8811 	msr	BASEPRI, r1
 80059b6:	60fb      	str	r3, [r7, #12]
 80059b8:	4817      	ldr	r0, [pc, #92]	; (8005a18 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80059ba:	f7fe fc52 	bl	8004262 <_PreparePacket>
 80059be:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	617b      	str	r3, [r7, #20]
 80059c8:	4b14      	ldr	r3, [pc, #80]	; (8005a1c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80059ca:	781b      	ldrb	r3, [r3, #0]
 80059cc:	613b      	str	r3, [r7, #16]
 80059ce:	e00b      	b.n	80059e8 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	b2da      	uxtb	r2, r3
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	1c59      	adds	r1, r3, #1
 80059d8:	6179      	str	r1, [r7, #20]
 80059da:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059de:	b2d2      	uxtb	r2, r2
 80059e0:	701a      	strb	r2, [r3, #0]
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	09db      	lsrs	r3, r3, #7
 80059e6:	613b      	str	r3, [r7, #16]
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	2b7f      	cmp	r3, #127	; 0x7f
 80059ec:	d8f0      	bhi.n	80059d0 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	1c5a      	adds	r2, r3, #1
 80059f2:	617a      	str	r2, [r7, #20]
 80059f4:	693a      	ldr	r2, [r7, #16]
 80059f6:	b2d2      	uxtb	r2, r2
 80059f8:	701a      	strb	r2, [r3, #0]
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80059fe:	221b      	movs	r2, #27
 8005a00:	6879      	ldr	r1, [r7, #4]
 8005a02:	68b8      	ldr	r0, [r7, #8]
 8005a04:	f7fe fd20 	bl	8004448 <_SendPacket>
  RECORD_END();
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	f383 8811 	msr	BASEPRI, r3
}
 8005a0e:	bf00      	nop
 8005a10:	3718      	adds	r7, #24
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}
 8005a16:	bf00      	nop
 8005a18:	2001434c 	.word	0x2001434c
 8005a1c:	20014348 	.word	0x20014348

08005a20 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8005a20:	b40f      	push	{r0, r1, r2, r3}
 8005a22:	b580      	push	{r7, lr}
 8005a24:	b082      	sub	sp, #8
 8005a26:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8005a28:	f107 0314 	add.w	r3, r7, #20
 8005a2c:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8005a2e:	1d3b      	adds	r3, r7, #4
 8005a30:	461a      	mov	r2, r3
 8005a32:	2100      	movs	r1, #0
 8005a34:	6938      	ldr	r0, [r7, #16]
 8005a36:	f7fe ff91 	bl	800495c <_VPrintTarget>
  va_end(ParamList);
}
 8005a3a:	bf00      	nop
 8005a3c:	3708      	adds	r7, #8
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005a44:	b004      	add	sp, #16
 8005a46:	4770      	bx	lr

08005a48 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b08a      	sub	sp, #40	; 0x28
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005a50:	f3ef 8311 	mrs	r3, BASEPRI
 8005a54:	f04f 0120 	mov.w	r1, #32
 8005a58:	f381 8811 	msr	BASEPRI, r1
 8005a5c:	617b      	str	r3, [r7, #20]
 8005a5e:	4827      	ldr	r0, [pc, #156]	; (8005afc <SEGGER_SYSVIEW_Warn+0xb4>)
 8005a60:	f7fe fbff 	bl	8004262 <_PreparePacket>
 8005a64:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005a66:	2280      	movs	r2, #128	; 0x80
 8005a68:	6879      	ldr	r1, [r7, #4]
 8005a6a:	6938      	ldr	r0, [r7, #16]
 8005a6c:	f7fe fbac 	bl	80041c8 <_EncodeStr>
 8005a70:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	627b      	str	r3, [r7, #36]	; 0x24
 8005a76:	2301      	movs	r3, #1
 8005a78:	623b      	str	r3, [r7, #32]
 8005a7a:	e00b      	b.n	8005a94 <SEGGER_SYSVIEW_Warn+0x4c>
 8005a7c:	6a3b      	ldr	r3, [r7, #32]
 8005a7e:	b2da      	uxtb	r2, r3
 8005a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a82:	1c59      	adds	r1, r3, #1
 8005a84:	6279      	str	r1, [r7, #36]	; 0x24
 8005a86:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a8a:	b2d2      	uxtb	r2, r2
 8005a8c:	701a      	strb	r2, [r3, #0]
 8005a8e:	6a3b      	ldr	r3, [r7, #32]
 8005a90:	09db      	lsrs	r3, r3, #7
 8005a92:	623b      	str	r3, [r7, #32]
 8005a94:	6a3b      	ldr	r3, [r7, #32]
 8005a96:	2b7f      	cmp	r3, #127	; 0x7f
 8005a98:	d8f0      	bhi.n	8005a7c <SEGGER_SYSVIEW_Warn+0x34>
 8005a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a9c:	1c5a      	adds	r2, r3, #1
 8005a9e:	627a      	str	r2, [r7, #36]	; 0x24
 8005aa0:	6a3a      	ldr	r2, [r7, #32]
 8005aa2:	b2d2      	uxtb	r2, r2
 8005aa4:	701a      	strb	r2, [r3, #0]
 8005aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	61fb      	str	r3, [r7, #28]
 8005aae:	2300      	movs	r3, #0
 8005ab0:	61bb      	str	r3, [r7, #24]
 8005ab2:	e00b      	b.n	8005acc <SEGGER_SYSVIEW_Warn+0x84>
 8005ab4:	69bb      	ldr	r3, [r7, #24]
 8005ab6:	b2da      	uxtb	r2, r3
 8005ab8:	69fb      	ldr	r3, [r7, #28]
 8005aba:	1c59      	adds	r1, r3, #1
 8005abc:	61f9      	str	r1, [r7, #28]
 8005abe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ac2:	b2d2      	uxtb	r2, r2
 8005ac4:	701a      	strb	r2, [r3, #0]
 8005ac6:	69bb      	ldr	r3, [r7, #24]
 8005ac8:	09db      	lsrs	r3, r3, #7
 8005aca:	61bb      	str	r3, [r7, #24]
 8005acc:	69bb      	ldr	r3, [r7, #24]
 8005ace:	2b7f      	cmp	r3, #127	; 0x7f
 8005ad0:	d8f0      	bhi.n	8005ab4 <SEGGER_SYSVIEW_Warn+0x6c>
 8005ad2:	69fb      	ldr	r3, [r7, #28]
 8005ad4:	1c5a      	adds	r2, r3, #1
 8005ad6:	61fa      	str	r2, [r7, #28]
 8005ad8:	69ba      	ldr	r2, [r7, #24]
 8005ada:	b2d2      	uxtb	r2, r2
 8005adc:	701a      	strb	r2, [r3, #0]
 8005ade:	69fb      	ldr	r3, [r7, #28]
 8005ae0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005ae2:	221a      	movs	r2, #26
 8005ae4:	68f9      	ldr	r1, [r7, #12]
 8005ae6:	6938      	ldr	r0, [r7, #16]
 8005ae8:	f7fe fcae 	bl	8004448 <_SendPacket>
  RECORD_END();
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	f383 8811 	msr	BASEPRI, r3
}
 8005af2:	bf00      	nop
 8005af4:	3728      	adds	r7, #40	; 0x28
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}
 8005afa:	bf00      	nop
 8005afc:	2001434c 	.word	0x2001434c

08005b00 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8005b00:	b580      	push	{r7, lr}
 8005b02:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005b04:	4b13      	ldr	r3, [pc, #76]	; (8005b54 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005b06:	7e1b      	ldrb	r3, [r3, #24]
 8005b08:	4619      	mov	r1, r3
 8005b0a:	4a13      	ldr	r2, [pc, #76]	; (8005b58 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8005b0c:	460b      	mov	r3, r1
 8005b0e:	005b      	lsls	r3, r3, #1
 8005b10:	440b      	add	r3, r1
 8005b12:	00db      	lsls	r3, r3, #3
 8005b14:	4413      	add	r3, r2
 8005b16:	336c      	adds	r3, #108	; 0x6c
 8005b18:	681a      	ldr	r2, [r3, #0]
 8005b1a:	4b0e      	ldr	r3, [pc, #56]	; (8005b54 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005b1c:	7e1b      	ldrb	r3, [r3, #24]
 8005b1e:	4618      	mov	r0, r3
 8005b20:	490d      	ldr	r1, [pc, #52]	; (8005b58 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8005b22:	4603      	mov	r3, r0
 8005b24:	005b      	lsls	r3, r3, #1
 8005b26:	4403      	add	r3, r0
 8005b28:	00db      	lsls	r3, r3, #3
 8005b2a:	440b      	add	r3, r1
 8005b2c:	3370      	adds	r3, #112	; 0x70
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	429a      	cmp	r2, r3
 8005b32:	d00b      	beq.n	8005b4c <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005b34:	4b07      	ldr	r3, [pc, #28]	; (8005b54 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005b36:	789b      	ldrb	r3, [r3, #2]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d107      	bne.n	8005b4c <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005b3c:	4b05      	ldr	r3, [pc, #20]	; (8005b54 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005b3e:	2201      	movs	r2, #1
 8005b40:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005b42:	f7fe fb9b 	bl	800427c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005b46:	4b03      	ldr	r3, [pc, #12]	; (8005b54 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005b48:	2200      	movs	r2, #0
 8005b4a:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8005b4c:	4b01      	ldr	r3, [pc, #4]	; (8005b54 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005b4e:	781b      	ldrb	r3, [r3, #0]
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	bd80      	pop	{r7, pc}
 8005b54:	2001431c 	.word	0x2001431c
 8005b58:	20012e5c 	.word	0x20012e5c

08005b5c <__libc_init_array>:
 8005b5c:	b570      	push	{r4, r5, r6, lr}
 8005b5e:	4d0d      	ldr	r5, [pc, #52]	; (8005b94 <__libc_init_array+0x38>)
 8005b60:	4c0d      	ldr	r4, [pc, #52]	; (8005b98 <__libc_init_array+0x3c>)
 8005b62:	1b64      	subs	r4, r4, r5
 8005b64:	10a4      	asrs	r4, r4, #2
 8005b66:	2600      	movs	r6, #0
 8005b68:	42a6      	cmp	r6, r4
 8005b6a:	d109      	bne.n	8005b80 <__libc_init_array+0x24>
 8005b6c:	4d0b      	ldr	r5, [pc, #44]	; (8005b9c <__libc_init_array+0x40>)
 8005b6e:	4c0c      	ldr	r4, [pc, #48]	; (8005ba0 <__libc_init_array+0x44>)
 8005b70:	f000 f83e 	bl	8005bf0 <_init>
 8005b74:	1b64      	subs	r4, r4, r5
 8005b76:	10a4      	asrs	r4, r4, #2
 8005b78:	2600      	movs	r6, #0
 8005b7a:	42a6      	cmp	r6, r4
 8005b7c:	d105      	bne.n	8005b8a <__libc_init_array+0x2e>
 8005b7e:	bd70      	pop	{r4, r5, r6, pc}
 8005b80:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b84:	4798      	blx	r3
 8005b86:	3601      	adds	r6, #1
 8005b88:	e7ee      	b.n	8005b68 <__libc_init_array+0xc>
 8005b8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b8e:	4798      	blx	r3
 8005b90:	3601      	adds	r6, #1
 8005b92:	e7f2      	b.n	8005b7a <__libc_init_array+0x1e>
 8005b94:	08005d90 	.word	0x08005d90
 8005b98:	08005d90 	.word	0x08005d90
 8005b9c:	08005d90 	.word	0x08005d90
 8005ba0:	08005d94 	.word	0x08005d94

08005ba4 <memcmp>:
 8005ba4:	b510      	push	{r4, lr}
 8005ba6:	3901      	subs	r1, #1
 8005ba8:	4402      	add	r2, r0
 8005baa:	4290      	cmp	r0, r2
 8005bac:	d101      	bne.n	8005bb2 <memcmp+0xe>
 8005bae:	2000      	movs	r0, #0
 8005bb0:	e005      	b.n	8005bbe <memcmp+0x1a>
 8005bb2:	7803      	ldrb	r3, [r0, #0]
 8005bb4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005bb8:	42a3      	cmp	r3, r4
 8005bba:	d001      	beq.n	8005bc0 <memcmp+0x1c>
 8005bbc:	1b18      	subs	r0, r3, r4
 8005bbe:	bd10      	pop	{r4, pc}
 8005bc0:	3001      	adds	r0, #1
 8005bc2:	e7f2      	b.n	8005baa <memcmp+0x6>

08005bc4 <memcpy>:
 8005bc4:	440a      	add	r2, r1
 8005bc6:	4291      	cmp	r1, r2
 8005bc8:	f100 33ff 	add.w	r3, r0, #4294967295
 8005bcc:	d100      	bne.n	8005bd0 <memcpy+0xc>
 8005bce:	4770      	bx	lr
 8005bd0:	b510      	push	{r4, lr}
 8005bd2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005bd6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005bda:	4291      	cmp	r1, r2
 8005bdc:	d1f9      	bne.n	8005bd2 <memcpy+0xe>
 8005bde:	bd10      	pop	{r4, pc}

08005be0 <memset>:
 8005be0:	4402      	add	r2, r0
 8005be2:	4603      	mov	r3, r0
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d100      	bne.n	8005bea <memset+0xa>
 8005be8:	4770      	bx	lr
 8005bea:	f803 1b01 	strb.w	r1, [r3], #1
 8005bee:	e7f9      	b.n	8005be4 <memset+0x4>

08005bf0 <_init>:
 8005bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bf2:	bf00      	nop
 8005bf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bf6:	bc08      	pop	{r3}
 8005bf8:	469e      	mov	lr, r3
 8005bfa:	4770      	bx	lr

08005bfc <_fini>:
 8005bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bfe:	bf00      	nop
 8005c00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c02:	bc08      	pop	{r3}
 8005c04:	469e      	mov	lr, r3
 8005c06:	4770      	bx	lr
