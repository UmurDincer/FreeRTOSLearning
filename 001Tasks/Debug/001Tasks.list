
001Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000061bc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000018c  0800634c  0800634c  0001634c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064d8  080064d8  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  080064d8  080064d8  000164d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080064e0  080064e0  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080064e0  080064e0  000164e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080064e4  080064e4  000164e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080064e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020080  2**0
                  CONTENTS
 10 .bss          00014428  20000080  20000080  00020080  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200144a8  200144a8  00020080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001219c  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a48  00000000  00000000  0003224c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001128  00000000  00000000  00034c98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fc0  00000000  00000000  00035dc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023703  00000000  00000000  00036d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000131d4  00000000  00000000  0005a483  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d69db  00000000  00000000  0006d657  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00144032  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004b38  00000000  00000000  00144084  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006334 	.word	0x08006334

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	08006334 	.word	0x08006334

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012ec0 	.word	0x20012ec0
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b974 	b.w	8000610 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	468e      	mov	lr, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	d14d      	bne.n	80003ea <__udivmoddi4+0xaa>
 800034e:	428a      	cmp	r2, r1
 8000350:	4694      	mov	ip, r2
 8000352:	d969      	bls.n	8000428 <__udivmoddi4+0xe8>
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	b152      	cbz	r2, 8000370 <__udivmoddi4+0x30>
 800035a:	fa01 f302 	lsl.w	r3, r1, r2
 800035e:	f1c2 0120 	rsb	r1, r2, #32
 8000362:	fa20 f101 	lsr.w	r1, r0, r1
 8000366:	fa0c fc02 	lsl.w	ip, ip, r2
 800036a:	ea41 0e03 	orr.w	lr, r1, r3
 800036e:	4094      	lsls	r4, r2
 8000370:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000374:	0c21      	lsrs	r1, r4, #16
 8000376:	fbbe f6f8 	udiv	r6, lr, r8
 800037a:	fa1f f78c 	uxth.w	r7, ip
 800037e:	fb08 e316 	mls	r3, r8, r6, lr
 8000382:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000386:	fb06 f107 	mul.w	r1, r6, r7
 800038a:	4299      	cmp	r1, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x64>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f106 30ff 	add.w	r0, r6, #4294967295
 8000396:	f080 811f 	bcs.w	80005d8 <__udivmoddi4+0x298>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 811c 	bls.w	80005d8 <__udivmoddi4+0x298>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	4463      	add	r3, ip
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b2a4      	uxth	r4, r4
 80003a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ac:	fb08 3310 	mls	r3, r8, r0, r3
 80003b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b4:	fb00 f707 	mul.w	r7, r0, r7
 80003b8:	42a7      	cmp	r7, r4
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x92>
 80003bc:	eb1c 0404 	adds.w	r4, ip, r4
 80003c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c4:	f080 810a 	bcs.w	80005dc <__udivmoddi4+0x29c>
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	f240 8107 	bls.w	80005dc <__udivmoddi4+0x29c>
 80003ce:	4464      	add	r4, ip
 80003d0:	3802      	subs	r0, #2
 80003d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d6:	1be4      	subs	r4, r4, r7
 80003d8:	2600      	movs	r6, #0
 80003da:	b11d      	cbz	r5, 80003e4 <__udivmoddi4+0xa4>
 80003dc:	40d4      	lsrs	r4, r2
 80003de:	2300      	movs	r3, #0
 80003e0:	e9c5 4300 	strd	r4, r3, [r5]
 80003e4:	4631      	mov	r1, r6
 80003e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d909      	bls.n	8000402 <__udivmoddi4+0xc2>
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	f000 80ef 	beq.w	80005d2 <__udivmoddi4+0x292>
 80003f4:	2600      	movs	r6, #0
 80003f6:	e9c5 0100 	strd	r0, r1, [r5]
 80003fa:	4630      	mov	r0, r6
 80003fc:	4631      	mov	r1, r6
 80003fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000402:	fab3 f683 	clz	r6, r3
 8000406:	2e00      	cmp	r6, #0
 8000408:	d14a      	bne.n	80004a0 <__udivmoddi4+0x160>
 800040a:	428b      	cmp	r3, r1
 800040c:	d302      	bcc.n	8000414 <__udivmoddi4+0xd4>
 800040e:	4282      	cmp	r2, r0
 8000410:	f200 80f9 	bhi.w	8000606 <__udivmoddi4+0x2c6>
 8000414:	1a84      	subs	r4, r0, r2
 8000416:	eb61 0303 	sbc.w	r3, r1, r3
 800041a:	2001      	movs	r0, #1
 800041c:	469e      	mov	lr, r3
 800041e:	2d00      	cmp	r5, #0
 8000420:	d0e0      	beq.n	80003e4 <__udivmoddi4+0xa4>
 8000422:	e9c5 4e00 	strd	r4, lr, [r5]
 8000426:	e7dd      	b.n	80003e4 <__udivmoddi4+0xa4>
 8000428:	b902      	cbnz	r2, 800042c <__udivmoddi4+0xec>
 800042a:	deff      	udf	#255	; 0xff
 800042c:	fab2 f282 	clz	r2, r2
 8000430:	2a00      	cmp	r2, #0
 8000432:	f040 8092 	bne.w	800055a <__udivmoddi4+0x21a>
 8000436:	eba1 010c 	sub.w	r1, r1, ip
 800043a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800043e:	fa1f fe8c 	uxth.w	lr, ip
 8000442:	2601      	movs	r6, #1
 8000444:	0c20      	lsrs	r0, r4, #16
 8000446:	fbb1 f3f7 	udiv	r3, r1, r7
 800044a:	fb07 1113 	mls	r1, r7, r3, r1
 800044e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000452:	fb0e f003 	mul.w	r0, lr, r3
 8000456:	4288      	cmp	r0, r1
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x12c>
 800045a:	eb1c 0101 	adds.w	r1, ip, r1
 800045e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x12a>
 8000464:	4288      	cmp	r0, r1
 8000466:	f200 80cb 	bhi.w	8000600 <__udivmoddi4+0x2c0>
 800046a:	4643      	mov	r3, r8
 800046c:	1a09      	subs	r1, r1, r0
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb1 f0f7 	udiv	r0, r1, r7
 8000474:	fb07 1110 	mls	r1, r7, r0, r1
 8000478:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800047c:	fb0e fe00 	mul.w	lr, lr, r0
 8000480:	45a6      	cmp	lr, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x156>
 8000484:	eb1c 0404 	adds.w	r4, ip, r4
 8000488:	f100 31ff 	add.w	r1, r0, #4294967295
 800048c:	d202      	bcs.n	8000494 <__udivmoddi4+0x154>
 800048e:	45a6      	cmp	lr, r4
 8000490:	f200 80bb 	bhi.w	800060a <__udivmoddi4+0x2ca>
 8000494:	4608      	mov	r0, r1
 8000496:	eba4 040e 	sub.w	r4, r4, lr
 800049a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800049e:	e79c      	b.n	80003da <__udivmoddi4+0x9a>
 80004a0:	f1c6 0720 	rsb	r7, r6, #32
 80004a4:	40b3      	lsls	r3, r6
 80004a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80004ae:	fa20 f407 	lsr.w	r4, r0, r7
 80004b2:	fa01 f306 	lsl.w	r3, r1, r6
 80004b6:	431c      	orrs	r4, r3
 80004b8:	40f9      	lsrs	r1, r7
 80004ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004be:	fa00 f306 	lsl.w	r3, r0, r6
 80004c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004c6:	0c20      	lsrs	r0, r4, #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fb09 1118 	mls	r1, r9, r8, r1
 80004d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d4:	fb08 f00e 	mul.w	r0, r8, lr
 80004d8:	4288      	cmp	r0, r1
 80004da:	fa02 f206 	lsl.w	r2, r2, r6
 80004de:	d90b      	bls.n	80004f8 <__udivmoddi4+0x1b8>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004e8:	f080 8088 	bcs.w	80005fc <__udivmoddi4+0x2bc>
 80004ec:	4288      	cmp	r0, r1
 80004ee:	f240 8085 	bls.w	80005fc <__udivmoddi4+0x2bc>
 80004f2:	f1a8 0802 	sub.w	r8, r8, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1a09      	subs	r1, r1, r0
 80004fa:	b2a4      	uxth	r4, r4
 80004fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000500:	fb09 1110 	mls	r1, r9, r0, r1
 8000504:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000508:	fb00 fe0e 	mul.w	lr, r0, lr
 800050c:	458e      	cmp	lr, r1
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x1e2>
 8000510:	eb1c 0101 	adds.w	r1, ip, r1
 8000514:	f100 34ff 	add.w	r4, r0, #4294967295
 8000518:	d26c      	bcs.n	80005f4 <__udivmoddi4+0x2b4>
 800051a:	458e      	cmp	lr, r1
 800051c:	d96a      	bls.n	80005f4 <__udivmoddi4+0x2b4>
 800051e:	3802      	subs	r0, #2
 8000520:	4461      	add	r1, ip
 8000522:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000526:	fba0 9402 	umull	r9, r4, r0, r2
 800052a:	eba1 010e 	sub.w	r1, r1, lr
 800052e:	42a1      	cmp	r1, r4
 8000530:	46c8      	mov	r8, r9
 8000532:	46a6      	mov	lr, r4
 8000534:	d356      	bcc.n	80005e4 <__udivmoddi4+0x2a4>
 8000536:	d053      	beq.n	80005e0 <__udivmoddi4+0x2a0>
 8000538:	b15d      	cbz	r5, 8000552 <__udivmoddi4+0x212>
 800053a:	ebb3 0208 	subs.w	r2, r3, r8
 800053e:	eb61 010e 	sbc.w	r1, r1, lr
 8000542:	fa01 f707 	lsl.w	r7, r1, r7
 8000546:	fa22 f306 	lsr.w	r3, r2, r6
 800054a:	40f1      	lsrs	r1, r6
 800054c:	431f      	orrs	r7, r3
 800054e:	e9c5 7100 	strd	r7, r1, [r5]
 8000552:	2600      	movs	r6, #0
 8000554:	4631      	mov	r1, r6
 8000556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	40d8      	lsrs	r0, r3
 8000560:	fa0c fc02 	lsl.w	ip, ip, r2
 8000564:	fa21 f303 	lsr.w	r3, r1, r3
 8000568:	4091      	lsls	r1, r2
 800056a:	4301      	orrs	r1, r0
 800056c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000570:	fa1f fe8c 	uxth.w	lr, ip
 8000574:	fbb3 f0f7 	udiv	r0, r3, r7
 8000578:	fb07 3610 	mls	r6, r7, r0, r3
 800057c:	0c0b      	lsrs	r3, r1, #16
 800057e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000582:	fb00 f60e 	mul.w	r6, r0, lr
 8000586:	429e      	cmp	r6, r3
 8000588:	fa04 f402 	lsl.w	r4, r4, r2
 800058c:	d908      	bls.n	80005a0 <__udivmoddi4+0x260>
 800058e:	eb1c 0303 	adds.w	r3, ip, r3
 8000592:	f100 38ff 	add.w	r8, r0, #4294967295
 8000596:	d22f      	bcs.n	80005f8 <__udivmoddi4+0x2b8>
 8000598:	429e      	cmp	r6, r3
 800059a:	d92d      	bls.n	80005f8 <__udivmoddi4+0x2b8>
 800059c:	3802      	subs	r0, #2
 800059e:	4463      	add	r3, ip
 80005a0:	1b9b      	subs	r3, r3, r6
 80005a2:	b289      	uxth	r1, r1
 80005a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005a8:	fb07 3316 	mls	r3, r7, r6, r3
 80005ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005b0:	fb06 f30e 	mul.w	r3, r6, lr
 80005b4:	428b      	cmp	r3, r1
 80005b6:	d908      	bls.n	80005ca <__udivmoddi4+0x28a>
 80005b8:	eb1c 0101 	adds.w	r1, ip, r1
 80005bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80005c0:	d216      	bcs.n	80005f0 <__udivmoddi4+0x2b0>
 80005c2:	428b      	cmp	r3, r1
 80005c4:	d914      	bls.n	80005f0 <__udivmoddi4+0x2b0>
 80005c6:	3e02      	subs	r6, #2
 80005c8:	4461      	add	r1, ip
 80005ca:	1ac9      	subs	r1, r1, r3
 80005cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005d0:	e738      	b.n	8000444 <__udivmoddi4+0x104>
 80005d2:	462e      	mov	r6, r5
 80005d4:	4628      	mov	r0, r5
 80005d6:	e705      	b.n	80003e4 <__udivmoddi4+0xa4>
 80005d8:	4606      	mov	r6, r0
 80005da:	e6e3      	b.n	80003a4 <__udivmoddi4+0x64>
 80005dc:	4618      	mov	r0, r3
 80005de:	e6f8      	b.n	80003d2 <__udivmoddi4+0x92>
 80005e0:	454b      	cmp	r3, r9
 80005e2:	d2a9      	bcs.n	8000538 <__udivmoddi4+0x1f8>
 80005e4:	ebb9 0802 	subs.w	r8, r9, r2
 80005e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005ec:	3801      	subs	r0, #1
 80005ee:	e7a3      	b.n	8000538 <__udivmoddi4+0x1f8>
 80005f0:	4646      	mov	r6, r8
 80005f2:	e7ea      	b.n	80005ca <__udivmoddi4+0x28a>
 80005f4:	4620      	mov	r0, r4
 80005f6:	e794      	b.n	8000522 <__udivmoddi4+0x1e2>
 80005f8:	4640      	mov	r0, r8
 80005fa:	e7d1      	b.n	80005a0 <__udivmoddi4+0x260>
 80005fc:	46d0      	mov	r8, sl
 80005fe:	e77b      	b.n	80004f8 <__udivmoddi4+0x1b8>
 8000600:	3b02      	subs	r3, #2
 8000602:	4461      	add	r1, ip
 8000604:	e732      	b.n	800046c <__udivmoddi4+0x12c>
 8000606:	4630      	mov	r0, r6
 8000608:	e709      	b.n	800041e <__udivmoddi4+0xde>
 800060a:	4464      	add	r4, ip
 800060c:	3802      	subs	r0, #2
 800060e:	e742      	b.n	8000496 <__udivmoddi4+0x156>

08000610 <__aeabi_idiv0>:
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop

08000614 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b088      	sub	sp, #32
 8000618:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800061a:	f000 fb4f 	bl	8000cbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800061e:	f000 f853 	bl	80006c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000622:	f000 f8bb 	bl	800079c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  //Enable the cycle counting
  DWT_CTRL |= (1 << 0);
 8000626:	4b20      	ldr	r3, [pc, #128]	; (80006a8 <main+0x94>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4a1f      	ldr	r2, [pc, #124]	; (80006a8 <main+0x94>)
 800062c:	f043 0301 	orr.w	r3, r3, #1
 8000630:	6013      	str	r3, [r2, #0]

  SEGGER_UART_init(500000);
 8000632:	481e      	ldr	r0, [pc, #120]	; (80006ac <main+0x98>)
 8000634:	f003 f8cc 	bl	80037d0 <SEGGER_UART_init>

  SEGGER_SYSVIEW_Conf();
 8000638:	f002 fef4 	bl	8003424 <SEGGER_SYSVIEW_Conf>

//  SEGGER_SYSVIEW_Start();

  status = xTaskCreate(task1_handler, "Task-1", 200, "Hello world from Task-1", 2, &task1_handle);
 800063c:	f107 0308 	add.w	r3, r7, #8
 8000640:	9301      	str	r3, [sp, #4]
 8000642:	2302      	movs	r3, #2
 8000644:	9300      	str	r3, [sp, #0]
 8000646:	4b1a      	ldr	r3, [pc, #104]	; (80006b0 <main+0x9c>)
 8000648:	22c8      	movs	r2, #200	; 0xc8
 800064a:	491a      	ldr	r1, [pc, #104]	; (80006b4 <main+0xa0>)
 800064c:	481a      	ldr	r0, [pc, #104]	; (80006b8 <main+0xa4>)
 800064e:	f001 fdee 	bl	800222e <xTaskCreate>
 8000652:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 8000654:	697b      	ldr	r3, [r7, #20]
 8000656:	2b01      	cmp	r3, #1
 8000658:	d00a      	beq.n	8000670 <main+0x5c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800065a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800065e:	f383 8811 	msr	BASEPRI, r3
 8000662:	f3bf 8f6f 	isb	sy
 8000666:	f3bf 8f4f 	dsb	sy
 800066a:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800066c:	bf00      	nop
 800066e:	e7fe      	b.n	800066e <main+0x5a>

  status = xTaskCreate(task2_handler, "Task-2", 200, "Hello world from Task-2", 2, &task2_handle);
 8000670:	1d3b      	adds	r3, r7, #4
 8000672:	9301      	str	r3, [sp, #4]
 8000674:	2302      	movs	r3, #2
 8000676:	9300      	str	r3, [sp, #0]
 8000678:	4b10      	ldr	r3, [pc, #64]	; (80006bc <main+0xa8>)
 800067a:	22c8      	movs	r2, #200	; 0xc8
 800067c:	4910      	ldr	r1, [pc, #64]	; (80006c0 <main+0xac>)
 800067e:	4811      	ldr	r0, [pc, #68]	; (80006c4 <main+0xb0>)
 8000680:	f001 fdd5 	bl	800222e <xTaskCreate>
 8000684:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 8000686:	697b      	ldr	r3, [r7, #20]
 8000688:	2b01      	cmp	r3, #1
 800068a:	d00a      	beq.n	80006a2 <main+0x8e>
        __asm volatile
 800068c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000690:	f383 8811 	msr	BASEPRI, r3
 8000694:	f3bf 8f6f 	isb	sy
 8000698:	f3bf 8f4f 	dsb	sy
 800069c:	60fb      	str	r3, [r7, #12]
    }
 800069e:	bf00      	nop
 80006a0:	e7fe      	b.n	80006a0 <main+0x8c>

  //start the freeRTOS scheduler

  vTaskStartScheduler();
 80006a2:	f001 ff19 	bl	80024d8 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006a6:	e7fe      	b.n	80006a6 <main+0x92>
 80006a8:	e0001000 	.word	0xe0001000
 80006ac:	0007a120 	.word	0x0007a120
 80006b0:	0800634c 	.word	0x0800634c
 80006b4:	08006364 	.word	0x08006364
 80006b8:	08000a59 	.word	0x08000a59
 80006bc:	0800636c 	.word	0x0800636c
 80006c0:	08006384 	.word	0x08006384
 80006c4:	08000a95 	.word	0x08000a95

080006c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b094      	sub	sp, #80	; 0x50
 80006cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ce:	f107 0320 	add.w	r3, r7, #32
 80006d2:	2230      	movs	r2, #48	; 0x30
 80006d4:	2100      	movs	r1, #0
 80006d6:	4618      	mov	r0, r3
 80006d8:	f005 f9a2 	bl	8005a20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006dc:	f107 030c 	add.w	r3, r7, #12
 80006e0:	2200      	movs	r2, #0
 80006e2:	601a      	str	r2, [r3, #0]
 80006e4:	605a      	str	r2, [r3, #4]
 80006e6:	609a      	str	r2, [r3, #8]
 80006e8:	60da      	str	r2, [r3, #12]
 80006ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ec:	2300      	movs	r3, #0
 80006ee:	60bb      	str	r3, [r7, #8]
 80006f0:	4b28      	ldr	r3, [pc, #160]	; (8000794 <SystemClock_Config+0xcc>)
 80006f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f4:	4a27      	ldr	r2, [pc, #156]	; (8000794 <SystemClock_Config+0xcc>)
 80006f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006fa:	6413      	str	r3, [r2, #64]	; 0x40
 80006fc:	4b25      	ldr	r3, [pc, #148]	; (8000794 <SystemClock_Config+0xcc>)
 80006fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000700:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000704:	60bb      	str	r3, [r7, #8]
 8000706:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000708:	2300      	movs	r3, #0
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	4b22      	ldr	r3, [pc, #136]	; (8000798 <SystemClock_Config+0xd0>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a21      	ldr	r2, [pc, #132]	; (8000798 <SystemClock_Config+0xd0>)
 8000712:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000716:	6013      	str	r3, [r2, #0]
 8000718:	4b1f      	ldr	r3, [pc, #124]	; (8000798 <SystemClock_Config+0xd0>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000720:	607b      	str	r3, [r7, #4]
 8000722:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000724:	2302      	movs	r3, #2
 8000726:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000728:	2301      	movs	r3, #1
 800072a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800072c:	2310      	movs	r3, #16
 800072e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000730:	2302      	movs	r3, #2
 8000732:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000734:	2300      	movs	r3, #0
 8000736:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000738:	2308      	movs	r3, #8
 800073a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800073c:	23a8      	movs	r3, #168	; 0xa8
 800073e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000740:	2302      	movs	r3, #2
 8000742:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000744:	2307      	movs	r3, #7
 8000746:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000748:	f107 0320 	add.w	r3, r7, #32
 800074c:	4618      	mov	r0, r3
 800074e:	f000 fd8f 	bl	8001270 <HAL_RCC_OscConfig>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000758:	f000 f9cc 	bl	8000af4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800075c:	230f      	movs	r3, #15
 800075e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000760:	2302      	movs	r3, #2
 8000762:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000764:	2300      	movs	r3, #0
 8000766:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000768:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800076c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800076e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000772:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000774:	f107 030c 	add.w	r3, r7, #12
 8000778:	2105      	movs	r1, #5
 800077a:	4618      	mov	r0, r3
 800077c:	f000 fff0 	bl	8001760 <HAL_RCC_ClockConfig>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000786:	f000 f9b5 	bl	8000af4 <Error_Handler>
  }
}
 800078a:	bf00      	nop
 800078c:	3750      	adds	r7, #80	; 0x50
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	40023800 	.word	0x40023800
 8000798:	40007000 	.word	0x40007000

0800079c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b08c      	sub	sp, #48	; 0x30
 80007a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a2:	f107 031c 	add.w	r3, r7, #28
 80007a6:	2200      	movs	r2, #0
 80007a8:	601a      	str	r2, [r3, #0]
 80007aa:	605a      	str	r2, [r3, #4]
 80007ac:	609a      	str	r2, [r3, #8]
 80007ae:	60da      	str	r2, [r3, #12]
 80007b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	61bb      	str	r3, [r7, #24]
 80007b6:	4ba2      	ldr	r3, [pc, #648]	; (8000a40 <MX_GPIO_Init+0x2a4>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	4aa1      	ldr	r2, [pc, #644]	; (8000a40 <MX_GPIO_Init+0x2a4>)
 80007bc:	f043 0310 	orr.w	r3, r3, #16
 80007c0:	6313      	str	r3, [r2, #48]	; 0x30
 80007c2:	4b9f      	ldr	r3, [pc, #636]	; (8000a40 <MX_GPIO_Init+0x2a4>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	f003 0310 	and.w	r3, r3, #16
 80007ca:	61bb      	str	r3, [r7, #24]
 80007cc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	617b      	str	r3, [r7, #20]
 80007d2:	4b9b      	ldr	r3, [pc, #620]	; (8000a40 <MX_GPIO_Init+0x2a4>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	4a9a      	ldr	r2, [pc, #616]	; (8000a40 <MX_GPIO_Init+0x2a4>)
 80007d8:	f043 0304 	orr.w	r3, r3, #4
 80007dc:	6313      	str	r3, [r2, #48]	; 0x30
 80007de:	4b98      	ldr	r3, [pc, #608]	; (8000a40 <MX_GPIO_Init+0x2a4>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	f003 0304 	and.w	r3, r3, #4
 80007e6:	617b      	str	r3, [r7, #20]
 80007e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	613b      	str	r3, [r7, #16]
 80007ee:	4b94      	ldr	r3, [pc, #592]	; (8000a40 <MX_GPIO_Init+0x2a4>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	4a93      	ldr	r2, [pc, #588]	; (8000a40 <MX_GPIO_Init+0x2a4>)
 80007f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007f8:	6313      	str	r3, [r2, #48]	; 0x30
 80007fa:	4b91      	ldr	r3, [pc, #580]	; (8000a40 <MX_GPIO_Init+0x2a4>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000802:	613b      	str	r3, [r7, #16]
 8000804:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	60fb      	str	r3, [r7, #12]
 800080a:	4b8d      	ldr	r3, [pc, #564]	; (8000a40 <MX_GPIO_Init+0x2a4>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	4a8c      	ldr	r2, [pc, #560]	; (8000a40 <MX_GPIO_Init+0x2a4>)
 8000810:	f043 0301 	orr.w	r3, r3, #1
 8000814:	6313      	str	r3, [r2, #48]	; 0x30
 8000816:	4b8a      	ldr	r3, [pc, #552]	; (8000a40 <MX_GPIO_Init+0x2a4>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	f003 0301 	and.w	r3, r3, #1
 800081e:	60fb      	str	r3, [r7, #12]
 8000820:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	60bb      	str	r3, [r7, #8]
 8000826:	4b86      	ldr	r3, [pc, #536]	; (8000a40 <MX_GPIO_Init+0x2a4>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	4a85      	ldr	r2, [pc, #532]	; (8000a40 <MX_GPIO_Init+0x2a4>)
 800082c:	f043 0302 	orr.w	r3, r3, #2
 8000830:	6313      	str	r3, [r2, #48]	; 0x30
 8000832:	4b83      	ldr	r3, [pc, #524]	; (8000a40 <MX_GPIO_Init+0x2a4>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	f003 0302 	and.w	r3, r3, #2
 800083a:	60bb      	str	r3, [r7, #8]
 800083c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	607b      	str	r3, [r7, #4]
 8000842:	4b7f      	ldr	r3, [pc, #508]	; (8000a40 <MX_GPIO_Init+0x2a4>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	4a7e      	ldr	r2, [pc, #504]	; (8000a40 <MX_GPIO_Init+0x2a4>)
 8000848:	f043 0308 	orr.w	r3, r3, #8
 800084c:	6313      	str	r3, [r2, #48]	; 0x30
 800084e:	4b7c      	ldr	r3, [pc, #496]	; (8000a40 <MX_GPIO_Init+0x2a4>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	f003 0308 	and.w	r3, r3, #8
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800085a:	2200      	movs	r2, #0
 800085c:	2108      	movs	r1, #8
 800085e:	4879      	ldr	r0, [pc, #484]	; (8000a44 <MX_GPIO_Init+0x2a8>)
 8000860:	f000 fcec 	bl	800123c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000864:	2201      	movs	r2, #1
 8000866:	2101      	movs	r1, #1
 8000868:	4877      	ldr	r0, [pc, #476]	; (8000a48 <MX_GPIO_Init+0x2ac>)
 800086a:	f000 fce7 	bl	800123c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800086e:	2200      	movs	r2, #0
 8000870:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000874:	4875      	ldr	r0, [pc, #468]	; (8000a4c <MX_GPIO_Init+0x2b0>)
 8000876:	f000 fce1 	bl	800123c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800087a:	2308      	movs	r3, #8
 800087c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087e:	2301      	movs	r3, #1
 8000880:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	2300      	movs	r3, #0
 8000884:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000886:	2300      	movs	r3, #0
 8000888:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800088a:	f107 031c 	add.w	r3, r7, #28
 800088e:	4619      	mov	r1, r3
 8000890:	486c      	ldr	r0, [pc, #432]	; (8000a44 <MX_GPIO_Init+0x2a8>)
 8000892:	f000 fb37 	bl	8000f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000896:	2301      	movs	r3, #1
 8000898:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089a:	2301      	movs	r3, #1
 800089c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089e:	2300      	movs	r3, #0
 80008a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a2:	2300      	movs	r3, #0
 80008a4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008a6:	f107 031c 	add.w	r3, r7, #28
 80008aa:	4619      	mov	r1, r3
 80008ac:	4866      	ldr	r0, [pc, #408]	; (8000a48 <MX_GPIO_Init+0x2ac>)
 80008ae:	f000 fb29 	bl	8000f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008b2:	2308      	movs	r3, #8
 80008b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b6:	2302      	movs	r3, #2
 80008b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ba:	2300      	movs	r3, #0
 80008bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008be:	2300      	movs	r3, #0
 80008c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008c2:	2305      	movs	r3, #5
 80008c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008c6:	f107 031c 	add.w	r3, r7, #28
 80008ca:	4619      	mov	r1, r3
 80008cc:	485e      	ldr	r0, [pc, #376]	; (8000a48 <MX_GPIO_Init+0x2ac>)
 80008ce:	f000 fb19 	bl	8000f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008d2:	2301      	movs	r3, #1
 80008d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008d6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80008da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008e0:	f107 031c 	add.w	r3, r7, #28
 80008e4:	4619      	mov	r1, r3
 80008e6:	485a      	ldr	r0, [pc, #360]	; (8000a50 <MX_GPIO_Init+0x2b4>)
 80008e8:	f000 fb0c 	bl	8000f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80008ec:	2310      	movs	r3, #16
 80008ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f0:	2302      	movs	r3, #2
 80008f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f8:	2300      	movs	r3, #0
 80008fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008fc:	2306      	movs	r3, #6
 80008fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000900:	f107 031c 	add.w	r3, r7, #28
 8000904:	4619      	mov	r1, r3
 8000906:	4852      	ldr	r0, [pc, #328]	; (8000a50 <MX_GPIO_Init+0x2b4>)
 8000908:	f000 fafc 	bl	8000f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800090c:	23e0      	movs	r3, #224	; 0xe0
 800090e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000910:	2302      	movs	r3, #2
 8000912:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000914:	2300      	movs	r3, #0
 8000916:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000918:	2300      	movs	r3, #0
 800091a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800091c:	2305      	movs	r3, #5
 800091e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000920:	f107 031c 	add.w	r3, r7, #28
 8000924:	4619      	mov	r1, r3
 8000926:	484a      	ldr	r0, [pc, #296]	; (8000a50 <MX_GPIO_Init+0x2b4>)
 8000928:	f000 faec 	bl	8000f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800092c:	2304      	movs	r3, #4
 800092e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000930:	2300      	movs	r3, #0
 8000932:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	2300      	movs	r3, #0
 8000936:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000938:	f107 031c 	add.w	r3, r7, #28
 800093c:	4619      	mov	r1, r3
 800093e:	4845      	ldr	r0, [pc, #276]	; (8000a54 <MX_GPIO_Init+0x2b8>)
 8000940:	f000 fae0 	bl	8000f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000944:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000948:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094a:	2302      	movs	r3, #2
 800094c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000952:	2300      	movs	r3, #0
 8000954:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000956:	2305      	movs	r3, #5
 8000958:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800095a:	f107 031c 	add.w	r3, r7, #28
 800095e:	4619      	mov	r1, r3
 8000960:	483c      	ldr	r0, [pc, #240]	; (8000a54 <MX_GPIO_Init+0x2b8>)
 8000962:	f000 facf 	bl	8000f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000966:	f24f 0310 	movw	r3, #61456	; 0xf010
 800096a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800096c:	2301      	movs	r3, #1
 800096e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	2300      	movs	r3, #0
 8000972:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000974:	2300      	movs	r3, #0
 8000976:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000978:	f107 031c 	add.w	r3, r7, #28
 800097c:	4619      	mov	r1, r3
 800097e:	4833      	ldr	r0, [pc, #204]	; (8000a4c <MX_GPIO_Init+0x2b0>)
 8000980:	f000 fac0 	bl	8000f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000984:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000988:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098a:	2302      	movs	r3, #2
 800098c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000992:	2300      	movs	r3, #0
 8000994:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000996:	2306      	movs	r3, #6
 8000998:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800099a:	f107 031c 	add.w	r3, r7, #28
 800099e:	4619      	mov	r1, r3
 80009a0:	4829      	ldr	r0, [pc, #164]	; (8000a48 <MX_GPIO_Init+0x2ac>)
 80009a2:	f000 faaf 	bl	8000f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80009a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ac:	2300      	movs	r3, #0
 80009ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b0:	2300      	movs	r3, #0
 80009b2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80009b4:	f107 031c 	add.w	r3, r7, #28
 80009b8:	4619      	mov	r1, r3
 80009ba:	4825      	ldr	r0, [pc, #148]	; (8000a50 <MX_GPIO_Init+0x2b4>)
 80009bc:	f000 faa2 	bl	8000f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80009c0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80009c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c6:	2302      	movs	r3, #2
 80009c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ca:	2300      	movs	r3, #0
 80009cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ce:	2300      	movs	r3, #0
 80009d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009d2:	230a      	movs	r3, #10
 80009d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d6:	f107 031c 	add.w	r3, r7, #28
 80009da:	4619      	mov	r1, r3
 80009dc:	481c      	ldr	r0, [pc, #112]	; (8000a50 <MX_GPIO_Init+0x2b4>)
 80009de:	f000 fa91 	bl	8000f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009e2:	2320      	movs	r3, #32
 80009e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009e6:	2300      	movs	r3, #0
 80009e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ea:	2300      	movs	r3, #0
 80009ec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009ee:	f107 031c 	add.w	r3, r7, #28
 80009f2:	4619      	mov	r1, r3
 80009f4:	4815      	ldr	r0, [pc, #84]	; (8000a4c <MX_GPIO_Init+0x2b0>)
 80009f6:	f000 fa85 	bl	8000f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80009fa:	f44f 7310 	mov.w	r3, #576	; 0x240
 80009fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a00:	2312      	movs	r3, #18
 8000a02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a04:	2301      	movs	r3, #1
 8000a06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a0c:	2304      	movs	r3, #4
 8000a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a10:	f107 031c 	add.w	r3, r7, #28
 8000a14:	4619      	mov	r1, r3
 8000a16:	480f      	ldr	r0, [pc, #60]	; (8000a54 <MX_GPIO_Init+0x2b8>)
 8000a18:	f000 fa74 	bl	8000f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a20:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a26:	2300      	movs	r3, #0
 8000a28:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a2a:	f107 031c 	add.w	r3, r7, #28
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4804      	ldr	r0, [pc, #16]	; (8000a44 <MX_GPIO_Init+0x2a8>)
 8000a32:	f000 fa67 	bl	8000f04 <HAL_GPIO_Init>

}
 8000a36:	bf00      	nop
 8000a38:	3730      	adds	r7, #48	; 0x30
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	40023800 	.word	0x40023800
 8000a44:	40021000 	.word	0x40021000
 8000a48:	40020800 	.word	0x40020800
 8000a4c:	40020c00 	.word	0x40020c00
 8000a50:	40020000 	.word	0x40020000
 8000a54:	40020400 	.word	0x40020400

08000a58 <task1_handler>:

/* USER CODE BEGIN 4 */
static void task1_handler(void* parameters)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b09c      	sub	sp, #112	; 0x70
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
	char msg[100];

	while(1)
	{
//		printf("%s\n", (char*)parameters);
		snprintf(msg, 100, "%s\n", (char*)parameters);
 8000a60:	f107 000c 	add.w	r0, r7, #12
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	4a09      	ldr	r2, [pc, #36]	; (8000a8c <task1_handler+0x34>)
 8000a68:	2164      	movs	r1, #100	; 0x64
 8000a6a:	f004 ffe1 	bl	8005a30 <sniprintf>

		SEGGER_SYSVIEW_PrintfTarget(msg);
 8000a6e:	f107 030c 	add.w	r3, r7, #12
 8000a72:	4618      	mov	r0, r3
 8000a74:	f004 fef4 	bl	8005860 <SEGGER_SYSVIEW_PrintfTarget>
		taskYIELD();
 8000a78:	4b05      	ldr	r3, [pc, #20]	; (8000a90 <task1_handler+0x38>)
 8000a7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	f3bf 8f4f 	dsb	sy
 8000a84:	f3bf 8f6f 	isb	sy
		snprintf(msg, 100, "%s\n", (char*)parameters);
 8000a88:	e7ea      	b.n	8000a60 <task1_handler+0x8>
 8000a8a:	bf00      	nop
 8000a8c:	0800638c 	.word	0x0800638c
 8000a90:	e000ed04 	.word	0xe000ed04

08000a94 <task2_handler>:
	}
}

static void task2_handler(void* parameters)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b09c      	sub	sp, #112	; 0x70
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
	char msg[100];

	while(1)
	{
		snprintf(msg, 100, "%s\n", (char*)parameters);
 8000a9c:	f107 000c 	add.w	r0, r7, #12
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	4a09      	ldr	r2, [pc, #36]	; (8000ac8 <task2_handler+0x34>)
 8000aa4:	2164      	movs	r1, #100	; 0x64
 8000aa6:	f004 ffc3 	bl	8005a30 <sniprintf>

		SEGGER_SYSVIEW_PrintfTarget(msg);
 8000aaa:	f107 030c 	add.w	r3, r7, #12
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f004 fed6 	bl	8005860 <SEGGER_SYSVIEW_PrintfTarget>
		taskYIELD();
 8000ab4:	4b05      	ldr	r3, [pc, #20]	; (8000acc <task2_handler+0x38>)
 8000ab6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000aba:	601a      	str	r2, [r3, #0]
 8000abc:	f3bf 8f4f 	dsb	sy
 8000ac0:	f3bf 8f6f 	isb	sy
		snprintf(msg, 100, "%s\n", (char*)parameters);
 8000ac4:	e7ea      	b.n	8000a9c <task2_handler+0x8>
 8000ac6:	bf00      	nop
 8000ac8:	0800638c 	.word	0x0800638c
 8000acc:	e000ed04 	.word	0xe000ed04

08000ad0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a04      	ldr	r2, [pc, #16]	; (8000af0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d101      	bne.n	8000ae6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ae2:	f000 f90d 	bl	8000d00 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	40001000 	.word	0x40001000

08000af4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000af8:	b672      	cpsid	i
}
 8000afa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000afc:	e7fe      	b.n	8000afc <Error_Handler+0x8>
	...

08000b00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	607b      	str	r3, [r7, #4]
 8000b0a:	4b10      	ldr	r3, [pc, #64]	; (8000b4c <HAL_MspInit+0x4c>)
 8000b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b0e:	4a0f      	ldr	r2, [pc, #60]	; (8000b4c <HAL_MspInit+0x4c>)
 8000b10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b14:	6453      	str	r3, [r2, #68]	; 0x44
 8000b16:	4b0d      	ldr	r3, [pc, #52]	; (8000b4c <HAL_MspInit+0x4c>)
 8000b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b1e:	607b      	str	r3, [r7, #4]
 8000b20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	603b      	str	r3, [r7, #0]
 8000b26:	4b09      	ldr	r3, [pc, #36]	; (8000b4c <HAL_MspInit+0x4c>)
 8000b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2a:	4a08      	ldr	r2, [pc, #32]	; (8000b4c <HAL_MspInit+0x4c>)
 8000b2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b30:	6413      	str	r3, [r2, #64]	; 0x40
 8000b32:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <HAL_MspInit+0x4c>)
 8000b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b3a:	603b      	str	r3, [r7, #0]
 8000b3c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000b3e:	f002 f8bb 	bl	8002cb8 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000b42:	bf00      	nop
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	40023800 	.word	0x40023800

08000b50 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b08c      	sub	sp, #48	; 0x30
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000b60:	2200      	movs	r2, #0
 8000b62:	6879      	ldr	r1, [r7, #4]
 8000b64:	2036      	movs	r0, #54	; 0x36
 8000b66:	f000 f9a3 	bl	8000eb0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b6a:	2036      	movs	r0, #54	; 0x36
 8000b6c:	f000 f9bc 	bl	8000ee8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b70:	2300      	movs	r3, #0
 8000b72:	60fb      	str	r3, [r7, #12]
 8000b74:	4b1f      	ldr	r3, [pc, #124]	; (8000bf4 <HAL_InitTick+0xa4>)
 8000b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b78:	4a1e      	ldr	r2, [pc, #120]	; (8000bf4 <HAL_InitTick+0xa4>)
 8000b7a:	f043 0310 	orr.w	r3, r3, #16
 8000b7e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b80:	4b1c      	ldr	r3, [pc, #112]	; (8000bf4 <HAL_InitTick+0xa4>)
 8000b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b84:	f003 0310 	and.w	r3, r3, #16
 8000b88:	60fb      	str	r3, [r7, #12]
 8000b8a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b8c:	f107 0210 	add.w	r2, r7, #16
 8000b90:	f107 0314 	add.w	r3, r7, #20
 8000b94:	4611      	mov	r1, r2
 8000b96:	4618      	mov	r0, r3
 8000b98:	f000 ffee 	bl	8001b78 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000b9c:	f000 ffd8 	bl	8001b50 <HAL_RCC_GetPCLK1Freq>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	005b      	lsls	r3, r3, #1
 8000ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ba8:	4a13      	ldr	r2, [pc, #76]	; (8000bf8 <HAL_InitTick+0xa8>)
 8000baa:	fba2 2303 	umull	r2, r3, r2, r3
 8000bae:	0c9b      	lsrs	r3, r3, #18
 8000bb0:	3b01      	subs	r3, #1
 8000bb2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000bb4:	4b11      	ldr	r3, [pc, #68]	; (8000bfc <HAL_InitTick+0xac>)
 8000bb6:	4a12      	ldr	r2, [pc, #72]	; (8000c00 <HAL_InitTick+0xb0>)
 8000bb8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000bba:	4b10      	ldr	r3, [pc, #64]	; (8000bfc <HAL_InitTick+0xac>)
 8000bbc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bc0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000bc2:	4a0e      	ldr	r2, [pc, #56]	; (8000bfc <HAL_InitTick+0xac>)
 8000bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bc6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000bc8:	4b0c      	ldr	r3, [pc, #48]	; (8000bfc <HAL_InitTick+0xac>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bce:	4b0b      	ldr	r3, [pc, #44]	; (8000bfc <HAL_InitTick+0xac>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000bd4:	4809      	ldr	r0, [pc, #36]	; (8000bfc <HAL_InitTick+0xac>)
 8000bd6:	f001 f801 	bl	8001bdc <HAL_TIM_Base_Init>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d104      	bne.n	8000bea <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000be0:	4806      	ldr	r0, [pc, #24]	; (8000bfc <HAL_InitTick+0xac>)
 8000be2:	f001 f855 	bl	8001c90 <HAL_TIM_Base_Start_IT>
 8000be6:	4603      	mov	r3, r0
 8000be8:	e000      	b.n	8000bec <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000bea:	2301      	movs	r3, #1
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	3730      	adds	r7, #48	; 0x30
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	40023800 	.word	0x40023800
 8000bf8:	431bde83 	.word	0x431bde83
 8000bfc:	2000009c 	.word	0x2000009c
 8000c00:	40001000 	.word	0x40001000

08000c04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c08:	e7fe      	b.n	8000c08 <NMI_Handler+0x4>

08000c0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c0e:	e7fe      	b.n	8000c0e <HardFault_Handler+0x4>

08000c10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c14:	e7fe      	b.n	8000c14 <MemManage_Handler+0x4>

08000c16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c16:	b480      	push	{r7}
 8000c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c1a:	e7fe      	b.n	8000c1a <BusFault_Handler+0x4>

08000c1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c20:	e7fe      	b.n	8000c20 <UsageFault_Handler+0x4>

08000c22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c22:	b480      	push	{r7}
 8000c24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c26:	bf00      	nop
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr

08000c30 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c34:	4802      	ldr	r0, [pc, #8]	; (8000c40 <TIM6_DAC_IRQHandler+0x10>)
 8000c36:	f001 f89b 	bl	8001d70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	2000009c 	.word	0x2000009c

08000c44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c48:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <SystemInit+0x20>)
 8000c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c4e:	4a05      	ldr	r2, [pc, #20]	; (8000c64 <SystemInit+0x20>)
 8000c50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c58:	bf00      	nop
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	e000ed00 	.word	0xe000ed00

08000c68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ca0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c6c:	480d      	ldr	r0, [pc, #52]	; (8000ca4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c6e:	490e      	ldr	r1, [pc, #56]	; (8000ca8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c70:	4a0e      	ldr	r2, [pc, #56]	; (8000cac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c74:	e002      	b.n	8000c7c <LoopCopyDataInit>

08000c76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c7a:	3304      	adds	r3, #4

08000c7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c80:	d3f9      	bcc.n	8000c76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c82:	4a0b      	ldr	r2, [pc, #44]	; (8000cb0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c84:	4c0b      	ldr	r4, [pc, #44]	; (8000cb4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c88:	e001      	b.n	8000c8e <LoopFillZerobss>

08000c8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c8c:	3204      	adds	r2, #4

08000c8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c90:	d3fb      	bcc.n	8000c8a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c92:	f7ff ffd7 	bl	8000c44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c96:	f004 fe81 	bl	800599c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c9a:	f7ff fcbb 	bl	8000614 <main>
  bx  lr    
 8000c9e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ca0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ca4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ca8:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8000cac:	080064e8 	.word	0x080064e8
  ldr r2, =_sbss
 8000cb0:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8000cb4:	200144a8 	.word	0x200144a8

08000cb8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cb8:	e7fe      	b.n	8000cb8 <ADC_IRQHandler>
	...

08000cbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cc0:	4b0e      	ldr	r3, [pc, #56]	; (8000cfc <HAL_Init+0x40>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a0d      	ldr	r2, [pc, #52]	; (8000cfc <HAL_Init+0x40>)
 8000cc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ccc:	4b0b      	ldr	r3, [pc, #44]	; (8000cfc <HAL_Init+0x40>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a0a      	ldr	r2, [pc, #40]	; (8000cfc <HAL_Init+0x40>)
 8000cd2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cd6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cd8:	4b08      	ldr	r3, [pc, #32]	; (8000cfc <HAL_Init+0x40>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a07      	ldr	r2, [pc, #28]	; (8000cfc <HAL_Init+0x40>)
 8000cde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ce2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ce4:	2003      	movs	r0, #3
 8000ce6:	f000 f8d8 	bl	8000e9a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cea:	2000      	movs	r0, #0
 8000cec:	f7ff ff30 	bl	8000b50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cf0:	f7ff ff06 	bl	8000b00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cf4:	2300      	movs	r3, #0
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	40023c00 	.word	0x40023c00

08000d00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d04:	4b06      	ldr	r3, [pc, #24]	; (8000d20 <HAL_IncTick+0x20>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	461a      	mov	r2, r3
 8000d0a:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <HAL_IncTick+0x24>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4413      	add	r3, r2
 8000d10:	4a04      	ldr	r2, [pc, #16]	; (8000d24 <HAL_IncTick+0x24>)
 8000d12:	6013      	str	r3, [r2, #0]
}
 8000d14:	bf00      	nop
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	20000008 	.word	0x20000008
 8000d24:	200000e4 	.word	0x200000e4

08000d28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d2c:	4b03      	ldr	r3, [pc, #12]	; (8000d3c <HAL_GetTick+0x14>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	200000e4 	.word	0x200000e4

08000d40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b085      	sub	sp, #20
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	f003 0307 	and.w	r3, r3, #7
 8000d4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d50:	4b0c      	ldr	r3, [pc, #48]	; (8000d84 <__NVIC_SetPriorityGrouping+0x44>)
 8000d52:	68db      	ldr	r3, [r3, #12]
 8000d54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d56:	68ba      	ldr	r2, [r7, #8]
 8000d58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d72:	4a04      	ldr	r2, [pc, #16]	; (8000d84 <__NVIC_SetPriorityGrouping+0x44>)
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	60d3      	str	r3, [r2, #12]
}
 8000d78:	bf00      	nop
 8000d7a:	3714      	adds	r7, #20
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr
 8000d84:	e000ed00 	.word	0xe000ed00

08000d88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d8c:	4b04      	ldr	r3, [pc, #16]	; (8000da0 <__NVIC_GetPriorityGrouping+0x18>)
 8000d8e:	68db      	ldr	r3, [r3, #12]
 8000d90:	0a1b      	lsrs	r3, r3, #8
 8000d92:	f003 0307 	and.w	r3, r3, #7
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr
 8000da0:	e000ed00 	.word	0xe000ed00

08000da4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	4603      	mov	r3, r0
 8000dac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	db0b      	blt.n	8000dce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000db6:	79fb      	ldrb	r3, [r7, #7]
 8000db8:	f003 021f 	and.w	r2, r3, #31
 8000dbc:	4907      	ldr	r1, [pc, #28]	; (8000ddc <__NVIC_EnableIRQ+0x38>)
 8000dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc2:	095b      	lsrs	r3, r3, #5
 8000dc4:	2001      	movs	r0, #1
 8000dc6:	fa00 f202 	lsl.w	r2, r0, r2
 8000dca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dce:	bf00      	nop
 8000dd0:	370c      	adds	r7, #12
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	e000e100 	.word	0xe000e100

08000de0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	4603      	mov	r3, r0
 8000de8:	6039      	str	r1, [r7, #0]
 8000dea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	db0a      	blt.n	8000e0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	b2da      	uxtb	r2, r3
 8000df8:	490c      	ldr	r1, [pc, #48]	; (8000e2c <__NVIC_SetPriority+0x4c>)
 8000dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfe:	0112      	lsls	r2, r2, #4
 8000e00:	b2d2      	uxtb	r2, r2
 8000e02:	440b      	add	r3, r1
 8000e04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e08:	e00a      	b.n	8000e20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	b2da      	uxtb	r2, r3
 8000e0e:	4908      	ldr	r1, [pc, #32]	; (8000e30 <__NVIC_SetPriority+0x50>)
 8000e10:	79fb      	ldrb	r3, [r7, #7]
 8000e12:	f003 030f 	and.w	r3, r3, #15
 8000e16:	3b04      	subs	r3, #4
 8000e18:	0112      	lsls	r2, r2, #4
 8000e1a:	b2d2      	uxtb	r2, r2
 8000e1c:	440b      	add	r3, r1
 8000e1e:	761a      	strb	r2, [r3, #24]
}
 8000e20:	bf00      	nop
 8000e22:	370c      	adds	r7, #12
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr
 8000e2c:	e000e100 	.word	0xe000e100
 8000e30:	e000ed00 	.word	0xe000ed00

08000e34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b089      	sub	sp, #36	; 0x24
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	60f8      	str	r0, [r7, #12]
 8000e3c:	60b9      	str	r1, [r7, #8]
 8000e3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	f003 0307 	and.w	r3, r3, #7
 8000e46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e48:	69fb      	ldr	r3, [r7, #28]
 8000e4a:	f1c3 0307 	rsb	r3, r3, #7
 8000e4e:	2b04      	cmp	r3, #4
 8000e50:	bf28      	it	cs
 8000e52:	2304      	movcs	r3, #4
 8000e54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	3304      	adds	r3, #4
 8000e5a:	2b06      	cmp	r3, #6
 8000e5c:	d902      	bls.n	8000e64 <NVIC_EncodePriority+0x30>
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	3b03      	subs	r3, #3
 8000e62:	e000      	b.n	8000e66 <NVIC_EncodePriority+0x32>
 8000e64:	2300      	movs	r3, #0
 8000e66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e68:	f04f 32ff 	mov.w	r2, #4294967295
 8000e6c:	69bb      	ldr	r3, [r7, #24]
 8000e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e72:	43da      	mvns	r2, r3
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	401a      	ands	r2, r3
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	fa01 f303 	lsl.w	r3, r1, r3
 8000e86:	43d9      	mvns	r1, r3
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e8c:	4313      	orrs	r3, r2
         );
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3724      	adds	r7, #36	; 0x24
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr

08000e9a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e9a:	b580      	push	{r7, lr}
 8000e9c:	b082      	sub	sp, #8
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ea2:	6878      	ldr	r0, [r7, #4]
 8000ea4:	f7ff ff4c 	bl	8000d40 <__NVIC_SetPriorityGrouping>
}
 8000ea8:	bf00      	nop
 8000eaa:	3708      	adds	r7, #8
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}

08000eb0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b086      	sub	sp, #24
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	60b9      	str	r1, [r7, #8]
 8000eba:	607a      	str	r2, [r7, #4]
 8000ebc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ec2:	f7ff ff61 	bl	8000d88 <__NVIC_GetPriorityGrouping>
 8000ec6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ec8:	687a      	ldr	r2, [r7, #4]
 8000eca:	68b9      	ldr	r1, [r7, #8]
 8000ecc:	6978      	ldr	r0, [r7, #20]
 8000ece:	f7ff ffb1 	bl	8000e34 <NVIC_EncodePriority>
 8000ed2:	4602      	mov	r2, r0
 8000ed4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ed8:	4611      	mov	r1, r2
 8000eda:	4618      	mov	r0, r3
 8000edc:	f7ff ff80 	bl	8000de0 <__NVIC_SetPriority>
}
 8000ee0:	bf00      	nop
 8000ee2:	3718      	adds	r7, #24
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f7ff ff54 	bl	8000da4 <__NVIC_EnableIRQ>
}
 8000efc:	bf00      	nop
 8000efe:	3708      	adds	r7, #8
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b089      	sub	sp, #36	; 0x24
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f12:	2300      	movs	r3, #0
 8000f14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f16:	2300      	movs	r3, #0
 8000f18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	61fb      	str	r3, [r7, #28]
 8000f1e:	e16b      	b.n	80011f8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f20:	2201      	movs	r2, #1
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	697a      	ldr	r2, [r7, #20]
 8000f30:	4013      	ands	r3, r2
 8000f32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f34:	693a      	ldr	r2, [r7, #16]
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	f040 815a 	bne.w	80011f2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	f003 0303 	and.w	r3, r3, #3
 8000f46:	2b01      	cmp	r3, #1
 8000f48:	d005      	beq.n	8000f56 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f52:	2b02      	cmp	r3, #2
 8000f54:	d130      	bne.n	8000fb8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	689b      	ldr	r3, [r3, #8]
 8000f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	005b      	lsls	r3, r3, #1
 8000f60:	2203      	movs	r2, #3
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	43db      	mvns	r3, r3
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	68da      	ldr	r2, [r3, #12]
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	005b      	lsls	r3, r3, #1
 8000f76:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7a:	69ba      	ldr	r2, [r7, #24]
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	69ba      	ldr	r2, [r7, #24]
 8000f84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	fa02 f303 	lsl.w	r3, r2, r3
 8000f94:	43db      	mvns	r3, r3
 8000f96:	69ba      	ldr	r2, [r7, #24]
 8000f98:	4013      	ands	r3, r2
 8000f9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	091b      	lsrs	r3, r3, #4
 8000fa2:	f003 0201 	and.w	r2, r3, #1
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	f003 0303 	and.w	r3, r3, #3
 8000fc0:	2b03      	cmp	r3, #3
 8000fc2:	d017      	beq.n	8000ff4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	005b      	lsls	r3, r3, #1
 8000fce:	2203      	movs	r2, #3
 8000fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd4:	43db      	mvns	r3, r3
 8000fd6:	69ba      	ldr	r2, [r7, #24]
 8000fd8:	4013      	ands	r3, r2
 8000fda:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	689a      	ldr	r2, [r3, #8]
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	69ba      	ldr	r2, [r7, #24]
 8000fea:	4313      	orrs	r3, r2
 8000fec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f003 0303 	and.w	r3, r3, #3
 8000ffc:	2b02      	cmp	r3, #2
 8000ffe:	d123      	bne.n	8001048 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001000:	69fb      	ldr	r3, [r7, #28]
 8001002:	08da      	lsrs	r2, r3, #3
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	3208      	adds	r2, #8
 8001008:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800100c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	f003 0307 	and.w	r3, r3, #7
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	220f      	movs	r2, #15
 8001018:	fa02 f303 	lsl.w	r3, r2, r3
 800101c:	43db      	mvns	r3, r3
 800101e:	69ba      	ldr	r2, [r7, #24]
 8001020:	4013      	ands	r3, r2
 8001022:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	691a      	ldr	r2, [r3, #16]
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	f003 0307 	and.w	r3, r3, #7
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	4313      	orrs	r3, r2
 8001038:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	08da      	lsrs	r2, r3, #3
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	3208      	adds	r2, #8
 8001042:	69b9      	ldr	r1, [r7, #24]
 8001044:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	2203      	movs	r2, #3
 8001054:	fa02 f303 	lsl.w	r3, r2, r3
 8001058:	43db      	mvns	r3, r3
 800105a:	69ba      	ldr	r2, [r7, #24]
 800105c:	4013      	ands	r3, r2
 800105e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f003 0203 	and.w	r2, r3, #3
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	005b      	lsls	r3, r3, #1
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	4313      	orrs	r3, r2
 8001074:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001084:	2b00      	cmp	r3, #0
 8001086:	f000 80b4 	beq.w	80011f2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800108a:	2300      	movs	r3, #0
 800108c:	60fb      	str	r3, [r7, #12]
 800108e:	4b60      	ldr	r3, [pc, #384]	; (8001210 <HAL_GPIO_Init+0x30c>)
 8001090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001092:	4a5f      	ldr	r2, [pc, #380]	; (8001210 <HAL_GPIO_Init+0x30c>)
 8001094:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001098:	6453      	str	r3, [r2, #68]	; 0x44
 800109a:	4b5d      	ldr	r3, [pc, #372]	; (8001210 <HAL_GPIO_Init+0x30c>)
 800109c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800109e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010a2:	60fb      	str	r3, [r7, #12]
 80010a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010a6:	4a5b      	ldr	r2, [pc, #364]	; (8001214 <HAL_GPIO_Init+0x310>)
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	089b      	lsrs	r3, r3, #2
 80010ac:	3302      	adds	r3, #2
 80010ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	f003 0303 	and.w	r3, r3, #3
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	220f      	movs	r2, #15
 80010be:	fa02 f303 	lsl.w	r3, r2, r3
 80010c2:	43db      	mvns	r3, r3
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	4013      	ands	r3, r2
 80010c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a52      	ldr	r2, [pc, #328]	; (8001218 <HAL_GPIO_Init+0x314>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d02b      	beq.n	800112a <HAL_GPIO_Init+0x226>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4a51      	ldr	r2, [pc, #324]	; (800121c <HAL_GPIO_Init+0x318>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d025      	beq.n	8001126 <HAL_GPIO_Init+0x222>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4a50      	ldr	r2, [pc, #320]	; (8001220 <HAL_GPIO_Init+0x31c>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d01f      	beq.n	8001122 <HAL_GPIO_Init+0x21e>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a4f      	ldr	r2, [pc, #316]	; (8001224 <HAL_GPIO_Init+0x320>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d019      	beq.n	800111e <HAL_GPIO_Init+0x21a>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a4e      	ldr	r2, [pc, #312]	; (8001228 <HAL_GPIO_Init+0x324>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d013      	beq.n	800111a <HAL_GPIO_Init+0x216>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4a4d      	ldr	r2, [pc, #308]	; (800122c <HAL_GPIO_Init+0x328>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d00d      	beq.n	8001116 <HAL_GPIO_Init+0x212>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4a4c      	ldr	r2, [pc, #304]	; (8001230 <HAL_GPIO_Init+0x32c>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d007      	beq.n	8001112 <HAL_GPIO_Init+0x20e>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4a4b      	ldr	r2, [pc, #300]	; (8001234 <HAL_GPIO_Init+0x330>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d101      	bne.n	800110e <HAL_GPIO_Init+0x20a>
 800110a:	2307      	movs	r3, #7
 800110c:	e00e      	b.n	800112c <HAL_GPIO_Init+0x228>
 800110e:	2308      	movs	r3, #8
 8001110:	e00c      	b.n	800112c <HAL_GPIO_Init+0x228>
 8001112:	2306      	movs	r3, #6
 8001114:	e00a      	b.n	800112c <HAL_GPIO_Init+0x228>
 8001116:	2305      	movs	r3, #5
 8001118:	e008      	b.n	800112c <HAL_GPIO_Init+0x228>
 800111a:	2304      	movs	r3, #4
 800111c:	e006      	b.n	800112c <HAL_GPIO_Init+0x228>
 800111e:	2303      	movs	r3, #3
 8001120:	e004      	b.n	800112c <HAL_GPIO_Init+0x228>
 8001122:	2302      	movs	r3, #2
 8001124:	e002      	b.n	800112c <HAL_GPIO_Init+0x228>
 8001126:	2301      	movs	r3, #1
 8001128:	e000      	b.n	800112c <HAL_GPIO_Init+0x228>
 800112a:	2300      	movs	r3, #0
 800112c:	69fa      	ldr	r2, [r7, #28]
 800112e:	f002 0203 	and.w	r2, r2, #3
 8001132:	0092      	lsls	r2, r2, #2
 8001134:	4093      	lsls	r3, r2
 8001136:	69ba      	ldr	r2, [r7, #24]
 8001138:	4313      	orrs	r3, r2
 800113a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800113c:	4935      	ldr	r1, [pc, #212]	; (8001214 <HAL_GPIO_Init+0x310>)
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	089b      	lsrs	r3, r3, #2
 8001142:	3302      	adds	r3, #2
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800114a:	4b3b      	ldr	r3, [pc, #236]	; (8001238 <HAL_GPIO_Init+0x334>)
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	43db      	mvns	r3, r3
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	4013      	ands	r3, r2
 8001158:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001162:	2b00      	cmp	r3, #0
 8001164:	d003      	beq.n	800116e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	4313      	orrs	r3, r2
 800116c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800116e:	4a32      	ldr	r2, [pc, #200]	; (8001238 <HAL_GPIO_Init+0x334>)
 8001170:	69bb      	ldr	r3, [r7, #24]
 8001172:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001174:	4b30      	ldr	r3, [pc, #192]	; (8001238 <HAL_GPIO_Init+0x334>)
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	43db      	mvns	r3, r3
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	4013      	ands	r3, r2
 8001182:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800118c:	2b00      	cmp	r3, #0
 800118e:	d003      	beq.n	8001198 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	4313      	orrs	r3, r2
 8001196:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001198:	4a27      	ldr	r2, [pc, #156]	; (8001238 <HAL_GPIO_Init+0x334>)
 800119a:	69bb      	ldr	r3, [r7, #24]
 800119c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800119e:	4b26      	ldr	r3, [pc, #152]	; (8001238 <HAL_GPIO_Init+0x334>)
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	43db      	mvns	r3, r3
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	4013      	ands	r3, r2
 80011ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d003      	beq.n	80011c2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	4313      	orrs	r3, r2
 80011c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011c2:	4a1d      	ldr	r2, [pc, #116]	; (8001238 <HAL_GPIO_Init+0x334>)
 80011c4:	69bb      	ldr	r3, [r7, #24]
 80011c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011c8:	4b1b      	ldr	r3, [pc, #108]	; (8001238 <HAL_GPIO_Init+0x334>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	43db      	mvns	r3, r3
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	4013      	ands	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d003      	beq.n	80011ec <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011ec:	4a12      	ldr	r2, [pc, #72]	; (8001238 <HAL_GPIO_Init+0x334>)
 80011ee:	69bb      	ldr	r3, [r7, #24]
 80011f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	3301      	adds	r3, #1
 80011f6:	61fb      	str	r3, [r7, #28]
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	2b0f      	cmp	r3, #15
 80011fc:	f67f ae90 	bls.w	8000f20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001200:	bf00      	nop
 8001202:	bf00      	nop
 8001204:	3724      	adds	r7, #36	; 0x24
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	40023800 	.word	0x40023800
 8001214:	40013800 	.word	0x40013800
 8001218:	40020000 	.word	0x40020000
 800121c:	40020400 	.word	0x40020400
 8001220:	40020800 	.word	0x40020800
 8001224:	40020c00 	.word	0x40020c00
 8001228:	40021000 	.word	0x40021000
 800122c:	40021400 	.word	0x40021400
 8001230:	40021800 	.word	0x40021800
 8001234:	40021c00 	.word	0x40021c00
 8001238:	40013c00 	.word	0x40013c00

0800123c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	460b      	mov	r3, r1
 8001246:	807b      	strh	r3, [r7, #2]
 8001248:	4613      	mov	r3, r2
 800124a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800124c:	787b      	ldrb	r3, [r7, #1]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d003      	beq.n	800125a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001252:	887a      	ldrh	r2, [r7, #2]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001258:	e003      	b.n	8001262 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800125a:	887b      	ldrh	r3, [r7, #2]
 800125c:	041a      	lsls	r2, r3, #16
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	619a      	str	r2, [r3, #24]
}
 8001262:	bf00      	nop
 8001264:	370c      	adds	r7, #12
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
	...

08001270 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b086      	sub	sp, #24
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d101      	bne.n	8001282 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800127e:	2301      	movs	r3, #1
 8001280:	e267      	b.n	8001752 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f003 0301 	and.w	r3, r3, #1
 800128a:	2b00      	cmp	r3, #0
 800128c:	d075      	beq.n	800137a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800128e:	4b88      	ldr	r3, [pc, #544]	; (80014b0 <HAL_RCC_OscConfig+0x240>)
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	f003 030c 	and.w	r3, r3, #12
 8001296:	2b04      	cmp	r3, #4
 8001298:	d00c      	beq.n	80012b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800129a:	4b85      	ldr	r3, [pc, #532]	; (80014b0 <HAL_RCC_OscConfig+0x240>)
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012a2:	2b08      	cmp	r3, #8
 80012a4:	d112      	bne.n	80012cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012a6:	4b82      	ldr	r3, [pc, #520]	; (80014b0 <HAL_RCC_OscConfig+0x240>)
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80012b2:	d10b      	bne.n	80012cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012b4:	4b7e      	ldr	r3, [pc, #504]	; (80014b0 <HAL_RCC_OscConfig+0x240>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d05b      	beq.n	8001378 <HAL_RCC_OscConfig+0x108>
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d157      	bne.n	8001378 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012c8:	2301      	movs	r3, #1
 80012ca:	e242      	b.n	8001752 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012d4:	d106      	bne.n	80012e4 <HAL_RCC_OscConfig+0x74>
 80012d6:	4b76      	ldr	r3, [pc, #472]	; (80014b0 <HAL_RCC_OscConfig+0x240>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a75      	ldr	r2, [pc, #468]	; (80014b0 <HAL_RCC_OscConfig+0x240>)
 80012dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012e0:	6013      	str	r3, [r2, #0]
 80012e2:	e01d      	b.n	8001320 <HAL_RCC_OscConfig+0xb0>
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012ec:	d10c      	bne.n	8001308 <HAL_RCC_OscConfig+0x98>
 80012ee:	4b70      	ldr	r3, [pc, #448]	; (80014b0 <HAL_RCC_OscConfig+0x240>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a6f      	ldr	r2, [pc, #444]	; (80014b0 <HAL_RCC_OscConfig+0x240>)
 80012f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012f8:	6013      	str	r3, [r2, #0]
 80012fa:	4b6d      	ldr	r3, [pc, #436]	; (80014b0 <HAL_RCC_OscConfig+0x240>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a6c      	ldr	r2, [pc, #432]	; (80014b0 <HAL_RCC_OscConfig+0x240>)
 8001300:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001304:	6013      	str	r3, [r2, #0]
 8001306:	e00b      	b.n	8001320 <HAL_RCC_OscConfig+0xb0>
 8001308:	4b69      	ldr	r3, [pc, #420]	; (80014b0 <HAL_RCC_OscConfig+0x240>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a68      	ldr	r2, [pc, #416]	; (80014b0 <HAL_RCC_OscConfig+0x240>)
 800130e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001312:	6013      	str	r3, [r2, #0]
 8001314:	4b66      	ldr	r3, [pc, #408]	; (80014b0 <HAL_RCC_OscConfig+0x240>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a65      	ldr	r2, [pc, #404]	; (80014b0 <HAL_RCC_OscConfig+0x240>)
 800131a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800131e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d013      	beq.n	8001350 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001328:	f7ff fcfe 	bl	8000d28 <HAL_GetTick>
 800132c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800132e:	e008      	b.n	8001342 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001330:	f7ff fcfa 	bl	8000d28 <HAL_GetTick>
 8001334:	4602      	mov	r2, r0
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	2b64      	cmp	r3, #100	; 0x64
 800133c:	d901      	bls.n	8001342 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800133e:	2303      	movs	r3, #3
 8001340:	e207      	b.n	8001752 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001342:	4b5b      	ldr	r3, [pc, #364]	; (80014b0 <HAL_RCC_OscConfig+0x240>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800134a:	2b00      	cmp	r3, #0
 800134c:	d0f0      	beq.n	8001330 <HAL_RCC_OscConfig+0xc0>
 800134e:	e014      	b.n	800137a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001350:	f7ff fcea 	bl	8000d28 <HAL_GetTick>
 8001354:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001356:	e008      	b.n	800136a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001358:	f7ff fce6 	bl	8000d28 <HAL_GetTick>
 800135c:	4602      	mov	r2, r0
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	2b64      	cmp	r3, #100	; 0x64
 8001364:	d901      	bls.n	800136a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001366:	2303      	movs	r3, #3
 8001368:	e1f3      	b.n	8001752 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800136a:	4b51      	ldr	r3, [pc, #324]	; (80014b0 <HAL_RCC_OscConfig+0x240>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001372:	2b00      	cmp	r3, #0
 8001374:	d1f0      	bne.n	8001358 <HAL_RCC_OscConfig+0xe8>
 8001376:	e000      	b.n	800137a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001378:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f003 0302 	and.w	r3, r3, #2
 8001382:	2b00      	cmp	r3, #0
 8001384:	d063      	beq.n	800144e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001386:	4b4a      	ldr	r3, [pc, #296]	; (80014b0 <HAL_RCC_OscConfig+0x240>)
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	f003 030c 	and.w	r3, r3, #12
 800138e:	2b00      	cmp	r3, #0
 8001390:	d00b      	beq.n	80013aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001392:	4b47      	ldr	r3, [pc, #284]	; (80014b0 <HAL_RCC_OscConfig+0x240>)
 8001394:	689b      	ldr	r3, [r3, #8]
 8001396:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800139a:	2b08      	cmp	r3, #8
 800139c:	d11c      	bne.n	80013d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800139e:	4b44      	ldr	r3, [pc, #272]	; (80014b0 <HAL_RCC_OscConfig+0x240>)
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d116      	bne.n	80013d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013aa:	4b41      	ldr	r3, [pc, #260]	; (80014b0 <HAL_RCC_OscConfig+0x240>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f003 0302 	and.w	r3, r3, #2
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d005      	beq.n	80013c2 <HAL_RCC_OscConfig+0x152>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	68db      	ldr	r3, [r3, #12]
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	d001      	beq.n	80013c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e1c7      	b.n	8001752 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013c2:	4b3b      	ldr	r3, [pc, #236]	; (80014b0 <HAL_RCC_OscConfig+0x240>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	691b      	ldr	r3, [r3, #16]
 80013ce:	00db      	lsls	r3, r3, #3
 80013d0:	4937      	ldr	r1, [pc, #220]	; (80014b0 <HAL_RCC_OscConfig+0x240>)
 80013d2:	4313      	orrs	r3, r2
 80013d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013d6:	e03a      	b.n	800144e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d020      	beq.n	8001422 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013e0:	4b34      	ldr	r3, [pc, #208]	; (80014b4 <HAL_RCC_OscConfig+0x244>)
 80013e2:	2201      	movs	r2, #1
 80013e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013e6:	f7ff fc9f 	bl	8000d28 <HAL_GetTick>
 80013ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013ec:	e008      	b.n	8001400 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013ee:	f7ff fc9b 	bl	8000d28 <HAL_GetTick>
 80013f2:	4602      	mov	r2, r0
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	1ad3      	subs	r3, r2, r3
 80013f8:	2b02      	cmp	r3, #2
 80013fa:	d901      	bls.n	8001400 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013fc:	2303      	movs	r3, #3
 80013fe:	e1a8      	b.n	8001752 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001400:	4b2b      	ldr	r3, [pc, #172]	; (80014b0 <HAL_RCC_OscConfig+0x240>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f003 0302 	and.w	r3, r3, #2
 8001408:	2b00      	cmp	r3, #0
 800140a:	d0f0      	beq.n	80013ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800140c:	4b28      	ldr	r3, [pc, #160]	; (80014b0 <HAL_RCC_OscConfig+0x240>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	691b      	ldr	r3, [r3, #16]
 8001418:	00db      	lsls	r3, r3, #3
 800141a:	4925      	ldr	r1, [pc, #148]	; (80014b0 <HAL_RCC_OscConfig+0x240>)
 800141c:	4313      	orrs	r3, r2
 800141e:	600b      	str	r3, [r1, #0]
 8001420:	e015      	b.n	800144e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001422:	4b24      	ldr	r3, [pc, #144]	; (80014b4 <HAL_RCC_OscConfig+0x244>)
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001428:	f7ff fc7e 	bl	8000d28 <HAL_GetTick>
 800142c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800142e:	e008      	b.n	8001442 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001430:	f7ff fc7a 	bl	8000d28 <HAL_GetTick>
 8001434:	4602      	mov	r2, r0
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	2b02      	cmp	r3, #2
 800143c:	d901      	bls.n	8001442 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800143e:	2303      	movs	r3, #3
 8001440:	e187      	b.n	8001752 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001442:	4b1b      	ldr	r3, [pc, #108]	; (80014b0 <HAL_RCC_OscConfig+0x240>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f003 0302 	and.w	r3, r3, #2
 800144a:	2b00      	cmp	r3, #0
 800144c:	d1f0      	bne.n	8001430 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 0308 	and.w	r3, r3, #8
 8001456:	2b00      	cmp	r3, #0
 8001458:	d036      	beq.n	80014c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	695b      	ldr	r3, [r3, #20]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d016      	beq.n	8001490 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001462:	4b15      	ldr	r3, [pc, #84]	; (80014b8 <HAL_RCC_OscConfig+0x248>)
 8001464:	2201      	movs	r2, #1
 8001466:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001468:	f7ff fc5e 	bl	8000d28 <HAL_GetTick>
 800146c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800146e:	e008      	b.n	8001482 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001470:	f7ff fc5a 	bl	8000d28 <HAL_GetTick>
 8001474:	4602      	mov	r2, r0
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	2b02      	cmp	r3, #2
 800147c:	d901      	bls.n	8001482 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800147e:	2303      	movs	r3, #3
 8001480:	e167      	b.n	8001752 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001482:	4b0b      	ldr	r3, [pc, #44]	; (80014b0 <HAL_RCC_OscConfig+0x240>)
 8001484:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001486:	f003 0302 	and.w	r3, r3, #2
 800148a:	2b00      	cmp	r3, #0
 800148c:	d0f0      	beq.n	8001470 <HAL_RCC_OscConfig+0x200>
 800148e:	e01b      	b.n	80014c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001490:	4b09      	ldr	r3, [pc, #36]	; (80014b8 <HAL_RCC_OscConfig+0x248>)
 8001492:	2200      	movs	r2, #0
 8001494:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001496:	f7ff fc47 	bl	8000d28 <HAL_GetTick>
 800149a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800149c:	e00e      	b.n	80014bc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800149e:	f7ff fc43 	bl	8000d28 <HAL_GetTick>
 80014a2:	4602      	mov	r2, r0
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	1ad3      	subs	r3, r2, r3
 80014a8:	2b02      	cmp	r3, #2
 80014aa:	d907      	bls.n	80014bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80014ac:	2303      	movs	r3, #3
 80014ae:	e150      	b.n	8001752 <HAL_RCC_OscConfig+0x4e2>
 80014b0:	40023800 	.word	0x40023800
 80014b4:	42470000 	.word	0x42470000
 80014b8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014bc:	4b88      	ldr	r3, [pc, #544]	; (80016e0 <HAL_RCC_OscConfig+0x470>)
 80014be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014c0:	f003 0302 	and.w	r3, r3, #2
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d1ea      	bne.n	800149e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f003 0304 	and.w	r3, r3, #4
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	f000 8097 	beq.w	8001604 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014d6:	2300      	movs	r3, #0
 80014d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014da:	4b81      	ldr	r3, [pc, #516]	; (80016e0 <HAL_RCC_OscConfig+0x470>)
 80014dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d10f      	bne.n	8001506 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014e6:	2300      	movs	r3, #0
 80014e8:	60bb      	str	r3, [r7, #8]
 80014ea:	4b7d      	ldr	r3, [pc, #500]	; (80016e0 <HAL_RCC_OscConfig+0x470>)
 80014ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ee:	4a7c      	ldr	r2, [pc, #496]	; (80016e0 <HAL_RCC_OscConfig+0x470>)
 80014f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014f4:	6413      	str	r3, [r2, #64]	; 0x40
 80014f6:	4b7a      	ldr	r3, [pc, #488]	; (80016e0 <HAL_RCC_OscConfig+0x470>)
 80014f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014fe:	60bb      	str	r3, [r7, #8]
 8001500:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001502:	2301      	movs	r3, #1
 8001504:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001506:	4b77      	ldr	r3, [pc, #476]	; (80016e4 <HAL_RCC_OscConfig+0x474>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800150e:	2b00      	cmp	r3, #0
 8001510:	d118      	bne.n	8001544 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001512:	4b74      	ldr	r3, [pc, #464]	; (80016e4 <HAL_RCC_OscConfig+0x474>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a73      	ldr	r2, [pc, #460]	; (80016e4 <HAL_RCC_OscConfig+0x474>)
 8001518:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800151c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800151e:	f7ff fc03 	bl	8000d28 <HAL_GetTick>
 8001522:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001524:	e008      	b.n	8001538 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001526:	f7ff fbff 	bl	8000d28 <HAL_GetTick>
 800152a:	4602      	mov	r2, r0
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	1ad3      	subs	r3, r2, r3
 8001530:	2b02      	cmp	r3, #2
 8001532:	d901      	bls.n	8001538 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001534:	2303      	movs	r3, #3
 8001536:	e10c      	b.n	8001752 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001538:	4b6a      	ldr	r3, [pc, #424]	; (80016e4 <HAL_RCC_OscConfig+0x474>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001540:	2b00      	cmp	r3, #0
 8001542:	d0f0      	beq.n	8001526 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	2b01      	cmp	r3, #1
 800154a:	d106      	bne.n	800155a <HAL_RCC_OscConfig+0x2ea>
 800154c:	4b64      	ldr	r3, [pc, #400]	; (80016e0 <HAL_RCC_OscConfig+0x470>)
 800154e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001550:	4a63      	ldr	r2, [pc, #396]	; (80016e0 <HAL_RCC_OscConfig+0x470>)
 8001552:	f043 0301 	orr.w	r3, r3, #1
 8001556:	6713      	str	r3, [r2, #112]	; 0x70
 8001558:	e01c      	b.n	8001594 <HAL_RCC_OscConfig+0x324>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	2b05      	cmp	r3, #5
 8001560:	d10c      	bne.n	800157c <HAL_RCC_OscConfig+0x30c>
 8001562:	4b5f      	ldr	r3, [pc, #380]	; (80016e0 <HAL_RCC_OscConfig+0x470>)
 8001564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001566:	4a5e      	ldr	r2, [pc, #376]	; (80016e0 <HAL_RCC_OscConfig+0x470>)
 8001568:	f043 0304 	orr.w	r3, r3, #4
 800156c:	6713      	str	r3, [r2, #112]	; 0x70
 800156e:	4b5c      	ldr	r3, [pc, #368]	; (80016e0 <HAL_RCC_OscConfig+0x470>)
 8001570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001572:	4a5b      	ldr	r2, [pc, #364]	; (80016e0 <HAL_RCC_OscConfig+0x470>)
 8001574:	f043 0301 	orr.w	r3, r3, #1
 8001578:	6713      	str	r3, [r2, #112]	; 0x70
 800157a:	e00b      	b.n	8001594 <HAL_RCC_OscConfig+0x324>
 800157c:	4b58      	ldr	r3, [pc, #352]	; (80016e0 <HAL_RCC_OscConfig+0x470>)
 800157e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001580:	4a57      	ldr	r2, [pc, #348]	; (80016e0 <HAL_RCC_OscConfig+0x470>)
 8001582:	f023 0301 	bic.w	r3, r3, #1
 8001586:	6713      	str	r3, [r2, #112]	; 0x70
 8001588:	4b55      	ldr	r3, [pc, #340]	; (80016e0 <HAL_RCC_OscConfig+0x470>)
 800158a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800158c:	4a54      	ldr	r2, [pc, #336]	; (80016e0 <HAL_RCC_OscConfig+0x470>)
 800158e:	f023 0304 	bic.w	r3, r3, #4
 8001592:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d015      	beq.n	80015c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800159c:	f7ff fbc4 	bl	8000d28 <HAL_GetTick>
 80015a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015a2:	e00a      	b.n	80015ba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015a4:	f7ff fbc0 	bl	8000d28 <HAL_GetTick>
 80015a8:	4602      	mov	r2, r0
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d901      	bls.n	80015ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80015b6:	2303      	movs	r3, #3
 80015b8:	e0cb      	b.n	8001752 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015ba:	4b49      	ldr	r3, [pc, #292]	; (80016e0 <HAL_RCC_OscConfig+0x470>)
 80015bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015be:	f003 0302 	and.w	r3, r3, #2
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d0ee      	beq.n	80015a4 <HAL_RCC_OscConfig+0x334>
 80015c6:	e014      	b.n	80015f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015c8:	f7ff fbae 	bl	8000d28 <HAL_GetTick>
 80015cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015ce:	e00a      	b.n	80015e6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015d0:	f7ff fbaa 	bl	8000d28 <HAL_GetTick>
 80015d4:	4602      	mov	r2, r0
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	f241 3288 	movw	r2, #5000	; 0x1388
 80015de:	4293      	cmp	r3, r2
 80015e0:	d901      	bls.n	80015e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80015e2:	2303      	movs	r3, #3
 80015e4:	e0b5      	b.n	8001752 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015e6:	4b3e      	ldr	r3, [pc, #248]	; (80016e0 <HAL_RCC_OscConfig+0x470>)
 80015e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ea:	f003 0302 	and.w	r3, r3, #2
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d1ee      	bne.n	80015d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015f2:	7dfb      	ldrb	r3, [r7, #23]
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d105      	bne.n	8001604 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015f8:	4b39      	ldr	r3, [pc, #228]	; (80016e0 <HAL_RCC_OscConfig+0x470>)
 80015fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fc:	4a38      	ldr	r2, [pc, #224]	; (80016e0 <HAL_RCC_OscConfig+0x470>)
 80015fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001602:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	699b      	ldr	r3, [r3, #24]
 8001608:	2b00      	cmp	r3, #0
 800160a:	f000 80a1 	beq.w	8001750 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800160e:	4b34      	ldr	r3, [pc, #208]	; (80016e0 <HAL_RCC_OscConfig+0x470>)
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	f003 030c 	and.w	r3, r3, #12
 8001616:	2b08      	cmp	r3, #8
 8001618:	d05c      	beq.n	80016d4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	699b      	ldr	r3, [r3, #24]
 800161e:	2b02      	cmp	r3, #2
 8001620:	d141      	bne.n	80016a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001622:	4b31      	ldr	r3, [pc, #196]	; (80016e8 <HAL_RCC_OscConfig+0x478>)
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001628:	f7ff fb7e 	bl	8000d28 <HAL_GetTick>
 800162c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800162e:	e008      	b.n	8001642 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001630:	f7ff fb7a 	bl	8000d28 <HAL_GetTick>
 8001634:	4602      	mov	r2, r0
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	2b02      	cmp	r3, #2
 800163c:	d901      	bls.n	8001642 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800163e:	2303      	movs	r3, #3
 8001640:	e087      	b.n	8001752 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001642:	4b27      	ldr	r3, [pc, #156]	; (80016e0 <HAL_RCC_OscConfig+0x470>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d1f0      	bne.n	8001630 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	69da      	ldr	r2, [r3, #28]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6a1b      	ldr	r3, [r3, #32]
 8001656:	431a      	orrs	r2, r3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800165c:	019b      	lsls	r3, r3, #6
 800165e:	431a      	orrs	r2, r3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001664:	085b      	lsrs	r3, r3, #1
 8001666:	3b01      	subs	r3, #1
 8001668:	041b      	lsls	r3, r3, #16
 800166a:	431a      	orrs	r2, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001670:	061b      	lsls	r3, r3, #24
 8001672:	491b      	ldr	r1, [pc, #108]	; (80016e0 <HAL_RCC_OscConfig+0x470>)
 8001674:	4313      	orrs	r3, r2
 8001676:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001678:	4b1b      	ldr	r3, [pc, #108]	; (80016e8 <HAL_RCC_OscConfig+0x478>)
 800167a:	2201      	movs	r2, #1
 800167c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800167e:	f7ff fb53 	bl	8000d28 <HAL_GetTick>
 8001682:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001684:	e008      	b.n	8001698 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001686:	f7ff fb4f 	bl	8000d28 <HAL_GetTick>
 800168a:	4602      	mov	r2, r0
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	2b02      	cmp	r3, #2
 8001692:	d901      	bls.n	8001698 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001694:	2303      	movs	r3, #3
 8001696:	e05c      	b.n	8001752 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001698:	4b11      	ldr	r3, [pc, #68]	; (80016e0 <HAL_RCC_OscConfig+0x470>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d0f0      	beq.n	8001686 <HAL_RCC_OscConfig+0x416>
 80016a4:	e054      	b.n	8001750 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016a6:	4b10      	ldr	r3, [pc, #64]	; (80016e8 <HAL_RCC_OscConfig+0x478>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ac:	f7ff fb3c 	bl	8000d28 <HAL_GetTick>
 80016b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016b2:	e008      	b.n	80016c6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016b4:	f7ff fb38 	bl	8000d28 <HAL_GetTick>
 80016b8:	4602      	mov	r2, r0
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d901      	bls.n	80016c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e045      	b.n	8001752 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016c6:	4b06      	ldr	r3, [pc, #24]	; (80016e0 <HAL_RCC_OscConfig+0x470>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d1f0      	bne.n	80016b4 <HAL_RCC_OscConfig+0x444>
 80016d2:	e03d      	b.n	8001750 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	699b      	ldr	r3, [r3, #24]
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d107      	bne.n	80016ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	e038      	b.n	8001752 <HAL_RCC_OscConfig+0x4e2>
 80016e0:	40023800 	.word	0x40023800
 80016e4:	40007000 	.word	0x40007000
 80016e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016ec:	4b1b      	ldr	r3, [pc, #108]	; (800175c <HAL_RCC_OscConfig+0x4ec>)
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	699b      	ldr	r3, [r3, #24]
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d028      	beq.n	800174c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001704:	429a      	cmp	r2, r3
 8001706:	d121      	bne.n	800174c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001712:	429a      	cmp	r2, r3
 8001714:	d11a      	bne.n	800174c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001716:	68fa      	ldr	r2, [r7, #12]
 8001718:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800171c:	4013      	ands	r3, r2
 800171e:	687a      	ldr	r2, [r7, #4]
 8001720:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001722:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001724:	4293      	cmp	r3, r2
 8001726:	d111      	bne.n	800174c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001732:	085b      	lsrs	r3, r3, #1
 8001734:	3b01      	subs	r3, #1
 8001736:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001738:	429a      	cmp	r2, r3
 800173a:	d107      	bne.n	800174c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001746:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001748:	429a      	cmp	r2, r3
 800174a:	d001      	beq.n	8001750 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	e000      	b.n	8001752 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001750:	2300      	movs	r3, #0
}
 8001752:	4618      	mov	r0, r3
 8001754:	3718      	adds	r7, #24
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	40023800 	.word	0x40023800

08001760 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d101      	bne.n	8001774 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001770:	2301      	movs	r3, #1
 8001772:	e0cc      	b.n	800190e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001774:	4b68      	ldr	r3, [pc, #416]	; (8001918 <HAL_RCC_ClockConfig+0x1b8>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 0307 	and.w	r3, r3, #7
 800177c:	683a      	ldr	r2, [r7, #0]
 800177e:	429a      	cmp	r2, r3
 8001780:	d90c      	bls.n	800179c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001782:	4b65      	ldr	r3, [pc, #404]	; (8001918 <HAL_RCC_ClockConfig+0x1b8>)
 8001784:	683a      	ldr	r2, [r7, #0]
 8001786:	b2d2      	uxtb	r2, r2
 8001788:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800178a:	4b63      	ldr	r3, [pc, #396]	; (8001918 <HAL_RCC_ClockConfig+0x1b8>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 0307 	and.w	r3, r3, #7
 8001792:	683a      	ldr	r2, [r7, #0]
 8001794:	429a      	cmp	r2, r3
 8001796:	d001      	beq.n	800179c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	e0b8      	b.n	800190e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 0302 	and.w	r3, r3, #2
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d020      	beq.n	80017ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 0304 	and.w	r3, r3, #4
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d005      	beq.n	80017c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017b4:	4b59      	ldr	r3, [pc, #356]	; (800191c <HAL_RCC_ClockConfig+0x1bc>)
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	4a58      	ldr	r2, [pc, #352]	; (800191c <HAL_RCC_ClockConfig+0x1bc>)
 80017ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 0308 	and.w	r3, r3, #8
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d005      	beq.n	80017d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017cc:	4b53      	ldr	r3, [pc, #332]	; (800191c <HAL_RCC_ClockConfig+0x1bc>)
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	4a52      	ldr	r2, [pc, #328]	; (800191c <HAL_RCC_ClockConfig+0x1bc>)
 80017d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017d8:	4b50      	ldr	r3, [pc, #320]	; (800191c <HAL_RCC_ClockConfig+0x1bc>)
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	494d      	ldr	r1, [pc, #308]	; (800191c <HAL_RCC_ClockConfig+0x1bc>)
 80017e6:	4313      	orrs	r3, r2
 80017e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 0301 	and.w	r3, r3, #1
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d044      	beq.n	8001880 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d107      	bne.n	800180e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017fe:	4b47      	ldr	r3, [pc, #284]	; (800191c <HAL_RCC_ClockConfig+0x1bc>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d119      	bne.n	800183e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e07f      	b.n	800190e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	2b02      	cmp	r3, #2
 8001814:	d003      	beq.n	800181e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800181a:	2b03      	cmp	r3, #3
 800181c:	d107      	bne.n	800182e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800181e:	4b3f      	ldr	r3, [pc, #252]	; (800191c <HAL_RCC_ClockConfig+0x1bc>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d109      	bne.n	800183e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e06f      	b.n	800190e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800182e:	4b3b      	ldr	r3, [pc, #236]	; (800191c <HAL_RCC_ClockConfig+0x1bc>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 0302 	and.w	r3, r3, #2
 8001836:	2b00      	cmp	r3, #0
 8001838:	d101      	bne.n	800183e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e067      	b.n	800190e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800183e:	4b37      	ldr	r3, [pc, #220]	; (800191c <HAL_RCC_ClockConfig+0x1bc>)
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	f023 0203 	bic.w	r2, r3, #3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	4934      	ldr	r1, [pc, #208]	; (800191c <HAL_RCC_ClockConfig+0x1bc>)
 800184c:	4313      	orrs	r3, r2
 800184e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001850:	f7ff fa6a 	bl	8000d28 <HAL_GetTick>
 8001854:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001856:	e00a      	b.n	800186e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001858:	f7ff fa66 	bl	8000d28 <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	f241 3288 	movw	r2, #5000	; 0x1388
 8001866:	4293      	cmp	r3, r2
 8001868:	d901      	bls.n	800186e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800186a:	2303      	movs	r3, #3
 800186c:	e04f      	b.n	800190e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800186e:	4b2b      	ldr	r3, [pc, #172]	; (800191c <HAL_RCC_ClockConfig+0x1bc>)
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	f003 020c 	and.w	r2, r3, #12
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	429a      	cmp	r2, r3
 800187e:	d1eb      	bne.n	8001858 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001880:	4b25      	ldr	r3, [pc, #148]	; (8001918 <HAL_RCC_ClockConfig+0x1b8>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 0307 	and.w	r3, r3, #7
 8001888:	683a      	ldr	r2, [r7, #0]
 800188a:	429a      	cmp	r2, r3
 800188c:	d20c      	bcs.n	80018a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800188e:	4b22      	ldr	r3, [pc, #136]	; (8001918 <HAL_RCC_ClockConfig+0x1b8>)
 8001890:	683a      	ldr	r2, [r7, #0]
 8001892:	b2d2      	uxtb	r2, r2
 8001894:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001896:	4b20      	ldr	r3, [pc, #128]	; (8001918 <HAL_RCC_ClockConfig+0x1b8>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 0307 	and.w	r3, r3, #7
 800189e:	683a      	ldr	r2, [r7, #0]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d001      	beq.n	80018a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	e032      	b.n	800190e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 0304 	and.w	r3, r3, #4
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d008      	beq.n	80018c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018b4:	4b19      	ldr	r3, [pc, #100]	; (800191c <HAL_RCC_ClockConfig+0x1bc>)
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	4916      	ldr	r1, [pc, #88]	; (800191c <HAL_RCC_ClockConfig+0x1bc>)
 80018c2:	4313      	orrs	r3, r2
 80018c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 0308 	and.w	r3, r3, #8
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d009      	beq.n	80018e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018d2:	4b12      	ldr	r3, [pc, #72]	; (800191c <HAL_RCC_ClockConfig+0x1bc>)
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	691b      	ldr	r3, [r3, #16]
 80018de:	00db      	lsls	r3, r3, #3
 80018e0:	490e      	ldr	r1, [pc, #56]	; (800191c <HAL_RCC_ClockConfig+0x1bc>)
 80018e2:	4313      	orrs	r3, r2
 80018e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018e6:	f000 f821 	bl	800192c <HAL_RCC_GetSysClockFreq>
 80018ea:	4602      	mov	r2, r0
 80018ec:	4b0b      	ldr	r3, [pc, #44]	; (800191c <HAL_RCC_ClockConfig+0x1bc>)
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	091b      	lsrs	r3, r3, #4
 80018f2:	f003 030f 	and.w	r3, r3, #15
 80018f6:	490a      	ldr	r1, [pc, #40]	; (8001920 <HAL_RCC_ClockConfig+0x1c0>)
 80018f8:	5ccb      	ldrb	r3, [r1, r3]
 80018fa:	fa22 f303 	lsr.w	r3, r2, r3
 80018fe:	4a09      	ldr	r2, [pc, #36]	; (8001924 <HAL_RCC_ClockConfig+0x1c4>)
 8001900:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001902:	4b09      	ldr	r3, [pc, #36]	; (8001928 <HAL_RCC_ClockConfig+0x1c8>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4618      	mov	r0, r3
 8001908:	f7ff f922 	bl	8000b50 <HAL_InitTick>

  return HAL_OK;
 800190c:	2300      	movs	r3, #0
}
 800190e:	4618      	mov	r0, r3
 8001910:	3710      	adds	r7, #16
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	40023c00 	.word	0x40023c00
 800191c:	40023800 	.word	0x40023800
 8001920:	08006464 	.word	0x08006464
 8001924:	20000000 	.word	0x20000000
 8001928:	20000004 	.word	0x20000004

0800192c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800192c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001930:	b094      	sub	sp, #80	; 0x50
 8001932:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001934:	2300      	movs	r3, #0
 8001936:	647b      	str	r3, [r7, #68]	; 0x44
 8001938:	2300      	movs	r3, #0
 800193a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800193c:	2300      	movs	r3, #0
 800193e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001940:	2300      	movs	r3, #0
 8001942:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001944:	4b79      	ldr	r3, [pc, #484]	; (8001b2c <HAL_RCC_GetSysClockFreq+0x200>)
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	f003 030c 	and.w	r3, r3, #12
 800194c:	2b08      	cmp	r3, #8
 800194e:	d00d      	beq.n	800196c <HAL_RCC_GetSysClockFreq+0x40>
 8001950:	2b08      	cmp	r3, #8
 8001952:	f200 80e1 	bhi.w	8001b18 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001956:	2b00      	cmp	r3, #0
 8001958:	d002      	beq.n	8001960 <HAL_RCC_GetSysClockFreq+0x34>
 800195a:	2b04      	cmp	r3, #4
 800195c:	d003      	beq.n	8001966 <HAL_RCC_GetSysClockFreq+0x3a>
 800195e:	e0db      	b.n	8001b18 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001960:	4b73      	ldr	r3, [pc, #460]	; (8001b30 <HAL_RCC_GetSysClockFreq+0x204>)
 8001962:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001964:	e0db      	b.n	8001b1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001966:	4b73      	ldr	r3, [pc, #460]	; (8001b34 <HAL_RCC_GetSysClockFreq+0x208>)
 8001968:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800196a:	e0d8      	b.n	8001b1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800196c:	4b6f      	ldr	r3, [pc, #444]	; (8001b2c <HAL_RCC_GetSysClockFreq+0x200>)
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001974:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001976:	4b6d      	ldr	r3, [pc, #436]	; (8001b2c <HAL_RCC_GetSysClockFreq+0x200>)
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d063      	beq.n	8001a4a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001982:	4b6a      	ldr	r3, [pc, #424]	; (8001b2c <HAL_RCC_GetSysClockFreq+0x200>)
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	099b      	lsrs	r3, r3, #6
 8001988:	2200      	movs	r2, #0
 800198a:	63bb      	str	r3, [r7, #56]	; 0x38
 800198c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800198e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001990:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001994:	633b      	str	r3, [r7, #48]	; 0x30
 8001996:	2300      	movs	r3, #0
 8001998:	637b      	str	r3, [r7, #52]	; 0x34
 800199a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800199e:	4622      	mov	r2, r4
 80019a0:	462b      	mov	r3, r5
 80019a2:	f04f 0000 	mov.w	r0, #0
 80019a6:	f04f 0100 	mov.w	r1, #0
 80019aa:	0159      	lsls	r1, r3, #5
 80019ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019b0:	0150      	lsls	r0, r2, #5
 80019b2:	4602      	mov	r2, r0
 80019b4:	460b      	mov	r3, r1
 80019b6:	4621      	mov	r1, r4
 80019b8:	1a51      	subs	r1, r2, r1
 80019ba:	6139      	str	r1, [r7, #16]
 80019bc:	4629      	mov	r1, r5
 80019be:	eb63 0301 	sbc.w	r3, r3, r1
 80019c2:	617b      	str	r3, [r7, #20]
 80019c4:	f04f 0200 	mov.w	r2, #0
 80019c8:	f04f 0300 	mov.w	r3, #0
 80019cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80019d0:	4659      	mov	r1, fp
 80019d2:	018b      	lsls	r3, r1, #6
 80019d4:	4651      	mov	r1, sl
 80019d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019da:	4651      	mov	r1, sl
 80019dc:	018a      	lsls	r2, r1, #6
 80019de:	4651      	mov	r1, sl
 80019e0:	ebb2 0801 	subs.w	r8, r2, r1
 80019e4:	4659      	mov	r1, fp
 80019e6:	eb63 0901 	sbc.w	r9, r3, r1
 80019ea:	f04f 0200 	mov.w	r2, #0
 80019ee:	f04f 0300 	mov.w	r3, #0
 80019f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80019f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80019fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80019fe:	4690      	mov	r8, r2
 8001a00:	4699      	mov	r9, r3
 8001a02:	4623      	mov	r3, r4
 8001a04:	eb18 0303 	adds.w	r3, r8, r3
 8001a08:	60bb      	str	r3, [r7, #8]
 8001a0a:	462b      	mov	r3, r5
 8001a0c:	eb49 0303 	adc.w	r3, r9, r3
 8001a10:	60fb      	str	r3, [r7, #12]
 8001a12:	f04f 0200 	mov.w	r2, #0
 8001a16:	f04f 0300 	mov.w	r3, #0
 8001a1a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001a1e:	4629      	mov	r1, r5
 8001a20:	024b      	lsls	r3, r1, #9
 8001a22:	4621      	mov	r1, r4
 8001a24:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a28:	4621      	mov	r1, r4
 8001a2a:	024a      	lsls	r2, r1, #9
 8001a2c:	4610      	mov	r0, r2
 8001a2e:	4619      	mov	r1, r3
 8001a30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a32:	2200      	movs	r2, #0
 8001a34:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a36:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a38:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001a3c:	f7fe fc68 	bl	8000310 <__aeabi_uldivmod>
 8001a40:	4602      	mov	r2, r0
 8001a42:	460b      	mov	r3, r1
 8001a44:	4613      	mov	r3, r2
 8001a46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a48:	e058      	b.n	8001afc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a4a:	4b38      	ldr	r3, [pc, #224]	; (8001b2c <HAL_RCC_GetSysClockFreq+0x200>)
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	099b      	lsrs	r3, r3, #6
 8001a50:	2200      	movs	r2, #0
 8001a52:	4618      	mov	r0, r3
 8001a54:	4611      	mov	r1, r2
 8001a56:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a5a:	623b      	str	r3, [r7, #32]
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	627b      	str	r3, [r7, #36]	; 0x24
 8001a60:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a64:	4642      	mov	r2, r8
 8001a66:	464b      	mov	r3, r9
 8001a68:	f04f 0000 	mov.w	r0, #0
 8001a6c:	f04f 0100 	mov.w	r1, #0
 8001a70:	0159      	lsls	r1, r3, #5
 8001a72:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a76:	0150      	lsls	r0, r2, #5
 8001a78:	4602      	mov	r2, r0
 8001a7a:	460b      	mov	r3, r1
 8001a7c:	4641      	mov	r1, r8
 8001a7e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001a82:	4649      	mov	r1, r9
 8001a84:	eb63 0b01 	sbc.w	fp, r3, r1
 8001a88:	f04f 0200 	mov.w	r2, #0
 8001a8c:	f04f 0300 	mov.w	r3, #0
 8001a90:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001a94:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001a98:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001a9c:	ebb2 040a 	subs.w	r4, r2, sl
 8001aa0:	eb63 050b 	sbc.w	r5, r3, fp
 8001aa4:	f04f 0200 	mov.w	r2, #0
 8001aa8:	f04f 0300 	mov.w	r3, #0
 8001aac:	00eb      	lsls	r3, r5, #3
 8001aae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ab2:	00e2      	lsls	r2, r4, #3
 8001ab4:	4614      	mov	r4, r2
 8001ab6:	461d      	mov	r5, r3
 8001ab8:	4643      	mov	r3, r8
 8001aba:	18e3      	adds	r3, r4, r3
 8001abc:	603b      	str	r3, [r7, #0]
 8001abe:	464b      	mov	r3, r9
 8001ac0:	eb45 0303 	adc.w	r3, r5, r3
 8001ac4:	607b      	str	r3, [r7, #4]
 8001ac6:	f04f 0200 	mov.w	r2, #0
 8001aca:	f04f 0300 	mov.w	r3, #0
 8001ace:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ad2:	4629      	mov	r1, r5
 8001ad4:	028b      	lsls	r3, r1, #10
 8001ad6:	4621      	mov	r1, r4
 8001ad8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001adc:	4621      	mov	r1, r4
 8001ade:	028a      	lsls	r2, r1, #10
 8001ae0:	4610      	mov	r0, r2
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	61bb      	str	r3, [r7, #24]
 8001aea:	61fa      	str	r2, [r7, #28]
 8001aec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001af0:	f7fe fc0e 	bl	8000310 <__aeabi_uldivmod>
 8001af4:	4602      	mov	r2, r0
 8001af6:	460b      	mov	r3, r1
 8001af8:	4613      	mov	r3, r2
 8001afa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001afc:	4b0b      	ldr	r3, [pc, #44]	; (8001b2c <HAL_RCC_GetSysClockFreq+0x200>)
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	0c1b      	lsrs	r3, r3, #16
 8001b02:	f003 0303 	and.w	r3, r3, #3
 8001b06:	3301      	adds	r3, #1
 8001b08:	005b      	lsls	r3, r3, #1
 8001b0a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001b0c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001b0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b10:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b14:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b16:	e002      	b.n	8001b1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b18:	4b05      	ldr	r3, [pc, #20]	; (8001b30 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b1a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3750      	adds	r7, #80	; 0x50
 8001b24:	46bd      	mov	sp, r7
 8001b26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b2a:	bf00      	nop
 8001b2c:	40023800 	.word	0x40023800
 8001b30:	00f42400 	.word	0x00f42400
 8001b34:	007a1200 	.word	0x007a1200

08001b38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b3c:	4b03      	ldr	r3, [pc, #12]	; (8001b4c <HAL_RCC_GetHCLKFreq+0x14>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	20000000 	.word	0x20000000

08001b50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b54:	f7ff fff0 	bl	8001b38 <HAL_RCC_GetHCLKFreq>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	4b05      	ldr	r3, [pc, #20]	; (8001b70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	0a9b      	lsrs	r3, r3, #10
 8001b60:	f003 0307 	and.w	r3, r3, #7
 8001b64:	4903      	ldr	r1, [pc, #12]	; (8001b74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b66:	5ccb      	ldrb	r3, [r1, r3]
 8001b68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	40023800 	.word	0x40023800
 8001b74:	08006474 	.word	0x08006474

08001b78 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	220f      	movs	r2, #15
 8001b86:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b88:	4b12      	ldr	r3, [pc, #72]	; (8001bd4 <HAL_RCC_GetClockConfig+0x5c>)
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	f003 0203 	and.w	r2, r3, #3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b94:	4b0f      	ldr	r3, [pc, #60]	; (8001bd4 <HAL_RCC_GetClockConfig+0x5c>)
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001ba0:	4b0c      	ldr	r3, [pc, #48]	; (8001bd4 <HAL_RCC_GetClockConfig+0x5c>)
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001bac:	4b09      	ldr	r3, [pc, #36]	; (8001bd4 <HAL_RCC_GetClockConfig+0x5c>)
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	08db      	lsrs	r3, r3, #3
 8001bb2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001bba:	4b07      	ldr	r3, [pc, #28]	; (8001bd8 <HAL_RCC_GetClockConfig+0x60>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 0207 	and.w	r2, r3, #7
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	601a      	str	r2, [r3, #0]
}
 8001bc6:	bf00      	nop
 8001bc8:	370c      	adds	r7, #12
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	40023800 	.word	0x40023800
 8001bd8:	40023c00 	.word	0x40023c00

08001bdc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d101      	bne.n	8001bee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e041      	b.n	8001c72 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d106      	bne.n	8001c08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f000 f839 	bl	8001c7a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2202      	movs	r2, #2
 8001c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	3304      	adds	r3, #4
 8001c18:	4619      	mov	r1, r3
 8001c1a:	4610      	mov	r0, r2
 8001c1c:	f000 f9d8 	bl	8001fd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2201      	movs	r2, #1
 8001c24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2201      	movs	r2, #1
 8001c34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2201      	movs	r2, #1
 8001c44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2201      	movs	r2, #1
 8001c54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2201      	movs	r2, #1
 8001c64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3708      	adds	r7, #8
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}

08001c7a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c7a:	b480      	push	{r7}
 8001c7c:	b083      	sub	sp, #12
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c82:	bf00      	nop
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
	...

08001c90 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b085      	sub	sp, #20
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d001      	beq.n	8001ca8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e04e      	b.n	8001d46 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2202      	movs	r2, #2
 8001cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	68da      	ldr	r2, [r3, #12]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f042 0201 	orr.w	r2, r2, #1
 8001cbe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a23      	ldr	r2, [pc, #140]	; (8001d54 <HAL_TIM_Base_Start_IT+0xc4>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d022      	beq.n	8001d10 <HAL_TIM_Base_Start_IT+0x80>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cd2:	d01d      	beq.n	8001d10 <HAL_TIM_Base_Start_IT+0x80>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a1f      	ldr	r2, [pc, #124]	; (8001d58 <HAL_TIM_Base_Start_IT+0xc8>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d018      	beq.n	8001d10 <HAL_TIM_Base_Start_IT+0x80>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a1e      	ldr	r2, [pc, #120]	; (8001d5c <HAL_TIM_Base_Start_IT+0xcc>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d013      	beq.n	8001d10 <HAL_TIM_Base_Start_IT+0x80>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a1c      	ldr	r2, [pc, #112]	; (8001d60 <HAL_TIM_Base_Start_IT+0xd0>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d00e      	beq.n	8001d10 <HAL_TIM_Base_Start_IT+0x80>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a1b      	ldr	r2, [pc, #108]	; (8001d64 <HAL_TIM_Base_Start_IT+0xd4>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d009      	beq.n	8001d10 <HAL_TIM_Base_Start_IT+0x80>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a19      	ldr	r2, [pc, #100]	; (8001d68 <HAL_TIM_Base_Start_IT+0xd8>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d004      	beq.n	8001d10 <HAL_TIM_Base_Start_IT+0x80>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a18      	ldr	r2, [pc, #96]	; (8001d6c <HAL_TIM_Base_Start_IT+0xdc>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d111      	bne.n	8001d34 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	f003 0307 	and.w	r3, r3, #7
 8001d1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	2b06      	cmp	r3, #6
 8001d20:	d010      	beq.n	8001d44 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f042 0201 	orr.w	r2, r2, #1
 8001d30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d32:	e007      	b.n	8001d44 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f042 0201 	orr.w	r2, r2, #1
 8001d42:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d44:	2300      	movs	r3, #0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3714      	adds	r7, #20
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	40010000 	.word	0x40010000
 8001d58:	40000400 	.word	0x40000400
 8001d5c:	40000800 	.word	0x40000800
 8001d60:	40000c00 	.word	0x40000c00
 8001d64:	40010400 	.word	0x40010400
 8001d68:	40014000 	.word	0x40014000
 8001d6c:	40001800 	.word	0x40001800

08001d70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	691b      	ldr	r3, [r3, #16]
 8001d7e:	f003 0302 	and.w	r3, r3, #2
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	d122      	bne.n	8001dcc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	f003 0302 	and.w	r3, r3, #2
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d11b      	bne.n	8001dcc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f06f 0202 	mvn.w	r2, #2
 8001d9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2201      	movs	r2, #1
 8001da2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	699b      	ldr	r3, [r3, #24]
 8001daa:	f003 0303 	and.w	r3, r3, #3
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d003      	beq.n	8001dba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f000 f8ee 	bl	8001f94 <HAL_TIM_IC_CaptureCallback>
 8001db8:	e005      	b.n	8001dc6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f000 f8e0 	bl	8001f80 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f000 f8f1 	bl	8001fa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	691b      	ldr	r3, [r3, #16]
 8001dd2:	f003 0304 	and.w	r3, r3, #4
 8001dd6:	2b04      	cmp	r3, #4
 8001dd8:	d122      	bne.n	8001e20 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	f003 0304 	and.w	r3, r3, #4
 8001de4:	2b04      	cmp	r3, #4
 8001de6:	d11b      	bne.n	8001e20 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f06f 0204 	mvn.w	r2, #4
 8001df0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2202      	movs	r2, #2
 8001df6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	699b      	ldr	r3, [r3, #24]
 8001dfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d003      	beq.n	8001e0e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f000 f8c4 	bl	8001f94 <HAL_TIM_IC_CaptureCallback>
 8001e0c:	e005      	b.n	8001e1a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f000 f8b6 	bl	8001f80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f000 f8c7 	bl	8001fa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	691b      	ldr	r3, [r3, #16]
 8001e26:	f003 0308 	and.w	r3, r3, #8
 8001e2a:	2b08      	cmp	r3, #8
 8001e2c:	d122      	bne.n	8001e74 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	f003 0308 	and.w	r3, r3, #8
 8001e38:	2b08      	cmp	r3, #8
 8001e3a:	d11b      	bne.n	8001e74 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f06f 0208 	mvn.w	r2, #8
 8001e44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2204      	movs	r2, #4
 8001e4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	69db      	ldr	r3, [r3, #28]
 8001e52:	f003 0303 	and.w	r3, r3, #3
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d003      	beq.n	8001e62 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f000 f89a 	bl	8001f94 <HAL_TIM_IC_CaptureCallback>
 8001e60:	e005      	b.n	8001e6e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f000 f88c 	bl	8001f80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f000 f89d 	bl	8001fa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2200      	movs	r2, #0
 8001e72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	691b      	ldr	r3, [r3, #16]
 8001e7a:	f003 0310 	and.w	r3, r3, #16
 8001e7e:	2b10      	cmp	r3, #16
 8001e80:	d122      	bne.n	8001ec8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	f003 0310 	and.w	r3, r3, #16
 8001e8c:	2b10      	cmp	r3, #16
 8001e8e:	d11b      	bne.n	8001ec8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f06f 0210 	mvn.w	r2, #16
 8001e98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2208      	movs	r2, #8
 8001e9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	69db      	ldr	r3, [r3, #28]
 8001ea6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d003      	beq.n	8001eb6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f000 f870 	bl	8001f94 <HAL_TIM_IC_CaptureCallback>
 8001eb4:	e005      	b.n	8001ec2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f000 f862 	bl	8001f80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f000 f873 	bl	8001fa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	691b      	ldr	r3, [r3, #16]
 8001ece:	f003 0301 	and.w	r3, r3, #1
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d10e      	bne.n	8001ef4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	f003 0301 	and.w	r3, r3, #1
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d107      	bne.n	8001ef4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f06f 0201 	mvn.w	r2, #1
 8001eec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f7fe fdee 	bl	8000ad0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	691b      	ldr	r3, [r3, #16]
 8001efa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001efe:	2b80      	cmp	r3, #128	; 0x80
 8001f00:	d10e      	bne.n	8001f20 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f0c:	2b80      	cmp	r3, #128	; 0x80
 8001f0e:	d107      	bne.n	8001f20 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f000 f902 	bl	8002124 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	691b      	ldr	r3, [r3, #16]
 8001f26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f2a:	2b40      	cmp	r3, #64	; 0x40
 8001f2c:	d10e      	bne.n	8001f4c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f38:	2b40      	cmp	r3, #64	; 0x40
 8001f3a:	d107      	bne.n	8001f4c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f000 f838 	bl	8001fbc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	691b      	ldr	r3, [r3, #16]
 8001f52:	f003 0320 	and.w	r3, r3, #32
 8001f56:	2b20      	cmp	r3, #32
 8001f58:	d10e      	bne.n	8001f78 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	f003 0320 	and.w	r3, r3, #32
 8001f64:	2b20      	cmp	r3, #32
 8001f66:	d107      	bne.n	8001f78 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f06f 0220 	mvn.w	r2, #32
 8001f70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f000 f8cc 	bl	8002110 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f78:	bf00      	nop
 8001f7a:	3708      	adds	r7, #8
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f88:	bf00      	nop
 8001f8a:	370c      	adds	r7, #12
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr

08001f94 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f9c:	bf00      	nop
 8001f9e:	370c      	adds	r7, #12
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr

08001fa8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001fb0:	bf00      	nop
 8001fb2:	370c      	adds	r7, #12
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr

08001fbc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001fc4:	bf00      	nop
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b085      	sub	sp, #20
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	4a40      	ldr	r2, [pc, #256]	; (80020e4 <TIM_Base_SetConfig+0x114>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d013      	beq.n	8002010 <TIM_Base_SetConfig+0x40>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fee:	d00f      	beq.n	8002010 <TIM_Base_SetConfig+0x40>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	4a3d      	ldr	r2, [pc, #244]	; (80020e8 <TIM_Base_SetConfig+0x118>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d00b      	beq.n	8002010 <TIM_Base_SetConfig+0x40>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	4a3c      	ldr	r2, [pc, #240]	; (80020ec <TIM_Base_SetConfig+0x11c>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d007      	beq.n	8002010 <TIM_Base_SetConfig+0x40>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	4a3b      	ldr	r2, [pc, #236]	; (80020f0 <TIM_Base_SetConfig+0x120>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d003      	beq.n	8002010 <TIM_Base_SetConfig+0x40>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	4a3a      	ldr	r2, [pc, #232]	; (80020f4 <TIM_Base_SetConfig+0x124>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d108      	bne.n	8002022 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002016:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	68fa      	ldr	r2, [r7, #12]
 800201e:	4313      	orrs	r3, r2
 8002020:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a2f      	ldr	r2, [pc, #188]	; (80020e4 <TIM_Base_SetConfig+0x114>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d02b      	beq.n	8002082 <TIM_Base_SetConfig+0xb2>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002030:	d027      	beq.n	8002082 <TIM_Base_SetConfig+0xb2>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a2c      	ldr	r2, [pc, #176]	; (80020e8 <TIM_Base_SetConfig+0x118>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d023      	beq.n	8002082 <TIM_Base_SetConfig+0xb2>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a2b      	ldr	r2, [pc, #172]	; (80020ec <TIM_Base_SetConfig+0x11c>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d01f      	beq.n	8002082 <TIM_Base_SetConfig+0xb2>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a2a      	ldr	r2, [pc, #168]	; (80020f0 <TIM_Base_SetConfig+0x120>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d01b      	beq.n	8002082 <TIM_Base_SetConfig+0xb2>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a29      	ldr	r2, [pc, #164]	; (80020f4 <TIM_Base_SetConfig+0x124>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d017      	beq.n	8002082 <TIM_Base_SetConfig+0xb2>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a28      	ldr	r2, [pc, #160]	; (80020f8 <TIM_Base_SetConfig+0x128>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d013      	beq.n	8002082 <TIM_Base_SetConfig+0xb2>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a27      	ldr	r2, [pc, #156]	; (80020fc <TIM_Base_SetConfig+0x12c>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d00f      	beq.n	8002082 <TIM_Base_SetConfig+0xb2>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a26      	ldr	r2, [pc, #152]	; (8002100 <TIM_Base_SetConfig+0x130>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d00b      	beq.n	8002082 <TIM_Base_SetConfig+0xb2>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a25      	ldr	r2, [pc, #148]	; (8002104 <TIM_Base_SetConfig+0x134>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d007      	beq.n	8002082 <TIM_Base_SetConfig+0xb2>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a24      	ldr	r2, [pc, #144]	; (8002108 <TIM_Base_SetConfig+0x138>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d003      	beq.n	8002082 <TIM_Base_SetConfig+0xb2>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a23      	ldr	r2, [pc, #140]	; (800210c <TIM_Base_SetConfig+0x13c>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d108      	bne.n	8002094 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002088:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	68db      	ldr	r3, [r3, #12]
 800208e:	68fa      	ldr	r2, [r7, #12]
 8002090:	4313      	orrs	r3, r2
 8002092:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	695b      	ldr	r3, [r3, #20]
 800209e:	4313      	orrs	r3, r2
 80020a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	68fa      	ldr	r2, [r7, #12]
 80020a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	689a      	ldr	r2, [r3, #8]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	4a0a      	ldr	r2, [pc, #40]	; (80020e4 <TIM_Base_SetConfig+0x114>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d003      	beq.n	80020c8 <TIM_Base_SetConfig+0xf8>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	4a0c      	ldr	r2, [pc, #48]	; (80020f4 <TIM_Base_SetConfig+0x124>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d103      	bne.n	80020d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	691a      	ldr	r2, [r3, #16]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2201      	movs	r2, #1
 80020d4:	615a      	str	r2, [r3, #20]
}
 80020d6:	bf00      	nop
 80020d8:	3714      	adds	r7, #20
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	40010000 	.word	0x40010000
 80020e8:	40000400 	.word	0x40000400
 80020ec:	40000800 	.word	0x40000800
 80020f0:	40000c00 	.word	0x40000c00
 80020f4:	40010400 	.word	0x40010400
 80020f8:	40014000 	.word	0x40014000
 80020fc:	40014400 	.word	0x40014400
 8002100:	40014800 	.word	0x40014800
 8002104:	40001800 	.word	0x40001800
 8002108:	40001c00 	.word	0x40001c00
 800210c:	40002000 	.word	0x40002000

08002110 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002118:	bf00      	nop
 800211a:	370c      	adds	r7, #12
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800212c:	bf00      	nop
 800212e:	370c      	adds	r7, #12
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	f103 0208 	add.w	r2, r3, #8
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	f04f 32ff 	mov.w	r2, #4294967295
 8002150:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	f103 0208 	add.w	r2, r3, #8
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f103 0208 	add.w	r2, r3, #8
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2200      	movs	r2, #0
 800216a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800216c:	bf00      	nop
 800216e:	370c      	adds	r7, #12
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr

08002178 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2200      	movs	r2, #0
 8002184:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002186:	bf00      	nop
 8002188:	370c      	adds	r7, #12
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr

08002192 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8002192:	b480      	push	{r7}
 8002194:	b085      	sub	sp, #20
 8002196:	af00      	add	r7, sp, #0
 8002198:	6078      	str	r0, [r7, #4]
 800219a:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	68fa      	ldr	r2, [r7, #12]
 80021a6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	689a      	ldr	r2, [r3, #8]
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	683a      	ldr	r2, [r7, #0]
 80021b6:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	683a      	ldr	r2, [r7, #0]
 80021bc:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	1c5a      	adds	r2, r3, #1
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	601a      	str	r2, [r3, #0]
}
 80021ce:	bf00      	nop
 80021d0:	3714      	adds	r7, #20
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr

080021da <uxListRemove>:
    ( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80021da:	b480      	push	{r7}
 80021dc:	b085      	sub	sp, #20
 80021de:	af00      	add	r7, sp, #0
 80021e0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	691b      	ldr	r3, [r3, #16]
 80021e6:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	6892      	ldr	r2, [r2, #8]
 80021f0:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	6852      	ldr	r2, [r2, #4]
 80021fa:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	429a      	cmp	r2, r3
 8002204:	d103      	bne.n	800220e <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	689a      	ldr	r2, [r3, #8]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2200      	movs	r2, #0
 8002212:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	1e5a      	subs	r2, r3, #1
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
}
 8002222:	4618      	mov	r0, r3
 8002224:	3714      	adds	r7, #20
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr

0800222e <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800222e:	b580      	push	{r7, lr}
 8002230:	b08c      	sub	sp, #48	; 0x30
 8002232:	af04      	add	r7, sp, #16
 8002234:	60f8      	str	r0, [r7, #12]
 8002236:	60b9      	str	r1, [r7, #8]
 8002238:	603b      	str	r3, [r7, #0]
 800223a:	4613      	mov	r3, r2
 800223c:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800223e:	88fb      	ldrh	r3, [r7, #6]
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	4618      	mov	r0, r3
 8002244:	f000 fee2 	bl	800300c <pvPortMalloc>
 8002248:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d00e      	beq.n	800226e <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002250:	2058      	movs	r0, #88	; 0x58
 8002252:	f000 fedb 	bl	800300c <pvPortMalloc>
 8002256:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d003      	beq.n	8002266 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	697a      	ldr	r2, [r7, #20]
 8002262:	631a      	str	r2, [r3, #48]	; 0x30
 8002264:	e005      	b.n	8002272 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002266:	6978      	ldr	r0, [r7, #20]
 8002268:	f000 ffb0 	bl	80031cc <vPortFree>
 800226c:	e001      	b.n	8002272 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 800226e:	2300      	movs	r3, #0
 8002270:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d013      	beq.n	80022a0 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002278:	88fa      	ldrh	r2, [r7, #6]
 800227a:	2300      	movs	r3, #0
 800227c:	9303      	str	r3, [sp, #12]
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	9302      	str	r3, [sp, #8]
 8002282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002284:	9301      	str	r3, [sp, #4]
 8002286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002288:	9300      	str	r3, [sp, #0]
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	68b9      	ldr	r1, [r7, #8]
 800228e:	68f8      	ldr	r0, [r7, #12]
 8002290:	f000 f80e 	bl	80022b0 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002294:	69f8      	ldr	r0, [r7, #28]
 8002296:	f000 f8a1 	bl	80023dc <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800229a:	2301      	movs	r3, #1
 800229c:	61bb      	str	r3, [r7, #24]
 800229e:	e002      	b.n	80022a6 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80022a0:	f04f 33ff 	mov.w	r3, #4294967295
 80022a4:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80022a6:	69bb      	ldr	r3, [r7, #24]
    }
 80022a8:	4618      	mov	r0, r3
 80022aa:	3720      	adds	r7, #32
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}

080022b0 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b088      	sub	sp, #32
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	60f8      	str	r0, [r7, #12]
 80022b8:	60b9      	str	r1, [r7, #8]
 80022ba:	607a      	str	r2, [r7, #4]
 80022bc:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80022be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022c0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	461a      	mov	r2, r3
 80022c8:	21a5      	movs	r1, #165	; 0xa5
 80022ca:	f003 fba9 	bl	8005a20 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80022ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80022d8:	3b01      	subs	r3, #1
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	4413      	add	r3, r2
 80022de:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80022e0:	69bb      	ldr	r3, [r7, #24]
 80022e2:	f023 0307 	bic.w	r3, r3, #7
 80022e6:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80022e8:	69bb      	ldr	r3, [r7, #24]
 80022ea:	f003 0307 	and.w	r3, r3, #7
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d00a      	beq.n	8002308 <prvInitialiseNewTask+0x58>
        __asm volatile
 80022f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022f6:	f383 8811 	msr	BASEPRI, r3
 80022fa:	f3bf 8f6f 	isb	sy
 80022fe:	f3bf 8f4f 	dsb	sy
 8002302:	617b      	str	r3, [r7, #20]
    }
 8002304:	bf00      	nop
 8002306:	e7fe      	b.n	8002306 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d01f      	beq.n	800234e <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800230e:	2300      	movs	r3, #0
 8002310:	61fb      	str	r3, [r7, #28]
 8002312:	e012      	b.n	800233a <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002314:	68ba      	ldr	r2, [r7, #8]
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	4413      	add	r3, r2
 800231a:	7819      	ldrb	r1, [r3, #0]
 800231c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	4413      	add	r3, r2
 8002322:	3334      	adds	r3, #52	; 0x34
 8002324:	460a      	mov	r2, r1
 8002326:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002328:	68ba      	ldr	r2, [r7, #8]
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	4413      	add	r3, r2
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d006      	beq.n	8002342 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	3301      	adds	r3, #1
 8002338:	61fb      	str	r3, [r7, #28]
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	2b09      	cmp	r3, #9
 800233e:	d9e9      	bls.n	8002314 <prvInitialiseNewTask+0x64>
 8002340:	e000      	b.n	8002344 <prvInitialiseNewTask+0x94>
            {
                break;
 8002342:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002346:	2200      	movs	r2, #0
 8002348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800234c:	e003      	b.n	8002356 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800234e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002350:	2200      	movs	r2, #0
 8002352:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002358:	2b04      	cmp	r3, #4
 800235a:	d901      	bls.n	8002360 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800235c:	2304      	movs	r3, #4
 800235e:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002362:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002364:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002368:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800236a:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 800236c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800236e:	2200      	movs	r2, #0
 8002370:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002374:	3304      	adds	r3, #4
 8002376:	4618      	mov	r0, r3
 8002378:	f7ff fefe 	bl	8002178 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800237c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800237e:	3318      	adds	r3, #24
 8002380:	4618      	mov	r0, r3
 8002382:	f7ff fef9 	bl	8002178 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002388:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800238a:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800238c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800238e:	f1c3 0205 	rsb	r2, r3, #5
 8002392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002394:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002398:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800239a:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800239c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800239e:	3350      	adds	r3, #80	; 0x50
 80023a0:	2204      	movs	r2, #4
 80023a2:	2100      	movs	r1, #0
 80023a4:	4618      	mov	r0, r3
 80023a6:	f003 fb3b 	bl	8005a20 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80023aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023ac:	3354      	adds	r3, #84	; 0x54
 80023ae:	2201      	movs	r2, #1
 80023b0:	2100      	movs	r1, #0
 80023b2:	4618      	mov	r0, r3
 80023b4:	f003 fb34 	bl	8005a20 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80023b8:	683a      	ldr	r2, [r7, #0]
 80023ba:	68f9      	ldr	r1, [r7, #12]
 80023bc:	69b8      	ldr	r0, [r7, #24]
 80023be:	f000 fb49 	bl	8002a54 <pxPortInitialiseStack>
 80023c2:	4602      	mov	r2, r0
 80023c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023c6:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80023c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d002      	beq.n	80023d4 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80023ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023d2:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80023d4:	bf00      	nop
 80023d6:	3720      	adds	r7, #32
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}

080023dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80023dc:	b5b0      	push	{r4, r5, r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af02      	add	r7, sp, #8
 80023e2:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80023e4:	f000 fce6 	bl	8002db4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80023e8:	4b35      	ldr	r3, [pc, #212]	; (80024c0 <prvAddNewTaskToReadyList+0xe4>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	3301      	adds	r3, #1
 80023ee:	4a34      	ldr	r2, [pc, #208]	; (80024c0 <prvAddNewTaskToReadyList+0xe4>)
 80023f0:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80023f2:	4b34      	ldr	r3, [pc, #208]	; (80024c4 <prvAddNewTaskToReadyList+0xe8>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d109      	bne.n	800240e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80023fa:	4a32      	ldr	r2, [pc, #200]	; (80024c4 <prvAddNewTaskToReadyList+0xe8>)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002400:	4b2f      	ldr	r3, [pc, #188]	; (80024c0 <prvAddNewTaskToReadyList+0xe4>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	2b01      	cmp	r3, #1
 8002406:	d110      	bne.n	800242a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002408:	f000 fa8a 	bl	8002920 <prvInitialiseTaskLists>
 800240c:	e00d      	b.n	800242a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800240e:	4b2e      	ldr	r3, [pc, #184]	; (80024c8 <prvAddNewTaskToReadyList+0xec>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d109      	bne.n	800242a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002416:	4b2b      	ldr	r3, [pc, #172]	; (80024c4 <prvAddNewTaskToReadyList+0xe8>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002420:	429a      	cmp	r2, r3
 8002422:	d802      	bhi.n	800242a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002424:	4a27      	ldr	r2, [pc, #156]	; (80024c4 <prvAddNewTaskToReadyList+0xe8>)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800242a:	4b28      	ldr	r3, [pc, #160]	; (80024cc <prvAddNewTaskToReadyList+0xf0>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	3301      	adds	r3, #1
 8002430:	4a26      	ldr	r2, [pc, #152]	; (80024cc <prvAddNewTaskToReadyList+0xf0>)
 8002432:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002434:	4b25      	ldr	r3, [pc, #148]	; (80024cc <prvAddNewTaskToReadyList+0xf0>)
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d016      	beq.n	8002470 <prvAddNewTaskToReadyList+0x94>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4618      	mov	r0, r3
 8002446:	f003 f869 	bl	800551c <SEGGER_SYSVIEW_OnTaskCreate>
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245a:	461d      	mov	r5, r3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	461c      	mov	r4, r3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002466:	1ae3      	subs	r3, r4, r3
 8002468:	9300      	str	r3, [sp, #0]
 800246a:	462b      	mov	r3, r5
 800246c:	f001 f87c 	bl	8003568 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	4618      	mov	r0, r3
 8002474:	f003 f8d6 	bl	8005624 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800247c:	2201      	movs	r2, #1
 800247e:	409a      	lsls	r2, r3
 8002480:	4b13      	ldr	r3, [pc, #76]	; (80024d0 <prvAddNewTaskToReadyList+0xf4>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4313      	orrs	r3, r2
 8002486:	4a12      	ldr	r2, [pc, #72]	; (80024d0 <prvAddNewTaskToReadyList+0xf4>)
 8002488:	6013      	str	r3, [r2, #0]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800248e:	4613      	mov	r3, r2
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	4413      	add	r3, r2
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	4a0f      	ldr	r2, [pc, #60]	; (80024d4 <prvAddNewTaskToReadyList+0xf8>)
 8002498:	441a      	add	r2, r3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	3304      	adds	r3, #4
 800249e:	4619      	mov	r1, r3
 80024a0:	4610      	mov	r0, r2
 80024a2:	f7ff fe76 	bl	8002192 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80024a6:	f000 fcb5 	bl	8002e14 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80024aa:	4b07      	ldr	r3, [pc, #28]	; (80024c8 <prvAddNewTaskToReadyList+0xec>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d001      	beq.n	80024b6 <prvAddNewTaskToReadyList+0xda>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80024b2:	4b04      	ldr	r3, [pc, #16]	; (80024c4 <prvAddNewTaskToReadyList+0xe8>)
 80024b4:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80024b6:	bf00      	nop
 80024b8:	3708      	adds	r7, #8
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bdb0      	pop	{r4, r5, r7, pc}
 80024be:	bf00      	nop
 80024c0:	200001c0 	.word	0x200001c0
 80024c4:	200000e8 	.word	0x200000e8
 80024c8:	200001cc 	.word	0x200001cc
 80024cc:	200001dc 	.word	0x200001dc
 80024d0:	200001c8 	.word	0x200001c8
 80024d4:	200000ec 	.word	0x200000ec

080024d8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b086      	sub	sp, #24
 80024dc:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80024de:	4b24      	ldr	r3, [pc, #144]	; (8002570 <vTaskStartScheduler+0x98>)
 80024e0:	9301      	str	r3, [sp, #4]
 80024e2:	2300      	movs	r3, #0
 80024e4:	9300      	str	r3, [sp, #0]
 80024e6:	2300      	movs	r3, #0
 80024e8:	2282      	movs	r2, #130	; 0x82
 80024ea:	4922      	ldr	r1, [pc, #136]	; (8002574 <vTaskStartScheduler+0x9c>)
 80024ec:	4822      	ldr	r0, [pc, #136]	; (8002578 <vTaskStartScheduler+0xa0>)
 80024ee:	f7ff fe9e 	bl	800222e <xTaskCreate>
 80024f2:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d124      	bne.n	8002544 <vTaskStartScheduler+0x6c>
        __asm volatile
 80024fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024fe:	f383 8811 	msr	BASEPRI, r3
 8002502:	f3bf 8f6f 	isb	sy
 8002506:	f3bf 8f4f 	dsb	sy
 800250a:	60bb      	str	r3, [r7, #8]
    }
 800250c:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800250e:	4b1b      	ldr	r3, [pc, #108]	; (800257c <vTaskStartScheduler+0xa4>)
 8002510:	f04f 32ff 	mov.w	r2, #4294967295
 8002514:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002516:	4b1a      	ldr	r3, [pc, #104]	; (8002580 <vTaskStartScheduler+0xa8>)
 8002518:	2201      	movs	r2, #1
 800251a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800251c:	4b19      	ldr	r3, [pc, #100]	; (8002584 <vTaskStartScheduler+0xac>)
 800251e:	2200      	movs	r2, #0
 8002520:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002522:	4b19      	ldr	r3, [pc, #100]	; (8002588 <vTaskStartScheduler+0xb0>)
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	4b12      	ldr	r3, [pc, #72]	; (8002570 <vTaskStartScheduler+0x98>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	429a      	cmp	r2, r3
 800252c:	d102      	bne.n	8002534 <vTaskStartScheduler+0x5c>
 800252e:	f002 ffd9 	bl	80054e4 <SEGGER_SYSVIEW_OnIdle>
 8002532:	e004      	b.n	800253e <vTaskStartScheduler+0x66>
 8002534:	4b14      	ldr	r3, [pc, #80]	; (8002588 <vTaskStartScheduler+0xb0>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4618      	mov	r0, r3
 800253a:	f003 f831 	bl	80055a0 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800253e:	f000 fb19 	bl	8002b74 <xPortStartScheduler>
 8002542:	e00e      	b.n	8002562 <vTaskStartScheduler+0x8a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f1b3 3fff 	cmp.w	r3, #4294967295
 800254a:	d10a      	bne.n	8002562 <vTaskStartScheduler+0x8a>
        __asm volatile
 800254c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002550:	f383 8811 	msr	BASEPRI, r3
 8002554:	f3bf 8f6f 	isb	sy
 8002558:	f3bf 8f4f 	dsb	sy
 800255c:	607b      	str	r3, [r7, #4]
    }
 800255e:	bf00      	nop
 8002560:	e7fe      	b.n	8002560 <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002562:	4b0a      	ldr	r3, [pc, #40]	; (800258c <vTaskStartScheduler+0xb4>)
 8002564:	681b      	ldr	r3, [r3, #0]
}
 8002566:	bf00      	nop
 8002568:	3710      	adds	r7, #16
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	200001e4 	.word	0x200001e4
 8002574:	08006390 	.word	0x08006390
 8002578:	080028fd 	.word	0x080028fd
 800257c:	200001e0 	.word	0x200001e0
 8002580:	200001cc 	.word	0x200001cc
 8002584:	200001c4 	.word	0x200001c4
 8002588:	200000e8 	.word	0x200000e8
 800258c:	2000000c 	.word	0x2000000c

08002590 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002590:	b480      	push	{r7}
 8002592:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002594:	4b04      	ldr	r3, [pc, #16]	; (80025a8 <vTaskSuspendAll+0x18>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	3301      	adds	r3, #1
 800259a:	4a03      	ldr	r2, [pc, #12]	; (80025a8 <vTaskSuspendAll+0x18>)
 800259c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800259e:	bf00      	nop
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr
 80025a8:	200001e8 	.word	0x200001e8

080025ac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80025b2:	2300      	movs	r3, #0
 80025b4:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80025b6:	2300      	movs	r3, #0
 80025b8:	607b      	str	r3, [r7, #4]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80025ba:	4b3d      	ldr	r3, [pc, #244]	; (80026b0 <xTaskResumeAll+0x104>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d10a      	bne.n	80025d8 <xTaskResumeAll+0x2c>
        __asm volatile
 80025c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025c6:	f383 8811 	msr	BASEPRI, r3
 80025ca:	f3bf 8f6f 	isb	sy
 80025ce:	f3bf 8f4f 	dsb	sy
 80025d2:	603b      	str	r3, [r7, #0]
    }
 80025d4:	bf00      	nop
 80025d6:	e7fe      	b.n	80025d6 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80025d8:	f000 fbec 	bl	8002db4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80025dc:	4b34      	ldr	r3, [pc, #208]	; (80026b0 <xTaskResumeAll+0x104>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	3b01      	subs	r3, #1
 80025e2:	4a33      	ldr	r2, [pc, #204]	; (80026b0 <xTaskResumeAll+0x104>)
 80025e4:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80025e6:	4b32      	ldr	r3, [pc, #200]	; (80026b0 <xTaskResumeAll+0x104>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d159      	bne.n	80026a2 <xTaskResumeAll+0xf6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80025ee:	4b31      	ldr	r3, [pc, #196]	; (80026b4 <xTaskResumeAll+0x108>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d055      	beq.n	80026a2 <xTaskResumeAll+0xf6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80025f6:	e032      	b.n	800265e <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80025f8:	4b2f      	ldr	r3, [pc, #188]	; (80026b8 <xTaskResumeAll+0x10c>)
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	3318      	adds	r3, #24
 8002604:	4618      	mov	r0, r3
 8002606:	f7ff fde8 	bl	80021da <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	3304      	adds	r3, #4
 800260e:	4618      	mov	r0, r3
 8002610:	f7ff fde3 	bl	80021da <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	4618      	mov	r0, r3
 8002618:	f003 f804 	bl	8005624 <SEGGER_SYSVIEW_OnTaskStartReady>
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002620:	2201      	movs	r2, #1
 8002622:	409a      	lsls	r2, r3
 8002624:	4b25      	ldr	r3, [pc, #148]	; (80026bc <xTaskResumeAll+0x110>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4313      	orrs	r3, r2
 800262a:	4a24      	ldr	r2, [pc, #144]	; (80026bc <xTaskResumeAll+0x110>)
 800262c:	6013      	str	r3, [r2, #0]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002632:	4613      	mov	r3, r2
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	4413      	add	r3, r2
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	4a21      	ldr	r2, [pc, #132]	; (80026c0 <xTaskResumeAll+0x114>)
 800263c:	441a      	add	r2, r3
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	3304      	adds	r3, #4
 8002642:	4619      	mov	r1, r3
 8002644:	4610      	mov	r0, r2
 8002646:	f7ff fda4 	bl	8002192 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800264e:	4b1d      	ldr	r3, [pc, #116]	; (80026c4 <xTaskResumeAll+0x118>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002654:	429a      	cmp	r2, r3
 8002656:	d302      	bcc.n	800265e <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 8002658:	4b1b      	ldr	r3, [pc, #108]	; (80026c8 <xTaskResumeAll+0x11c>)
 800265a:	2201      	movs	r2, #1
 800265c:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800265e:	4b16      	ldr	r3, [pc, #88]	; (80026b8 <xTaskResumeAll+0x10c>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d1c8      	bne.n	80025f8 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d001      	beq.n	8002670 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800266c:	f000 f9d6 	bl	8002a1c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002670:	4b16      	ldr	r3, [pc, #88]	; (80026cc <xTaskResumeAll+0x120>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	60bb      	str	r3, [r7, #8]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d010      	beq.n	800269e <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800267c:	f000 f83a 	bl	80026f4 <xTaskIncrementTick>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d002      	beq.n	800268c <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 8002686:	4b10      	ldr	r3, [pc, #64]	; (80026c8 <xTaskResumeAll+0x11c>)
 8002688:	2201      	movs	r2, #1
 800268a:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	3b01      	subs	r3, #1
 8002690:	60bb      	str	r3, [r7, #8]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d1f1      	bne.n	800267c <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8002698:	4b0c      	ldr	r3, [pc, #48]	; (80026cc <xTaskResumeAll+0x120>)
 800269a:	2200      	movs	r2, #0
 800269c:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800269e:	4b0a      	ldr	r3, [pc, #40]	; (80026c8 <xTaskResumeAll+0x11c>)
 80026a0:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80026a2:	f000 fbb7 	bl	8002e14 <vPortExitCritical>

    return xAlreadyYielded;
 80026a6:	687b      	ldr	r3, [r7, #4]
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3710      	adds	r7, #16
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	200001e8 	.word	0x200001e8
 80026b4:	200001c0 	.word	0x200001c0
 80026b8:	20000180 	.word	0x20000180
 80026bc:	200001c8 	.word	0x200001c8
 80026c0:	200000ec 	.word	0x200000ec
 80026c4:	200000e8 	.word	0x200000e8
 80026c8:	200001d4 	.word	0x200001d4
 80026cc:	200001d0 	.word	0x200001d0

080026d0 <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80026d6:	f000 fc59 	bl	8002f8c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80026da:	2300      	movs	r3, #0
 80026dc:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 80026de:	4b04      	ldr	r3, [pc, #16]	; (80026f0 <xTaskGetTickCountFromISR+0x20>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80026e4:	683b      	ldr	r3, [r7, #0]
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3708      	adds	r7, #8
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	200001c4 	.word	0x200001c4

080026f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b086      	sub	sp, #24
 80026f8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80026fa:	2300      	movs	r3, #0
 80026fc:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80026fe:	4b41      	ldr	r3, [pc, #260]	; (8002804 <xTaskIncrementTick+0x110>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d173      	bne.n	80027ee <xTaskIncrementTick+0xfa>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002706:	4b40      	ldr	r3, [pc, #256]	; (8002808 <xTaskIncrementTick+0x114>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	3301      	adds	r3, #1
 800270c:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800270e:	4a3e      	ldr	r2, [pc, #248]	; (8002808 <xTaskIncrementTick+0x114>)
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d120      	bne.n	800275c <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 800271a:	4b3c      	ldr	r3, [pc, #240]	; (800280c <xTaskIncrementTick+0x118>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d00a      	beq.n	800273a <xTaskIncrementTick+0x46>
        __asm volatile
 8002724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002728:	f383 8811 	msr	BASEPRI, r3
 800272c:	f3bf 8f6f 	isb	sy
 8002730:	f3bf 8f4f 	dsb	sy
 8002734:	603b      	str	r3, [r7, #0]
    }
 8002736:	bf00      	nop
 8002738:	e7fe      	b.n	8002738 <xTaskIncrementTick+0x44>
 800273a:	4b34      	ldr	r3, [pc, #208]	; (800280c <xTaskIncrementTick+0x118>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	60fb      	str	r3, [r7, #12]
 8002740:	4b33      	ldr	r3, [pc, #204]	; (8002810 <xTaskIncrementTick+0x11c>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a31      	ldr	r2, [pc, #196]	; (800280c <xTaskIncrementTick+0x118>)
 8002746:	6013      	str	r3, [r2, #0]
 8002748:	4a31      	ldr	r2, [pc, #196]	; (8002810 <xTaskIncrementTick+0x11c>)
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	6013      	str	r3, [r2, #0]
 800274e:	4b31      	ldr	r3, [pc, #196]	; (8002814 <xTaskIncrementTick+0x120>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	3301      	adds	r3, #1
 8002754:	4a2f      	ldr	r2, [pc, #188]	; (8002814 <xTaskIncrementTick+0x120>)
 8002756:	6013      	str	r3, [r2, #0]
 8002758:	f000 f960 	bl	8002a1c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800275c:	4b2e      	ldr	r3, [pc, #184]	; (8002818 <xTaskIncrementTick+0x124>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	693a      	ldr	r2, [r7, #16]
 8002762:	429a      	cmp	r2, r3
 8002764:	d348      	bcc.n	80027f8 <xTaskIncrementTick+0x104>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002766:	4b29      	ldr	r3, [pc, #164]	; (800280c <xTaskIncrementTick+0x118>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d104      	bne.n	800277a <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002770:	4b29      	ldr	r3, [pc, #164]	; (8002818 <xTaskIncrementTick+0x124>)
 8002772:	f04f 32ff 	mov.w	r2, #4294967295
 8002776:	601a      	str	r2, [r3, #0]
                    break;
 8002778:	e03e      	b.n	80027f8 <xTaskIncrementTick+0x104>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800277a:	4b24      	ldr	r3, [pc, #144]	; (800280c <xTaskIncrementTick+0x118>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 800278a:	693a      	ldr	r2, [r7, #16]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	429a      	cmp	r2, r3
 8002790:	d203      	bcs.n	800279a <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002792:	4a21      	ldr	r2, [pc, #132]	; (8002818 <xTaskIncrementTick+0x124>)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002798:	e02e      	b.n	80027f8 <xTaskIncrementTick+0x104>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	3304      	adds	r3, #4
 800279e:	4618      	mov	r0, r3
 80027a0:	f7ff fd1b 	bl	80021da <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d004      	beq.n	80027b6 <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	3318      	adds	r3, #24
 80027b0:	4618      	mov	r0, r3
 80027b2:	f7ff fd12 	bl	80021da <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	4618      	mov	r0, r3
 80027ba:	f002 ff33 	bl	8005624 <SEGGER_SYSVIEW_OnTaskStartReady>
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c2:	2201      	movs	r2, #1
 80027c4:	409a      	lsls	r2, r3
 80027c6:	4b15      	ldr	r3, [pc, #84]	; (800281c <xTaskIncrementTick+0x128>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	4a13      	ldr	r2, [pc, #76]	; (800281c <xTaskIncrementTick+0x128>)
 80027ce:	6013      	str	r3, [r2, #0]
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027d4:	4613      	mov	r3, r2
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	4413      	add	r3, r2
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	4a10      	ldr	r2, [pc, #64]	; (8002820 <xTaskIncrementTick+0x12c>)
 80027de:	441a      	add	r2, r3
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	3304      	adds	r3, #4
 80027e4:	4619      	mov	r1, r3
 80027e6:	4610      	mov	r0, r2
 80027e8:	f7ff fcd3 	bl	8002192 <vListInsertEnd>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80027ec:	e7bb      	b.n	8002766 <xTaskIncrementTick+0x72>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80027ee:	4b0d      	ldr	r3, [pc, #52]	; (8002824 <xTaskIncrementTick+0x130>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	3301      	adds	r3, #1
 80027f4:	4a0b      	ldr	r2, [pc, #44]	; (8002824 <xTaskIncrementTick+0x130>)
 80027f6:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80027f8:	697b      	ldr	r3, [r7, #20]
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3718      	adds	r7, #24
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	200001e8 	.word	0x200001e8
 8002808:	200001c4 	.word	0x200001c4
 800280c:	20000178 	.word	0x20000178
 8002810:	2000017c 	.word	0x2000017c
 8002814:	200001d8 	.word	0x200001d8
 8002818:	200001e0 	.word	0x200001e0
 800281c:	200001c8 	.word	0x200001c8
 8002820:	200000ec 	.word	0x200000ec
 8002824:	200001d0 	.word	0x200001d0

08002828 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b086      	sub	sp, #24
 800282c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800282e:	4b2d      	ldr	r3, [pc, #180]	; (80028e4 <vTaskSwitchContext+0xbc>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d003      	beq.n	800283e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002836:	4b2c      	ldr	r3, [pc, #176]	; (80028e8 <vTaskSwitchContext+0xc0>)
 8002838:	2201      	movs	r2, #1
 800283a:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 800283c:	e04d      	b.n	80028da <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 800283e:	4b2a      	ldr	r3, [pc, #168]	; (80028e8 <vTaskSwitchContext+0xc0>)
 8002840:	2200      	movs	r2, #0
 8002842:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002844:	4b29      	ldr	r3, [pc, #164]	; (80028ec <vTaskSwitchContext+0xc4>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	fab3 f383 	clz	r3, r3
 8002850:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002852:	7afb      	ldrb	r3, [r7, #11]
 8002854:	f1c3 031f 	rsb	r3, r3, #31
 8002858:	617b      	str	r3, [r7, #20]
 800285a:	4925      	ldr	r1, [pc, #148]	; (80028f0 <vTaskSwitchContext+0xc8>)
 800285c:	697a      	ldr	r2, [r7, #20]
 800285e:	4613      	mov	r3, r2
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	4413      	add	r3, r2
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	440b      	add	r3, r1
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d10a      	bne.n	8002884 <vTaskSwitchContext+0x5c>
        __asm volatile
 800286e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002872:	f383 8811 	msr	BASEPRI, r3
 8002876:	f3bf 8f6f 	isb	sy
 800287a:	f3bf 8f4f 	dsb	sy
 800287e:	607b      	str	r3, [r7, #4]
    }
 8002880:	bf00      	nop
 8002882:	e7fe      	b.n	8002882 <vTaskSwitchContext+0x5a>
 8002884:	697a      	ldr	r2, [r7, #20]
 8002886:	4613      	mov	r3, r2
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	4413      	add	r3, r2
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	4a18      	ldr	r2, [pc, #96]	; (80028f0 <vTaskSwitchContext+0xc8>)
 8002890:	4413      	add	r3, r2
 8002892:	613b      	str	r3, [r7, #16]
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	685a      	ldr	r2, [r3, #4]
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	605a      	str	r2, [r3, #4]
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	685a      	ldr	r2, [r3, #4]
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	3308      	adds	r3, #8
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d104      	bne.n	80028b4 <vTaskSwitchContext+0x8c>
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	685a      	ldr	r2, [r3, #4]
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	605a      	str	r2, [r3, #4]
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	4a0e      	ldr	r2, [pc, #56]	; (80028f4 <vTaskSwitchContext+0xcc>)
 80028bc:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80028be:	4b0d      	ldr	r3, [pc, #52]	; (80028f4 <vTaskSwitchContext+0xcc>)
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	4b0d      	ldr	r3, [pc, #52]	; (80028f8 <vTaskSwitchContext+0xd0>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d102      	bne.n	80028d0 <vTaskSwitchContext+0xa8>
 80028ca:	f002 fe0b 	bl	80054e4 <SEGGER_SYSVIEW_OnIdle>
}
 80028ce:	e004      	b.n	80028da <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 80028d0:	4b08      	ldr	r3, [pc, #32]	; (80028f4 <vTaskSwitchContext+0xcc>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4618      	mov	r0, r3
 80028d6:	f002 fe63 	bl	80055a0 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80028da:	bf00      	nop
 80028dc:	3718      	adds	r7, #24
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	200001e8 	.word	0x200001e8
 80028e8:	200001d4 	.word	0x200001d4
 80028ec:	200001c8 	.word	0x200001c8
 80028f0:	200000ec 	.word	0x200000ec
 80028f4:	200000e8 	.word	0x200000e8
 80028f8:	200001e4 	.word	0x200001e4

080028fc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002904:	f000 f84c 	bl	80029a0 <prvCheckTasksWaitingTermination>
            {
                /* If we are not using preemption we keep forcing a task switch to
                 * see if any other task has become available.  If we are using
                 * preemption we don't need to do this as any task becoming available
                 * will automatically get the processor anyway. */
                taskYIELD();
 8002908:	4b04      	ldr	r3, [pc, #16]	; (800291c <prvIdleTask+0x20>)
 800290a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800290e:	601a      	str	r2, [r3, #0]
 8002910:	f3bf 8f4f 	dsb	sy
 8002914:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002918:	e7f4      	b.n	8002904 <prvIdleTask+0x8>
 800291a:	bf00      	nop
 800291c:	e000ed04 	.word	0xe000ed04

08002920 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b082      	sub	sp, #8
 8002924:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002926:	2300      	movs	r3, #0
 8002928:	607b      	str	r3, [r7, #4]
 800292a:	e00c      	b.n	8002946 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	4613      	mov	r3, r2
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	4413      	add	r3, r2
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	4a12      	ldr	r2, [pc, #72]	; (8002980 <prvInitialiseTaskLists+0x60>)
 8002938:	4413      	add	r3, r2
 800293a:	4618      	mov	r0, r3
 800293c:	f7ff fbfc 	bl	8002138 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	3301      	adds	r3, #1
 8002944:	607b      	str	r3, [r7, #4]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2b04      	cmp	r3, #4
 800294a:	d9ef      	bls.n	800292c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800294c:	480d      	ldr	r0, [pc, #52]	; (8002984 <prvInitialiseTaskLists+0x64>)
 800294e:	f7ff fbf3 	bl	8002138 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002952:	480d      	ldr	r0, [pc, #52]	; (8002988 <prvInitialiseTaskLists+0x68>)
 8002954:	f7ff fbf0 	bl	8002138 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002958:	480c      	ldr	r0, [pc, #48]	; (800298c <prvInitialiseTaskLists+0x6c>)
 800295a:	f7ff fbed 	bl	8002138 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800295e:	480c      	ldr	r0, [pc, #48]	; (8002990 <prvInitialiseTaskLists+0x70>)
 8002960:	f7ff fbea 	bl	8002138 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8002964:	480b      	ldr	r0, [pc, #44]	; (8002994 <prvInitialiseTaskLists+0x74>)
 8002966:	f7ff fbe7 	bl	8002138 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800296a:	4b0b      	ldr	r3, [pc, #44]	; (8002998 <prvInitialiseTaskLists+0x78>)
 800296c:	4a05      	ldr	r2, [pc, #20]	; (8002984 <prvInitialiseTaskLists+0x64>)
 800296e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002970:	4b0a      	ldr	r3, [pc, #40]	; (800299c <prvInitialiseTaskLists+0x7c>)
 8002972:	4a05      	ldr	r2, [pc, #20]	; (8002988 <prvInitialiseTaskLists+0x68>)
 8002974:	601a      	str	r2, [r3, #0]
}
 8002976:	bf00      	nop
 8002978:	3708      	adds	r7, #8
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	200000ec 	.word	0x200000ec
 8002984:	20000150 	.word	0x20000150
 8002988:	20000164 	.word	0x20000164
 800298c:	20000180 	.word	0x20000180
 8002990:	20000194 	.word	0x20000194
 8002994:	200001ac 	.word	0x200001ac
 8002998:	20000178 	.word	0x20000178
 800299c:	2000017c 	.word	0x2000017c

080029a0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80029a6:	e019      	b.n	80029dc <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80029a8:	f000 fa04 	bl	8002db4 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80029ac:	4b10      	ldr	r3, [pc, #64]	; (80029f0 <prvCheckTasksWaitingTermination+0x50>)
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	3304      	adds	r3, #4
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7ff fc0e 	bl	80021da <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80029be:	4b0d      	ldr	r3, [pc, #52]	; (80029f4 <prvCheckTasksWaitingTermination+0x54>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	3b01      	subs	r3, #1
 80029c4:	4a0b      	ldr	r2, [pc, #44]	; (80029f4 <prvCheckTasksWaitingTermination+0x54>)
 80029c6:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80029c8:	4b0b      	ldr	r3, [pc, #44]	; (80029f8 <prvCheckTasksWaitingTermination+0x58>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	3b01      	subs	r3, #1
 80029ce:	4a0a      	ldr	r2, [pc, #40]	; (80029f8 <prvCheckTasksWaitingTermination+0x58>)
 80029d0:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80029d2:	f000 fa1f 	bl	8002e14 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f000 f810 	bl	80029fc <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80029dc:	4b06      	ldr	r3, [pc, #24]	; (80029f8 <prvCheckTasksWaitingTermination+0x58>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d1e1      	bne.n	80029a8 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80029e4:	bf00      	nop
 80029e6:	bf00      	nop
 80029e8:	3708      	adds	r7, #8
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	20000194 	.word	0x20000194
 80029f4:	200001c0 	.word	0x200001c0
 80029f8:	200001a8 	.word	0x200001a8

080029fc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f000 fbdf 	bl	80031cc <vPortFree>
                vPortFree( pxTCB );
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f000 fbdc 	bl	80031cc <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002a14:	bf00      	nop
 8002a16:	3708      	adds	r7, #8
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}

08002a1c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002a20:	4b0a      	ldr	r3, [pc, #40]	; (8002a4c <prvResetNextTaskUnblockTime+0x30>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d104      	bne.n	8002a34 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002a2a:	4b09      	ldr	r3, [pc, #36]	; (8002a50 <prvResetNextTaskUnblockTime+0x34>)
 8002a2c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a30:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002a32:	e005      	b.n	8002a40 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002a34:	4b05      	ldr	r3, [pc, #20]	; (8002a4c <prvResetNextTaskUnblockTime+0x30>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a04      	ldr	r2, [pc, #16]	; (8002a50 <prvResetNextTaskUnblockTime+0x34>)
 8002a3e:	6013      	str	r3, [r2, #0]
}
 8002a40:	bf00      	nop
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr
 8002a4a:	bf00      	nop
 8002a4c:	20000178 	.word	0x20000178
 8002a50:	200001e0 	.word	0x200001e0

08002a54 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002a54:	b480      	push	{r7}
 8002a56:	b085      	sub	sp, #20
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	60f8      	str	r0, [r7, #12]
 8002a5c:	60b9      	str	r1, [r7, #8]
 8002a5e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	3b04      	subs	r3, #4
 8002a64:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002a6c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	3b04      	subs	r3, #4
 8002a72:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	f023 0201 	bic.w	r2, r3, #1
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	3b04      	subs	r3, #4
 8002a82:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002a84:	4a0c      	ldr	r2, [pc, #48]	; (8002ab8 <pxPortInitialiseStack+0x64>)
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	3b14      	subs	r3, #20
 8002a8e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	3b04      	subs	r3, #4
 8002a9a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f06f 0202 	mvn.w	r2, #2
 8002aa2:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	3b20      	subs	r3, #32
 8002aa8:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3714      	adds	r7, #20
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr
 8002ab8:	08002abd 	.word	0x08002abd

08002abc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002abc:	b480      	push	{r7}
 8002abe:	b085      	sub	sp, #20
 8002ac0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002ac6:	4b12      	ldr	r3, [pc, #72]	; (8002b10 <prvTaskExitError+0x54>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ace:	d00a      	beq.n	8002ae6 <prvTaskExitError+0x2a>
        __asm volatile
 8002ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ad4:	f383 8811 	msr	BASEPRI, r3
 8002ad8:	f3bf 8f6f 	isb	sy
 8002adc:	f3bf 8f4f 	dsb	sy
 8002ae0:	60fb      	str	r3, [r7, #12]
    }
 8002ae2:	bf00      	nop
 8002ae4:	e7fe      	b.n	8002ae4 <prvTaskExitError+0x28>
        __asm volatile
 8002ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aea:	f383 8811 	msr	BASEPRI, r3
 8002aee:	f3bf 8f6f 	isb	sy
 8002af2:	f3bf 8f4f 	dsb	sy
 8002af6:	60bb      	str	r3, [r7, #8]
    }
 8002af8:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002afa:	bf00      	nop
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d0fc      	beq.n	8002afc <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002b02:	bf00      	nop
 8002b04:	bf00      	nop
 8002b06:	3714      	adds	r7, #20
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr
 8002b10:	20000010 	.word	0x20000010
	...

08002b20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002b20:	4b07      	ldr	r3, [pc, #28]	; (8002b40 <pxCurrentTCBConst2>)
 8002b22:	6819      	ldr	r1, [r3, #0]
 8002b24:	6808      	ldr	r0, [r1, #0]
 8002b26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b2a:	f380 8809 	msr	PSP, r0
 8002b2e:	f3bf 8f6f 	isb	sy
 8002b32:	f04f 0000 	mov.w	r0, #0
 8002b36:	f380 8811 	msr	BASEPRI, r0
 8002b3a:	4770      	bx	lr
 8002b3c:	f3af 8000 	nop.w

08002b40 <pxCurrentTCBConst2>:
 8002b40:	200000e8 	.word	0x200000e8
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002b44:	bf00      	nop
 8002b46:	bf00      	nop

08002b48 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002b48:	4808      	ldr	r0, [pc, #32]	; (8002b6c <prvPortStartFirstTask+0x24>)
 8002b4a:	6800      	ldr	r0, [r0, #0]
 8002b4c:	6800      	ldr	r0, [r0, #0]
 8002b4e:	f380 8808 	msr	MSP, r0
 8002b52:	f04f 0000 	mov.w	r0, #0
 8002b56:	f380 8814 	msr	CONTROL, r0
 8002b5a:	b662      	cpsie	i
 8002b5c:	b661      	cpsie	f
 8002b5e:	f3bf 8f4f 	dsb	sy
 8002b62:	f3bf 8f6f 	isb	sy
 8002b66:	df00      	svc	0
 8002b68:	bf00      	nop
 8002b6a:	0000      	.short	0x0000
 8002b6c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002b70:	bf00      	nop
 8002b72:	bf00      	nop

08002b74 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b086      	sub	sp, #24
 8002b78:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002b7a:	4b46      	ldr	r3, [pc, #280]	; (8002c94 <xPortStartScheduler+0x120>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a46      	ldr	r2, [pc, #280]	; (8002c98 <xPortStartScheduler+0x124>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d10a      	bne.n	8002b9a <xPortStartScheduler+0x26>
        __asm volatile
 8002b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b88:	f383 8811 	msr	BASEPRI, r3
 8002b8c:	f3bf 8f6f 	isb	sy
 8002b90:	f3bf 8f4f 	dsb	sy
 8002b94:	613b      	str	r3, [r7, #16]
    }
 8002b96:	bf00      	nop
 8002b98:	e7fe      	b.n	8002b98 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002b9a:	4b3e      	ldr	r3, [pc, #248]	; (8002c94 <xPortStartScheduler+0x120>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a3f      	ldr	r2, [pc, #252]	; (8002c9c <xPortStartScheduler+0x128>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d10a      	bne.n	8002bba <xPortStartScheduler+0x46>
        __asm volatile
 8002ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ba8:	f383 8811 	msr	BASEPRI, r3
 8002bac:	f3bf 8f6f 	isb	sy
 8002bb0:	f3bf 8f4f 	dsb	sy
 8002bb4:	60fb      	str	r3, [r7, #12]
    }
 8002bb6:	bf00      	nop
 8002bb8:	e7fe      	b.n	8002bb8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002bba:	4b39      	ldr	r3, [pc, #228]	; (8002ca0 <xPortStartScheduler+0x12c>)
 8002bbc:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	22ff      	movs	r2, #255	; 0xff
 8002bca:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002bd4:	78fb      	ldrb	r3, [r7, #3]
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002bdc:	b2da      	uxtb	r2, r3
 8002bde:	4b31      	ldr	r3, [pc, #196]	; (8002ca4 <xPortStartScheduler+0x130>)
 8002be0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002be2:	4b31      	ldr	r3, [pc, #196]	; (8002ca8 <xPortStartScheduler+0x134>)
 8002be4:	2207      	movs	r2, #7
 8002be6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002be8:	e009      	b.n	8002bfe <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8002bea:	4b2f      	ldr	r3, [pc, #188]	; (8002ca8 <xPortStartScheduler+0x134>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	3b01      	subs	r3, #1
 8002bf0:	4a2d      	ldr	r2, [pc, #180]	; (8002ca8 <xPortStartScheduler+0x134>)
 8002bf2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002bf4:	78fb      	ldrb	r3, [r7, #3]
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	005b      	lsls	r3, r3, #1
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002bfe:	78fb      	ldrb	r3, [r7, #3]
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c06:	2b80      	cmp	r3, #128	; 0x80
 8002c08:	d0ef      	beq.n	8002bea <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002c0a:	4b27      	ldr	r3, [pc, #156]	; (8002ca8 <xPortStartScheduler+0x134>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f1c3 0307 	rsb	r3, r3, #7
 8002c12:	2b04      	cmp	r3, #4
 8002c14:	d00a      	beq.n	8002c2c <xPortStartScheduler+0xb8>
        __asm volatile
 8002c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c1a:	f383 8811 	msr	BASEPRI, r3
 8002c1e:	f3bf 8f6f 	isb	sy
 8002c22:	f3bf 8f4f 	dsb	sy
 8002c26:	60bb      	str	r3, [r7, #8]
    }
 8002c28:	bf00      	nop
 8002c2a:	e7fe      	b.n	8002c2a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002c2c:	4b1e      	ldr	r3, [pc, #120]	; (8002ca8 <xPortStartScheduler+0x134>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	021b      	lsls	r3, r3, #8
 8002c32:	4a1d      	ldr	r2, [pc, #116]	; (8002ca8 <xPortStartScheduler+0x134>)
 8002c34:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002c36:	4b1c      	ldr	r3, [pc, #112]	; (8002ca8 <xPortStartScheduler+0x134>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002c3e:	4a1a      	ldr	r2, [pc, #104]	; (8002ca8 <xPortStartScheduler+0x134>)
 8002c40:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	b2da      	uxtb	r2, r3
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002c4a:	4b18      	ldr	r3, [pc, #96]	; (8002cac <xPortStartScheduler+0x138>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a17      	ldr	r2, [pc, #92]	; (8002cac <xPortStartScheduler+0x138>)
 8002c50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c54:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002c56:	4b15      	ldr	r3, [pc, #84]	; (8002cac <xPortStartScheduler+0x138>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a14      	ldr	r2, [pc, #80]	; (8002cac <xPortStartScheduler+0x138>)
 8002c5c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002c60:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002c62:	f000 f963 	bl	8002f2c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002c66:	4b12      	ldr	r3, [pc, #72]	; (8002cb0 <xPortStartScheduler+0x13c>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8002c6c:	f000 f982 	bl	8002f74 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002c70:	4b10      	ldr	r3, [pc, #64]	; (8002cb4 <xPortStartScheduler+0x140>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a0f      	ldr	r2, [pc, #60]	; (8002cb4 <xPortStartScheduler+0x140>)
 8002c76:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002c7a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8002c7c:	f7ff ff64 	bl	8002b48 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002c80:	f7ff fdd2 	bl	8002828 <vTaskSwitchContext>
    prvTaskExitError();
 8002c84:	f7ff ff1a 	bl	8002abc <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002c88:	2300      	movs	r3, #0
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3718      	adds	r7, #24
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	e000ed00 	.word	0xe000ed00
 8002c98:	410fc271 	.word	0x410fc271
 8002c9c:	410fc270 	.word	0x410fc270
 8002ca0:	e000e400 	.word	0xe000e400
 8002ca4:	200001ec 	.word	0x200001ec
 8002ca8:	200001f0 	.word	0x200001f0
 8002cac:	e000ed20 	.word	0xe000ed20
 8002cb0:	20000010 	.word	0x20000010
 8002cb4:	e000ef34 	.word	0xe000ef34

08002cb8 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b087      	sub	sp, #28
 8002cbc:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002cbe:	4b37      	ldr	r3, [pc, #220]	; (8002d9c <vInitPrioGroupValue+0xe4>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a37      	ldr	r2, [pc, #220]	; (8002da0 <vInitPrioGroupValue+0xe8>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d10a      	bne.n	8002cde <vInitPrioGroupValue+0x26>
        __asm volatile
 8002cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ccc:	f383 8811 	msr	BASEPRI, r3
 8002cd0:	f3bf 8f6f 	isb	sy
 8002cd4:	f3bf 8f4f 	dsb	sy
 8002cd8:	613b      	str	r3, [r7, #16]
    }
 8002cda:	bf00      	nop
 8002cdc:	e7fe      	b.n	8002cdc <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002cde:	4b2f      	ldr	r3, [pc, #188]	; (8002d9c <vInitPrioGroupValue+0xe4>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a30      	ldr	r2, [pc, #192]	; (8002da4 <vInitPrioGroupValue+0xec>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d10a      	bne.n	8002cfe <vInitPrioGroupValue+0x46>
        __asm volatile
 8002ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cec:	f383 8811 	msr	BASEPRI, r3
 8002cf0:	f3bf 8f6f 	isb	sy
 8002cf4:	f3bf 8f4f 	dsb	sy
 8002cf8:	60fb      	str	r3, [r7, #12]
    }
 8002cfa:	bf00      	nop
 8002cfc:	e7fe      	b.n	8002cfc <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002cfe:	4b2a      	ldr	r3, [pc, #168]	; (8002da8 <vInitPrioGroupValue+0xf0>)
 8002d00:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	22ff      	movs	r2, #255	; 0xff
 8002d0e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002d18:	78fb      	ldrb	r3, [r7, #3]
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002d20:	b2da      	uxtb	r2, r3
 8002d22:	4b22      	ldr	r3, [pc, #136]	; (8002dac <vInitPrioGroupValue+0xf4>)
 8002d24:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002d26:	4b22      	ldr	r3, [pc, #136]	; (8002db0 <vInitPrioGroupValue+0xf8>)
 8002d28:	2207      	movs	r2, #7
 8002d2a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002d2c:	e009      	b.n	8002d42 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8002d2e:	4b20      	ldr	r3, [pc, #128]	; (8002db0 <vInitPrioGroupValue+0xf8>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	3b01      	subs	r3, #1
 8002d34:	4a1e      	ldr	r2, [pc, #120]	; (8002db0 <vInitPrioGroupValue+0xf8>)
 8002d36:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002d38:	78fb      	ldrb	r3, [r7, #3]
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	005b      	lsls	r3, r3, #1
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002d42:	78fb      	ldrb	r3, [r7, #3]
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d4a:	2b80      	cmp	r3, #128	; 0x80
 8002d4c:	d0ef      	beq.n	8002d2e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002d4e:	4b18      	ldr	r3, [pc, #96]	; (8002db0 <vInitPrioGroupValue+0xf8>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f1c3 0307 	rsb	r3, r3, #7
 8002d56:	2b04      	cmp	r3, #4
 8002d58:	d00a      	beq.n	8002d70 <vInitPrioGroupValue+0xb8>
        __asm volatile
 8002d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d5e:	f383 8811 	msr	BASEPRI, r3
 8002d62:	f3bf 8f6f 	isb	sy
 8002d66:	f3bf 8f4f 	dsb	sy
 8002d6a:	60bb      	str	r3, [r7, #8]
    }
 8002d6c:	bf00      	nop
 8002d6e:	e7fe      	b.n	8002d6e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002d70:	4b0f      	ldr	r3, [pc, #60]	; (8002db0 <vInitPrioGroupValue+0xf8>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	021b      	lsls	r3, r3, #8
 8002d76:	4a0e      	ldr	r2, [pc, #56]	; (8002db0 <vInitPrioGroupValue+0xf8>)
 8002d78:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002d7a:	4b0d      	ldr	r3, [pc, #52]	; (8002db0 <vInitPrioGroupValue+0xf8>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002d82:	4a0b      	ldr	r2, [pc, #44]	; (8002db0 <vInitPrioGroupValue+0xf8>)
 8002d84:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	b2da      	uxtb	r2, r3
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8002d8e:	bf00      	nop
 8002d90:	371c      	adds	r7, #28
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop
 8002d9c:	e000ed00 	.word	0xe000ed00
 8002da0:	410fc271 	.word	0x410fc271
 8002da4:	410fc270 	.word	0x410fc270
 8002da8:	e000e400 	.word	0xe000e400
 8002dac:	200001ec 	.word	0x200001ec
 8002db0:	200001f0 	.word	0x200001f0

08002db4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002db4:	b480      	push	{r7}
 8002db6:	b083      	sub	sp, #12
 8002db8:	af00      	add	r7, sp, #0
        __asm volatile
 8002dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dbe:	f383 8811 	msr	BASEPRI, r3
 8002dc2:	f3bf 8f6f 	isb	sy
 8002dc6:	f3bf 8f4f 	dsb	sy
 8002dca:	607b      	str	r3, [r7, #4]
    }
 8002dcc:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002dce:	4b0f      	ldr	r3, [pc, #60]	; (8002e0c <vPortEnterCritical+0x58>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	4a0d      	ldr	r2, [pc, #52]	; (8002e0c <vPortEnterCritical+0x58>)
 8002dd6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8002dd8:	4b0c      	ldr	r3, [pc, #48]	; (8002e0c <vPortEnterCritical+0x58>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d10f      	bne.n	8002e00 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002de0:	4b0b      	ldr	r3, [pc, #44]	; (8002e10 <vPortEnterCritical+0x5c>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d00a      	beq.n	8002e00 <vPortEnterCritical+0x4c>
        __asm volatile
 8002dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dee:	f383 8811 	msr	BASEPRI, r3
 8002df2:	f3bf 8f6f 	isb	sy
 8002df6:	f3bf 8f4f 	dsb	sy
 8002dfa:	603b      	str	r3, [r7, #0]
    }
 8002dfc:	bf00      	nop
 8002dfe:	e7fe      	b.n	8002dfe <vPortEnterCritical+0x4a>
    }
}
 8002e00:	bf00      	nop
 8002e02:	370c      	adds	r7, #12
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr
 8002e0c:	20000010 	.word	0x20000010
 8002e10:	e000ed04 	.word	0xe000ed04

08002e14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8002e1a:	4b12      	ldr	r3, [pc, #72]	; (8002e64 <vPortExitCritical+0x50>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d10a      	bne.n	8002e38 <vPortExitCritical+0x24>
        __asm volatile
 8002e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e26:	f383 8811 	msr	BASEPRI, r3
 8002e2a:	f3bf 8f6f 	isb	sy
 8002e2e:	f3bf 8f4f 	dsb	sy
 8002e32:	607b      	str	r3, [r7, #4]
    }
 8002e34:	bf00      	nop
 8002e36:	e7fe      	b.n	8002e36 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8002e38:	4b0a      	ldr	r3, [pc, #40]	; (8002e64 <vPortExitCritical+0x50>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	3b01      	subs	r3, #1
 8002e3e:	4a09      	ldr	r2, [pc, #36]	; (8002e64 <vPortExitCritical+0x50>)
 8002e40:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002e42:	4b08      	ldr	r3, [pc, #32]	; (8002e64 <vPortExitCritical+0x50>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d105      	bne.n	8002e56 <vPortExitCritical+0x42>
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002e54:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8002e56:	bf00      	nop
 8002e58:	370c      	adds	r7, #12
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr
 8002e62:	bf00      	nop
 8002e64:	20000010 	.word	0x20000010
	...

08002e70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002e70:	f3ef 8009 	mrs	r0, PSP
 8002e74:	f3bf 8f6f 	isb	sy
 8002e78:	4b15      	ldr	r3, [pc, #84]	; (8002ed0 <pxCurrentTCBConst>)
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	f01e 0f10 	tst.w	lr, #16
 8002e80:	bf08      	it	eq
 8002e82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002e86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e8a:	6010      	str	r0, [r2, #0]
 8002e8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002e90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002e94:	f380 8811 	msr	BASEPRI, r0
 8002e98:	f3bf 8f4f 	dsb	sy
 8002e9c:	f3bf 8f6f 	isb	sy
 8002ea0:	f7ff fcc2 	bl	8002828 <vTaskSwitchContext>
 8002ea4:	f04f 0000 	mov.w	r0, #0
 8002ea8:	f380 8811 	msr	BASEPRI, r0
 8002eac:	bc09      	pop	{r0, r3}
 8002eae:	6819      	ldr	r1, [r3, #0]
 8002eb0:	6808      	ldr	r0, [r1, #0]
 8002eb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002eb6:	f01e 0f10 	tst.w	lr, #16
 8002eba:	bf08      	it	eq
 8002ebc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002ec0:	f380 8809 	msr	PSP, r0
 8002ec4:	f3bf 8f6f 	isb	sy
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	f3af 8000 	nop.w

08002ed0 <pxCurrentTCBConst>:
 8002ed0:	200000e8 	.word	0x200000e8
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002ed4:	bf00      	nop
 8002ed6:	bf00      	nop

08002ed8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af00      	add	r7, sp, #0
        __asm volatile
 8002ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ee2:	f383 8811 	msr	BASEPRI, r3
 8002ee6:	f3bf 8f6f 	isb	sy
 8002eea:	f3bf 8f4f 	dsb	sy
 8002eee:	607b      	str	r3, [r7, #4]
    }
 8002ef0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8002ef2:	f002 fa7d 	bl	80053f0 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002ef6:	f7ff fbfd 	bl	80026f4 <xTaskIncrementTick>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d006      	beq.n	8002f0e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8002f00:	f002 fad4 	bl	80054ac <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002f04:	4b08      	ldr	r3, [pc, #32]	; (8002f28 <SysTick_Handler+0x50>)
 8002f06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f0a:	601a      	str	r2, [r3, #0]
 8002f0c:	e001      	b.n	8002f12 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 8002f0e:	f002 fab1 	bl	8005474 <SEGGER_SYSVIEW_RecordExitISR>
 8002f12:	2300      	movs	r3, #0
 8002f14:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	f383 8811 	msr	BASEPRI, r3
    }
 8002f1c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8002f1e:	bf00      	nop
 8002f20:	3708      	adds	r7, #8
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	e000ed04 	.word	0xe000ed04

08002f2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002f30:	4b0b      	ldr	r3, [pc, #44]	; (8002f60 <vPortSetupTimerInterrupt+0x34>)
 8002f32:	2200      	movs	r2, #0
 8002f34:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002f36:	4b0b      	ldr	r3, [pc, #44]	; (8002f64 <vPortSetupTimerInterrupt+0x38>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002f3c:	4b0a      	ldr	r3, [pc, #40]	; (8002f68 <vPortSetupTimerInterrupt+0x3c>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a0a      	ldr	r2, [pc, #40]	; (8002f6c <vPortSetupTimerInterrupt+0x40>)
 8002f42:	fba2 2303 	umull	r2, r3, r2, r3
 8002f46:	099b      	lsrs	r3, r3, #6
 8002f48:	4a09      	ldr	r2, [pc, #36]	; (8002f70 <vPortSetupTimerInterrupt+0x44>)
 8002f4a:	3b01      	subs	r3, #1
 8002f4c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002f4e:	4b04      	ldr	r3, [pc, #16]	; (8002f60 <vPortSetupTimerInterrupt+0x34>)
 8002f50:	2207      	movs	r2, #7
 8002f52:	601a      	str	r2, [r3, #0]
}
 8002f54:	bf00      	nop
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr
 8002f5e:	bf00      	nop
 8002f60:	e000e010 	.word	0xe000e010
 8002f64:	e000e018 	.word	0xe000e018
 8002f68:	20000000 	.word	0x20000000
 8002f6c:	10624dd3 	.word	0x10624dd3
 8002f70:	e000e014 	.word	0xe000e014

08002f74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8002f74:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002f84 <vPortEnableVFP+0x10>
 8002f78:	6801      	ldr	r1, [r0, #0]
 8002f7a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002f7e:	6001      	str	r1, [r0, #0]
 8002f80:	4770      	bx	lr
 8002f82:	0000      	.short	0x0000
 8002f84:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8002f88:	bf00      	nop
 8002f8a:	bf00      	nop

08002f8c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8002f8c:	b480      	push	{r7}
 8002f8e:	b085      	sub	sp, #20
 8002f90:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8002f92:	f3ef 8305 	mrs	r3, IPSR
 8002f96:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2b0f      	cmp	r3, #15
 8002f9c:	d914      	bls.n	8002fc8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002f9e:	4a17      	ldr	r2, [pc, #92]	; (8002ffc <vPortValidateInterruptPriority+0x70>)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	4413      	add	r3, r2
 8002fa4:	781b      	ldrb	r3, [r3, #0]
 8002fa6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002fa8:	4b15      	ldr	r3, [pc, #84]	; (8003000 <vPortValidateInterruptPriority+0x74>)
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	7afa      	ldrb	r2, [r7, #11]
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d20a      	bcs.n	8002fc8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8002fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fb6:	f383 8811 	msr	BASEPRI, r3
 8002fba:	f3bf 8f6f 	isb	sy
 8002fbe:	f3bf 8f4f 	dsb	sy
 8002fc2:	607b      	str	r3, [r7, #4]
    }
 8002fc4:	bf00      	nop
 8002fc6:	e7fe      	b.n	8002fc6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002fc8:	4b0e      	ldr	r3, [pc, #56]	; (8003004 <vPortValidateInterruptPriority+0x78>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002fd0:	4b0d      	ldr	r3, [pc, #52]	; (8003008 <vPortValidateInterruptPriority+0x7c>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d90a      	bls.n	8002fee <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8002fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fdc:	f383 8811 	msr	BASEPRI, r3
 8002fe0:	f3bf 8f6f 	isb	sy
 8002fe4:	f3bf 8f4f 	dsb	sy
 8002fe8:	603b      	str	r3, [r7, #0]
    }
 8002fea:	bf00      	nop
 8002fec:	e7fe      	b.n	8002fec <vPortValidateInterruptPriority+0x60>
    }
 8002fee:	bf00      	nop
 8002ff0:	3714      	adds	r7, #20
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr
 8002ffa:	bf00      	nop
 8002ffc:	e000e3f0 	.word	0xe000e3f0
 8003000:	200001ec 	.word	0x200001ec
 8003004:	e000ed0c 	.word	0xe000ed0c
 8003008:	200001f0 	.word	0x200001f0

0800300c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b08a      	sub	sp, #40	; 0x28
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8003014:	2300      	movs	r3, #0
 8003016:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8003018:	f7ff faba 	bl	8002590 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800301c:	4b65      	ldr	r3, [pc, #404]	; (80031b4 <pvPortMalloc+0x1a8>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d101      	bne.n	8003028 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003024:	f000 f934 	bl	8003290 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003028:	4b63      	ldr	r3, [pc, #396]	; (80031b8 <pvPortMalloc+0x1ac>)
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	4013      	ands	r3, r2
 8003030:	2b00      	cmp	r3, #0
 8003032:	f040 80a7 	bne.w	8003184 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d02d      	beq.n	8003098 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800303c:	2208      	movs	r2, #8
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	429a      	cmp	r2, r3
 8003046:	d227      	bcs.n	8003098 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8003048:	2208      	movs	r2, #8
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4413      	add	r3, r2
 800304e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f003 0307 	and.w	r3, r3, #7
 8003056:	2b00      	cmp	r3, #0
 8003058:	d021      	beq.n	800309e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	f023 0307 	bic.w	r3, r3, #7
 8003060:	3308      	adds	r3, #8
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	429a      	cmp	r2, r3
 8003066:	d214      	bcs.n	8003092 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f023 0307 	bic.w	r3, r3, #7
 800306e:	3308      	adds	r3, #8
 8003070:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f003 0307 	and.w	r3, r3, #7
 8003078:	2b00      	cmp	r3, #0
 800307a:	d010      	beq.n	800309e <pvPortMalloc+0x92>
        __asm volatile
 800307c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003080:	f383 8811 	msr	BASEPRI, r3
 8003084:	f3bf 8f6f 	isb	sy
 8003088:	f3bf 8f4f 	dsb	sy
 800308c:	617b      	str	r3, [r7, #20]
    }
 800308e:	bf00      	nop
 8003090:	e7fe      	b.n	8003090 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8003092:	2300      	movs	r3, #0
 8003094:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003096:	e002      	b.n	800309e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8003098:	2300      	movs	r3, #0
 800309a:	607b      	str	r3, [r7, #4]
 800309c:	e000      	b.n	80030a0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800309e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d06e      	beq.n	8003184 <pvPortMalloc+0x178>
 80030a6:	4b45      	ldr	r3, [pc, #276]	; (80031bc <pvPortMalloc+0x1b0>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d869      	bhi.n	8003184 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80030b0:	4b43      	ldr	r3, [pc, #268]	; (80031c0 <pvPortMalloc+0x1b4>)
 80030b2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80030b4:	4b42      	ldr	r3, [pc, #264]	; (80031c0 <pvPortMalloc+0x1b4>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80030ba:	e004      	b.n	80030c6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 80030bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030be:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80030c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80030c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d903      	bls.n	80030d8 <pvPortMalloc+0xcc>
 80030d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d1f1      	bne.n	80030bc <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80030d8:	4b36      	ldr	r3, [pc, #216]	; (80031b4 <pvPortMalloc+0x1a8>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030de:	429a      	cmp	r2, r3
 80030e0:	d050      	beq.n	8003184 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80030e2:	6a3b      	ldr	r3, [r7, #32]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	2208      	movs	r2, #8
 80030e8:	4413      	add	r3, r2
 80030ea:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80030ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	6a3b      	ldr	r3, [r7, #32]
 80030f2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80030f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f6:	685a      	ldr	r2, [r3, #4]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	1ad2      	subs	r2, r2, r3
 80030fc:	2308      	movs	r3, #8
 80030fe:	005b      	lsls	r3, r3, #1
 8003100:	429a      	cmp	r2, r3
 8003102:	d91f      	bls.n	8003144 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003104:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4413      	add	r3, r2
 800310a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800310c:	69bb      	ldr	r3, [r7, #24]
 800310e:	f003 0307 	and.w	r3, r3, #7
 8003112:	2b00      	cmp	r3, #0
 8003114:	d00a      	beq.n	800312c <pvPortMalloc+0x120>
        __asm volatile
 8003116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800311a:	f383 8811 	msr	BASEPRI, r3
 800311e:	f3bf 8f6f 	isb	sy
 8003122:	f3bf 8f4f 	dsb	sy
 8003126:	613b      	str	r3, [r7, #16]
    }
 8003128:	bf00      	nop
 800312a:	e7fe      	b.n	800312a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800312c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312e:	685a      	ldr	r2, [r3, #4]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	1ad2      	subs	r2, r2, r3
 8003134:	69bb      	ldr	r3, [r7, #24]
 8003136:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800313e:	69b8      	ldr	r0, [r7, #24]
 8003140:	f000 f908 	bl	8003354 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003144:	4b1d      	ldr	r3, [pc, #116]	; (80031bc <pvPortMalloc+0x1b0>)
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	4a1b      	ldr	r2, [pc, #108]	; (80031bc <pvPortMalloc+0x1b0>)
 8003150:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003152:	4b1a      	ldr	r3, [pc, #104]	; (80031bc <pvPortMalloc+0x1b0>)
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	4b1b      	ldr	r3, [pc, #108]	; (80031c4 <pvPortMalloc+0x1b8>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	429a      	cmp	r2, r3
 800315c:	d203      	bcs.n	8003166 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800315e:	4b17      	ldr	r3, [pc, #92]	; (80031bc <pvPortMalloc+0x1b0>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a18      	ldr	r2, [pc, #96]	; (80031c4 <pvPortMalloc+0x1b8>)
 8003164:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003168:	685a      	ldr	r2, [r3, #4]
 800316a:	4b13      	ldr	r3, [pc, #76]	; (80031b8 <pvPortMalloc+0x1ac>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	431a      	orrs	r2, r3
 8003170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003172:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003176:	2200      	movs	r2, #0
 8003178:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800317a:	4b13      	ldr	r3, [pc, #76]	; (80031c8 <pvPortMalloc+0x1bc>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	3301      	adds	r3, #1
 8003180:	4a11      	ldr	r2, [pc, #68]	; (80031c8 <pvPortMalloc+0x1bc>)
 8003182:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003184:	f7ff fa12 	bl	80025ac <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003188:	69fb      	ldr	r3, [r7, #28]
 800318a:	f003 0307 	and.w	r3, r3, #7
 800318e:	2b00      	cmp	r3, #0
 8003190:	d00a      	beq.n	80031a8 <pvPortMalloc+0x19c>
        __asm volatile
 8003192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003196:	f383 8811 	msr	BASEPRI, r3
 800319a:	f3bf 8f6f 	isb	sy
 800319e:	f3bf 8f4f 	dsb	sy
 80031a2:	60fb      	str	r3, [r7, #12]
    }
 80031a4:	bf00      	nop
 80031a6:	e7fe      	b.n	80031a6 <pvPortMalloc+0x19a>
    return pvReturn;
 80031a8:	69fb      	ldr	r3, [r7, #28]
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3728      	adds	r7, #40	; 0x28
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	20012dfc 	.word	0x20012dfc
 80031b8:	20012e10 	.word	0x20012e10
 80031bc:	20012e00 	.word	0x20012e00
 80031c0:	20012df4 	.word	0x20012df4
 80031c4:	20012e04 	.word	0x20012e04
 80031c8:	20012e08 	.word	0x20012e08

080031cc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b086      	sub	sp, #24
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d04d      	beq.n	800327a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80031de:	2308      	movs	r3, #8
 80031e0:	425b      	negs	r3, r3
 80031e2:	697a      	ldr	r2, [r7, #20]
 80031e4:	4413      	add	r3, r2
 80031e6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	685a      	ldr	r2, [r3, #4]
 80031f0:	4b24      	ldr	r3, [pc, #144]	; (8003284 <vPortFree+0xb8>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4013      	ands	r3, r2
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d10a      	bne.n	8003210 <vPortFree+0x44>
        __asm volatile
 80031fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031fe:	f383 8811 	msr	BASEPRI, r3
 8003202:	f3bf 8f6f 	isb	sy
 8003206:	f3bf 8f4f 	dsb	sy
 800320a:	60fb      	str	r3, [r7, #12]
    }
 800320c:	bf00      	nop
 800320e:	e7fe      	b.n	800320e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d00a      	beq.n	800322e <vPortFree+0x62>
        __asm volatile
 8003218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800321c:	f383 8811 	msr	BASEPRI, r3
 8003220:	f3bf 8f6f 	isb	sy
 8003224:	f3bf 8f4f 	dsb	sy
 8003228:	60bb      	str	r3, [r7, #8]
    }
 800322a:	bf00      	nop
 800322c:	e7fe      	b.n	800322c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	685a      	ldr	r2, [r3, #4]
 8003232:	4b14      	ldr	r3, [pc, #80]	; (8003284 <vPortFree+0xb8>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4013      	ands	r3, r2
 8003238:	2b00      	cmp	r3, #0
 800323a:	d01e      	beq.n	800327a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d11a      	bne.n	800327a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	685a      	ldr	r2, [r3, #4]
 8003248:	4b0e      	ldr	r3, [pc, #56]	; (8003284 <vPortFree+0xb8>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	43db      	mvns	r3, r3
 800324e:	401a      	ands	r2, r3
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8003254:	f7ff f99c 	bl	8002590 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	685a      	ldr	r2, [r3, #4]
 800325c:	4b0a      	ldr	r3, [pc, #40]	; (8003288 <vPortFree+0xbc>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4413      	add	r3, r2
 8003262:	4a09      	ldr	r2, [pc, #36]	; (8003288 <vPortFree+0xbc>)
 8003264:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003266:	6938      	ldr	r0, [r7, #16]
 8003268:	f000 f874 	bl	8003354 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800326c:	4b07      	ldr	r3, [pc, #28]	; (800328c <vPortFree+0xc0>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	3301      	adds	r3, #1
 8003272:	4a06      	ldr	r2, [pc, #24]	; (800328c <vPortFree+0xc0>)
 8003274:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003276:	f7ff f999 	bl	80025ac <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800327a:	bf00      	nop
 800327c:	3718      	adds	r7, #24
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	20012e10 	.word	0x20012e10
 8003288:	20012e00 	.word	0x20012e00
 800328c:	20012e0c 	.word	0x20012e0c

08003290 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003290:	b480      	push	{r7}
 8003292:	b085      	sub	sp, #20
 8003294:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003296:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800329a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800329c:	4b27      	ldr	r3, [pc, #156]	; (800333c <prvHeapInit+0xac>)
 800329e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	f003 0307 	and.w	r3, r3, #7
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d00c      	beq.n	80032c4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	3307      	adds	r3, #7
 80032ae:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f023 0307 	bic.w	r3, r3, #7
 80032b6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80032b8:	68ba      	ldr	r2, [r7, #8]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	4a1f      	ldr	r2, [pc, #124]	; (800333c <prvHeapInit+0xac>)
 80032c0:	4413      	add	r3, r2
 80032c2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80032c8:	4a1d      	ldr	r2, [pc, #116]	; (8003340 <prvHeapInit+0xb0>)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80032ce:	4b1c      	ldr	r3, [pc, #112]	; (8003340 <prvHeapInit+0xb0>)
 80032d0:	2200      	movs	r2, #0
 80032d2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	68ba      	ldr	r2, [r7, #8]
 80032d8:	4413      	add	r3, r2
 80032da:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80032dc:	2208      	movs	r2, #8
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	1a9b      	subs	r3, r3, r2
 80032e2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f023 0307 	bic.w	r3, r3, #7
 80032ea:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	4a15      	ldr	r2, [pc, #84]	; (8003344 <prvHeapInit+0xb4>)
 80032f0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80032f2:	4b14      	ldr	r3, [pc, #80]	; (8003344 <prvHeapInit+0xb4>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	2200      	movs	r2, #0
 80032f8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80032fa:	4b12      	ldr	r3, [pc, #72]	; (8003344 <prvHeapInit+0xb4>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	2200      	movs	r2, #0
 8003300:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	68fa      	ldr	r2, [r7, #12]
 800330a:	1ad2      	subs	r2, r2, r3
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003310:	4b0c      	ldr	r3, [pc, #48]	; (8003344 <prvHeapInit+0xb4>)
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	4a0a      	ldr	r2, [pc, #40]	; (8003348 <prvHeapInit+0xb8>)
 800331e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	4a09      	ldr	r2, [pc, #36]	; (800334c <prvHeapInit+0xbc>)
 8003326:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003328:	4b09      	ldr	r3, [pc, #36]	; (8003350 <prvHeapInit+0xc0>)
 800332a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800332e:	601a      	str	r2, [r3, #0]
}
 8003330:	bf00      	nop
 8003332:	3714      	adds	r7, #20
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr
 800333c:	200001f4 	.word	0x200001f4
 8003340:	20012df4 	.word	0x20012df4
 8003344:	20012dfc 	.word	0x20012dfc
 8003348:	20012e04 	.word	0x20012e04
 800334c:	20012e00 	.word	0x20012e00
 8003350:	20012e10 	.word	0x20012e10

08003354 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003354:	b480      	push	{r7}
 8003356:	b085      	sub	sp, #20
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800335c:	4b28      	ldr	r3, [pc, #160]	; (8003400 <prvInsertBlockIntoFreeList+0xac>)
 800335e:	60fb      	str	r3, [r7, #12]
 8003360:	e002      	b.n	8003368 <prvInsertBlockIntoFreeList+0x14>
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	60fb      	str	r3, [r7, #12]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	429a      	cmp	r2, r3
 8003370:	d8f7      	bhi.n	8003362 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	68ba      	ldr	r2, [r7, #8]
 800337c:	4413      	add	r3, r2
 800337e:	687a      	ldr	r2, [r7, #4]
 8003380:	429a      	cmp	r2, r3
 8003382:	d108      	bne.n	8003396 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	685a      	ldr	r2, [r3, #4]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	441a      	add	r2, r3
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	68ba      	ldr	r2, [r7, #8]
 80033a0:	441a      	add	r2, r3
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d118      	bne.n	80033dc <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	4b15      	ldr	r3, [pc, #84]	; (8003404 <prvInsertBlockIntoFreeList+0xb0>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d00d      	beq.n	80033d2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	685a      	ldr	r2, [r3, #4]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	441a      	add	r2, r3
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	601a      	str	r2, [r3, #0]
 80033d0:	e008      	b.n	80033e4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80033d2:	4b0c      	ldr	r3, [pc, #48]	; (8003404 <prvInsertBlockIntoFreeList+0xb0>)
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	601a      	str	r2, [r3, #0]
 80033da:	e003      	b.n	80033e4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80033e4:	68fa      	ldr	r2, [r7, #12]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d002      	beq.n	80033f2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	687a      	ldr	r2, [r7, #4]
 80033f0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80033f2:	bf00      	nop
 80033f4:	3714      	adds	r7, #20
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr
 80033fe:	bf00      	nop
 8003400:	20012df4 	.word	0x20012df4
 8003404:	20012dfc 	.word	0x20012dfc

08003408 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8003408:	b580      	push	{r7, lr}
 800340a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 800340c:	4803      	ldr	r0, [pc, #12]	; (800341c <_cbSendSystemDesc+0x14>)
 800340e:	f001 ff99 	bl	8005344 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8003412:	4803      	ldr	r0, [pc, #12]	; (8003420 <_cbSendSystemDesc+0x18>)
 8003414:	f001 ff96 	bl	8005344 <SEGGER_SYSVIEW_SendSysDesc>
}
 8003418:	bf00      	nop
 800341a:	bd80      	pop	{r7, pc}
 800341c:	08006398 	.word	0x08006398
 8003420:	080063dc 	.word	0x080063dc

08003424 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8003424:	b580      	push	{r7, lr}
 8003426:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8003428:	4b06      	ldr	r3, [pc, #24]	; (8003444 <SEGGER_SYSVIEW_Conf+0x20>)
 800342a:	6818      	ldr	r0, [r3, #0]
 800342c:	4b05      	ldr	r3, [pc, #20]	; (8003444 <SEGGER_SYSVIEW_Conf+0x20>)
 800342e:	6819      	ldr	r1, [r3, #0]
 8003430:	4b05      	ldr	r3, [pc, #20]	; (8003448 <SEGGER_SYSVIEW_Conf+0x24>)
 8003432:	4a06      	ldr	r2, [pc, #24]	; (800344c <SEGGER_SYSVIEW_Conf+0x28>)
 8003434:	f001 fc0a 	bl	8004c4c <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8003438:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800343c:	f001 fc4a 	bl	8004cd4 <SEGGER_SYSVIEW_SetRAMBase>
}
 8003440:	bf00      	nop
 8003442:	bd80      	pop	{r7, pc}
 8003444:	20000000 	.word	0x20000000
 8003448:	08003409 	.word	0x08003409
 800344c:	0800647c 	.word	0x0800647c

08003450 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8003450:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003452:	b085      	sub	sp, #20
 8003454:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8003456:	2300      	movs	r3, #0
 8003458:	607b      	str	r3, [r7, #4]
 800345a:	e033      	b.n	80034c4 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 800345c:	491e      	ldr	r1, [pc, #120]	; (80034d8 <_cbSendTaskList+0x88>)
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	4613      	mov	r3, r2
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	4413      	add	r3, r2
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	440b      	add	r3, r1
 800346a:	6818      	ldr	r0, [r3, #0]
 800346c:	491a      	ldr	r1, [pc, #104]	; (80034d8 <_cbSendTaskList+0x88>)
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	4613      	mov	r3, r2
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	4413      	add	r3, r2
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	440b      	add	r3, r1
 800347a:	3304      	adds	r3, #4
 800347c:	6819      	ldr	r1, [r3, #0]
 800347e:	4c16      	ldr	r4, [pc, #88]	; (80034d8 <_cbSendTaskList+0x88>)
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	4613      	mov	r3, r2
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	4413      	add	r3, r2
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	4423      	add	r3, r4
 800348c:	3308      	adds	r3, #8
 800348e:	681c      	ldr	r4, [r3, #0]
 8003490:	4d11      	ldr	r5, [pc, #68]	; (80034d8 <_cbSendTaskList+0x88>)
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	4613      	mov	r3, r2
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	4413      	add	r3, r2
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	442b      	add	r3, r5
 800349e:	330c      	adds	r3, #12
 80034a0:	681d      	ldr	r5, [r3, #0]
 80034a2:	4e0d      	ldr	r6, [pc, #52]	; (80034d8 <_cbSendTaskList+0x88>)
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	4613      	mov	r3, r2
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	4413      	add	r3, r2
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	4433      	add	r3, r6
 80034b0:	3310      	adds	r3, #16
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	9300      	str	r3, [sp, #0]
 80034b6:	462b      	mov	r3, r5
 80034b8:	4622      	mov	r2, r4
 80034ba:	f000 f8bd 	bl	8003638 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	3301      	adds	r3, #1
 80034c2:	607b      	str	r3, [r7, #4]
 80034c4:	4b05      	ldr	r3, [pc, #20]	; (80034dc <_cbSendTaskList+0x8c>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	687a      	ldr	r2, [r7, #4]
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d3c6      	bcc.n	800345c <_cbSendTaskList+0xc>
  }
}
 80034ce:	bf00      	nop
 80034d0:	bf00      	nop
 80034d2:	370c      	adds	r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034d8:	20012e14 	.word	0x20012e14
 80034dc:	20012eb4 	.word	0x20012eb4

080034e0 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 80034e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034e4:	b082      	sub	sp, #8
 80034e6:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 80034e8:	f7ff f8f2 	bl	80026d0 <xTaskGetTickCountFromISR>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2200      	movs	r2, #0
 80034f0:	469a      	mov	sl, r3
 80034f2:	4693      	mov	fp, r2
 80034f4:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 80034f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80034fc:	4602      	mov	r2, r0
 80034fe:	460b      	mov	r3, r1
 8003500:	f04f 0a00 	mov.w	sl, #0
 8003504:	f04f 0b00 	mov.w	fp, #0
 8003508:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 800350c:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8003510:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8003514:	4652      	mov	r2, sl
 8003516:	465b      	mov	r3, fp
 8003518:	1a14      	subs	r4, r2, r0
 800351a:	eb63 0501 	sbc.w	r5, r3, r1
 800351e:	f04f 0200 	mov.w	r2, #0
 8003522:	f04f 0300 	mov.w	r3, #0
 8003526:	00ab      	lsls	r3, r5, #2
 8003528:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800352c:	00a2      	lsls	r2, r4, #2
 800352e:	4614      	mov	r4, r2
 8003530:	461d      	mov	r5, r3
 8003532:	eb14 0800 	adds.w	r8, r4, r0
 8003536:	eb45 0901 	adc.w	r9, r5, r1
 800353a:	f04f 0200 	mov.w	r2, #0
 800353e:	f04f 0300 	mov.w	r3, #0
 8003542:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003546:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800354a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800354e:	4690      	mov	r8, r2
 8003550:	4699      	mov	r9, r3
 8003552:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8003556:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800355a:	4610      	mov	r0, r2
 800355c:	4619      	mov	r1, r3
 800355e:	3708      	adds	r7, #8
 8003560:	46bd      	mov	sp, r7
 8003562:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08003568 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8003568:	b580      	push	{r7, lr}
 800356a:	b086      	sub	sp, #24
 800356c:	af02      	add	r7, sp, #8
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	60b9      	str	r1, [r7, #8]
 8003572:	607a      	str	r2, [r7, #4]
 8003574:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003576:	2205      	movs	r2, #5
 8003578:	492b      	ldr	r1, [pc, #172]	; (8003628 <SYSVIEW_AddTask+0xc0>)
 800357a:	68b8      	ldr	r0, [r7, #8]
 800357c:	f002 fa32 	bl	80059e4 <memcmp>
 8003580:	4603      	mov	r3, r0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d04b      	beq.n	800361e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8003586:	4b29      	ldr	r3, [pc, #164]	; (800362c <SYSVIEW_AddTask+0xc4>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	2b07      	cmp	r3, #7
 800358c:	d903      	bls.n	8003596 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800358e:	4828      	ldr	r0, [pc, #160]	; (8003630 <SYSVIEW_AddTask+0xc8>)
 8003590:	f002 f97a 	bl	8005888 <SEGGER_SYSVIEW_Warn>
    return;
 8003594:	e044      	b.n	8003620 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8003596:	4b25      	ldr	r3, [pc, #148]	; (800362c <SYSVIEW_AddTask+0xc4>)
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	4926      	ldr	r1, [pc, #152]	; (8003634 <SYSVIEW_AddTask+0xcc>)
 800359c:	4613      	mov	r3, r2
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	4413      	add	r3, r2
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	440b      	add	r3, r1
 80035a6:	68fa      	ldr	r2, [r7, #12]
 80035a8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80035aa:	4b20      	ldr	r3, [pc, #128]	; (800362c <SYSVIEW_AddTask+0xc4>)
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	4921      	ldr	r1, [pc, #132]	; (8003634 <SYSVIEW_AddTask+0xcc>)
 80035b0:	4613      	mov	r3, r2
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	4413      	add	r3, r2
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	440b      	add	r3, r1
 80035ba:	3304      	adds	r3, #4
 80035bc:	68ba      	ldr	r2, [r7, #8]
 80035be:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80035c0:	4b1a      	ldr	r3, [pc, #104]	; (800362c <SYSVIEW_AddTask+0xc4>)
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	491b      	ldr	r1, [pc, #108]	; (8003634 <SYSVIEW_AddTask+0xcc>)
 80035c6:	4613      	mov	r3, r2
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	4413      	add	r3, r2
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	440b      	add	r3, r1
 80035d0:	3308      	adds	r3, #8
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80035d6:	4b15      	ldr	r3, [pc, #84]	; (800362c <SYSVIEW_AddTask+0xc4>)
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	4916      	ldr	r1, [pc, #88]	; (8003634 <SYSVIEW_AddTask+0xcc>)
 80035dc:	4613      	mov	r3, r2
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	4413      	add	r3, r2
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	440b      	add	r3, r1
 80035e6:	330c      	adds	r3, #12
 80035e8:	683a      	ldr	r2, [r7, #0]
 80035ea:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80035ec:	4b0f      	ldr	r3, [pc, #60]	; (800362c <SYSVIEW_AddTask+0xc4>)
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	4910      	ldr	r1, [pc, #64]	; (8003634 <SYSVIEW_AddTask+0xcc>)
 80035f2:	4613      	mov	r3, r2
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	4413      	add	r3, r2
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	440b      	add	r3, r1
 80035fc:	3310      	adds	r3, #16
 80035fe:	69ba      	ldr	r2, [r7, #24]
 8003600:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8003602:	4b0a      	ldr	r3, [pc, #40]	; (800362c <SYSVIEW_AddTask+0xc4>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	3301      	adds	r3, #1
 8003608:	4a08      	ldr	r2, [pc, #32]	; (800362c <SYSVIEW_AddTask+0xc4>)
 800360a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800360c:	69bb      	ldr	r3, [r7, #24]
 800360e:	9300      	str	r3, [sp, #0]
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	68b9      	ldr	r1, [r7, #8]
 8003616:	68f8      	ldr	r0, [r7, #12]
 8003618:	f000 f80e 	bl	8003638 <SYSVIEW_SendTaskInfo>
 800361c:	e000      	b.n	8003620 <SYSVIEW_AddTask+0xb8>
    return;
 800361e:	bf00      	nop

}
 8003620:	3710      	adds	r7, #16
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
 8003626:	bf00      	nop
 8003628:	080063ec 	.word	0x080063ec
 800362c:	20012eb4 	.word	0x20012eb4
 8003630:	080063f4 	.word	0x080063f4
 8003634:	20012e14 	.word	0x20012e14

08003638 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8003638:	b580      	push	{r7, lr}
 800363a:	b08a      	sub	sp, #40	; 0x28
 800363c:	af00      	add	r7, sp, #0
 800363e:	60f8      	str	r0, [r7, #12]
 8003640:	60b9      	str	r1, [r7, #8]
 8003642:	607a      	str	r2, [r7, #4]
 8003644:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8003646:	f107 0314 	add.w	r3, r7, #20
 800364a:	2214      	movs	r2, #20
 800364c:	2100      	movs	r1, #0
 800364e:	4618      	mov	r0, r3
 8003650:	f002 f9e6 	bl	8005a20 <memset>
  TaskInfo.TaskID     = TaskID;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8003664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003666:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8003668:	f107 0314 	add.w	r3, r7, #20
 800366c:	4618      	mov	r0, r3
 800366e:	f001 fd71 	bl	8005154 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8003672:	bf00      	nop
 8003674:	3728      	adds	r7, #40	; 0x28
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
	...

0800367c <__NVIC_EnableIRQ>:
{
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	4603      	mov	r3, r0
 8003684:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800368a:	2b00      	cmp	r3, #0
 800368c:	db0b      	blt.n	80036a6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800368e:	79fb      	ldrb	r3, [r7, #7]
 8003690:	f003 021f 	and.w	r2, r3, #31
 8003694:	4907      	ldr	r1, [pc, #28]	; (80036b4 <__NVIC_EnableIRQ+0x38>)
 8003696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800369a:	095b      	lsrs	r3, r3, #5
 800369c:	2001      	movs	r0, #1
 800369e:	fa00 f202 	lsl.w	r2, r0, r2
 80036a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80036a6:	bf00      	nop
 80036a8:	370c      	adds	r7, #12
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr
 80036b2:	bf00      	nop
 80036b4:	e000e100 	.word	0xe000e100

080036b8 <__NVIC_SetPriority>:
{
 80036b8:	b480      	push	{r7}
 80036ba:	b083      	sub	sp, #12
 80036bc:	af00      	add	r7, sp, #0
 80036be:	4603      	mov	r3, r0
 80036c0:	6039      	str	r1, [r7, #0]
 80036c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	db0a      	blt.n	80036e2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	b2da      	uxtb	r2, r3
 80036d0:	490c      	ldr	r1, [pc, #48]	; (8003704 <__NVIC_SetPriority+0x4c>)
 80036d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036d6:	0112      	lsls	r2, r2, #4
 80036d8:	b2d2      	uxtb	r2, r2
 80036da:	440b      	add	r3, r1
 80036dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80036e0:	e00a      	b.n	80036f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	b2da      	uxtb	r2, r3
 80036e6:	4908      	ldr	r1, [pc, #32]	; (8003708 <__NVIC_SetPriority+0x50>)
 80036e8:	79fb      	ldrb	r3, [r7, #7]
 80036ea:	f003 030f 	and.w	r3, r3, #15
 80036ee:	3b04      	subs	r3, #4
 80036f0:	0112      	lsls	r2, r2, #4
 80036f2:	b2d2      	uxtb	r2, r2
 80036f4:	440b      	add	r3, r1
 80036f6:	761a      	strb	r2, [r3, #24]
}
 80036f8:	bf00      	nop
 80036fa:	370c      	adds	r7, #12
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr
 8003704:	e000e100 	.word	0xe000e100
 8003708:	e000ed00 	.word	0xe000ed00

0800370c <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 800370c:	b580      	push	{r7, lr}
 800370e:	b082      	sub	sp, #8
 8003710:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 8003712:	f002 f915 	bl	8005940 <SEGGER_SYSVIEW_IsStarted>
 8003716:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d101      	bne.n	8003722 <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 800371e:	f001 fb9d 	bl	8004e5c <SEGGER_SYSVIEW_Start>
  }
}
 8003722:	bf00      	nop
 8003724:	3708      	adds	r7, #8
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
	...

0800372c <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 800372c:	b580      	push	{r7, lr}
 800372e:	b082      	sub	sp, #8
 8003730:	af00      	add	r7, sp, #0
 8003732:	4603      	mov	r3, r0
 8003734:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8003736:	4b0c      	ldr	r3, [pc, #48]	; (8003768 <_cbOnUARTRx+0x3c>)
 8003738:	781b      	ldrb	r3, [r3, #0]
 800373a:	2b03      	cmp	r3, #3
 800373c:	d806      	bhi.n	800374c <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 800373e:	4b0a      	ldr	r3, [pc, #40]	; (8003768 <_cbOnUARTRx+0x3c>)
 8003740:	781b      	ldrb	r3, [r3, #0]
 8003742:	3301      	adds	r3, #1
 8003744:	b2da      	uxtb	r2, r3
 8003746:	4b08      	ldr	r3, [pc, #32]	; (8003768 <_cbOnUARTRx+0x3c>)
 8003748:	701a      	strb	r2, [r3, #0]
    goto Done;
 800374a:	e009      	b.n	8003760 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 800374c:	f7ff ffde 	bl	800370c <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8003750:	4b05      	ldr	r3, [pc, #20]	; (8003768 <_cbOnUARTRx+0x3c>)
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	4618      	mov	r0, r3
 8003756:	1dfb      	adds	r3, r7, #7
 8003758:	2201      	movs	r2, #1
 800375a:	4619      	mov	r1, r3
 800375c:	f000 fb9a 	bl	8003e94 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8003760:	bf00      	nop
}
 8003762:	3708      	adds	r7, #8
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}
 8003768:	20000014 	.word	0x20000014

0800376c <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 800376c:	b580      	push	{r7, lr}
 800376e:	b084      	sub	sp, #16
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8003774:	4b14      	ldr	r3, [pc, #80]	; (80037c8 <_cbOnUARTTx+0x5c>)
 8003776:	785b      	ldrb	r3, [r3, #1]
 8003778:	2b03      	cmp	r3, #3
 800377a:	d80f      	bhi.n	800379c <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 800377c:	4b12      	ldr	r3, [pc, #72]	; (80037c8 <_cbOnUARTTx+0x5c>)
 800377e:	785b      	ldrb	r3, [r3, #1]
 8003780:	461a      	mov	r2, r3
 8003782:	4b12      	ldr	r3, [pc, #72]	; (80037cc <_cbOnUARTTx+0x60>)
 8003784:	5c9a      	ldrb	r2, [r3, r2]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 800378a:	4b0f      	ldr	r3, [pc, #60]	; (80037c8 <_cbOnUARTTx+0x5c>)
 800378c:	785b      	ldrb	r3, [r3, #1]
 800378e:	3301      	adds	r3, #1
 8003790:	b2da      	uxtb	r2, r3
 8003792:	4b0d      	ldr	r3, [pc, #52]	; (80037c8 <_cbOnUARTTx+0x5c>)
 8003794:	705a      	strb	r2, [r3, #1]
    r = 1;
 8003796:	2301      	movs	r3, #1
 8003798:	60fb      	str	r3, [r7, #12]
    goto Done;
 800379a:	e00f      	b.n	80037bc <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 800379c:	4b0a      	ldr	r3, [pc, #40]	; (80037c8 <_cbOnUARTTx+0x5c>)
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	2201      	movs	r2, #1
 80037a2:	6879      	ldr	r1, [r7, #4]
 80037a4:	4618      	mov	r0, r3
 80037a6:	f000 fa19 	bl	8003bdc <SEGGER_RTT_ReadUpBufferNoLock>
 80037aa:	4603      	mov	r3, r0
 80037ac:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	da02      	bge.n	80037ba <_cbOnUARTTx+0x4e>
    r = 0;
 80037b4:	2300      	movs	r3, #0
 80037b6:	60fb      	str	r3, [r7, #12]
 80037b8:	e000      	b.n	80037bc <_cbOnUARTTx+0x50>
  }
Done:
 80037ba:	bf00      	nop
  return r;
 80037bc:	68fb      	ldr	r3, [r7, #12]
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3710      	adds	r7, #16
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	20000014 	.word	0x20000014
 80037cc:	08006484 	.word	0x08006484

080037d0 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b082      	sub	sp, #8
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 80037d8:	4a04      	ldr	r2, [pc, #16]	; (80037ec <SEGGER_UART_init+0x1c>)
 80037da:	4905      	ldr	r1, [pc, #20]	; (80037f0 <SEGGER_UART_init+0x20>)
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f000 f863 	bl	80038a8 <HIF_UART_Init>
}
 80037e2:	bf00      	nop
 80037e4:	3708      	adds	r7, #8
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	0800372d 	.word	0x0800372d
 80037f0:	0800376d 	.word	0x0800376d

080037f4 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 80037fa:	4b1e      	ldr	r3, [pc, #120]	; (8003874 <USART2_IRQHandler+0x80>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f003 0320 	and.w	r3, r3, #32
 8003806:	2b00      	cmp	r3, #0
 8003808:	d011      	beq.n	800382e <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 800380a:	4b1b      	ldr	r3, [pc, #108]	; (8003878 <USART2_IRQHandler+0x84>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	b2db      	uxtb	r3, r3
 8003810:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	f003 030b 	and.w	r3, r3, #11
 8003818:	2b00      	cmp	r3, #0
 800381a:	d108      	bne.n	800382e <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 800381c:	4b17      	ldr	r3, [pc, #92]	; (800387c <USART2_IRQHandler+0x88>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d004      	beq.n	800382e <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8003824:	4b15      	ldr	r3, [pc, #84]	; (800387c <USART2_IRQHandler+0x88>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	79fa      	ldrb	r2, [r7, #7]
 800382a:	4610      	mov	r0, r2
 800382c:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003834:	2b00      	cmp	r3, #0
 8003836:	d01a      	beq.n	800386e <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8003838:	4b11      	ldr	r3, [pc, #68]	; (8003880 <USART2_IRQHandler+0x8c>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d015      	beq.n	800386c <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8003840:	4b0f      	ldr	r3, [pc, #60]	; (8003880 <USART2_IRQHandler+0x8c>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	1dfa      	adds	r2, r7, #7
 8003846:	4610      	mov	r0, r2
 8003848:	4798      	blx	r3
 800384a:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d106      	bne.n	8003860 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8003852:	4b0c      	ldr	r3, [pc, #48]	; (8003884 <USART2_IRQHandler+0x90>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a0b      	ldr	r2, [pc, #44]	; (8003884 <USART2_IRQHandler+0x90>)
 8003858:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800385c:	6013      	str	r3, [r2, #0]
 800385e:	e006      	b.n	800386e <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8003860:	4b04      	ldr	r3, [pc, #16]	; (8003874 <USART2_IRQHandler+0x80>)
 8003862:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8003864:	79fa      	ldrb	r2, [r7, #7]
 8003866:	4b04      	ldr	r3, [pc, #16]	; (8003878 <USART2_IRQHandler+0x84>)
 8003868:	601a      	str	r2, [r3, #0]
 800386a:	e000      	b.n	800386e <USART2_IRQHandler+0x7a>
      return;
 800386c:	bf00      	nop
    }
  }
}
 800386e:	3710      	adds	r7, #16
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}
 8003874:	40004400 	.word	0x40004400
 8003878:	40004404 	.word	0x40004404
 800387c:	20012eb8 	.word	0x20012eb8
 8003880:	20012ebc 	.word	0x20012ebc
 8003884:	4000440c 	.word	0x4000440c

08003888 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8003888:	b480      	push	{r7}
 800388a:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 800388c:	4b05      	ldr	r3, [pc, #20]	; (80038a4 <HIF_UART_EnableTXEInterrupt+0x1c>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a04      	ldr	r2, [pc, #16]	; (80038a4 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8003892:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003896:	6013      	str	r3, [r2, #0]
}
 8003898:	bf00      	nop
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr
 80038a2:	bf00      	nop
 80038a4:	4000440c 	.word	0x4000440c

080038a8 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b086      	sub	sp, #24
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	60f8      	str	r0, [r7, #12]
 80038b0:	60b9      	str	r1, [r7, #8]
 80038b2:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 80038b4:	4b2e      	ldr	r3, [pc, #184]	; (8003970 <HIF_UART_Init+0xc8>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a2d      	ldr	r2, [pc, #180]	; (8003970 <HIF_UART_Init+0xc8>)
 80038ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038be:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 80038c0:	4b2c      	ldr	r3, [pc, #176]	; (8003974 <HIF_UART_Init+0xcc>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a2b      	ldr	r2, [pc, #172]	; (8003974 <HIF_UART_Init+0xcc>)
 80038c6:	f043 0301 	orr.w	r3, r3, #1
 80038ca:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 80038cc:	4b2a      	ldr	r3, [pc, #168]	; (8003978 <HIF_UART_Init+0xd0>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80038d8:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 80038e0:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 80038e2:	4a25      	ldr	r2, [pc, #148]	; (8003978 <HIF_UART_Init+0xd0>)
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 80038e8:	4b24      	ldr	r3, [pc, #144]	; (800397c <HIF_UART_Init+0xd4>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038f4:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80038fc:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 80038fe:	4a1f      	ldr	r2, [pc, #124]	; (800397c <HIF_UART_Init+0xd4>)
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8003904:	4b1e      	ldr	r3, [pc, #120]	; (8003980 <HIF_UART_Init+0xd8>)
 8003906:	f24a 022c 	movw	r2, #41004	; 0xa02c
 800390a:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 800390c:	4b1d      	ldr	r3, [pc, #116]	; (8003984 <HIF_UART_Init+0xdc>)
 800390e:	2200      	movs	r2, #0
 8003910:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8003912:	4b1d      	ldr	r3, [pc, #116]	; (8003988 <HIF_UART_Init+0xe0>)
 8003914:	2280      	movs	r2, #128	; 0x80
 8003916:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	00db      	lsls	r3, r3, #3
 800391c:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 800391e:	4a1b      	ldr	r2, [pc, #108]	; (800398c <HIF_UART_Init+0xe4>)
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	fbb2 f3f3 	udiv	r3, r2, r3
 8003926:	3301      	adds	r3, #1
 8003928:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	085b      	lsrs	r3, r3, #1
 800392e:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003936:	d302      	bcc.n	800393e <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8003938:	f640 73ff 	movw	r3, #4095	; 0xfff
 800393c:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d004      	beq.n	800394e <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	011b      	lsls	r3, r3, #4
 8003948:	4a11      	ldr	r2, [pc, #68]	; (8003990 <HIF_UART_Init+0xe8>)
 800394a:	b29b      	uxth	r3, r3
 800394c:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 800394e:	4a11      	ldr	r2, [pc, #68]	; (8003994 <HIF_UART_Init+0xec>)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8003954:	4a10      	ldr	r2, [pc, #64]	; (8003998 <HIF_UART_Init+0xf0>)
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 800395a:	2106      	movs	r1, #6
 800395c:	2026      	movs	r0, #38	; 0x26
 800395e:	f7ff feab 	bl	80036b8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8003962:	2026      	movs	r0, #38	; 0x26
 8003964:	f7ff fe8a 	bl	800367c <__NVIC_EnableIRQ>
}
 8003968:	bf00      	nop
 800396a:	3718      	adds	r7, #24
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}
 8003970:	40023840 	.word	0x40023840
 8003974:	40023830 	.word	0x40023830
 8003978:	40020020 	.word	0x40020020
 800397c:	40020000 	.word	0x40020000
 8003980:	4000440c 	.word	0x4000440c
 8003984:	40004410 	.word	0x40004410
 8003988:	40004414 	.word	0x40004414
 800398c:	0501bd00 	.word	0x0501bd00
 8003990:	40004408 	.word	0x40004408
 8003994:	20012eb8 	.word	0x20012eb8
 8003998:	20012ebc 	.word	0x20012ebc

0800399c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80039a2:	4b24      	ldr	r3, [pc, #144]	; (8003a34 <_DoInit+0x98>)
 80039a4:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2203      	movs	r2, #3
 80039aa:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2203      	movs	r2, #3
 80039b0:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a20      	ldr	r2, [pc, #128]	; (8003a38 <_DoInit+0x9c>)
 80039b6:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	4a20      	ldr	r2, [pc, #128]	; (8003a3c <_DoInit+0xa0>)
 80039bc:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80039c4:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2200      	movs	r2, #0
 80039ca:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2200      	movs	r2, #0
 80039d6:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	4a17      	ldr	r2, [pc, #92]	; (8003a38 <_DoInit+0x9c>)
 80039dc:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4a17      	ldr	r2, [pc, #92]	; (8003a40 <_DoInit+0xa4>)
 80039e2:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2210      	movs	r2, #16
 80039e8:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2200      	movs	r2, #0
 80039f4:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2200      	movs	r2, #0
 80039fa:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	3307      	adds	r3, #7
 8003a00:	4a10      	ldr	r2, [pc, #64]	; (8003a44 <_DoInit+0xa8>)
 8003a02:	6810      	ldr	r0, [r2, #0]
 8003a04:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003a06:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a0e      	ldr	r2, [pc, #56]	; (8003a48 <_DoInit+0xac>)
 8003a0e:	6810      	ldr	r0, [r2, #0]
 8003a10:	6018      	str	r0, [r3, #0]
 8003a12:	8891      	ldrh	r1, [r2, #4]
 8003a14:	7992      	ldrb	r2, [r2, #6]
 8003a16:	8099      	strh	r1, [r3, #4]
 8003a18:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003a1a:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2220      	movs	r2, #32
 8003a22:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003a24:	f3bf 8f5f 	dmb	sy
}
 8003a28:	bf00      	nop
 8003a2a:	370c      	adds	r7, #12
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr
 8003a34:	20012ec0 	.word	0x20012ec0
 8003a38:	08006444 	.word	0x08006444
 8003a3c:	20012f68 	.word	0x20012f68
 8003a40:	20013368 	.word	0x20013368
 8003a44:	08006450 	.word	0x08006450
 8003a48:	08006454 	.word	0x08006454

08003a4c <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b08a      	sub	sp, #40	; 0x28
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	60f8      	str	r0, [r7, #12]
 8003a54:	60b9      	str	r1, [r7, #8]
 8003a56:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	691b      	ldr	r3, [r3, #16]
 8003a66:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8003a68:	69ba      	ldr	r2, [r7, #24]
 8003a6a:	69fb      	ldr	r3, [r7, #28]
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d905      	bls.n	8003a7c <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8003a70:	69ba      	ldr	r2, [r7, #24]
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	1ad3      	subs	r3, r2, r3
 8003a76:	3b01      	subs	r3, #1
 8003a78:	627b      	str	r3, [r7, #36]	; 0x24
 8003a7a:	e007      	b.n	8003a8c <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	689a      	ldr	r2, [r3, #8]
 8003a80:	69b9      	ldr	r1, [r7, #24]
 8003a82:	69fb      	ldr	r3, [r7, #28]
 8003a84:	1acb      	subs	r3, r1, r3
 8003a86:	4413      	add	r3, r2
 8003a88:	3b01      	subs	r3, #1
 8003a8a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	689a      	ldr	r2, [r3, #8]
 8003a90:	69fb      	ldr	r3, [r7, #28]
 8003a92:	1ad3      	subs	r3, r2, r3
 8003a94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a96:	4293      	cmp	r3, r2
 8003a98:	bf28      	it	cs
 8003a9a:	4613      	movcs	r3, r2
 8003a9c:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8003a9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	bf28      	it	cs
 8003aa6:	4613      	movcs	r3, r2
 8003aa8:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	685a      	ldr	r2, [r3, #4]
 8003aae:	69fb      	ldr	r3, [r7, #28]
 8003ab0:	4413      	add	r3, r2
 8003ab2:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8003ab4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ab6:	68b9      	ldr	r1, [r7, #8]
 8003ab8:	6978      	ldr	r0, [r7, #20]
 8003aba:	f001 ffa3 	bl	8005a04 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8003abe:	6a3a      	ldr	r2, [r7, #32]
 8003ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac2:	4413      	add	r3, r2
 8003ac4:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8003ac6:	68ba      	ldr	r2, [r7, #8]
 8003ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aca:	4413      	add	r3, r2
 8003acc:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad2:	1ad3      	subs	r3, r2, r3
 8003ad4:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8003ad6:	69fa      	ldr	r2, [r7, #28]
 8003ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ada:	4413      	add	r3, r2
 8003adc:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	69fa      	ldr	r2, [r7, #28]
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d101      	bne.n	8003aec <_WriteBlocking+0xa0>
      WrOff = 0u;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003aec:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	69fa      	ldr	r2, [r7, #28]
 8003af4:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d1b2      	bne.n	8003a62 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8003afc:	6a3b      	ldr	r3, [r7, #32]
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3728      	adds	r7, #40	; 0x28
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}

08003b06 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8003b06:	b580      	push	{r7, lr}
 8003b08:	b088      	sub	sp, #32
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	60f8      	str	r0, [r7, #12]
 8003b0e:	60b9      	str	r1, [r7, #8]
 8003b10:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	689a      	ldr	r2, [r3, #8]
 8003b1c:	69fb      	ldr	r3, [r7, #28]
 8003b1e:	1ad3      	subs	r3, r2, r3
 8003b20:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8003b22:	69ba      	ldr	r2, [r7, #24]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d911      	bls.n	8003b4e <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	685a      	ldr	r2, [r3, #4]
 8003b2e:	69fb      	ldr	r3, [r7, #28]
 8003b30:	4413      	add	r3, r2
 8003b32:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8003b34:	687a      	ldr	r2, [r7, #4]
 8003b36:	68b9      	ldr	r1, [r7, #8]
 8003b38:	6938      	ldr	r0, [r7, #16]
 8003b3a:	f001 ff63 	bl	8005a04 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003b3e:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8003b42:	69fa      	ldr	r2, [r7, #28]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	441a      	add	r2, r3
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8003b4c:	e01f      	b.n	8003b8e <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8003b4e:	69bb      	ldr	r3, [r7, #24]
 8003b50:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	685a      	ldr	r2, [r3, #4]
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	4413      	add	r3, r2
 8003b5a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8003b5c:	697a      	ldr	r2, [r7, #20]
 8003b5e:	68b9      	ldr	r1, [r7, #8]
 8003b60:	6938      	ldr	r0, [r7, #16]
 8003b62:	f001 ff4f 	bl	8005a04 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	69bb      	ldr	r3, [r7, #24]
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8003b74:	68ba      	ldr	r2, [r7, #8]
 8003b76:	69bb      	ldr	r3, [r7, #24]
 8003b78:	4413      	add	r3, r2
 8003b7a:	697a      	ldr	r2, [r7, #20]
 8003b7c:	4619      	mov	r1, r3
 8003b7e:	6938      	ldr	r0, [r7, #16]
 8003b80:	f001 ff40 	bl	8005a04 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003b84:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	697a      	ldr	r2, [r7, #20]
 8003b8c:	60da      	str	r2, [r3, #12]
}
 8003b8e:	bf00      	nop
 8003b90:	3720      	adds	r7, #32
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}

08003b96 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8003b96:	b480      	push	{r7}
 8003b98:	b087      	sub	sp, #28
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	691b      	ldr	r3, [r3, #16]
 8003ba2:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8003baa:	693a      	ldr	r2, [r7, #16]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d808      	bhi.n	8003bc4 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	689a      	ldr	r2, [r3, #8]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	1ad2      	subs	r2, r2, r3
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	4413      	add	r3, r2
 8003bbe:	3b01      	subs	r3, #1
 8003bc0:	617b      	str	r3, [r7, #20]
 8003bc2:	e004      	b.n	8003bce <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8003bc4:	693a      	ldr	r2, [r7, #16]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	1ad3      	subs	r3, r2, r3
 8003bca:	3b01      	subs	r3, #1
 8003bcc:	617b      	str	r3, [r7, #20]
  }
  return r;
 8003bce:	697b      	ldr	r3, [r7, #20]
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	371c      	adds	r7, #28
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr

08003bdc <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b08c      	sub	sp, #48	; 0x30
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	60b9      	str	r1, [r7, #8]
 8003be6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8003be8:	4b3e      	ldr	r3, [pc, #248]	; (8003ce4 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8003bea:	623b      	str	r3, [r7, #32]
 8003bec:	6a3b      	ldr	r3, [r7, #32]
 8003bee:	781b      	ldrb	r3, [r3, #0]
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d101      	bne.n	8003bfa <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8003bf6:	f7ff fed1 	bl	800399c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	1c5a      	adds	r2, r3, #1
 8003bfe:	4613      	mov	r3, r2
 8003c00:	005b      	lsls	r3, r3, #1
 8003c02:	4413      	add	r3, r2
 8003c04:	00db      	lsls	r3, r3, #3
 8003c06:	4a37      	ldr	r2, [pc, #220]	; (8003ce4 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8003c08:	4413      	add	r3, r2
 8003c0a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8003c10:	69fb      	ldr	r3, [r7, #28]
 8003c12:	691b      	ldr	r3, [r3, #16]
 8003c14:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8003c16:	69fb      	ldr	r3, [r7, #28]
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003c20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c22:	69bb      	ldr	r3, [r7, #24]
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d92b      	bls.n	8003c80 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	689a      	ldr	r2, [r3, #8]
 8003c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c2e:	1ad3      	subs	r3, r2, r3
 8003c30:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003c32:	697a      	ldr	r2, [r7, #20]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	4293      	cmp	r3, r2
 8003c38:	bf28      	it	cs
 8003c3a:	4613      	movcs	r3, r2
 8003c3c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	685a      	ldr	r2, [r3, #4]
 8003c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c44:	4413      	add	r3, r2
 8003c46:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003c48:	697a      	ldr	r2, [r7, #20]
 8003c4a:	6939      	ldr	r1, [r7, #16]
 8003c4c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003c4e:	f001 fed9 	bl	8005a04 <memcpy>
    NumBytesRead += NumBytesRem;
 8003c52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	4413      	add	r3, r2
 8003c58:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003c5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	4413      	add	r3, r2
 8003c60:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	1ad3      	subs	r3, r2, r3
 8003c68:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003c6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	4413      	add	r3, r2
 8003c70:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003c72:	69fb      	ldr	r3, [r7, #28]
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d101      	bne.n	8003c80 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003c80:	69ba      	ldr	r2, [r7, #24]
 8003c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003c88:	697a      	ldr	r2, [r7, #20]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	bf28      	it	cs
 8003c90:	4613      	movcs	r3, r2
 8003c92:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d019      	beq.n	8003cce <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003c9a:	69fb      	ldr	r3, [r7, #28]
 8003c9c:	685a      	ldr	r2, [r3, #4]
 8003c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ca0:	4413      	add	r3, r2
 8003ca2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003ca4:	697a      	ldr	r2, [r7, #20]
 8003ca6:	6939      	ldr	r1, [r7, #16]
 8003ca8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003caa:	f001 feab 	bl	8005a04 <memcpy>
    NumBytesRead += NumBytesRem;
 8003cae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	4413      	add	r3, r2
 8003cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003cb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	4413      	add	r3, r2
 8003cbc:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003cbe:	687a      	ldr	r2, [r7, #4]
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	1ad3      	subs	r3, r2, r3
 8003cc4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003cc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	4413      	add	r3, r2
 8003ccc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8003cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d002      	beq.n	8003cda <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003cd8:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8003cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3730      	adds	r7, #48	; 0x30
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	20012ec0 	.word	0x20012ec0

08003ce8 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b08c      	sub	sp, #48	; 0x30
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	60f8      	str	r0, [r7, #12]
 8003cf0:	60b9      	str	r1, [r7, #8]
 8003cf2:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8003cf4:	4b3e      	ldr	r3, [pc, #248]	; (8003df0 <SEGGER_RTT_ReadNoLock+0x108>)
 8003cf6:	623b      	str	r3, [r7, #32]
 8003cf8:	6a3b      	ldr	r3, [r7, #32]
 8003cfa:	781b      	ldrb	r3, [r3, #0]
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d101      	bne.n	8003d06 <SEGGER_RTT_ReadNoLock+0x1e>
 8003d02:	f7ff fe4b 	bl	800399c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003d06:	68fa      	ldr	r2, [r7, #12]
 8003d08:	4613      	mov	r3, r2
 8003d0a:	005b      	lsls	r3, r3, #1
 8003d0c:	4413      	add	r3, r2
 8003d0e:	00db      	lsls	r3, r3, #3
 8003d10:	3360      	adds	r3, #96	; 0x60
 8003d12:	4a37      	ldr	r2, [pc, #220]	; (8003df0 <SEGGER_RTT_ReadNoLock+0x108>)
 8003d14:	4413      	add	r3, r2
 8003d16:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	691b      	ldr	r3, [r3, #16]
 8003d20:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003d2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d2e:	69bb      	ldr	r3, [r7, #24]
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d92b      	bls.n	8003d8c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003d34:	69fb      	ldr	r3, [r7, #28]
 8003d36:	689a      	ldr	r2, [r3, #8]
 8003d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003d3e:	697a      	ldr	r2, [r7, #20]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	4293      	cmp	r3, r2
 8003d44:	bf28      	it	cs
 8003d46:	4613      	movcs	r3, r2
 8003d48:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003d4a:	69fb      	ldr	r3, [r7, #28]
 8003d4c:	685a      	ldr	r2, [r3, #4]
 8003d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d50:	4413      	add	r3, r2
 8003d52:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003d54:	697a      	ldr	r2, [r7, #20]
 8003d56:	6939      	ldr	r1, [r7, #16]
 8003d58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003d5a:	f001 fe53 	bl	8005a04 <memcpy>
    NumBytesRead += NumBytesRem;
 8003d5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	4413      	add	r3, r2
 8003d64:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003d66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	4413      	add	r3, r2
 8003d6c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	1ad3      	subs	r3, r2, r3
 8003d74:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003d76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	4413      	add	r3, r2
 8003d7c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d101      	bne.n	8003d8c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003d8c:	69ba      	ldr	r2, [r7, #24]
 8003d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003d94:	697a      	ldr	r2, [r7, #20]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	bf28      	it	cs
 8003d9c:	4613      	movcs	r3, r2
 8003d9e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d019      	beq.n	8003dda <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003da6:	69fb      	ldr	r3, [r7, #28]
 8003da8:	685a      	ldr	r2, [r3, #4]
 8003daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dac:	4413      	add	r3, r2
 8003dae:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003db0:	697a      	ldr	r2, [r7, #20]
 8003db2:	6939      	ldr	r1, [r7, #16]
 8003db4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003db6:	f001 fe25 	bl	8005a04 <memcpy>
    NumBytesRead += NumBytesRem;
 8003dba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	4413      	add	r3, r2
 8003dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003dc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	4413      	add	r3, r2
 8003dc8:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003dd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	4413      	add	r3, r2
 8003dd8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8003dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d002      	beq.n	8003de6 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003de0:	69fb      	ldr	r3, [r7, #28]
 8003de2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003de4:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8003de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3730      	adds	r7, #48	; 0x30
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}
 8003df0:	20012ec0 	.word	0x20012ec0

08003df4 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b088      	sub	sp, #32
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	60f8      	str	r0, [r7, #12]
 8003dfc:	60b9      	str	r1, [r7, #8]
 8003dfe:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003e04:	68fa      	ldr	r2, [r7, #12]
 8003e06:	4613      	mov	r3, r2
 8003e08:	005b      	lsls	r3, r3, #1
 8003e0a:	4413      	add	r3, r2
 8003e0c:	00db      	lsls	r3, r3, #3
 8003e0e:	3360      	adds	r3, #96	; 0x60
 8003e10:	4a1f      	ldr	r2, [pc, #124]	; (8003e90 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 8003e12:	4413      	add	r3, r2
 8003e14:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	695b      	ldr	r3, [r3, #20]
 8003e1a:	2b02      	cmp	r3, #2
 8003e1c:	d029      	beq.n	8003e72 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 8003e1e:	2b02      	cmp	r3, #2
 8003e20:	d82e      	bhi.n	8003e80 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d002      	beq.n	8003e2c <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d013      	beq.n	8003e52 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 8003e2a:	e029      	b.n	8003e80 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8003e2c:	6978      	ldr	r0, [r7, #20]
 8003e2e:	f7ff feb2 	bl	8003b96 <_GetAvailWriteSpace>
 8003e32:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8003e34:	693a      	ldr	r2, [r7, #16]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d202      	bcs.n	8003e42 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8003e40:	e021      	b.n	8003e86 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	69b9      	ldr	r1, [r7, #24]
 8003e4a:	6978      	ldr	r0, [r7, #20]
 8003e4c:	f7ff fe5b 	bl	8003b06 <_WriteNoCheck>
    break;
 8003e50:	e019      	b.n	8003e86 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8003e52:	6978      	ldr	r0, [r7, #20]
 8003e54:	f7ff fe9f 	bl	8003b96 <_GetAvailWriteSpace>
 8003e58:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	bf28      	it	cs
 8003e62:	4613      	movcs	r3, r2
 8003e64:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8003e66:	69fa      	ldr	r2, [r7, #28]
 8003e68:	69b9      	ldr	r1, [r7, #24]
 8003e6a:	6978      	ldr	r0, [r7, #20]
 8003e6c:	f7ff fe4b 	bl	8003b06 <_WriteNoCheck>
    break;
 8003e70:	e009      	b.n	8003e86 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	69b9      	ldr	r1, [r7, #24]
 8003e76:	6978      	ldr	r0, [r7, #20]
 8003e78:	f7ff fde8 	bl	8003a4c <_WriteBlocking>
 8003e7c:	61f8      	str	r0, [r7, #28]
    break;
 8003e7e:	e002      	b.n	8003e86 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8003e80:	2300      	movs	r3, #0
 8003e82:	61fb      	str	r3, [r7, #28]
    break;
 8003e84:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8003e86:	69fb      	ldr	r3, [r7, #28]
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3720      	adds	r7, #32
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}
 8003e90:	20012ec0 	.word	0x20012ec0

08003e94 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b088      	sub	sp, #32
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	60f8      	str	r0, [r7, #12]
 8003e9c:	60b9      	str	r1, [r7, #8]
 8003e9e:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8003ea0:	4b0e      	ldr	r3, [pc, #56]	; (8003edc <SEGGER_RTT_WriteDownBuffer+0x48>)
 8003ea2:	61fb      	str	r3, [r7, #28]
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	781b      	ldrb	r3, [r3, #0]
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d101      	bne.n	8003eb2 <SEGGER_RTT_WriteDownBuffer+0x1e>
 8003eae:	f7ff fd75 	bl	800399c <_DoInit>
  SEGGER_RTT_LOCK();
 8003eb2:	f3ef 8311 	mrs	r3, BASEPRI
 8003eb6:	f04f 0120 	mov.w	r1, #32
 8003eba:	f381 8811 	msr	BASEPRI, r1
 8003ebe:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8003ec0:	687a      	ldr	r2, [r7, #4]
 8003ec2:	68b9      	ldr	r1, [r7, #8]
 8003ec4:	68f8      	ldr	r0, [r7, #12]
 8003ec6:	f7ff ff95 	bl	8003df4 <SEGGER_RTT_WriteDownBufferNoLock>
 8003eca:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8003ecc:	69bb      	ldr	r3, [r7, #24]
 8003ece:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8003ed2:	697b      	ldr	r3, [r7, #20]
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3720      	adds	r7, #32
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}
 8003edc:	20012ec0 	.word	0x20012ec0

08003ee0 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b088      	sub	sp, #32
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	60f8      	str	r0, [r7, #12]
 8003ee8:	60b9      	str	r1, [r7, #8]
 8003eea:	607a      	str	r2, [r7, #4]
 8003eec:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8003eee:	4b3d      	ldr	r3, [pc, #244]	; (8003fe4 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003ef0:	61bb      	str	r3, [r7, #24]
 8003ef2:	69bb      	ldr	r3, [r7, #24]
 8003ef4:	781b      	ldrb	r3, [r3, #0]
 8003ef6:	b2db      	uxtb	r3, r3
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d101      	bne.n	8003f00 <SEGGER_RTT_AllocUpBuffer+0x20>
 8003efc:	f7ff fd4e 	bl	800399c <_DoInit>
  SEGGER_RTT_LOCK();
 8003f00:	f3ef 8311 	mrs	r3, BASEPRI
 8003f04:	f04f 0120 	mov.w	r1, #32
 8003f08:	f381 8811 	msr	BASEPRI, r1
 8003f0c:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003f0e:	4b35      	ldr	r3, [pc, #212]	; (8003fe4 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003f10:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8003f12:	2300      	movs	r3, #0
 8003f14:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8003f16:	6939      	ldr	r1, [r7, #16]
 8003f18:	69fb      	ldr	r3, [r7, #28]
 8003f1a:	1c5a      	adds	r2, r3, #1
 8003f1c:	4613      	mov	r3, r2
 8003f1e:	005b      	lsls	r3, r3, #1
 8003f20:	4413      	add	r3, r2
 8003f22:	00db      	lsls	r3, r3, #3
 8003f24:	440b      	add	r3, r1
 8003f26:	3304      	adds	r3, #4
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d008      	beq.n	8003f40 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8003f2e:	69fb      	ldr	r3, [r7, #28]
 8003f30:	3301      	adds	r3, #1
 8003f32:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	691b      	ldr	r3, [r3, #16]
 8003f38:	69fa      	ldr	r2, [r7, #28]
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	dbeb      	blt.n	8003f16 <SEGGER_RTT_AllocUpBuffer+0x36>
 8003f3e:	e000      	b.n	8003f42 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8003f40:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	691b      	ldr	r3, [r3, #16]
 8003f46:	69fa      	ldr	r2, [r7, #28]
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	da3f      	bge.n	8003fcc <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8003f4c:	6939      	ldr	r1, [r7, #16]
 8003f4e:	69fb      	ldr	r3, [r7, #28]
 8003f50:	1c5a      	adds	r2, r3, #1
 8003f52:	4613      	mov	r3, r2
 8003f54:	005b      	lsls	r3, r3, #1
 8003f56:	4413      	add	r3, r2
 8003f58:	00db      	lsls	r3, r3, #3
 8003f5a:	440b      	add	r3, r1
 8003f5c:	68fa      	ldr	r2, [r7, #12]
 8003f5e:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8003f60:	6939      	ldr	r1, [r7, #16]
 8003f62:	69fb      	ldr	r3, [r7, #28]
 8003f64:	1c5a      	adds	r2, r3, #1
 8003f66:	4613      	mov	r3, r2
 8003f68:	005b      	lsls	r3, r3, #1
 8003f6a:	4413      	add	r3, r2
 8003f6c:	00db      	lsls	r3, r3, #3
 8003f6e:	440b      	add	r3, r1
 8003f70:	3304      	adds	r3, #4
 8003f72:	68ba      	ldr	r2, [r7, #8]
 8003f74:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8003f76:	6939      	ldr	r1, [r7, #16]
 8003f78:	69fa      	ldr	r2, [r7, #28]
 8003f7a:	4613      	mov	r3, r2
 8003f7c:	005b      	lsls	r3, r3, #1
 8003f7e:	4413      	add	r3, r2
 8003f80:	00db      	lsls	r3, r3, #3
 8003f82:	440b      	add	r3, r1
 8003f84:	3320      	adds	r3, #32
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8003f8a:	6939      	ldr	r1, [r7, #16]
 8003f8c:	69fa      	ldr	r2, [r7, #28]
 8003f8e:	4613      	mov	r3, r2
 8003f90:	005b      	lsls	r3, r3, #1
 8003f92:	4413      	add	r3, r2
 8003f94:	00db      	lsls	r3, r3, #3
 8003f96:	440b      	add	r3, r1
 8003f98:	3328      	adds	r3, #40	; 0x28
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8003f9e:	6939      	ldr	r1, [r7, #16]
 8003fa0:	69fa      	ldr	r2, [r7, #28]
 8003fa2:	4613      	mov	r3, r2
 8003fa4:	005b      	lsls	r3, r3, #1
 8003fa6:	4413      	add	r3, r2
 8003fa8:	00db      	lsls	r3, r3, #3
 8003faa:	440b      	add	r3, r1
 8003fac:	3324      	adds	r3, #36	; 0x24
 8003fae:	2200      	movs	r2, #0
 8003fb0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8003fb2:	6939      	ldr	r1, [r7, #16]
 8003fb4:	69fa      	ldr	r2, [r7, #28]
 8003fb6:	4613      	mov	r3, r2
 8003fb8:	005b      	lsls	r3, r3, #1
 8003fba:	4413      	add	r3, r2
 8003fbc:	00db      	lsls	r3, r3, #3
 8003fbe:	440b      	add	r3, r1
 8003fc0:	332c      	adds	r3, #44	; 0x2c
 8003fc2:	683a      	ldr	r2, [r7, #0]
 8003fc4:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003fc6:	f3bf 8f5f 	dmb	sy
 8003fca:	e002      	b.n	8003fd2 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8003fcc:	f04f 33ff 	mov.w	r3, #4294967295
 8003fd0:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8003fd8:	69fb      	ldr	r3, [r7, #28]
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3720      	adds	r7, #32
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	bf00      	nop
 8003fe4:	20012ec0 	.word	0x20012ec0

08003fe8 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b088      	sub	sp, #32
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	60f8      	str	r0, [r7, #12]
 8003ff0:	60b9      	str	r1, [r7, #8]
 8003ff2:	607a      	str	r2, [r7, #4]
 8003ff4:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8003ff6:	4b33      	ldr	r3, [pc, #204]	; (80040c4 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8003ff8:	61bb      	str	r3, [r7, #24]
 8003ffa:	69bb      	ldr	r3, [r7, #24]
 8003ffc:	781b      	ldrb	r3, [r3, #0]
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	2b00      	cmp	r3, #0
 8004002:	d101      	bne.n	8004008 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8004004:	f7ff fcca 	bl	800399c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004008:	4b2e      	ldr	r3, [pc, #184]	; (80040c4 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 800400a:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	695b      	ldr	r3, [r3, #20]
 8004010:	461a      	mov	r2, r3
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	4293      	cmp	r3, r2
 8004016:	d24d      	bcs.n	80040b4 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8004018:	f3ef 8311 	mrs	r3, BASEPRI
 800401c:	f04f 0120 	mov.w	r1, #32
 8004020:	f381 8811 	msr	BASEPRI, r1
 8004024:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d031      	beq.n	8004090 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 800402c:	6979      	ldr	r1, [r7, #20]
 800402e:	68fa      	ldr	r2, [r7, #12]
 8004030:	4613      	mov	r3, r2
 8004032:	005b      	lsls	r3, r3, #1
 8004034:	4413      	add	r3, r2
 8004036:	00db      	lsls	r3, r3, #3
 8004038:	440b      	add	r3, r1
 800403a:	3360      	adds	r3, #96	; 0x60
 800403c:	68ba      	ldr	r2, [r7, #8]
 800403e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8004040:	6979      	ldr	r1, [r7, #20]
 8004042:	68fa      	ldr	r2, [r7, #12]
 8004044:	4613      	mov	r3, r2
 8004046:	005b      	lsls	r3, r3, #1
 8004048:	4413      	add	r3, r2
 800404a:	00db      	lsls	r3, r3, #3
 800404c:	440b      	add	r3, r1
 800404e:	3364      	adds	r3, #100	; 0x64
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8004054:	6979      	ldr	r1, [r7, #20]
 8004056:	68fa      	ldr	r2, [r7, #12]
 8004058:	4613      	mov	r3, r2
 800405a:	005b      	lsls	r3, r3, #1
 800405c:	4413      	add	r3, r2
 800405e:	00db      	lsls	r3, r3, #3
 8004060:	440b      	add	r3, r1
 8004062:	3368      	adds	r3, #104	; 0x68
 8004064:	683a      	ldr	r2, [r7, #0]
 8004066:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8004068:	6979      	ldr	r1, [r7, #20]
 800406a:	68fa      	ldr	r2, [r7, #12]
 800406c:	4613      	mov	r3, r2
 800406e:	005b      	lsls	r3, r3, #1
 8004070:	4413      	add	r3, r2
 8004072:	00db      	lsls	r3, r3, #3
 8004074:	440b      	add	r3, r1
 8004076:	3370      	adds	r3, #112	; 0x70
 8004078:	2200      	movs	r2, #0
 800407a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 800407c:	6979      	ldr	r1, [r7, #20]
 800407e:	68fa      	ldr	r2, [r7, #12]
 8004080:	4613      	mov	r3, r2
 8004082:	005b      	lsls	r3, r3, #1
 8004084:	4413      	add	r3, r2
 8004086:	00db      	lsls	r3, r3, #3
 8004088:	440b      	add	r3, r1
 800408a:	336c      	adds	r3, #108	; 0x6c
 800408c:	2200      	movs	r2, #0
 800408e:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8004090:	6979      	ldr	r1, [r7, #20]
 8004092:	68fa      	ldr	r2, [r7, #12]
 8004094:	4613      	mov	r3, r2
 8004096:	005b      	lsls	r3, r3, #1
 8004098:	4413      	add	r3, r2
 800409a:	00db      	lsls	r3, r3, #3
 800409c:	440b      	add	r3, r1
 800409e:	3374      	adds	r3, #116	; 0x74
 80040a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040a2:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80040a4:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80040ae:	2300      	movs	r3, #0
 80040b0:	61fb      	str	r3, [r7, #28]
 80040b2:	e002      	b.n	80040ba <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 80040b4:	f04f 33ff 	mov.w	r3, #4294967295
 80040b8:	61fb      	str	r3, [r7, #28]
  }
  return r;
 80040ba:	69fb      	ldr	r3, [r7, #28]
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3720      	adds	r7, #32
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}
 80040c4:	20012ec0 	.word	0x20012ec0

080040c8 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80040c8:	b480      	push	{r7}
 80040ca:	b087      	sub	sp, #28
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	60f8      	str	r0, [r7, #12]
 80040d0:	60b9      	str	r1, [r7, #8]
 80040d2:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 80040d4:	2300      	movs	r3, #0
 80040d6:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80040d8:	e002      	b.n	80040e0 <_EncodeStr+0x18>
    Len++;
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	3301      	adds	r3, #1
 80040de:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80040e0:	68ba      	ldr	r2, [r7, #8]
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	4413      	add	r3, r2
 80040e6:	781b      	ldrb	r3, [r3, #0]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d1f6      	bne.n	80040da <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 80040ec:	693a      	ldr	r2, [r7, #16]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d901      	bls.n	80040f8 <_EncodeStr+0x30>
    Len = Limit;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	2bfe      	cmp	r3, #254	; 0xfe
 80040fc:	d806      	bhi.n	800410c <_EncodeStr+0x44>
    *pPayload++ = Len; 
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	1c5a      	adds	r2, r3, #1
 8004102:	60fa      	str	r2, [r7, #12]
 8004104:	693a      	ldr	r2, [r7, #16]
 8004106:	b2d2      	uxtb	r2, r2
 8004108:	701a      	strb	r2, [r3, #0]
 800410a:	e011      	b.n	8004130 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	1c5a      	adds	r2, r3, #1
 8004110:	60fa      	str	r2, [r7, #12]
 8004112:	22ff      	movs	r2, #255	; 0xff
 8004114:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	1c5a      	adds	r2, r3, #1
 800411a:	60fa      	str	r2, [r7, #12]
 800411c:	693a      	ldr	r2, [r7, #16]
 800411e:	b2d2      	uxtb	r2, r2
 8004120:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	0a19      	lsrs	r1, r3, #8
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	1c5a      	adds	r2, r3, #1
 800412a:	60fa      	str	r2, [r7, #12]
 800412c:	b2ca      	uxtb	r2, r1
 800412e:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8004130:	2300      	movs	r3, #0
 8004132:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8004134:	e00a      	b.n	800414c <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8004136:	68ba      	ldr	r2, [r7, #8]
 8004138:	1c53      	adds	r3, r2, #1
 800413a:	60bb      	str	r3, [r7, #8]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	1c59      	adds	r1, r3, #1
 8004140:	60f9      	str	r1, [r7, #12]
 8004142:	7812      	ldrb	r2, [r2, #0]
 8004144:	701a      	strb	r2, [r3, #0]
    n++;
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	3301      	adds	r3, #1
 800414a:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800414c:	697a      	ldr	r2, [r7, #20]
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	429a      	cmp	r2, r3
 8004152:	d3f0      	bcc.n	8004136 <_EncodeStr+0x6e>
  }
  return pPayload;
 8004154:	68fb      	ldr	r3, [r7, #12]
}
 8004156:	4618      	mov	r0, r3
 8004158:	371c      	adds	r7, #28
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr

08004162 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8004162:	b480      	push	{r7}
 8004164:	b083      	sub	sp, #12
 8004166:	af00      	add	r7, sp, #0
 8004168:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	3304      	adds	r3, #4
}
 800416e:	4618      	mov	r0, r3
 8004170:	370c      	adds	r7, #12
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr
	...

0800417c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800417c:	b580      	push	{r7, lr}
 800417e:	b082      	sub	sp, #8
 8004180:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004182:	4b36      	ldr	r3, [pc, #216]	; (800425c <_HandleIncomingPacket+0xe0>)
 8004184:	7e1b      	ldrb	r3, [r3, #24]
 8004186:	4618      	mov	r0, r3
 8004188:	1cfb      	adds	r3, r7, #3
 800418a:	2201      	movs	r2, #1
 800418c:	4619      	mov	r1, r3
 800418e:	f7ff fdab 	bl	8003ce8 <SEGGER_RTT_ReadNoLock>
 8004192:	4603      	mov	r3, r0
 8004194:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2b00      	cmp	r3, #0
 800419a:	dd54      	ble.n	8004246 <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 800419c:	78fb      	ldrb	r3, [r7, #3]
 800419e:	2b80      	cmp	r3, #128	; 0x80
 80041a0:	d032      	beq.n	8004208 <_HandleIncomingPacket+0x8c>
 80041a2:	2b80      	cmp	r3, #128	; 0x80
 80041a4:	dc42      	bgt.n	800422c <_HandleIncomingPacket+0xb0>
 80041a6:	2b07      	cmp	r3, #7
 80041a8:	dc16      	bgt.n	80041d8 <_HandleIncomingPacket+0x5c>
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	dd3e      	ble.n	800422c <_HandleIncomingPacket+0xb0>
 80041ae:	3b01      	subs	r3, #1
 80041b0:	2b06      	cmp	r3, #6
 80041b2:	d83b      	bhi.n	800422c <_HandleIncomingPacket+0xb0>
 80041b4:	a201      	add	r2, pc, #4	; (adr r2, 80041bc <_HandleIncomingPacket+0x40>)
 80041b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ba:	bf00      	nop
 80041bc:	080041df 	.word	0x080041df
 80041c0:	080041e5 	.word	0x080041e5
 80041c4:	080041eb 	.word	0x080041eb
 80041c8:	080041f1 	.word	0x080041f1
 80041cc:	080041f7 	.word	0x080041f7
 80041d0:	080041fd 	.word	0x080041fd
 80041d4:	08004203 	.word	0x08004203
 80041d8:	2b7f      	cmp	r3, #127	; 0x7f
 80041da:	d036      	beq.n	800424a <_HandleIncomingPacket+0xce>
 80041dc:	e026      	b.n	800422c <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80041de:	f000 fe3d 	bl	8004e5c <SEGGER_SYSVIEW_Start>
      break;
 80041e2:	e037      	b.n	8004254 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80041e4:	f000 fef6 	bl	8004fd4 <SEGGER_SYSVIEW_Stop>
      break;
 80041e8:	e034      	b.n	8004254 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80041ea:	f001 f8cf 	bl	800538c <SEGGER_SYSVIEW_RecordSystime>
      break;
 80041ee:	e031      	b.n	8004254 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80041f0:	f001 f894 	bl	800531c <SEGGER_SYSVIEW_SendTaskList>
      break;
 80041f4:	e02e      	b.n	8004254 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80041f6:	f000 ff13 	bl	8005020 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80041fa:	e02b      	b.n	8004254 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80041fc:	f001 faf2 	bl	80057e4 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8004200:	e028      	b.n	8004254 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8004202:	f001 fad1 	bl	80057a8 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8004206:	e025      	b.n	8004254 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004208:	4b14      	ldr	r3, [pc, #80]	; (800425c <_HandleIncomingPacket+0xe0>)
 800420a:	7e1b      	ldrb	r3, [r3, #24]
 800420c:	4618      	mov	r0, r3
 800420e:	1cfb      	adds	r3, r7, #3
 8004210:	2201      	movs	r2, #1
 8004212:	4619      	mov	r1, r3
 8004214:	f7ff fd68 	bl	8003ce8 <SEGGER_RTT_ReadNoLock>
 8004218:	4603      	mov	r3, r0
 800421a:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2b00      	cmp	r3, #0
 8004220:	dd15      	ble.n	800424e <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8004222:	78fb      	ldrb	r3, [r7, #3]
 8004224:	4618      	mov	r0, r3
 8004226:	f001 fa3f 	bl	80056a8 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800422a:	e010      	b.n	800424e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800422c:	78fb      	ldrb	r3, [r7, #3]
 800422e:	b25b      	sxtb	r3, r3
 8004230:	2b00      	cmp	r3, #0
 8004232:	da0e      	bge.n	8004252 <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004234:	4b09      	ldr	r3, [pc, #36]	; (800425c <_HandleIncomingPacket+0xe0>)
 8004236:	7e1b      	ldrb	r3, [r3, #24]
 8004238:	4618      	mov	r0, r3
 800423a:	1cfb      	adds	r3, r7, #3
 800423c:	2201      	movs	r2, #1
 800423e:	4619      	mov	r1, r3
 8004240:	f7ff fd52 	bl	8003ce8 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8004244:	e005      	b.n	8004252 <_HandleIncomingPacket+0xd6>
    }
  }
 8004246:	bf00      	nop
 8004248:	e004      	b.n	8004254 <_HandleIncomingPacket+0xd8>
      break;
 800424a:	bf00      	nop
 800424c:	e002      	b.n	8004254 <_HandleIncomingPacket+0xd8>
      break;
 800424e:	bf00      	nop
 8004250:	e000      	b.n	8004254 <_HandleIncomingPacket+0xd8>
      break;
 8004252:	bf00      	nop
}
 8004254:	bf00      	nop
 8004256:	3708      	adds	r7, #8
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}
 800425c:	20014380 	.word	0x20014380

08004260 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8004260:	b580      	push	{r7, lr}
 8004262:	b08c      	sub	sp, #48	; 0x30
 8004264:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8004266:	2301      	movs	r3, #1
 8004268:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800426a:	1d3b      	adds	r3, r7, #4
 800426c:	3301      	adds	r3, #1
 800426e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004274:	4b32      	ldr	r3, [pc, #200]	; (8004340 <_TrySendOverflowPacket+0xe0>)
 8004276:	695b      	ldr	r3, [r3, #20]
 8004278:	62bb      	str	r3, [r7, #40]	; 0x28
 800427a:	e00b      	b.n	8004294 <_TrySendOverflowPacket+0x34>
 800427c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800427e:	b2da      	uxtb	r2, r3
 8004280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004282:	1c59      	adds	r1, r3, #1
 8004284:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004286:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800428a:	b2d2      	uxtb	r2, r2
 800428c:	701a      	strb	r2, [r3, #0]
 800428e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004290:	09db      	lsrs	r3, r3, #7
 8004292:	62bb      	str	r3, [r7, #40]	; 0x28
 8004294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004296:	2b7f      	cmp	r3, #127	; 0x7f
 8004298:	d8f0      	bhi.n	800427c <_TrySendOverflowPacket+0x1c>
 800429a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800429c:	1c5a      	adds	r2, r3, #1
 800429e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80042a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042a2:	b2d2      	uxtb	r2, r2
 80042a4:	701a      	strb	r2, [r3, #0]
 80042a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042a8:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80042aa:	4b26      	ldr	r3, [pc, #152]	; (8004344 <_TrySendOverflowPacket+0xe4>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80042b0:	4b23      	ldr	r3, [pc, #140]	; (8004340 <_TrySendOverflowPacket+0xe0>)
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	69ba      	ldr	r2, [r7, #24]
 80042b6:	1ad3      	subs	r3, r2, r3
 80042b8:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80042ba:	69fb      	ldr	r3, [r7, #28]
 80042bc:	627b      	str	r3, [r7, #36]	; 0x24
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	623b      	str	r3, [r7, #32]
 80042c2:	e00b      	b.n	80042dc <_TrySendOverflowPacket+0x7c>
 80042c4:	6a3b      	ldr	r3, [r7, #32]
 80042c6:	b2da      	uxtb	r2, r3
 80042c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ca:	1c59      	adds	r1, r3, #1
 80042cc:	6279      	str	r1, [r7, #36]	; 0x24
 80042ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80042d2:	b2d2      	uxtb	r2, r2
 80042d4:	701a      	strb	r2, [r3, #0]
 80042d6:	6a3b      	ldr	r3, [r7, #32]
 80042d8:	09db      	lsrs	r3, r3, #7
 80042da:	623b      	str	r3, [r7, #32]
 80042dc:	6a3b      	ldr	r3, [r7, #32]
 80042de:	2b7f      	cmp	r3, #127	; 0x7f
 80042e0:	d8f0      	bhi.n	80042c4 <_TrySendOverflowPacket+0x64>
 80042e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e4:	1c5a      	adds	r2, r3, #1
 80042e6:	627a      	str	r2, [r7, #36]	; 0x24
 80042e8:	6a3a      	ldr	r2, [r7, #32]
 80042ea:	b2d2      	uxtb	r2, r2
 80042ec:	701a      	strb	r2, [r3, #0]
 80042ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f0:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 80042f2:	4b13      	ldr	r3, [pc, #76]	; (8004340 <_TrySendOverflowPacket+0xe0>)
 80042f4:	785b      	ldrb	r3, [r3, #1]
 80042f6:	4618      	mov	r0, r3
 80042f8:	1d3b      	adds	r3, r7, #4
 80042fa:	69fa      	ldr	r2, [r7, #28]
 80042fc:	1ad3      	subs	r3, r2, r3
 80042fe:	461a      	mov	r2, r3
 8004300:	1d3b      	adds	r3, r7, #4
 8004302:	4619      	mov	r1, r3
 8004304:	f7fb ff64 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004308:	4603      	mov	r3, r0
 800430a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 800430c:	f7ff fabc 	bl	8003888 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d009      	beq.n	800432a <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004316:	4a0a      	ldr	r2, [pc, #40]	; (8004340 <_TrySendOverflowPacket+0xe0>)
 8004318:	69bb      	ldr	r3, [r7, #24]
 800431a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800431c:	4b08      	ldr	r3, [pc, #32]	; (8004340 <_TrySendOverflowPacket+0xe0>)
 800431e:	781b      	ldrb	r3, [r3, #0]
 8004320:	3b01      	subs	r3, #1
 8004322:	b2da      	uxtb	r2, r3
 8004324:	4b06      	ldr	r3, [pc, #24]	; (8004340 <_TrySendOverflowPacket+0xe0>)
 8004326:	701a      	strb	r2, [r3, #0]
 8004328:	e004      	b.n	8004334 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800432a:	4b05      	ldr	r3, [pc, #20]	; (8004340 <_TrySendOverflowPacket+0xe0>)
 800432c:	695b      	ldr	r3, [r3, #20]
 800432e:	3301      	adds	r3, #1
 8004330:	4a03      	ldr	r2, [pc, #12]	; (8004340 <_TrySendOverflowPacket+0xe0>)
 8004332:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8004334:	693b      	ldr	r3, [r7, #16]
}
 8004336:	4618      	mov	r0, r3
 8004338:	3730      	adds	r7, #48	; 0x30
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	20014380 	.word	0x20014380
 8004344:	e0001004 	.word	0xe0001004

08004348 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004348:	b580      	push	{r7, lr}
 800434a:	b08a      	sub	sp, #40	; 0x28
 800434c:	af00      	add	r7, sp, #0
 800434e:	60f8      	str	r0, [r7, #12]
 8004350:	60b9      	str	r1, [r7, #8]
 8004352:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8004354:	4b6d      	ldr	r3, [pc, #436]	; (800450c <_SendPacket+0x1c4>)
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	2b01      	cmp	r3, #1
 800435a:	d010      	beq.n	800437e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800435c:	4b6b      	ldr	r3, [pc, #428]	; (800450c <_SendPacket+0x1c4>)
 800435e:	781b      	ldrb	r3, [r3, #0]
 8004360:	2b00      	cmp	r3, #0
 8004362:	f000 80a5 	beq.w	80044b0 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8004366:	4b69      	ldr	r3, [pc, #420]	; (800450c <_SendPacket+0x1c4>)
 8004368:	781b      	ldrb	r3, [r3, #0]
 800436a:	2b02      	cmp	r3, #2
 800436c:	d109      	bne.n	8004382 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800436e:	f7ff ff77 	bl	8004260 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8004372:	4b66      	ldr	r3, [pc, #408]	; (800450c <_SendPacket+0x1c4>)
 8004374:	781b      	ldrb	r3, [r3, #0]
 8004376:	2b01      	cmp	r3, #1
 8004378:	f040 809c 	bne.w	80044b4 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 800437c:	e001      	b.n	8004382 <_SendPacket+0x3a>
    goto Send;
 800437e:	bf00      	nop
 8004380:	e000      	b.n	8004384 <_SendPacket+0x3c>
Send:
 8004382:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2b1f      	cmp	r3, #31
 8004388:	d809      	bhi.n	800439e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800438a:	4b60      	ldr	r3, [pc, #384]	; (800450c <_SendPacket+0x1c4>)
 800438c:	69da      	ldr	r2, [r3, #28]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	fa22 f303 	lsr.w	r3, r2, r3
 8004394:	f003 0301 	and.w	r3, r3, #1
 8004398:	2b00      	cmp	r3, #0
 800439a:	f040 808d 	bne.w	80044b8 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2b17      	cmp	r3, #23
 80043a2:	d807      	bhi.n	80043b4 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	3b01      	subs	r3, #1
 80043a8:	60fb      	str	r3, [r7, #12]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	b2da      	uxtb	r2, r3
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	701a      	strb	r2, [r3, #0]
 80043b2:	e03d      	b.n	8004430 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 80043b4:	68ba      	ldr	r2, [r7, #8]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 80043bc:	69fb      	ldr	r3, [r7, #28]
 80043be:	2b7f      	cmp	r3, #127	; 0x7f
 80043c0:	d912      	bls.n	80043e8 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 80043c2:	69fb      	ldr	r3, [r7, #28]
 80043c4:	09da      	lsrs	r2, r3, #7
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	3b01      	subs	r3, #1
 80043ca:	60fb      	str	r3, [r7, #12]
 80043cc:	b2d2      	uxtb	r2, r2
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 80043d2:	69fb      	ldr	r3, [r7, #28]
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	68fa      	ldr	r2, [r7, #12]
 80043d8:	3a01      	subs	r2, #1
 80043da:	60fa      	str	r2, [r7, #12]
 80043dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80043e0:	b2da      	uxtb	r2, r3
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	701a      	strb	r2, [r3, #0]
 80043e6:	e006      	b.n	80043f6 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	3b01      	subs	r3, #1
 80043ec:	60fb      	str	r3, [r7, #12]
 80043ee:	69fb      	ldr	r3, [r7, #28]
 80043f0:	b2da      	uxtb	r2, r3
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2b7f      	cmp	r3, #127	; 0x7f
 80043fa:	d912      	bls.n	8004422 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	09da      	lsrs	r2, r3, #7
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	3b01      	subs	r3, #1
 8004404:	60fb      	str	r3, [r7, #12]
 8004406:	b2d2      	uxtb	r2, r2
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	b2db      	uxtb	r3, r3
 8004410:	68fa      	ldr	r2, [r7, #12]
 8004412:	3a01      	subs	r2, #1
 8004414:	60fa      	str	r2, [r7, #12]
 8004416:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800441a:	b2da      	uxtb	r2, r3
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	701a      	strb	r2, [r3, #0]
 8004420:	e006      	b.n	8004430 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	3b01      	subs	r3, #1
 8004426:	60fb      	str	r3, [r7, #12]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	b2da      	uxtb	r2, r3
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004430:	4b37      	ldr	r3, [pc, #220]	; (8004510 <_SendPacket+0x1c8>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004436:	4b35      	ldr	r3, [pc, #212]	; (800450c <_SendPacket+0x1c4>)
 8004438:	68db      	ldr	r3, [r3, #12]
 800443a:	69ba      	ldr	r2, [r7, #24]
 800443c:	1ad3      	subs	r3, r2, r3
 800443e:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	627b      	str	r3, [r7, #36]	; 0x24
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	623b      	str	r3, [r7, #32]
 8004448:	e00b      	b.n	8004462 <_SendPacket+0x11a>
 800444a:	6a3b      	ldr	r3, [r7, #32]
 800444c:	b2da      	uxtb	r2, r3
 800444e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004450:	1c59      	adds	r1, r3, #1
 8004452:	6279      	str	r1, [r7, #36]	; 0x24
 8004454:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004458:	b2d2      	uxtb	r2, r2
 800445a:	701a      	strb	r2, [r3, #0]
 800445c:	6a3b      	ldr	r3, [r7, #32]
 800445e:	09db      	lsrs	r3, r3, #7
 8004460:	623b      	str	r3, [r7, #32]
 8004462:	6a3b      	ldr	r3, [r7, #32]
 8004464:	2b7f      	cmp	r3, #127	; 0x7f
 8004466:	d8f0      	bhi.n	800444a <_SendPacket+0x102>
 8004468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800446a:	1c5a      	adds	r2, r3, #1
 800446c:	627a      	str	r2, [r7, #36]	; 0x24
 800446e:	6a3a      	ldr	r2, [r7, #32]
 8004470:	b2d2      	uxtb	r2, r2
 8004472:	701a      	strb	r2, [r3, #0]
 8004474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004476:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8004478:	4b24      	ldr	r3, [pc, #144]	; (800450c <_SendPacket+0x1c4>)
 800447a:	785b      	ldrb	r3, [r3, #1]
 800447c:	4618      	mov	r0, r3
 800447e:	68ba      	ldr	r2, [r7, #8]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	1ad3      	subs	r3, r2, r3
 8004484:	461a      	mov	r2, r3
 8004486:	68f9      	ldr	r1, [r7, #12]
 8004488:	f7fb fea2 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800448c:	4603      	mov	r3, r0
 800448e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8004490:	f7ff f9fa 	bl	8003888 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d003      	beq.n	80044a2 <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800449a:	4a1c      	ldr	r2, [pc, #112]	; (800450c <_SendPacket+0x1c4>)
 800449c:	69bb      	ldr	r3, [r7, #24]
 800449e:	60d3      	str	r3, [r2, #12]
 80044a0:	e00b      	b.n	80044ba <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80044a2:	4b1a      	ldr	r3, [pc, #104]	; (800450c <_SendPacket+0x1c4>)
 80044a4:	781b      	ldrb	r3, [r3, #0]
 80044a6:	3301      	adds	r3, #1
 80044a8:	b2da      	uxtb	r2, r3
 80044aa:	4b18      	ldr	r3, [pc, #96]	; (800450c <_SendPacket+0x1c4>)
 80044ac:	701a      	strb	r2, [r3, #0]
 80044ae:	e004      	b.n	80044ba <_SendPacket+0x172>
    goto SendDone;
 80044b0:	bf00      	nop
 80044b2:	e002      	b.n	80044ba <_SendPacket+0x172>
      goto SendDone;
 80044b4:	bf00      	nop
 80044b6:	e000      	b.n	80044ba <_SendPacket+0x172>
      goto SendDone;
 80044b8:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80044ba:	4b14      	ldr	r3, [pc, #80]	; (800450c <_SendPacket+0x1c4>)
 80044bc:	7e1b      	ldrb	r3, [r3, #24]
 80044be:	4619      	mov	r1, r3
 80044c0:	4a14      	ldr	r2, [pc, #80]	; (8004514 <_SendPacket+0x1cc>)
 80044c2:	460b      	mov	r3, r1
 80044c4:	005b      	lsls	r3, r3, #1
 80044c6:	440b      	add	r3, r1
 80044c8:	00db      	lsls	r3, r3, #3
 80044ca:	4413      	add	r3, r2
 80044cc:	336c      	adds	r3, #108	; 0x6c
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	4b0e      	ldr	r3, [pc, #56]	; (800450c <_SendPacket+0x1c4>)
 80044d2:	7e1b      	ldrb	r3, [r3, #24]
 80044d4:	4618      	mov	r0, r3
 80044d6:	490f      	ldr	r1, [pc, #60]	; (8004514 <_SendPacket+0x1cc>)
 80044d8:	4603      	mov	r3, r0
 80044da:	005b      	lsls	r3, r3, #1
 80044dc:	4403      	add	r3, r0
 80044de:	00db      	lsls	r3, r3, #3
 80044e0:	440b      	add	r3, r1
 80044e2:	3370      	adds	r3, #112	; 0x70
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d00b      	beq.n	8004502 <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80044ea:	4b08      	ldr	r3, [pc, #32]	; (800450c <_SendPacket+0x1c4>)
 80044ec:	789b      	ldrb	r3, [r3, #2]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d107      	bne.n	8004502 <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80044f2:	4b06      	ldr	r3, [pc, #24]	; (800450c <_SendPacket+0x1c4>)
 80044f4:	2201      	movs	r2, #1
 80044f6:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80044f8:	f7ff fe40 	bl	800417c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80044fc:	4b03      	ldr	r3, [pc, #12]	; (800450c <_SendPacket+0x1c4>)
 80044fe:	2200      	movs	r2, #0
 8004500:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8004502:	bf00      	nop
 8004504:	3728      	adds	r7, #40	; 0x28
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}
 800450a:	bf00      	nop
 800450c:	20014380 	.word	0x20014380
 8004510:	e0001004 	.word	0xe0001004
 8004514:	20012ec0 	.word	0x20012ec0

08004518 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8004518:	b580      	push	{r7, lr}
 800451a:	b08a      	sub	sp, #40	; 0x28
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	460b      	mov	r3, r1
 8004522:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	691b      	ldr	r3, [r3, #16]
 8004528:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	3301      	adds	r3, #1
 800452e:	2b80      	cmp	r3, #128	; 0x80
 8004530:	d80a      	bhi.n	8004548 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	1c59      	adds	r1, r3, #1
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	6051      	str	r1, [r2, #4]
 800453c:	78fa      	ldrb	r2, [r7, #3]
 800453e:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	1c5a      	adds	r2, r3, #1
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	691b      	ldr	r3, [r3, #16]
 800454c:	2b80      	cmp	r3, #128	; 0x80
 800454e:	d15a      	bne.n	8004606 <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	691a      	ldr	r2, [r3, #16]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	b2d2      	uxtb	r2, r2
 800455a:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	68db      	ldr	r3, [r3, #12]
 8004566:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	627b      	str	r3, [r7, #36]	; 0x24
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	623b      	str	r3, [r7, #32]
 8004570:	e00b      	b.n	800458a <_StoreChar+0x72>
 8004572:	6a3b      	ldr	r3, [r7, #32]
 8004574:	b2da      	uxtb	r2, r3
 8004576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004578:	1c59      	adds	r1, r3, #1
 800457a:	6279      	str	r1, [r7, #36]	; 0x24
 800457c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004580:	b2d2      	uxtb	r2, r2
 8004582:	701a      	strb	r2, [r3, #0]
 8004584:	6a3b      	ldr	r3, [r7, #32]
 8004586:	09db      	lsrs	r3, r3, #7
 8004588:	623b      	str	r3, [r7, #32]
 800458a:	6a3b      	ldr	r3, [r7, #32]
 800458c:	2b7f      	cmp	r3, #127	; 0x7f
 800458e:	d8f0      	bhi.n	8004572 <_StoreChar+0x5a>
 8004590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004592:	1c5a      	adds	r2, r3, #1
 8004594:	627a      	str	r2, [r7, #36]	; 0x24
 8004596:	6a3a      	ldr	r2, [r7, #32]
 8004598:	b2d2      	uxtb	r2, r2
 800459a:	701a      	strb	r2, [r3, #0]
 800459c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800459e:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	61fb      	str	r3, [r7, #28]
 80045a4:	2300      	movs	r3, #0
 80045a6:	61bb      	str	r3, [r7, #24]
 80045a8:	e00b      	b.n	80045c2 <_StoreChar+0xaa>
 80045aa:	69bb      	ldr	r3, [r7, #24]
 80045ac:	b2da      	uxtb	r2, r3
 80045ae:	69fb      	ldr	r3, [r7, #28]
 80045b0:	1c59      	adds	r1, r3, #1
 80045b2:	61f9      	str	r1, [r7, #28]
 80045b4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80045b8:	b2d2      	uxtb	r2, r2
 80045ba:	701a      	strb	r2, [r3, #0]
 80045bc:	69bb      	ldr	r3, [r7, #24]
 80045be:	09db      	lsrs	r3, r3, #7
 80045c0:	61bb      	str	r3, [r7, #24]
 80045c2:	69bb      	ldr	r3, [r7, #24]
 80045c4:	2b7f      	cmp	r3, #127	; 0x7f
 80045c6:	d8f0      	bhi.n	80045aa <_StoreChar+0x92>
 80045c8:	69fb      	ldr	r3, [r7, #28]
 80045ca:	1c5a      	adds	r2, r3, #1
 80045cc:	61fa      	str	r2, [r7, #28]
 80045ce:	69ba      	ldr	r2, [r7, #24]
 80045d0:	b2d2      	uxtb	r2, r2
 80045d2:	701a      	strb	r2, [r3, #0]
 80045d4:	69fb      	ldr	r3, [r7, #28]
 80045d6:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	221a      	movs	r2, #26
 80045de:	6939      	ldr	r1, [r7, #16]
 80045e0:	4618      	mov	r0, r3
 80045e2:	f7ff feb1 	bl	8004348 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4618      	mov	r0, r3
 80045ec:	f7ff fdb9 	bl	8004162 <_PreparePacket>
 80045f0:	4602      	mov	r2, r0
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	1c5a      	adds	r2, r3, #1
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2200      	movs	r2, #0
 8004604:	611a      	str	r2, [r3, #16]
  }
}
 8004606:	bf00      	nop
 8004608:	3728      	adds	r7, #40	; 0x28
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}
	...

08004610 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8004610:	b580      	push	{r7, lr}
 8004612:	b08a      	sub	sp, #40	; 0x28
 8004614:	af00      	add	r7, sp, #0
 8004616:	60f8      	str	r0, [r7, #12]
 8004618:	60b9      	str	r1, [r7, #8]
 800461a:	607a      	str	r2, [r7, #4]
 800461c:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8004622:	2301      	movs	r3, #1
 8004624:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8004626:	2301      	movs	r3, #1
 8004628:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 800462a:	e007      	b.n	800463c <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 800462c:	6a3a      	ldr	r2, [r7, #32]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	fbb2 f3f3 	udiv	r3, r2, r3
 8004634:	623b      	str	r3, [r7, #32]
    Width++;
 8004636:	69fb      	ldr	r3, [r7, #28]
 8004638:	3301      	adds	r3, #1
 800463a:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 800463c:	6a3a      	ldr	r2, [r7, #32]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	429a      	cmp	r2, r3
 8004642:	d2f3      	bcs.n	800462c <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8004644:	683a      	ldr	r2, [r7, #0]
 8004646:	69fb      	ldr	r3, [r7, #28]
 8004648:	429a      	cmp	r2, r3
 800464a:	d901      	bls.n	8004650 <_PrintUnsigned+0x40>
    Width = NumDigits;
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8004650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004652:	f003 0301 	and.w	r3, r3, #1
 8004656:	2b00      	cmp	r3, #0
 8004658:	d11f      	bne.n	800469a <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 800465a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800465c:	2b00      	cmp	r3, #0
 800465e:	d01c      	beq.n	800469a <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8004660:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004662:	f003 0302 	and.w	r3, r3, #2
 8004666:	2b00      	cmp	r3, #0
 8004668:	d005      	beq.n	8004676 <_PrintUnsigned+0x66>
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d102      	bne.n	8004676 <_PrintUnsigned+0x66>
        c = '0';
 8004670:	2330      	movs	r3, #48	; 0x30
 8004672:	76fb      	strb	r3, [r7, #27]
 8004674:	e001      	b.n	800467a <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8004676:	2320      	movs	r3, #32
 8004678:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800467a:	e007      	b.n	800468c <_PrintUnsigned+0x7c>
        FieldWidth--;
 800467c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800467e:	3b01      	subs	r3, #1
 8004680:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8004682:	7efb      	ldrb	r3, [r7, #27]
 8004684:	4619      	mov	r1, r3
 8004686:	68f8      	ldr	r0, [r7, #12]
 8004688:	f7ff ff46 	bl	8004518 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800468c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800468e:	2b00      	cmp	r3, #0
 8004690:	d003      	beq.n	800469a <_PrintUnsigned+0x8a>
 8004692:	69fa      	ldr	r2, [r7, #28]
 8004694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004696:	429a      	cmp	r2, r3
 8004698:	d3f0      	bcc.n	800467c <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	2b01      	cmp	r3, #1
 800469e:	d903      	bls.n	80046a8 <_PrintUnsigned+0x98>
      NumDigits--;
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	3b01      	subs	r3, #1
 80046a4:	603b      	str	r3, [r7, #0]
 80046a6:	e009      	b.n	80046bc <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 80046a8:	68ba      	ldr	r2, [r7, #8]
 80046aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80046b0:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 80046b2:	697a      	ldr	r2, [r7, #20]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d200      	bcs.n	80046bc <_PrintUnsigned+0xac>
        break;
 80046ba:	e005      	b.n	80046c8 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 80046bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046be:	687a      	ldr	r2, [r7, #4]
 80046c0:	fb02 f303 	mul.w	r3, r2, r3
 80046c4:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80046c6:	e7e8      	b.n	800469a <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 80046c8:	68ba      	ldr	r2, [r7, #8]
 80046ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80046d0:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046d6:	fb02 f303 	mul.w	r3, r2, r3
 80046da:	68ba      	ldr	r2, [r7, #8]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 80046e0:	4a15      	ldr	r2, [pc, #84]	; (8004738 <_PrintUnsigned+0x128>)
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	4413      	add	r3, r2
 80046e6:	781b      	ldrb	r3, [r3, #0]
 80046e8:	4619      	mov	r1, r3
 80046ea:	68f8      	ldr	r0, [r7, #12]
 80046ec:	f7ff ff14 	bl	8004518 <_StoreChar>
    Digit /= Base;
 80046f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80046f8:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 80046fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d1e3      	bne.n	80046c8 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8004700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004702:	f003 0301 	and.w	r3, r3, #1
 8004706:	2b00      	cmp	r3, #0
 8004708:	d011      	beq.n	800472e <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 800470a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800470c:	2b00      	cmp	r3, #0
 800470e:	d00e      	beq.n	800472e <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004710:	e006      	b.n	8004720 <_PrintUnsigned+0x110>
        FieldWidth--;
 8004712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004714:	3b01      	subs	r3, #1
 8004716:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8004718:	2120      	movs	r1, #32
 800471a:	68f8      	ldr	r0, [r7, #12]
 800471c:	f7ff fefc 	bl	8004518 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004722:	2b00      	cmp	r3, #0
 8004724:	d003      	beq.n	800472e <_PrintUnsigned+0x11e>
 8004726:	69fa      	ldr	r2, [r7, #28]
 8004728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800472a:	429a      	cmp	r2, r3
 800472c:	d3f1      	bcc.n	8004712 <_PrintUnsigned+0x102>
      }
    }
  }
}
 800472e:	bf00      	nop
 8004730:	3728      	adds	r7, #40	; 0x28
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}
 8004736:	bf00      	nop
 8004738:	08006494 	.word	0x08006494

0800473c <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 800473c:	b580      	push	{r7, lr}
 800473e:	b088      	sub	sp, #32
 8004740:	af02      	add	r7, sp, #8
 8004742:	60f8      	str	r0, [r7, #12]
 8004744:	60b9      	str	r1, [r7, #8]
 8004746:	607a      	str	r2, [r7, #4]
 8004748:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	2b00      	cmp	r3, #0
 800474e:	bfb8      	it	lt
 8004750:	425b      	neglt	r3, r3
 8004752:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8004754:	2301      	movs	r3, #1
 8004756:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8004758:	e007      	b.n	800476a <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	693a      	ldr	r2, [r7, #16]
 800475e:	fb92 f3f3 	sdiv	r3, r2, r3
 8004762:	613b      	str	r3, [r7, #16]
    Width++;
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	3301      	adds	r3, #1
 8004768:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	693a      	ldr	r2, [r7, #16]
 800476e:	429a      	cmp	r2, r3
 8004770:	daf3      	bge.n	800475a <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8004772:	683a      	ldr	r2, [r7, #0]
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	429a      	cmp	r2, r3
 8004778:	d901      	bls.n	800477e <_PrintInt+0x42>
    Width = NumDigits;
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 800477e:	6a3b      	ldr	r3, [r7, #32]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d00a      	beq.n	800479a <_PrintInt+0x5e>
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	2b00      	cmp	r3, #0
 8004788:	db04      	blt.n	8004794 <_PrintInt+0x58>
 800478a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478c:	f003 0304 	and.w	r3, r3, #4
 8004790:	2b00      	cmp	r3, #0
 8004792:	d002      	beq.n	800479a <_PrintInt+0x5e>
    FieldWidth--;
 8004794:	6a3b      	ldr	r3, [r7, #32]
 8004796:	3b01      	subs	r3, #1
 8004798:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 800479a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479c:	f003 0302 	and.w	r3, r3, #2
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d002      	beq.n	80047aa <_PrintInt+0x6e>
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d016      	beq.n	80047d8 <_PrintInt+0x9c>
 80047aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ac:	f003 0301 	and.w	r3, r3, #1
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d111      	bne.n	80047d8 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 80047b4:	6a3b      	ldr	r3, [r7, #32]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d00e      	beq.n	80047d8 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80047ba:	e006      	b.n	80047ca <_PrintInt+0x8e>
        FieldWidth--;
 80047bc:	6a3b      	ldr	r3, [r7, #32]
 80047be:	3b01      	subs	r3, #1
 80047c0:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 80047c2:	2120      	movs	r1, #32
 80047c4:	68f8      	ldr	r0, [r7, #12]
 80047c6:	f7ff fea7 	bl	8004518 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80047ca:	6a3b      	ldr	r3, [r7, #32]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d003      	beq.n	80047d8 <_PrintInt+0x9c>
 80047d0:	697a      	ldr	r2, [r7, #20]
 80047d2:	6a3b      	ldr	r3, [r7, #32]
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d3f1      	bcc.n	80047bc <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	da07      	bge.n	80047ee <_PrintInt+0xb2>
    v = -v;
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	425b      	negs	r3, r3
 80047e2:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 80047e4:	212d      	movs	r1, #45	; 0x2d
 80047e6:	68f8      	ldr	r0, [r7, #12]
 80047e8:	f7ff fe96 	bl	8004518 <_StoreChar>
 80047ec:	e008      	b.n	8004800 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 80047ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f0:	f003 0304 	and.w	r3, r3, #4
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d003      	beq.n	8004800 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 80047f8:	212b      	movs	r1, #43	; 0x2b
 80047fa:	68f8      	ldr	r0, [r7, #12]
 80047fc:	f7ff fe8c 	bl	8004518 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8004800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004802:	f003 0302 	and.w	r3, r3, #2
 8004806:	2b00      	cmp	r3, #0
 8004808:	d019      	beq.n	800483e <_PrintInt+0x102>
 800480a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800480c:	f003 0301 	and.w	r3, r3, #1
 8004810:	2b00      	cmp	r3, #0
 8004812:	d114      	bne.n	800483e <_PrintInt+0x102>
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d111      	bne.n	800483e <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 800481a:	6a3b      	ldr	r3, [r7, #32]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d00e      	beq.n	800483e <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004820:	e006      	b.n	8004830 <_PrintInt+0xf4>
        FieldWidth--;
 8004822:	6a3b      	ldr	r3, [r7, #32]
 8004824:	3b01      	subs	r3, #1
 8004826:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8004828:	2130      	movs	r1, #48	; 0x30
 800482a:	68f8      	ldr	r0, [r7, #12]
 800482c:	f7ff fe74 	bl	8004518 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004830:	6a3b      	ldr	r3, [r7, #32]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d003      	beq.n	800483e <_PrintInt+0x102>
 8004836:	697a      	ldr	r2, [r7, #20]
 8004838:	6a3b      	ldr	r3, [r7, #32]
 800483a:	429a      	cmp	r2, r3
 800483c:	d3f1      	bcc.n	8004822 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 800483e:	68b9      	ldr	r1, [r7, #8]
 8004840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004842:	9301      	str	r3, [sp, #4]
 8004844:	6a3b      	ldr	r3, [r7, #32]
 8004846:	9300      	str	r3, [sp, #0]
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	687a      	ldr	r2, [r7, #4]
 800484c:	68f8      	ldr	r0, [r7, #12]
 800484e:	f7ff fedf 	bl	8004610 <_PrintUnsigned>
}
 8004852:	bf00      	nop
 8004854:	3718      	adds	r7, #24
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
	...

0800485c <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 800485c:	b580      	push	{r7, lr}
 800485e:	b098      	sub	sp, #96	; 0x60
 8004860:	af02      	add	r7, sp, #8
 8004862:	60f8      	str	r0, [r7, #12]
 8004864:	60b9      	str	r1, [r7, #8]
 8004866:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004868:	f3ef 8311 	mrs	r3, BASEPRI
 800486c:	f04f 0120 	mov.w	r1, #32
 8004870:	f381 8811 	msr	BASEPRI, r1
 8004874:	633b      	str	r3, [r7, #48]	; 0x30
 8004876:	48b7      	ldr	r0, [pc, #732]	; (8004b54 <_VPrintTarget+0x2f8>)
 8004878:	f7ff fc73 	bl	8004162 <_PreparePacket>
 800487c:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 800487e:	4bb5      	ldr	r3, [pc, #724]	; (8004b54 <_VPrintTarget+0x2f8>)
 8004880:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 8004882:	2300      	movs	r3, #0
 8004884:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 8004886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004888:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 800488a:	69fb      	ldr	r3, [r7, #28]
 800488c:	3301      	adds	r3, #1
 800488e:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	781b      	ldrb	r3, [r3, #0]
 8004898:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	3301      	adds	r3, #1
 80048a0:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 80048a2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	f000 8183 	beq.w	8004bb2 <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 80048ac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80048b0:	2b25      	cmp	r3, #37	; 0x25
 80048b2:	f040 8170 	bne.w	8004b96 <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 80048b6:	2300      	movs	r3, #0
 80048b8:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 80048ba:	2301      	movs	r3, #1
 80048bc:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	781b      	ldrb	r3, [r3, #0]
 80048c2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 80048c6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80048ca:	3b23      	subs	r3, #35	; 0x23
 80048cc:	2b0d      	cmp	r3, #13
 80048ce:	d83f      	bhi.n	8004950 <_VPrintTarget+0xf4>
 80048d0:	a201      	add	r2, pc, #4	; (adr r2, 80048d8 <_VPrintTarget+0x7c>)
 80048d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048d6:	bf00      	nop
 80048d8:	08004941 	.word	0x08004941
 80048dc:	08004951 	.word	0x08004951
 80048e0:	08004951 	.word	0x08004951
 80048e4:	08004951 	.word	0x08004951
 80048e8:	08004951 	.word	0x08004951
 80048ec:	08004951 	.word	0x08004951
 80048f0:	08004951 	.word	0x08004951
 80048f4:	08004951 	.word	0x08004951
 80048f8:	08004931 	.word	0x08004931
 80048fc:	08004951 	.word	0x08004951
 8004900:	08004911 	.word	0x08004911
 8004904:	08004951 	.word	0x08004951
 8004908:	08004951 	.word	0x08004951
 800490c:	08004921 	.word	0x08004921
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8004910:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004912:	f043 0301 	orr.w	r3, r3, #1
 8004916:	64bb      	str	r3, [r7, #72]	; 0x48
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	3301      	adds	r3, #1
 800491c:	60fb      	str	r3, [r7, #12]
 800491e:	e01a      	b.n	8004956 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8004920:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004922:	f043 0302 	orr.w	r3, r3, #2
 8004926:	64bb      	str	r3, [r7, #72]	; 0x48
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	3301      	adds	r3, #1
 800492c:	60fb      	str	r3, [r7, #12]
 800492e:	e012      	b.n	8004956 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8004930:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004932:	f043 0304 	orr.w	r3, r3, #4
 8004936:	64bb      	str	r3, [r7, #72]	; 0x48
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	3301      	adds	r3, #1
 800493c:	60fb      	str	r3, [r7, #12]
 800493e:	e00a      	b.n	8004956 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8004940:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004942:	f043 0308 	orr.w	r3, r3, #8
 8004946:	64bb      	str	r3, [r7, #72]	; 0x48
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	3301      	adds	r3, #1
 800494c:	60fb      	str	r3, [r7, #12]
 800494e:	e002      	b.n	8004956 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8004950:	2300      	movs	r3, #0
 8004952:	653b      	str	r3, [r7, #80]	; 0x50
 8004954:	bf00      	nop
        }
      } while (v);
 8004956:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004958:	2b00      	cmp	r3, #0
 800495a:	d1b0      	bne.n	80048be <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 800495c:	2300      	movs	r3, #0
 800495e:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	781b      	ldrb	r3, [r3, #0]
 8004964:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8004968:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800496c:	2b2f      	cmp	r3, #47	; 0x2f
 800496e:	d912      	bls.n	8004996 <_VPrintTarget+0x13a>
 8004970:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004974:	2b39      	cmp	r3, #57	; 0x39
 8004976:	d80e      	bhi.n	8004996 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	3301      	adds	r3, #1
 800497c:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 800497e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004980:	4613      	mov	r3, r2
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	4413      	add	r3, r2
 8004986:	005b      	lsls	r3, r3, #1
 8004988:	461a      	mov	r2, r3
 800498a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800498e:	4413      	add	r3, r2
 8004990:	3b30      	subs	r3, #48	; 0x30
 8004992:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8004994:	e7e4      	b.n	8004960 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8004996:	2300      	movs	r3, #0
 8004998:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	781b      	ldrb	r3, [r3, #0]
 800499e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 80049a2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80049a6:	2b2e      	cmp	r3, #46	; 0x2e
 80049a8:	d11d      	bne.n	80049e6 <_VPrintTarget+0x18a>
        sFormat++;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	3301      	adds	r3, #1
 80049ae:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	781b      	ldrb	r3, [r3, #0]
 80049b4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 80049b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80049bc:	2b2f      	cmp	r3, #47	; 0x2f
 80049be:	d912      	bls.n	80049e6 <_VPrintTarget+0x18a>
 80049c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80049c4:	2b39      	cmp	r3, #57	; 0x39
 80049c6:	d80e      	bhi.n	80049e6 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	3301      	adds	r3, #1
 80049cc:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 80049ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80049d0:	4613      	mov	r3, r2
 80049d2:	009b      	lsls	r3, r3, #2
 80049d4:	4413      	add	r3, r2
 80049d6:	005b      	lsls	r3, r3, #1
 80049d8:	461a      	mov	r2, r3
 80049da:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80049de:	4413      	add	r3, r2
 80049e0:	3b30      	subs	r3, #48	; 0x30
 80049e2:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 80049e4:	e7e4      	b.n	80049b0 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	781b      	ldrb	r3, [r3, #0]
 80049ea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 80049ee:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80049f2:	2b6c      	cmp	r3, #108	; 0x6c
 80049f4:	d003      	beq.n	80049fe <_VPrintTarget+0x1a2>
 80049f6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80049fa:	2b68      	cmp	r3, #104	; 0x68
 80049fc:	d107      	bne.n	8004a0e <_VPrintTarget+0x1b2>
          c = *sFormat;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	781b      	ldrb	r3, [r3, #0]
 8004a02:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	3301      	adds	r3, #1
 8004a0a:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8004a0c:	e7ef      	b.n	80049ee <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8004a0e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004a12:	2b25      	cmp	r3, #37	; 0x25
 8004a14:	f000 80b3 	beq.w	8004b7e <_VPrintTarget+0x322>
 8004a18:	2b25      	cmp	r3, #37	; 0x25
 8004a1a:	f2c0 80b7 	blt.w	8004b8c <_VPrintTarget+0x330>
 8004a1e:	2b78      	cmp	r3, #120	; 0x78
 8004a20:	f300 80b4 	bgt.w	8004b8c <_VPrintTarget+0x330>
 8004a24:	2b58      	cmp	r3, #88	; 0x58
 8004a26:	f2c0 80b1 	blt.w	8004b8c <_VPrintTarget+0x330>
 8004a2a:	3b58      	subs	r3, #88	; 0x58
 8004a2c:	2b20      	cmp	r3, #32
 8004a2e:	f200 80ad 	bhi.w	8004b8c <_VPrintTarget+0x330>
 8004a32:	a201      	add	r2, pc, #4	; (adr r2, 8004a38 <_VPrintTarget+0x1dc>)
 8004a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a38:	08004b2f 	.word	0x08004b2f
 8004a3c:	08004b8d 	.word	0x08004b8d
 8004a40:	08004b8d 	.word	0x08004b8d
 8004a44:	08004b8d 	.word	0x08004b8d
 8004a48:	08004b8d 	.word	0x08004b8d
 8004a4c:	08004b8d 	.word	0x08004b8d
 8004a50:	08004b8d 	.word	0x08004b8d
 8004a54:	08004b8d 	.word	0x08004b8d
 8004a58:	08004b8d 	.word	0x08004b8d
 8004a5c:	08004b8d 	.word	0x08004b8d
 8004a60:	08004b8d 	.word	0x08004b8d
 8004a64:	08004abd 	.word	0x08004abd
 8004a68:	08004ae3 	.word	0x08004ae3
 8004a6c:	08004b8d 	.word	0x08004b8d
 8004a70:	08004b8d 	.word	0x08004b8d
 8004a74:	08004b8d 	.word	0x08004b8d
 8004a78:	08004b8d 	.word	0x08004b8d
 8004a7c:	08004b8d 	.word	0x08004b8d
 8004a80:	08004b8d 	.word	0x08004b8d
 8004a84:	08004b8d 	.word	0x08004b8d
 8004a88:	08004b8d 	.word	0x08004b8d
 8004a8c:	08004b8d 	.word	0x08004b8d
 8004a90:	08004b8d 	.word	0x08004b8d
 8004a94:	08004b8d 	.word	0x08004b8d
 8004a98:	08004b59 	.word	0x08004b59
 8004a9c:	08004b8d 	.word	0x08004b8d
 8004aa0:	08004b8d 	.word	0x08004b8d
 8004aa4:	08004b8d 	.word	0x08004b8d
 8004aa8:	08004b8d 	.word	0x08004b8d
 8004aac:	08004b09 	.word	0x08004b09
 8004ab0:	08004b8d 	.word	0x08004b8d
 8004ab4:	08004b8d 	.word	0x08004b8d
 8004ab8:	08004b2f 	.word	0x08004b2f
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	1d19      	adds	r1, r3, #4
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	6011      	str	r1, [r2, #0]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8004aca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004acc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 8004ad0:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8004ad4:	f107 0314 	add.w	r3, r7, #20
 8004ad8:	4611      	mov	r1, r2
 8004ada:	4618      	mov	r0, r3
 8004adc:	f7ff fd1c 	bl	8004518 <_StoreChar>
        break;
 8004ae0:	e055      	b.n	8004b8e <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	1d19      	adds	r1, r3, #4
 8004ae8:	687a      	ldr	r2, [r7, #4]
 8004aea:	6011      	str	r1, [r2, #0]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8004af0:	f107 0014 	add.w	r0, r7, #20
 8004af4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004af6:	9301      	str	r3, [sp, #4]
 8004af8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004afa:	9300      	str	r3, [sp, #0]
 8004afc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004afe:	220a      	movs	r2, #10
 8004b00:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004b02:	f7ff fe1b 	bl	800473c <_PrintInt>
        break;
 8004b06:	e042      	b.n	8004b8e <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	1d19      	adds	r1, r3, #4
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	6011      	str	r1, [r2, #0]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8004b16:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004b18:	f107 0014 	add.w	r0, r7, #20
 8004b1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b1e:	9301      	str	r3, [sp, #4]
 8004b20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b22:	9300      	str	r3, [sp, #0]
 8004b24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b26:	220a      	movs	r2, #10
 8004b28:	f7ff fd72 	bl	8004610 <_PrintUnsigned>
        break;
 8004b2c:	e02f      	b.n	8004b8e <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	1d19      	adds	r1, r3, #4
 8004b34:	687a      	ldr	r2, [r7, #4]
 8004b36:	6011      	str	r1, [r2, #0]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8004b3c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004b3e:	f107 0014 	add.w	r0, r7, #20
 8004b42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b44:	9301      	str	r3, [sp, #4]
 8004b46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b48:	9300      	str	r3, [sp, #0]
 8004b4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b4c:	2210      	movs	r2, #16
 8004b4e:	f7ff fd5f 	bl	8004610 <_PrintUnsigned>
        break;
 8004b52:	e01c      	b.n	8004b8e <_VPrintTarget+0x332>
 8004b54:	200143b0 	.word	0x200143b0
      case 'p':
        v = va_arg(*pParamList, int);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	1d19      	adds	r1, r3, #4
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	6011      	str	r1, [r2, #0]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8004b66:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004b68:	f107 0014 	add.w	r0, r7, #20
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	9301      	str	r3, [sp, #4]
 8004b70:	2308      	movs	r3, #8
 8004b72:	9300      	str	r3, [sp, #0]
 8004b74:	2308      	movs	r3, #8
 8004b76:	2210      	movs	r2, #16
 8004b78:	f7ff fd4a 	bl	8004610 <_PrintUnsigned>
        break;
 8004b7c:	e007      	b.n	8004b8e <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8004b7e:	f107 0314 	add.w	r3, r7, #20
 8004b82:	2125      	movs	r1, #37	; 0x25
 8004b84:	4618      	mov	r0, r3
 8004b86:	f7ff fcc7 	bl	8004518 <_StoreChar>
        break;
 8004b8a:	e000      	b.n	8004b8e <_VPrintTarget+0x332>
      default:
        break;
 8004b8c:	bf00      	nop
      }
      sFormat++;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	3301      	adds	r3, #1
 8004b92:	60fb      	str	r3, [r7, #12]
 8004b94:	e007      	b.n	8004ba6 <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 8004b96:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8004b9a:	f107 0314 	add.w	r3, r7, #20
 8004b9e:	4611      	mov	r1, r2
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f7ff fcb9 	bl	8004518 <_StoreChar>
    }
  } while (*sFormat);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	781b      	ldrb	r3, [r3, #0]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	f47f ae72 	bne.w	8004894 <_VPrintTarget+0x38>
 8004bb0:	e000      	b.n	8004bb4 <_VPrintTarget+0x358>
      break;
 8004bb2:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8004bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d041      	beq.n	8004c3e <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 8004bba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bbc:	69fb      	ldr	r3, [r7, #28]
 8004bbe:	b2d2      	uxtb	r2, r2
 8004bc0:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8004bc2:	69bb      	ldr	r3, [r7, #24]
 8004bc4:	643b      	str	r3, [r7, #64]	; 0x40
 8004bc6:	6a3b      	ldr	r3, [r7, #32]
 8004bc8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bca:	e00b      	b.n	8004be4 <_VPrintTarget+0x388>
 8004bcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bce:	b2da      	uxtb	r2, r3
 8004bd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bd2:	1c59      	adds	r1, r3, #1
 8004bd4:	6439      	str	r1, [r7, #64]	; 0x40
 8004bd6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004bda:	b2d2      	uxtb	r2, r2
 8004bdc:	701a      	strb	r2, [r3, #0]
 8004bde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004be0:	09db      	lsrs	r3, r3, #7
 8004be2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004be4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004be6:	2b7f      	cmp	r3, #127	; 0x7f
 8004be8:	d8f0      	bhi.n	8004bcc <_VPrintTarget+0x370>
 8004bea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bec:	1c5a      	adds	r2, r3, #1
 8004bee:	643a      	str	r2, [r7, #64]	; 0x40
 8004bf0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004bf2:	b2d2      	uxtb	r2, r2
 8004bf4:	701a      	strb	r2, [r3, #0]
 8004bf6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bf8:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8004bfa:	69bb      	ldr	r3, [r7, #24]
 8004bfc:	63bb      	str	r3, [r7, #56]	; 0x38
 8004bfe:	2300      	movs	r3, #0
 8004c00:	637b      	str	r3, [r7, #52]	; 0x34
 8004c02:	e00b      	b.n	8004c1c <_VPrintTarget+0x3c0>
 8004c04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c06:	b2da      	uxtb	r2, r3
 8004c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c0a:	1c59      	adds	r1, r3, #1
 8004c0c:	63b9      	str	r1, [r7, #56]	; 0x38
 8004c0e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004c12:	b2d2      	uxtb	r2, r2
 8004c14:	701a      	strb	r2, [r3, #0]
 8004c16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c18:	09db      	lsrs	r3, r3, #7
 8004c1a:	637b      	str	r3, [r7, #52]	; 0x34
 8004c1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c1e:	2b7f      	cmp	r3, #127	; 0x7f
 8004c20:	d8f0      	bhi.n	8004c04 <_VPrintTarget+0x3a8>
 8004c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c24:	1c5a      	adds	r2, r3, #1
 8004c26:	63ba      	str	r2, [r7, #56]	; 0x38
 8004c28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c2a:	b2d2      	uxtb	r2, r2
 8004c2c:	701a      	strb	r2, [r3, #0]
 8004c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c30:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004c32:	69fb      	ldr	r3, [r7, #28]
 8004c34:	69b9      	ldr	r1, [r7, #24]
 8004c36:	221a      	movs	r2, #26
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f7ff fb85 	bl	8004348 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8004c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c40:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8004c44:	bf00      	nop
 8004c46:	3758      	adds	r7, #88	; 0x58
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}

08004c4c <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b086      	sub	sp, #24
 8004c50:	af02      	add	r7, sp, #8
 8004c52:	60f8      	str	r0, [r7, #12]
 8004c54:	60b9      	str	r1, [r7, #8]
 8004c56:	607a      	str	r2, [r7, #4]
 8004c58:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004c60:	4917      	ldr	r1, [pc, #92]	; (8004cc0 <SEGGER_SYSVIEW_Init+0x74>)
 8004c62:	4818      	ldr	r0, [pc, #96]	; (8004cc4 <SEGGER_SYSVIEW_Init+0x78>)
 8004c64:	f7ff f93c 	bl	8003ee0 <SEGGER_RTT_AllocUpBuffer>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	b2da      	uxtb	r2, r3
 8004c6c:	4b16      	ldr	r3, [pc, #88]	; (8004cc8 <SEGGER_SYSVIEW_Init+0x7c>)
 8004c6e:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8004c70:	4b15      	ldr	r3, [pc, #84]	; (8004cc8 <SEGGER_SYSVIEW_Init+0x7c>)
 8004c72:	785a      	ldrb	r2, [r3, #1]
 8004c74:	4b14      	ldr	r3, [pc, #80]	; (8004cc8 <SEGGER_SYSVIEW_Init+0x7c>)
 8004c76:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004c78:	4b13      	ldr	r3, [pc, #76]	; (8004cc8 <SEGGER_SYSVIEW_Init+0x7c>)
 8004c7a:	7e1b      	ldrb	r3, [r3, #24]
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	2300      	movs	r3, #0
 8004c80:	9300      	str	r3, [sp, #0]
 8004c82:	2308      	movs	r3, #8
 8004c84:	4a11      	ldr	r2, [pc, #68]	; (8004ccc <SEGGER_SYSVIEW_Init+0x80>)
 8004c86:	490f      	ldr	r1, [pc, #60]	; (8004cc4 <SEGGER_SYSVIEW_Init+0x78>)
 8004c88:	f7ff f9ae 	bl	8003fe8 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8004c8c:	4b0e      	ldr	r3, [pc, #56]	; (8004cc8 <SEGGER_SYSVIEW_Init+0x7c>)
 8004c8e:	2200      	movs	r2, #0
 8004c90:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004c92:	4b0f      	ldr	r3, [pc, #60]	; (8004cd0 <SEGGER_SYSVIEW_Init+0x84>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a0c      	ldr	r2, [pc, #48]	; (8004cc8 <SEGGER_SYSVIEW_Init+0x7c>)
 8004c98:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8004c9a:	4a0b      	ldr	r2, [pc, #44]	; (8004cc8 <SEGGER_SYSVIEW_Init+0x7c>)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8004ca0:	4a09      	ldr	r2, [pc, #36]	; (8004cc8 <SEGGER_SYSVIEW_Init+0x7c>)
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8004ca6:	4a08      	ldr	r2, [pc, #32]	; (8004cc8 <SEGGER_SYSVIEW_Init+0x7c>)
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8004cac:	4a06      	ldr	r2, [pc, #24]	; (8004cc8 <SEGGER_SYSVIEW_Init+0x7c>)
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8004cb2:	4b05      	ldr	r3, [pc, #20]	; (8004cc8 <SEGGER_SYSVIEW_Init+0x7c>)
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8004cb8:	bf00      	nop
 8004cba:	3710      	adds	r7, #16
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}
 8004cc0:	20013378 	.word	0x20013378
 8004cc4:	0800645c 	.word	0x0800645c
 8004cc8:	20014380 	.word	0x20014380
 8004ccc:	20014378 	.word	0x20014378
 8004cd0:	e0001004 	.word	0xe0001004

08004cd4 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8004cd4:	b480      	push	{r7}
 8004cd6:	b083      	sub	sp, #12
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8004cdc:	4a04      	ldr	r2, [pc, #16]	; (8004cf0 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6113      	str	r3, [r2, #16]
}
 8004ce2:	bf00      	nop
 8004ce4:	370c      	adds	r7, #12
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr
 8004cee:	bf00      	nop
 8004cf0:	20014380 	.word	0x20014380

08004cf4 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b084      	sub	sp, #16
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004cfc:	f3ef 8311 	mrs	r3, BASEPRI
 8004d00:	f04f 0120 	mov.w	r1, #32
 8004d04:	f381 8811 	msr	BASEPRI, r1
 8004d08:	60fb      	str	r3, [r7, #12]
 8004d0a:	4808      	ldr	r0, [pc, #32]	; (8004d2c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8004d0c:	f7ff fa29 	bl	8004162 <_PreparePacket>
 8004d10:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8004d12:	687a      	ldr	r2, [r7, #4]
 8004d14:	68b9      	ldr	r1, [r7, #8]
 8004d16:	68b8      	ldr	r0, [r7, #8]
 8004d18:	f7ff fb16 	bl	8004348 <_SendPacket>
  RECORD_END();
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f383 8811 	msr	BASEPRI, r3
}
 8004d22:	bf00      	nop
 8004d24:	3710      	adds	r7, #16
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}
 8004d2a:	bf00      	nop
 8004d2c:	200143b0 	.word	0x200143b0

08004d30 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b088      	sub	sp, #32
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
 8004d38:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004d3a:	f3ef 8311 	mrs	r3, BASEPRI
 8004d3e:	f04f 0120 	mov.w	r1, #32
 8004d42:	f381 8811 	msr	BASEPRI, r1
 8004d46:	617b      	str	r3, [r7, #20]
 8004d48:	4816      	ldr	r0, [pc, #88]	; (8004da4 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8004d4a:	f7ff fa0a 	bl	8004162 <_PreparePacket>
 8004d4e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	61fb      	str	r3, [r7, #28]
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	61bb      	str	r3, [r7, #24]
 8004d5c:	e00b      	b.n	8004d76 <SEGGER_SYSVIEW_RecordU32+0x46>
 8004d5e:	69bb      	ldr	r3, [r7, #24]
 8004d60:	b2da      	uxtb	r2, r3
 8004d62:	69fb      	ldr	r3, [r7, #28]
 8004d64:	1c59      	adds	r1, r3, #1
 8004d66:	61f9      	str	r1, [r7, #28]
 8004d68:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d6c:	b2d2      	uxtb	r2, r2
 8004d6e:	701a      	strb	r2, [r3, #0]
 8004d70:	69bb      	ldr	r3, [r7, #24]
 8004d72:	09db      	lsrs	r3, r3, #7
 8004d74:	61bb      	str	r3, [r7, #24]
 8004d76:	69bb      	ldr	r3, [r7, #24]
 8004d78:	2b7f      	cmp	r3, #127	; 0x7f
 8004d7a:	d8f0      	bhi.n	8004d5e <SEGGER_SYSVIEW_RecordU32+0x2e>
 8004d7c:	69fb      	ldr	r3, [r7, #28]
 8004d7e:	1c5a      	adds	r2, r3, #1
 8004d80:	61fa      	str	r2, [r7, #28]
 8004d82:	69ba      	ldr	r2, [r7, #24]
 8004d84:	b2d2      	uxtb	r2, r2
 8004d86:	701a      	strb	r2, [r3, #0]
 8004d88:	69fb      	ldr	r3, [r7, #28]
 8004d8a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004d8c:	687a      	ldr	r2, [r7, #4]
 8004d8e:	68f9      	ldr	r1, [r7, #12]
 8004d90:	6938      	ldr	r0, [r7, #16]
 8004d92:	f7ff fad9 	bl	8004348 <_SendPacket>
  RECORD_END();
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	f383 8811 	msr	BASEPRI, r3
}
 8004d9c:	bf00      	nop
 8004d9e:	3720      	adds	r7, #32
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}
 8004da4:	200143b0 	.word	0x200143b0

08004da8 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b08c      	sub	sp, #48	; 0x30
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	60f8      	str	r0, [r7, #12]
 8004db0:	60b9      	str	r1, [r7, #8]
 8004db2:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004db4:	f3ef 8311 	mrs	r3, BASEPRI
 8004db8:	f04f 0120 	mov.w	r1, #32
 8004dbc:	f381 8811 	msr	BASEPRI, r1
 8004dc0:	61fb      	str	r3, [r7, #28]
 8004dc2:	4825      	ldr	r0, [pc, #148]	; (8004e58 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8004dc4:	f7ff f9cd 	bl	8004162 <_PreparePacket>
 8004dc8:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004dca:	69bb      	ldr	r3, [r7, #24]
 8004dcc:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004dd6:	e00b      	b.n	8004df0 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8004dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dda:	b2da      	uxtb	r2, r3
 8004ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dde:	1c59      	adds	r1, r3, #1
 8004de0:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004de2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004de6:	b2d2      	uxtb	r2, r2
 8004de8:	701a      	strb	r2, [r3, #0]
 8004dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dec:	09db      	lsrs	r3, r3, #7
 8004dee:	62bb      	str	r3, [r7, #40]	; 0x28
 8004df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004df2:	2b7f      	cmp	r3, #127	; 0x7f
 8004df4:	d8f0      	bhi.n	8004dd8 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8004df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004df8:	1c5a      	adds	r2, r3, #1
 8004dfa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004dfc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004dfe:	b2d2      	uxtb	r2, r2
 8004e00:	701a      	strb	r2, [r3, #0]
 8004e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e04:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	627b      	str	r3, [r7, #36]	; 0x24
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	623b      	str	r3, [r7, #32]
 8004e0e:	e00b      	b.n	8004e28 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8004e10:	6a3b      	ldr	r3, [r7, #32]
 8004e12:	b2da      	uxtb	r2, r3
 8004e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e16:	1c59      	adds	r1, r3, #1
 8004e18:	6279      	str	r1, [r7, #36]	; 0x24
 8004e1a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e1e:	b2d2      	uxtb	r2, r2
 8004e20:	701a      	strb	r2, [r3, #0]
 8004e22:	6a3b      	ldr	r3, [r7, #32]
 8004e24:	09db      	lsrs	r3, r3, #7
 8004e26:	623b      	str	r3, [r7, #32]
 8004e28:	6a3b      	ldr	r3, [r7, #32]
 8004e2a:	2b7f      	cmp	r3, #127	; 0x7f
 8004e2c:	d8f0      	bhi.n	8004e10 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8004e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e30:	1c5a      	adds	r2, r3, #1
 8004e32:	627a      	str	r2, [r7, #36]	; 0x24
 8004e34:	6a3a      	ldr	r2, [r7, #32]
 8004e36:	b2d2      	uxtb	r2, r2
 8004e38:	701a      	strb	r2, [r3, #0]
 8004e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3c:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004e3e:	68fa      	ldr	r2, [r7, #12]
 8004e40:	6979      	ldr	r1, [r7, #20]
 8004e42:	69b8      	ldr	r0, [r7, #24]
 8004e44:	f7ff fa80 	bl	8004348 <_SendPacket>
  RECORD_END();
 8004e48:	69fb      	ldr	r3, [r7, #28]
 8004e4a:	f383 8811 	msr	BASEPRI, r3
}
 8004e4e:	bf00      	nop
 8004e50:	3730      	adds	r7, #48	; 0x30
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}
 8004e56:	bf00      	nop
 8004e58:	200143b0 	.word	0x200143b0

08004e5c <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b08c      	sub	sp, #48	; 0x30
 8004e60:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8004e62:	4b59      	ldr	r3, [pc, #356]	; (8004fc8 <SEGGER_SYSVIEW_Start+0x16c>)
 8004e64:	2201      	movs	r2, #1
 8004e66:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8004e68:	f3ef 8311 	mrs	r3, BASEPRI
 8004e6c:	f04f 0120 	mov.w	r1, #32
 8004e70:	f381 8811 	msr	BASEPRI, r1
 8004e74:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8004e76:	4b54      	ldr	r3, [pc, #336]	; (8004fc8 <SEGGER_SYSVIEW_Start+0x16c>)
 8004e78:	785b      	ldrb	r3, [r3, #1]
 8004e7a:	220a      	movs	r2, #10
 8004e7c:	4953      	ldr	r1, [pc, #332]	; (8004fcc <SEGGER_SYSVIEW_Start+0x170>)
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f7fb f9a6 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8004e8a:	f7fe fcfd 	bl	8003888 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8004e8e:	200a      	movs	r0, #10
 8004e90:	f7ff ff30 	bl	8004cf4 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004e94:	f3ef 8311 	mrs	r3, BASEPRI
 8004e98:	f04f 0120 	mov.w	r1, #32
 8004e9c:	f381 8811 	msr	BASEPRI, r1
 8004ea0:	60bb      	str	r3, [r7, #8]
 8004ea2:	484b      	ldr	r0, [pc, #300]	; (8004fd0 <SEGGER_SYSVIEW_Start+0x174>)
 8004ea4:	f7ff f95d 	bl	8004162 <_PreparePacket>
 8004ea8:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004eb2:	4b45      	ldr	r3, [pc, #276]	; (8004fc8 <SEGGER_SYSVIEW_Start+0x16c>)
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	62bb      	str	r3, [r7, #40]	; 0x28
 8004eb8:	e00b      	b.n	8004ed2 <SEGGER_SYSVIEW_Start+0x76>
 8004eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ebc:	b2da      	uxtb	r2, r3
 8004ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ec0:	1c59      	adds	r1, r3, #1
 8004ec2:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004ec4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ec8:	b2d2      	uxtb	r2, r2
 8004eca:	701a      	strb	r2, [r3, #0]
 8004ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ece:	09db      	lsrs	r3, r3, #7
 8004ed0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ed4:	2b7f      	cmp	r3, #127	; 0x7f
 8004ed6:	d8f0      	bhi.n	8004eba <SEGGER_SYSVIEW_Start+0x5e>
 8004ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eda:	1c5a      	adds	r2, r3, #1
 8004edc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ede:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ee0:	b2d2      	uxtb	r2, r2
 8004ee2:	701a      	strb	r2, [r3, #0]
 8004ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ee6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	627b      	str	r3, [r7, #36]	; 0x24
 8004eec:	4b36      	ldr	r3, [pc, #216]	; (8004fc8 <SEGGER_SYSVIEW_Start+0x16c>)
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	623b      	str	r3, [r7, #32]
 8004ef2:	e00b      	b.n	8004f0c <SEGGER_SYSVIEW_Start+0xb0>
 8004ef4:	6a3b      	ldr	r3, [r7, #32]
 8004ef6:	b2da      	uxtb	r2, r3
 8004ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efa:	1c59      	adds	r1, r3, #1
 8004efc:	6279      	str	r1, [r7, #36]	; 0x24
 8004efe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f02:	b2d2      	uxtb	r2, r2
 8004f04:	701a      	strb	r2, [r3, #0]
 8004f06:	6a3b      	ldr	r3, [r7, #32]
 8004f08:	09db      	lsrs	r3, r3, #7
 8004f0a:	623b      	str	r3, [r7, #32]
 8004f0c:	6a3b      	ldr	r3, [r7, #32]
 8004f0e:	2b7f      	cmp	r3, #127	; 0x7f
 8004f10:	d8f0      	bhi.n	8004ef4 <SEGGER_SYSVIEW_Start+0x98>
 8004f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f14:	1c5a      	adds	r2, r3, #1
 8004f16:	627a      	str	r2, [r7, #36]	; 0x24
 8004f18:	6a3a      	ldr	r2, [r7, #32]
 8004f1a:	b2d2      	uxtb	r2, r2
 8004f1c:	701a      	strb	r2, [r3, #0]
 8004f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f20:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	61fb      	str	r3, [r7, #28]
 8004f26:	4b28      	ldr	r3, [pc, #160]	; (8004fc8 <SEGGER_SYSVIEW_Start+0x16c>)
 8004f28:	691b      	ldr	r3, [r3, #16]
 8004f2a:	61bb      	str	r3, [r7, #24]
 8004f2c:	e00b      	b.n	8004f46 <SEGGER_SYSVIEW_Start+0xea>
 8004f2e:	69bb      	ldr	r3, [r7, #24]
 8004f30:	b2da      	uxtb	r2, r3
 8004f32:	69fb      	ldr	r3, [r7, #28]
 8004f34:	1c59      	adds	r1, r3, #1
 8004f36:	61f9      	str	r1, [r7, #28]
 8004f38:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f3c:	b2d2      	uxtb	r2, r2
 8004f3e:	701a      	strb	r2, [r3, #0]
 8004f40:	69bb      	ldr	r3, [r7, #24]
 8004f42:	09db      	lsrs	r3, r3, #7
 8004f44:	61bb      	str	r3, [r7, #24]
 8004f46:	69bb      	ldr	r3, [r7, #24]
 8004f48:	2b7f      	cmp	r3, #127	; 0x7f
 8004f4a:	d8f0      	bhi.n	8004f2e <SEGGER_SYSVIEW_Start+0xd2>
 8004f4c:	69fb      	ldr	r3, [r7, #28]
 8004f4e:	1c5a      	adds	r2, r3, #1
 8004f50:	61fa      	str	r2, [r7, #28]
 8004f52:	69ba      	ldr	r2, [r7, #24]
 8004f54:	b2d2      	uxtb	r2, r2
 8004f56:	701a      	strb	r2, [r3, #0]
 8004f58:	69fb      	ldr	r3, [r7, #28]
 8004f5a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	617b      	str	r3, [r7, #20]
 8004f60:	2300      	movs	r3, #0
 8004f62:	613b      	str	r3, [r7, #16]
 8004f64:	e00b      	b.n	8004f7e <SEGGER_SYSVIEW_Start+0x122>
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	b2da      	uxtb	r2, r3
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	1c59      	adds	r1, r3, #1
 8004f6e:	6179      	str	r1, [r7, #20]
 8004f70:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f74:	b2d2      	uxtb	r2, r2
 8004f76:	701a      	strb	r2, [r3, #0]
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	09db      	lsrs	r3, r3, #7
 8004f7c:	613b      	str	r3, [r7, #16]
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	2b7f      	cmp	r3, #127	; 0x7f
 8004f82:	d8f0      	bhi.n	8004f66 <SEGGER_SYSVIEW_Start+0x10a>
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	1c5a      	adds	r2, r3, #1
 8004f88:	617a      	str	r2, [r7, #20]
 8004f8a:	693a      	ldr	r2, [r7, #16]
 8004f8c:	b2d2      	uxtb	r2, r2
 8004f8e:	701a      	strb	r2, [r3, #0]
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004f94:	2218      	movs	r2, #24
 8004f96:	6839      	ldr	r1, [r7, #0]
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	f7ff f9d5 	bl	8004348 <_SendPacket>
      RECORD_END();
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004fa4:	4b08      	ldr	r3, [pc, #32]	; (8004fc8 <SEGGER_SYSVIEW_Start+0x16c>)
 8004fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d002      	beq.n	8004fb2 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8004fac:	4b06      	ldr	r3, [pc, #24]	; (8004fc8 <SEGGER_SYSVIEW_Start+0x16c>)
 8004fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb0:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8004fb2:	f000 f9eb 	bl	800538c <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8004fb6:	f000 f9b1 	bl	800531c <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8004fba:	f000 fc13 	bl	80057e4 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8004fbe:	bf00      	nop
 8004fc0:	3730      	adds	r7, #48	; 0x30
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
 8004fc6:	bf00      	nop
 8004fc8:	20014380 	.word	0x20014380
 8004fcc:	08006488 	.word	0x08006488
 8004fd0:	200143b0 	.word	0x200143b0

08004fd4 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b082      	sub	sp, #8
 8004fd8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004fda:	f3ef 8311 	mrs	r3, BASEPRI
 8004fde:	f04f 0120 	mov.w	r1, #32
 8004fe2:	f381 8811 	msr	BASEPRI, r1
 8004fe6:	607b      	str	r3, [r7, #4]
 8004fe8:	480b      	ldr	r0, [pc, #44]	; (8005018 <SEGGER_SYSVIEW_Stop+0x44>)
 8004fea:	f7ff f8ba 	bl	8004162 <_PreparePacket>
 8004fee:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8004ff0:	4b0a      	ldr	r3, [pc, #40]	; (800501c <SEGGER_SYSVIEW_Stop+0x48>)
 8004ff2:	781b      	ldrb	r3, [r3, #0]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d007      	beq.n	8005008 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8004ff8:	220b      	movs	r2, #11
 8004ffa:	6839      	ldr	r1, [r7, #0]
 8004ffc:	6838      	ldr	r0, [r7, #0]
 8004ffe:	f7ff f9a3 	bl	8004348 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8005002:	4b06      	ldr	r3, [pc, #24]	; (800501c <SEGGER_SYSVIEW_Stop+0x48>)
 8005004:	2200      	movs	r2, #0
 8005006:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f383 8811 	msr	BASEPRI, r3
}
 800500e:	bf00      	nop
 8005010:	3708      	adds	r7, #8
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}
 8005016:	bf00      	nop
 8005018:	200143b0 	.word	0x200143b0
 800501c:	20014380 	.word	0x20014380

08005020 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8005020:	b580      	push	{r7, lr}
 8005022:	b08c      	sub	sp, #48	; 0x30
 8005024:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005026:	f3ef 8311 	mrs	r3, BASEPRI
 800502a:	f04f 0120 	mov.w	r1, #32
 800502e:	f381 8811 	msr	BASEPRI, r1
 8005032:	60fb      	str	r3, [r7, #12]
 8005034:	4845      	ldr	r0, [pc, #276]	; (800514c <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8005036:	f7ff f894 	bl	8004162 <_PreparePacket>
 800503a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005044:	4b42      	ldr	r3, [pc, #264]	; (8005150 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	62bb      	str	r3, [r7, #40]	; 0x28
 800504a:	e00b      	b.n	8005064 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 800504c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800504e:	b2da      	uxtb	r2, r3
 8005050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005052:	1c59      	adds	r1, r3, #1
 8005054:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005056:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800505a:	b2d2      	uxtb	r2, r2
 800505c:	701a      	strb	r2, [r3, #0]
 800505e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005060:	09db      	lsrs	r3, r3, #7
 8005062:	62bb      	str	r3, [r7, #40]	; 0x28
 8005064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005066:	2b7f      	cmp	r3, #127	; 0x7f
 8005068:	d8f0      	bhi.n	800504c <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800506a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800506c:	1c5a      	adds	r2, r3, #1
 800506e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005070:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005072:	b2d2      	uxtb	r2, r2
 8005074:	701a      	strb	r2, [r3, #0]
 8005076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005078:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	627b      	str	r3, [r7, #36]	; 0x24
 800507e:	4b34      	ldr	r3, [pc, #208]	; (8005150 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	623b      	str	r3, [r7, #32]
 8005084:	e00b      	b.n	800509e <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8005086:	6a3b      	ldr	r3, [r7, #32]
 8005088:	b2da      	uxtb	r2, r3
 800508a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508c:	1c59      	adds	r1, r3, #1
 800508e:	6279      	str	r1, [r7, #36]	; 0x24
 8005090:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005094:	b2d2      	uxtb	r2, r2
 8005096:	701a      	strb	r2, [r3, #0]
 8005098:	6a3b      	ldr	r3, [r7, #32]
 800509a:	09db      	lsrs	r3, r3, #7
 800509c:	623b      	str	r3, [r7, #32]
 800509e:	6a3b      	ldr	r3, [r7, #32]
 80050a0:	2b7f      	cmp	r3, #127	; 0x7f
 80050a2:	d8f0      	bhi.n	8005086 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80050a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a6:	1c5a      	adds	r2, r3, #1
 80050a8:	627a      	str	r2, [r7, #36]	; 0x24
 80050aa:	6a3a      	ldr	r2, [r7, #32]
 80050ac:	b2d2      	uxtb	r2, r2
 80050ae:	701a      	strb	r2, [r3, #0]
 80050b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	61fb      	str	r3, [r7, #28]
 80050b8:	4b25      	ldr	r3, [pc, #148]	; (8005150 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80050ba:	691b      	ldr	r3, [r3, #16]
 80050bc:	61bb      	str	r3, [r7, #24]
 80050be:	e00b      	b.n	80050d8 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80050c0:	69bb      	ldr	r3, [r7, #24]
 80050c2:	b2da      	uxtb	r2, r3
 80050c4:	69fb      	ldr	r3, [r7, #28]
 80050c6:	1c59      	adds	r1, r3, #1
 80050c8:	61f9      	str	r1, [r7, #28]
 80050ca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80050ce:	b2d2      	uxtb	r2, r2
 80050d0:	701a      	strb	r2, [r3, #0]
 80050d2:	69bb      	ldr	r3, [r7, #24]
 80050d4:	09db      	lsrs	r3, r3, #7
 80050d6:	61bb      	str	r3, [r7, #24]
 80050d8:	69bb      	ldr	r3, [r7, #24]
 80050da:	2b7f      	cmp	r3, #127	; 0x7f
 80050dc:	d8f0      	bhi.n	80050c0 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80050de:	69fb      	ldr	r3, [r7, #28]
 80050e0:	1c5a      	adds	r2, r3, #1
 80050e2:	61fa      	str	r2, [r7, #28]
 80050e4:	69ba      	ldr	r2, [r7, #24]
 80050e6:	b2d2      	uxtb	r2, r2
 80050e8:	701a      	strb	r2, [r3, #0]
 80050ea:	69fb      	ldr	r3, [r7, #28]
 80050ec:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	617b      	str	r3, [r7, #20]
 80050f2:	2300      	movs	r3, #0
 80050f4:	613b      	str	r3, [r7, #16]
 80050f6:	e00b      	b.n	8005110 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	b2da      	uxtb	r2, r3
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	1c59      	adds	r1, r3, #1
 8005100:	6179      	str	r1, [r7, #20]
 8005102:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005106:	b2d2      	uxtb	r2, r2
 8005108:	701a      	strb	r2, [r3, #0]
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	09db      	lsrs	r3, r3, #7
 800510e:	613b      	str	r3, [r7, #16]
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	2b7f      	cmp	r3, #127	; 0x7f
 8005114:	d8f0      	bhi.n	80050f8 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	1c5a      	adds	r2, r3, #1
 800511a:	617a      	str	r2, [r7, #20]
 800511c:	693a      	ldr	r2, [r7, #16]
 800511e:	b2d2      	uxtb	r2, r2
 8005120:	701a      	strb	r2, [r3, #0]
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005126:	2218      	movs	r2, #24
 8005128:	6879      	ldr	r1, [r7, #4]
 800512a:	68b8      	ldr	r0, [r7, #8]
 800512c:	f7ff f90c 	bl	8004348 <_SendPacket>
  RECORD_END();
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005136:	4b06      	ldr	r3, [pc, #24]	; (8005150 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800513a:	2b00      	cmp	r3, #0
 800513c:	d002      	beq.n	8005144 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800513e:	4b04      	ldr	r3, [pc, #16]	; (8005150 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005142:	4798      	blx	r3
  }
}
 8005144:	bf00      	nop
 8005146:	3730      	adds	r7, #48	; 0x30
 8005148:	46bd      	mov	sp, r7
 800514a:	bd80      	pop	{r7, pc}
 800514c:	200143b0 	.word	0x200143b0
 8005150:	20014380 	.word	0x20014380

08005154 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8005154:	b580      	push	{r7, lr}
 8005156:	b092      	sub	sp, #72	; 0x48
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 800515c:	f3ef 8311 	mrs	r3, BASEPRI
 8005160:	f04f 0120 	mov.w	r1, #32
 8005164:	f381 8811 	msr	BASEPRI, r1
 8005168:	617b      	str	r3, [r7, #20]
 800516a:	486a      	ldr	r0, [pc, #424]	; (8005314 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 800516c:	f7fe fff9 	bl	8004162 <_PreparePacket>
 8005170:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	647b      	str	r3, [r7, #68]	; 0x44
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	4b66      	ldr	r3, [pc, #408]	; (8005318 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005180:	691b      	ldr	r3, [r3, #16]
 8005182:	1ad3      	subs	r3, r2, r3
 8005184:	643b      	str	r3, [r7, #64]	; 0x40
 8005186:	e00b      	b.n	80051a0 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8005188:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800518a:	b2da      	uxtb	r2, r3
 800518c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800518e:	1c59      	adds	r1, r3, #1
 8005190:	6479      	str	r1, [r7, #68]	; 0x44
 8005192:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005196:	b2d2      	uxtb	r2, r2
 8005198:	701a      	strb	r2, [r3, #0]
 800519a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800519c:	09db      	lsrs	r3, r3, #7
 800519e:	643b      	str	r3, [r7, #64]	; 0x40
 80051a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051a2:	2b7f      	cmp	r3, #127	; 0x7f
 80051a4:	d8f0      	bhi.n	8005188 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80051a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051a8:	1c5a      	adds	r2, r3, #1
 80051aa:	647a      	str	r2, [r7, #68]	; 0x44
 80051ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80051ae:	b2d2      	uxtb	r2, r2
 80051b0:	701a      	strb	r2, [r3, #0]
 80051b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051b4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	63bb      	str	r3, [r7, #56]	; 0x38
 80051c0:	e00b      	b.n	80051da <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80051c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051c4:	b2da      	uxtb	r2, r3
 80051c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051c8:	1c59      	adds	r1, r3, #1
 80051ca:	63f9      	str	r1, [r7, #60]	; 0x3c
 80051cc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051d0:	b2d2      	uxtb	r2, r2
 80051d2:	701a      	strb	r2, [r3, #0]
 80051d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051d6:	09db      	lsrs	r3, r3, #7
 80051d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80051da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051dc:	2b7f      	cmp	r3, #127	; 0x7f
 80051de:	d8f0      	bhi.n	80051c2 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80051e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051e2:	1c5a      	adds	r2, r3, #1
 80051e4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80051e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80051e8:	b2d2      	uxtb	r2, r2
 80051ea:	701a      	strb	r2, [r3, #0]
 80051ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051ee:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	2220      	movs	r2, #32
 80051f6:	4619      	mov	r1, r3
 80051f8:	68f8      	ldr	r0, [r7, #12]
 80051fa:	f7fe ff65 	bl	80040c8 <_EncodeStr>
 80051fe:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8005200:	2209      	movs	r2, #9
 8005202:	68f9      	ldr	r1, [r7, #12]
 8005204:	6938      	ldr	r0, [r7, #16]
 8005206:	f7ff f89f 	bl	8004348 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	637b      	str	r3, [r7, #52]	; 0x34
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	4b40      	ldr	r3, [pc, #256]	; (8005318 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005218:	691b      	ldr	r3, [r3, #16]
 800521a:	1ad3      	subs	r3, r2, r3
 800521c:	633b      	str	r3, [r7, #48]	; 0x30
 800521e:	e00b      	b.n	8005238 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8005220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005222:	b2da      	uxtb	r2, r3
 8005224:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005226:	1c59      	adds	r1, r3, #1
 8005228:	6379      	str	r1, [r7, #52]	; 0x34
 800522a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800522e:	b2d2      	uxtb	r2, r2
 8005230:	701a      	strb	r2, [r3, #0]
 8005232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005234:	09db      	lsrs	r3, r3, #7
 8005236:	633b      	str	r3, [r7, #48]	; 0x30
 8005238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800523a:	2b7f      	cmp	r3, #127	; 0x7f
 800523c:	d8f0      	bhi.n	8005220 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800523e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005240:	1c5a      	adds	r2, r3, #1
 8005242:	637a      	str	r2, [r7, #52]	; 0x34
 8005244:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005246:	b2d2      	uxtb	r2, r2
 8005248:	701a      	strb	r2, [r3, #0]
 800524a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800524c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	68db      	ldr	r3, [r3, #12]
 8005256:	62bb      	str	r3, [r7, #40]	; 0x28
 8005258:	e00b      	b.n	8005272 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800525a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800525c:	b2da      	uxtb	r2, r3
 800525e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005260:	1c59      	adds	r1, r3, #1
 8005262:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005264:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005268:	b2d2      	uxtb	r2, r2
 800526a:	701a      	strb	r2, [r3, #0]
 800526c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800526e:	09db      	lsrs	r3, r3, #7
 8005270:	62bb      	str	r3, [r7, #40]	; 0x28
 8005272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005274:	2b7f      	cmp	r3, #127	; 0x7f
 8005276:	d8f0      	bhi.n	800525a <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8005278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800527a:	1c5a      	adds	r2, r3, #1
 800527c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800527e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005280:	b2d2      	uxtb	r2, r2
 8005282:	701a      	strb	r2, [r3, #0]
 8005284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005286:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	627b      	str	r3, [r7, #36]	; 0x24
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	691b      	ldr	r3, [r3, #16]
 8005290:	623b      	str	r3, [r7, #32]
 8005292:	e00b      	b.n	80052ac <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8005294:	6a3b      	ldr	r3, [r7, #32]
 8005296:	b2da      	uxtb	r2, r3
 8005298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800529a:	1c59      	adds	r1, r3, #1
 800529c:	6279      	str	r1, [r7, #36]	; 0x24
 800529e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80052a2:	b2d2      	uxtb	r2, r2
 80052a4:	701a      	strb	r2, [r3, #0]
 80052a6:	6a3b      	ldr	r3, [r7, #32]
 80052a8:	09db      	lsrs	r3, r3, #7
 80052aa:	623b      	str	r3, [r7, #32]
 80052ac:	6a3b      	ldr	r3, [r7, #32]
 80052ae:	2b7f      	cmp	r3, #127	; 0x7f
 80052b0:	d8f0      	bhi.n	8005294 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80052b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b4:	1c5a      	adds	r2, r3, #1
 80052b6:	627a      	str	r2, [r7, #36]	; 0x24
 80052b8:	6a3a      	ldr	r2, [r7, #32]
 80052ba:	b2d2      	uxtb	r2, r2
 80052bc:	701a      	strb	r2, [r3, #0]
 80052be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	61fb      	str	r3, [r7, #28]
 80052c6:	2300      	movs	r3, #0
 80052c8:	61bb      	str	r3, [r7, #24]
 80052ca:	e00b      	b.n	80052e4 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 80052cc:	69bb      	ldr	r3, [r7, #24]
 80052ce:	b2da      	uxtb	r2, r3
 80052d0:	69fb      	ldr	r3, [r7, #28]
 80052d2:	1c59      	adds	r1, r3, #1
 80052d4:	61f9      	str	r1, [r7, #28]
 80052d6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80052da:	b2d2      	uxtb	r2, r2
 80052dc:	701a      	strb	r2, [r3, #0]
 80052de:	69bb      	ldr	r3, [r7, #24]
 80052e0:	09db      	lsrs	r3, r3, #7
 80052e2:	61bb      	str	r3, [r7, #24]
 80052e4:	69bb      	ldr	r3, [r7, #24]
 80052e6:	2b7f      	cmp	r3, #127	; 0x7f
 80052e8:	d8f0      	bhi.n	80052cc <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 80052ea:	69fb      	ldr	r3, [r7, #28]
 80052ec:	1c5a      	adds	r2, r3, #1
 80052ee:	61fa      	str	r2, [r7, #28]
 80052f0:	69ba      	ldr	r2, [r7, #24]
 80052f2:	b2d2      	uxtb	r2, r2
 80052f4:	701a      	strb	r2, [r3, #0]
 80052f6:	69fb      	ldr	r3, [r7, #28]
 80052f8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80052fa:	2215      	movs	r2, #21
 80052fc:	68f9      	ldr	r1, [r7, #12]
 80052fe:	6938      	ldr	r0, [r7, #16]
 8005300:	f7ff f822 	bl	8004348 <_SendPacket>
  RECORD_END();
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	f383 8811 	msr	BASEPRI, r3
}
 800530a:	bf00      	nop
 800530c:	3748      	adds	r7, #72	; 0x48
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}
 8005312:	bf00      	nop
 8005314:	200143b0 	.word	0x200143b0
 8005318:	20014380 	.word	0x20014380

0800531c <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 800531c:	b580      	push	{r7, lr}
 800531e:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8005320:	4b07      	ldr	r3, [pc, #28]	; (8005340 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005322:	6a1b      	ldr	r3, [r3, #32]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d008      	beq.n	800533a <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8005328:	4b05      	ldr	r3, [pc, #20]	; (8005340 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800532a:	6a1b      	ldr	r3, [r3, #32]
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d003      	beq.n	800533a <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8005332:	4b03      	ldr	r3, [pc, #12]	; (8005340 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005334:	6a1b      	ldr	r3, [r3, #32]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	4798      	blx	r3
  }
}
 800533a:	bf00      	nop
 800533c:	bd80      	pop	{r7, pc}
 800533e:	bf00      	nop
 8005340:	20014380 	.word	0x20014380

08005344 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8005344:	b580      	push	{r7, lr}
 8005346:	b086      	sub	sp, #24
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800534c:	f3ef 8311 	mrs	r3, BASEPRI
 8005350:	f04f 0120 	mov.w	r1, #32
 8005354:	f381 8811 	msr	BASEPRI, r1
 8005358:	617b      	str	r3, [r7, #20]
 800535a:	480b      	ldr	r0, [pc, #44]	; (8005388 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 800535c:	f7fe ff01 	bl	8004162 <_PreparePacket>
 8005360:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005362:	2280      	movs	r2, #128	; 0x80
 8005364:	6879      	ldr	r1, [r7, #4]
 8005366:	6938      	ldr	r0, [r7, #16]
 8005368:	f7fe feae 	bl	80040c8 <_EncodeStr>
 800536c:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800536e:	220e      	movs	r2, #14
 8005370:	68f9      	ldr	r1, [r7, #12]
 8005372:	6938      	ldr	r0, [r7, #16]
 8005374:	f7fe ffe8 	bl	8004348 <_SendPacket>
  RECORD_END();
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	f383 8811 	msr	BASEPRI, r3
}
 800537e:	bf00      	nop
 8005380:	3718      	adds	r7, #24
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}
 8005386:	bf00      	nop
 8005388:	200143b0 	.word	0x200143b0

0800538c <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800538c:	b590      	push	{r4, r7, lr}
 800538e:	b083      	sub	sp, #12
 8005390:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8005392:	4b15      	ldr	r3, [pc, #84]	; (80053e8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005394:	6a1b      	ldr	r3, [r3, #32]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d01a      	beq.n	80053d0 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800539a:	4b13      	ldr	r3, [pc, #76]	; (80053e8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800539c:	6a1b      	ldr	r3, [r3, #32]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d015      	beq.n	80053d0 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80053a4:	4b10      	ldr	r3, [pc, #64]	; (80053e8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80053a6:	6a1b      	ldr	r3, [r3, #32]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4798      	blx	r3
 80053ac:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80053b0:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80053b2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80053b6:	f04f 0200 	mov.w	r2, #0
 80053ba:	f04f 0300 	mov.w	r3, #0
 80053be:	000a      	movs	r2, r1
 80053c0:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80053c2:	4613      	mov	r3, r2
 80053c4:	461a      	mov	r2, r3
 80053c6:	4621      	mov	r1, r4
 80053c8:	200d      	movs	r0, #13
 80053ca:	f7ff fced 	bl	8004da8 <SEGGER_SYSVIEW_RecordU32x2>
 80053ce:	e006      	b.n	80053de <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80053d0:	4b06      	ldr	r3, [pc, #24]	; (80053ec <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4619      	mov	r1, r3
 80053d6:	200c      	movs	r0, #12
 80053d8:	f7ff fcaa 	bl	8004d30 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80053dc:	bf00      	nop
 80053de:	bf00      	nop
 80053e0:	370c      	adds	r7, #12
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd90      	pop	{r4, r7, pc}
 80053e6:	bf00      	nop
 80053e8:	20014380 	.word	0x20014380
 80053ec:	e0001004 	.word	0xe0001004

080053f0 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b086      	sub	sp, #24
 80053f4:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80053f6:	f3ef 8311 	mrs	r3, BASEPRI
 80053fa:	f04f 0120 	mov.w	r1, #32
 80053fe:	f381 8811 	msr	BASEPRI, r1
 8005402:	60fb      	str	r3, [r7, #12]
 8005404:	4819      	ldr	r0, [pc, #100]	; (800546c <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8005406:	f7fe feac 	bl	8004162 <_PreparePacket>
 800540a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8005410:	4b17      	ldr	r3, [pc, #92]	; (8005470 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005418:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	617b      	str	r3, [r7, #20]
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	613b      	str	r3, [r7, #16]
 8005422:	e00b      	b.n	800543c <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	b2da      	uxtb	r2, r3
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	1c59      	adds	r1, r3, #1
 800542c:	6179      	str	r1, [r7, #20]
 800542e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005432:	b2d2      	uxtb	r2, r2
 8005434:	701a      	strb	r2, [r3, #0]
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	09db      	lsrs	r3, r3, #7
 800543a:	613b      	str	r3, [r7, #16]
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	2b7f      	cmp	r3, #127	; 0x7f
 8005440:	d8f0      	bhi.n	8005424 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	1c5a      	adds	r2, r3, #1
 8005446:	617a      	str	r2, [r7, #20]
 8005448:	693a      	ldr	r2, [r7, #16]
 800544a:	b2d2      	uxtb	r2, r2
 800544c:	701a      	strb	r2, [r3, #0]
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8005452:	2202      	movs	r2, #2
 8005454:	6879      	ldr	r1, [r7, #4]
 8005456:	68b8      	ldr	r0, [r7, #8]
 8005458:	f7fe ff76 	bl	8004348 <_SendPacket>
  RECORD_END();
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f383 8811 	msr	BASEPRI, r3
}
 8005462:	bf00      	nop
 8005464:	3718      	adds	r7, #24
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}
 800546a:	bf00      	nop
 800546c:	200143b0 	.word	0x200143b0
 8005470:	e000ed04 	.word	0xe000ed04

08005474 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8005474:	b580      	push	{r7, lr}
 8005476:	b082      	sub	sp, #8
 8005478:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800547a:	f3ef 8311 	mrs	r3, BASEPRI
 800547e:	f04f 0120 	mov.w	r1, #32
 8005482:	f381 8811 	msr	BASEPRI, r1
 8005486:	607b      	str	r3, [r7, #4]
 8005488:	4807      	ldr	r0, [pc, #28]	; (80054a8 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800548a:	f7fe fe6a 	bl	8004162 <_PreparePacket>
 800548e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8005490:	2203      	movs	r2, #3
 8005492:	6839      	ldr	r1, [r7, #0]
 8005494:	6838      	ldr	r0, [r7, #0]
 8005496:	f7fe ff57 	bl	8004348 <_SendPacket>
  RECORD_END();
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	f383 8811 	msr	BASEPRI, r3
}
 80054a0:	bf00      	nop
 80054a2:	3708      	adds	r7, #8
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}
 80054a8:	200143b0 	.word	0x200143b0

080054ac <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b082      	sub	sp, #8
 80054b0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80054b2:	f3ef 8311 	mrs	r3, BASEPRI
 80054b6:	f04f 0120 	mov.w	r1, #32
 80054ba:	f381 8811 	msr	BASEPRI, r1
 80054be:	607b      	str	r3, [r7, #4]
 80054c0:	4807      	ldr	r0, [pc, #28]	; (80054e0 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80054c2:	f7fe fe4e 	bl	8004162 <_PreparePacket>
 80054c6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80054c8:	2212      	movs	r2, #18
 80054ca:	6839      	ldr	r1, [r7, #0]
 80054cc:	6838      	ldr	r0, [r7, #0]
 80054ce:	f7fe ff3b 	bl	8004348 <_SendPacket>
  RECORD_END();
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	f383 8811 	msr	BASEPRI, r3
}
 80054d8:	bf00      	nop
 80054da:	3708      	adds	r7, #8
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}
 80054e0:	200143b0 	.word	0x200143b0

080054e4 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b082      	sub	sp, #8
 80054e8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80054ea:	f3ef 8311 	mrs	r3, BASEPRI
 80054ee:	f04f 0120 	mov.w	r1, #32
 80054f2:	f381 8811 	msr	BASEPRI, r1
 80054f6:	607b      	str	r3, [r7, #4]
 80054f8:	4807      	ldr	r0, [pc, #28]	; (8005518 <SEGGER_SYSVIEW_OnIdle+0x34>)
 80054fa:	f7fe fe32 	bl	8004162 <_PreparePacket>
 80054fe:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8005500:	2211      	movs	r2, #17
 8005502:	6839      	ldr	r1, [r7, #0]
 8005504:	6838      	ldr	r0, [r7, #0]
 8005506:	f7fe ff1f 	bl	8004348 <_SendPacket>
  RECORD_END();
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f383 8811 	msr	BASEPRI, r3
}
 8005510:	bf00      	nop
 8005512:	3708      	adds	r7, #8
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}
 8005518:	200143b0 	.word	0x200143b0

0800551c <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800551c:	b580      	push	{r7, lr}
 800551e:	b088      	sub	sp, #32
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005524:	f3ef 8311 	mrs	r3, BASEPRI
 8005528:	f04f 0120 	mov.w	r1, #32
 800552c:	f381 8811 	msr	BASEPRI, r1
 8005530:	617b      	str	r3, [r7, #20]
 8005532:	4819      	ldr	r0, [pc, #100]	; (8005598 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8005534:	f7fe fe15 	bl	8004162 <_PreparePacket>
 8005538:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800553e:	4b17      	ldr	r3, [pc, #92]	; (800559c <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8005540:	691b      	ldr	r3, [r3, #16]
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	1ad3      	subs	r3, r2, r3
 8005546:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	61fb      	str	r3, [r7, #28]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	61bb      	str	r3, [r7, #24]
 8005550:	e00b      	b.n	800556a <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8005552:	69bb      	ldr	r3, [r7, #24]
 8005554:	b2da      	uxtb	r2, r3
 8005556:	69fb      	ldr	r3, [r7, #28]
 8005558:	1c59      	adds	r1, r3, #1
 800555a:	61f9      	str	r1, [r7, #28]
 800555c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005560:	b2d2      	uxtb	r2, r2
 8005562:	701a      	strb	r2, [r3, #0]
 8005564:	69bb      	ldr	r3, [r7, #24]
 8005566:	09db      	lsrs	r3, r3, #7
 8005568:	61bb      	str	r3, [r7, #24]
 800556a:	69bb      	ldr	r3, [r7, #24]
 800556c:	2b7f      	cmp	r3, #127	; 0x7f
 800556e:	d8f0      	bhi.n	8005552 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8005570:	69fb      	ldr	r3, [r7, #28]
 8005572:	1c5a      	adds	r2, r3, #1
 8005574:	61fa      	str	r2, [r7, #28]
 8005576:	69ba      	ldr	r2, [r7, #24]
 8005578:	b2d2      	uxtb	r2, r2
 800557a:	701a      	strb	r2, [r3, #0]
 800557c:	69fb      	ldr	r3, [r7, #28]
 800557e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8005580:	2208      	movs	r2, #8
 8005582:	68f9      	ldr	r1, [r7, #12]
 8005584:	6938      	ldr	r0, [r7, #16]
 8005586:	f7fe fedf 	bl	8004348 <_SendPacket>
  RECORD_END();
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	f383 8811 	msr	BASEPRI, r3
}
 8005590:	bf00      	nop
 8005592:	3720      	adds	r7, #32
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}
 8005598:	200143b0 	.word	0x200143b0
 800559c:	20014380 	.word	0x20014380

080055a0 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b088      	sub	sp, #32
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80055a8:	f3ef 8311 	mrs	r3, BASEPRI
 80055ac:	f04f 0120 	mov.w	r1, #32
 80055b0:	f381 8811 	msr	BASEPRI, r1
 80055b4:	617b      	str	r3, [r7, #20]
 80055b6:	4819      	ldr	r0, [pc, #100]	; (800561c <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80055b8:	f7fe fdd3 	bl	8004162 <_PreparePacket>
 80055bc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80055c2:	4b17      	ldr	r3, [pc, #92]	; (8005620 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80055c4:	691b      	ldr	r3, [r3, #16]
 80055c6:	687a      	ldr	r2, [r7, #4]
 80055c8:	1ad3      	subs	r3, r2, r3
 80055ca:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	61fb      	str	r3, [r7, #28]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	61bb      	str	r3, [r7, #24]
 80055d4:	e00b      	b.n	80055ee <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80055d6:	69bb      	ldr	r3, [r7, #24]
 80055d8:	b2da      	uxtb	r2, r3
 80055da:	69fb      	ldr	r3, [r7, #28]
 80055dc:	1c59      	adds	r1, r3, #1
 80055de:	61f9      	str	r1, [r7, #28]
 80055e0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80055e4:	b2d2      	uxtb	r2, r2
 80055e6:	701a      	strb	r2, [r3, #0]
 80055e8:	69bb      	ldr	r3, [r7, #24]
 80055ea:	09db      	lsrs	r3, r3, #7
 80055ec:	61bb      	str	r3, [r7, #24]
 80055ee:	69bb      	ldr	r3, [r7, #24]
 80055f0:	2b7f      	cmp	r3, #127	; 0x7f
 80055f2:	d8f0      	bhi.n	80055d6 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80055f4:	69fb      	ldr	r3, [r7, #28]
 80055f6:	1c5a      	adds	r2, r3, #1
 80055f8:	61fa      	str	r2, [r7, #28]
 80055fa:	69ba      	ldr	r2, [r7, #24]
 80055fc:	b2d2      	uxtb	r2, r2
 80055fe:	701a      	strb	r2, [r3, #0]
 8005600:	69fb      	ldr	r3, [r7, #28]
 8005602:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8005604:	2204      	movs	r2, #4
 8005606:	68f9      	ldr	r1, [r7, #12]
 8005608:	6938      	ldr	r0, [r7, #16]
 800560a:	f7fe fe9d 	bl	8004348 <_SendPacket>
  RECORD_END();
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	f383 8811 	msr	BASEPRI, r3
}
 8005614:	bf00      	nop
 8005616:	3720      	adds	r7, #32
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}
 800561c:	200143b0 	.word	0x200143b0
 8005620:	20014380 	.word	0x20014380

08005624 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8005624:	b580      	push	{r7, lr}
 8005626:	b088      	sub	sp, #32
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800562c:	f3ef 8311 	mrs	r3, BASEPRI
 8005630:	f04f 0120 	mov.w	r1, #32
 8005634:	f381 8811 	msr	BASEPRI, r1
 8005638:	617b      	str	r3, [r7, #20]
 800563a:	4819      	ldr	r0, [pc, #100]	; (80056a0 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 800563c:	f7fe fd91 	bl	8004162 <_PreparePacket>
 8005640:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005646:	4b17      	ldr	r3, [pc, #92]	; (80056a4 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8005648:	691b      	ldr	r3, [r3, #16]
 800564a:	687a      	ldr	r2, [r7, #4]
 800564c:	1ad3      	subs	r3, r2, r3
 800564e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	61fb      	str	r3, [r7, #28]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	61bb      	str	r3, [r7, #24]
 8005658:	e00b      	b.n	8005672 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800565a:	69bb      	ldr	r3, [r7, #24]
 800565c:	b2da      	uxtb	r2, r3
 800565e:	69fb      	ldr	r3, [r7, #28]
 8005660:	1c59      	adds	r1, r3, #1
 8005662:	61f9      	str	r1, [r7, #28]
 8005664:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005668:	b2d2      	uxtb	r2, r2
 800566a:	701a      	strb	r2, [r3, #0]
 800566c:	69bb      	ldr	r3, [r7, #24]
 800566e:	09db      	lsrs	r3, r3, #7
 8005670:	61bb      	str	r3, [r7, #24]
 8005672:	69bb      	ldr	r3, [r7, #24]
 8005674:	2b7f      	cmp	r3, #127	; 0x7f
 8005676:	d8f0      	bhi.n	800565a <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8005678:	69fb      	ldr	r3, [r7, #28]
 800567a:	1c5a      	adds	r2, r3, #1
 800567c:	61fa      	str	r2, [r7, #28]
 800567e:	69ba      	ldr	r2, [r7, #24]
 8005680:	b2d2      	uxtb	r2, r2
 8005682:	701a      	strb	r2, [r3, #0]
 8005684:	69fb      	ldr	r3, [r7, #28]
 8005686:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8005688:	2206      	movs	r2, #6
 800568a:	68f9      	ldr	r1, [r7, #12]
 800568c:	6938      	ldr	r0, [r7, #16]
 800568e:	f7fe fe5b 	bl	8004348 <_SendPacket>
  RECORD_END();
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	f383 8811 	msr	BASEPRI, r3
}
 8005698:	bf00      	nop
 800569a:	3720      	adds	r7, #32
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}
 80056a0:	200143b0 	.word	0x200143b0
 80056a4:	20014380 	.word	0x20014380

080056a8 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b08c      	sub	sp, #48	; 0x30
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	4603      	mov	r3, r0
 80056b0:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80056b2:	4b3b      	ldr	r3, [pc, #236]	; (80057a0 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d06d      	beq.n	8005796 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80056ba:	4b39      	ldr	r3, [pc, #228]	; (80057a0 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80056c0:	2300      	movs	r3, #0
 80056c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80056c4:	e008      	b.n	80056d8 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80056c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056c8:	691b      	ldr	r3, [r3, #16]
 80056ca:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80056cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d007      	beq.n	80056e2 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80056d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056d4:	3301      	adds	r3, #1
 80056d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80056d8:	79fb      	ldrb	r3, [r7, #7]
 80056da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056dc:	429a      	cmp	r2, r3
 80056de:	d3f2      	bcc.n	80056c6 <SEGGER_SYSVIEW_SendModule+0x1e>
 80056e0:	e000      	b.n	80056e4 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80056e2:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80056e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d055      	beq.n	8005796 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80056ea:	f3ef 8311 	mrs	r3, BASEPRI
 80056ee:	f04f 0120 	mov.w	r1, #32
 80056f2:	f381 8811 	msr	BASEPRI, r1
 80056f6:	617b      	str	r3, [r7, #20]
 80056f8:	482a      	ldr	r0, [pc, #168]	; (80057a4 <SEGGER_SYSVIEW_SendModule+0xfc>)
 80056fa:	f7fe fd32 	bl	8004162 <_PreparePacket>
 80056fe:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	627b      	str	r3, [r7, #36]	; 0x24
 8005708:	79fb      	ldrb	r3, [r7, #7]
 800570a:	623b      	str	r3, [r7, #32]
 800570c:	e00b      	b.n	8005726 <SEGGER_SYSVIEW_SendModule+0x7e>
 800570e:	6a3b      	ldr	r3, [r7, #32]
 8005710:	b2da      	uxtb	r2, r3
 8005712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005714:	1c59      	adds	r1, r3, #1
 8005716:	6279      	str	r1, [r7, #36]	; 0x24
 8005718:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800571c:	b2d2      	uxtb	r2, r2
 800571e:	701a      	strb	r2, [r3, #0]
 8005720:	6a3b      	ldr	r3, [r7, #32]
 8005722:	09db      	lsrs	r3, r3, #7
 8005724:	623b      	str	r3, [r7, #32]
 8005726:	6a3b      	ldr	r3, [r7, #32]
 8005728:	2b7f      	cmp	r3, #127	; 0x7f
 800572a:	d8f0      	bhi.n	800570e <SEGGER_SYSVIEW_SendModule+0x66>
 800572c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800572e:	1c5a      	adds	r2, r3, #1
 8005730:	627a      	str	r2, [r7, #36]	; 0x24
 8005732:	6a3a      	ldr	r2, [r7, #32]
 8005734:	b2d2      	uxtb	r2, r2
 8005736:	701a      	strb	r2, [r3, #0]
 8005738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573a:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	61fb      	str	r3, [r7, #28]
 8005740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	61bb      	str	r3, [r7, #24]
 8005746:	e00b      	b.n	8005760 <SEGGER_SYSVIEW_SendModule+0xb8>
 8005748:	69bb      	ldr	r3, [r7, #24]
 800574a:	b2da      	uxtb	r2, r3
 800574c:	69fb      	ldr	r3, [r7, #28]
 800574e:	1c59      	adds	r1, r3, #1
 8005750:	61f9      	str	r1, [r7, #28]
 8005752:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005756:	b2d2      	uxtb	r2, r2
 8005758:	701a      	strb	r2, [r3, #0]
 800575a:	69bb      	ldr	r3, [r7, #24]
 800575c:	09db      	lsrs	r3, r3, #7
 800575e:	61bb      	str	r3, [r7, #24]
 8005760:	69bb      	ldr	r3, [r7, #24]
 8005762:	2b7f      	cmp	r3, #127	; 0x7f
 8005764:	d8f0      	bhi.n	8005748 <SEGGER_SYSVIEW_SendModule+0xa0>
 8005766:	69fb      	ldr	r3, [r7, #28]
 8005768:	1c5a      	adds	r2, r3, #1
 800576a:	61fa      	str	r2, [r7, #28]
 800576c:	69ba      	ldr	r2, [r7, #24]
 800576e:	b2d2      	uxtb	r2, r2
 8005770:	701a      	strb	r2, [r3, #0]
 8005772:	69fb      	ldr	r3, [r7, #28]
 8005774:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	2280      	movs	r2, #128	; 0x80
 800577c:	4619      	mov	r1, r3
 800577e:	68f8      	ldr	r0, [r7, #12]
 8005780:	f7fe fca2 	bl	80040c8 <_EncodeStr>
 8005784:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8005786:	2216      	movs	r2, #22
 8005788:	68f9      	ldr	r1, [r7, #12]
 800578a:	6938      	ldr	r0, [r7, #16]
 800578c:	f7fe fddc 	bl	8004348 <_SendPacket>
      RECORD_END();
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8005796:	bf00      	nop
 8005798:	3730      	adds	r7, #48	; 0x30
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}
 800579e:	bf00      	nop
 80057a0:	200143a8 	.word	0x200143a8
 80057a4:	200143b0 	.word	0x200143b0

080057a8 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b082      	sub	sp, #8
 80057ac:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80057ae:	4b0c      	ldr	r3, [pc, #48]	; (80057e0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d00f      	beq.n	80057d6 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80057b6:	4b0a      	ldr	r3, [pc, #40]	; (80057e0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	68db      	ldr	r3, [r3, #12]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d002      	beq.n	80057ca <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	68db      	ldr	r3, [r3, #12]
 80057c8:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	691b      	ldr	r3, [r3, #16]
 80057ce:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d1f2      	bne.n	80057bc <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80057d6:	bf00      	nop
 80057d8:	3708      	adds	r7, #8
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}
 80057de:	bf00      	nop
 80057e0:	200143a8 	.word	0x200143a8

080057e4 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b086      	sub	sp, #24
 80057e8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80057ea:	f3ef 8311 	mrs	r3, BASEPRI
 80057ee:	f04f 0120 	mov.w	r1, #32
 80057f2:	f381 8811 	msr	BASEPRI, r1
 80057f6:	60fb      	str	r3, [r7, #12]
 80057f8:	4817      	ldr	r0, [pc, #92]	; (8005858 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80057fa:	f7fe fcb2 	bl	8004162 <_PreparePacket>
 80057fe:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	617b      	str	r3, [r7, #20]
 8005808:	4b14      	ldr	r3, [pc, #80]	; (800585c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800580a:	781b      	ldrb	r3, [r3, #0]
 800580c:	613b      	str	r3, [r7, #16]
 800580e:	e00b      	b.n	8005828 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	b2da      	uxtb	r2, r3
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	1c59      	adds	r1, r3, #1
 8005818:	6179      	str	r1, [r7, #20]
 800581a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800581e:	b2d2      	uxtb	r2, r2
 8005820:	701a      	strb	r2, [r3, #0]
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	09db      	lsrs	r3, r3, #7
 8005826:	613b      	str	r3, [r7, #16]
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	2b7f      	cmp	r3, #127	; 0x7f
 800582c:	d8f0      	bhi.n	8005810 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	1c5a      	adds	r2, r3, #1
 8005832:	617a      	str	r2, [r7, #20]
 8005834:	693a      	ldr	r2, [r7, #16]
 8005836:	b2d2      	uxtb	r2, r2
 8005838:	701a      	strb	r2, [r3, #0]
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800583e:	221b      	movs	r2, #27
 8005840:	6879      	ldr	r1, [r7, #4]
 8005842:	68b8      	ldr	r0, [r7, #8]
 8005844:	f7fe fd80 	bl	8004348 <_SendPacket>
  RECORD_END();
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f383 8811 	msr	BASEPRI, r3
}
 800584e:	bf00      	nop
 8005850:	3718      	adds	r7, #24
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}
 8005856:	bf00      	nop
 8005858:	200143b0 	.word	0x200143b0
 800585c:	200143ac 	.word	0x200143ac

08005860 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8005860:	b40f      	push	{r0, r1, r2, r3}
 8005862:	b580      	push	{r7, lr}
 8005864:	b082      	sub	sp, #8
 8005866:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8005868:	f107 0314 	add.w	r3, r7, #20
 800586c:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 800586e:	1d3b      	adds	r3, r7, #4
 8005870:	461a      	mov	r2, r3
 8005872:	2100      	movs	r1, #0
 8005874:	6938      	ldr	r0, [r7, #16]
 8005876:	f7fe fff1 	bl	800485c <_VPrintTarget>
  va_end(ParamList);
}
 800587a:	bf00      	nop
 800587c:	3708      	adds	r7, #8
 800587e:	46bd      	mov	sp, r7
 8005880:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005884:	b004      	add	sp, #16
 8005886:	4770      	bx	lr

08005888 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8005888:	b580      	push	{r7, lr}
 800588a:	b08a      	sub	sp, #40	; 0x28
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005890:	f3ef 8311 	mrs	r3, BASEPRI
 8005894:	f04f 0120 	mov.w	r1, #32
 8005898:	f381 8811 	msr	BASEPRI, r1
 800589c:	617b      	str	r3, [r7, #20]
 800589e:	4827      	ldr	r0, [pc, #156]	; (800593c <SEGGER_SYSVIEW_Warn+0xb4>)
 80058a0:	f7fe fc5f 	bl	8004162 <_PreparePacket>
 80058a4:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80058a6:	2280      	movs	r2, #128	; 0x80
 80058a8:	6879      	ldr	r1, [r7, #4]
 80058aa:	6938      	ldr	r0, [r7, #16]
 80058ac:	f7fe fc0c 	bl	80040c8 <_EncodeStr>
 80058b0:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	627b      	str	r3, [r7, #36]	; 0x24
 80058b6:	2301      	movs	r3, #1
 80058b8:	623b      	str	r3, [r7, #32]
 80058ba:	e00b      	b.n	80058d4 <SEGGER_SYSVIEW_Warn+0x4c>
 80058bc:	6a3b      	ldr	r3, [r7, #32]
 80058be:	b2da      	uxtb	r2, r3
 80058c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c2:	1c59      	adds	r1, r3, #1
 80058c4:	6279      	str	r1, [r7, #36]	; 0x24
 80058c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80058ca:	b2d2      	uxtb	r2, r2
 80058cc:	701a      	strb	r2, [r3, #0]
 80058ce:	6a3b      	ldr	r3, [r7, #32]
 80058d0:	09db      	lsrs	r3, r3, #7
 80058d2:	623b      	str	r3, [r7, #32]
 80058d4:	6a3b      	ldr	r3, [r7, #32]
 80058d6:	2b7f      	cmp	r3, #127	; 0x7f
 80058d8:	d8f0      	bhi.n	80058bc <SEGGER_SYSVIEW_Warn+0x34>
 80058da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058dc:	1c5a      	adds	r2, r3, #1
 80058de:	627a      	str	r2, [r7, #36]	; 0x24
 80058e0:	6a3a      	ldr	r2, [r7, #32]
 80058e2:	b2d2      	uxtb	r2, r2
 80058e4:	701a      	strb	r2, [r3, #0]
 80058e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	61fb      	str	r3, [r7, #28]
 80058ee:	2300      	movs	r3, #0
 80058f0:	61bb      	str	r3, [r7, #24]
 80058f2:	e00b      	b.n	800590c <SEGGER_SYSVIEW_Warn+0x84>
 80058f4:	69bb      	ldr	r3, [r7, #24]
 80058f6:	b2da      	uxtb	r2, r3
 80058f8:	69fb      	ldr	r3, [r7, #28]
 80058fa:	1c59      	adds	r1, r3, #1
 80058fc:	61f9      	str	r1, [r7, #28]
 80058fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005902:	b2d2      	uxtb	r2, r2
 8005904:	701a      	strb	r2, [r3, #0]
 8005906:	69bb      	ldr	r3, [r7, #24]
 8005908:	09db      	lsrs	r3, r3, #7
 800590a:	61bb      	str	r3, [r7, #24]
 800590c:	69bb      	ldr	r3, [r7, #24]
 800590e:	2b7f      	cmp	r3, #127	; 0x7f
 8005910:	d8f0      	bhi.n	80058f4 <SEGGER_SYSVIEW_Warn+0x6c>
 8005912:	69fb      	ldr	r3, [r7, #28]
 8005914:	1c5a      	adds	r2, r3, #1
 8005916:	61fa      	str	r2, [r7, #28]
 8005918:	69ba      	ldr	r2, [r7, #24]
 800591a:	b2d2      	uxtb	r2, r2
 800591c:	701a      	strb	r2, [r3, #0]
 800591e:	69fb      	ldr	r3, [r7, #28]
 8005920:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005922:	221a      	movs	r2, #26
 8005924:	68f9      	ldr	r1, [r7, #12]
 8005926:	6938      	ldr	r0, [r7, #16]
 8005928:	f7fe fd0e 	bl	8004348 <_SendPacket>
  RECORD_END();
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	f383 8811 	msr	BASEPRI, r3
}
 8005932:	bf00      	nop
 8005934:	3728      	adds	r7, #40	; 0x28
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}
 800593a:	bf00      	nop
 800593c:	200143b0 	.word	0x200143b0

08005940 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8005940:	b580      	push	{r7, lr}
 8005942:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005944:	4b13      	ldr	r3, [pc, #76]	; (8005994 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005946:	7e1b      	ldrb	r3, [r3, #24]
 8005948:	4619      	mov	r1, r3
 800594a:	4a13      	ldr	r2, [pc, #76]	; (8005998 <SEGGER_SYSVIEW_IsStarted+0x58>)
 800594c:	460b      	mov	r3, r1
 800594e:	005b      	lsls	r3, r3, #1
 8005950:	440b      	add	r3, r1
 8005952:	00db      	lsls	r3, r3, #3
 8005954:	4413      	add	r3, r2
 8005956:	336c      	adds	r3, #108	; 0x6c
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	4b0e      	ldr	r3, [pc, #56]	; (8005994 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800595c:	7e1b      	ldrb	r3, [r3, #24]
 800595e:	4618      	mov	r0, r3
 8005960:	490d      	ldr	r1, [pc, #52]	; (8005998 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8005962:	4603      	mov	r3, r0
 8005964:	005b      	lsls	r3, r3, #1
 8005966:	4403      	add	r3, r0
 8005968:	00db      	lsls	r3, r3, #3
 800596a:	440b      	add	r3, r1
 800596c:	3370      	adds	r3, #112	; 0x70
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	429a      	cmp	r2, r3
 8005972:	d00b      	beq.n	800598c <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005974:	4b07      	ldr	r3, [pc, #28]	; (8005994 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005976:	789b      	ldrb	r3, [r3, #2]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d107      	bne.n	800598c <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800597c:	4b05      	ldr	r3, [pc, #20]	; (8005994 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800597e:	2201      	movs	r2, #1
 8005980:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005982:	f7fe fbfb 	bl	800417c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005986:	4b03      	ldr	r3, [pc, #12]	; (8005994 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005988:	2200      	movs	r2, #0
 800598a:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 800598c:	4b01      	ldr	r3, [pc, #4]	; (8005994 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800598e:	781b      	ldrb	r3, [r3, #0]
}
 8005990:	4618      	mov	r0, r3
 8005992:	bd80      	pop	{r7, pc}
 8005994:	20014380 	.word	0x20014380
 8005998:	20012ec0 	.word	0x20012ec0

0800599c <__libc_init_array>:
 800599c:	b570      	push	{r4, r5, r6, lr}
 800599e:	4d0d      	ldr	r5, [pc, #52]	; (80059d4 <__libc_init_array+0x38>)
 80059a0:	4c0d      	ldr	r4, [pc, #52]	; (80059d8 <__libc_init_array+0x3c>)
 80059a2:	1b64      	subs	r4, r4, r5
 80059a4:	10a4      	asrs	r4, r4, #2
 80059a6:	2600      	movs	r6, #0
 80059a8:	42a6      	cmp	r6, r4
 80059aa:	d109      	bne.n	80059c0 <__libc_init_array+0x24>
 80059ac:	4d0b      	ldr	r5, [pc, #44]	; (80059dc <__libc_init_array+0x40>)
 80059ae:	4c0c      	ldr	r4, [pc, #48]	; (80059e0 <__libc_init_array+0x44>)
 80059b0:	f000 fcc0 	bl	8006334 <_init>
 80059b4:	1b64      	subs	r4, r4, r5
 80059b6:	10a4      	asrs	r4, r4, #2
 80059b8:	2600      	movs	r6, #0
 80059ba:	42a6      	cmp	r6, r4
 80059bc:	d105      	bne.n	80059ca <__libc_init_array+0x2e>
 80059be:	bd70      	pop	{r4, r5, r6, pc}
 80059c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80059c4:	4798      	blx	r3
 80059c6:	3601      	adds	r6, #1
 80059c8:	e7ee      	b.n	80059a8 <__libc_init_array+0xc>
 80059ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80059ce:	4798      	blx	r3
 80059d0:	3601      	adds	r6, #1
 80059d2:	e7f2      	b.n	80059ba <__libc_init_array+0x1e>
 80059d4:	080064e0 	.word	0x080064e0
 80059d8:	080064e0 	.word	0x080064e0
 80059dc:	080064e0 	.word	0x080064e0
 80059e0:	080064e4 	.word	0x080064e4

080059e4 <memcmp>:
 80059e4:	b510      	push	{r4, lr}
 80059e6:	3901      	subs	r1, #1
 80059e8:	4402      	add	r2, r0
 80059ea:	4290      	cmp	r0, r2
 80059ec:	d101      	bne.n	80059f2 <memcmp+0xe>
 80059ee:	2000      	movs	r0, #0
 80059f0:	e005      	b.n	80059fe <memcmp+0x1a>
 80059f2:	7803      	ldrb	r3, [r0, #0]
 80059f4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80059f8:	42a3      	cmp	r3, r4
 80059fa:	d001      	beq.n	8005a00 <memcmp+0x1c>
 80059fc:	1b18      	subs	r0, r3, r4
 80059fe:	bd10      	pop	{r4, pc}
 8005a00:	3001      	adds	r0, #1
 8005a02:	e7f2      	b.n	80059ea <memcmp+0x6>

08005a04 <memcpy>:
 8005a04:	440a      	add	r2, r1
 8005a06:	4291      	cmp	r1, r2
 8005a08:	f100 33ff 	add.w	r3, r0, #4294967295
 8005a0c:	d100      	bne.n	8005a10 <memcpy+0xc>
 8005a0e:	4770      	bx	lr
 8005a10:	b510      	push	{r4, lr}
 8005a12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a16:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a1a:	4291      	cmp	r1, r2
 8005a1c:	d1f9      	bne.n	8005a12 <memcpy+0xe>
 8005a1e:	bd10      	pop	{r4, pc}

08005a20 <memset>:
 8005a20:	4402      	add	r2, r0
 8005a22:	4603      	mov	r3, r0
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d100      	bne.n	8005a2a <memset+0xa>
 8005a28:	4770      	bx	lr
 8005a2a:	f803 1b01 	strb.w	r1, [r3], #1
 8005a2e:	e7f9      	b.n	8005a24 <memset+0x4>

08005a30 <sniprintf>:
 8005a30:	b40c      	push	{r2, r3}
 8005a32:	b530      	push	{r4, r5, lr}
 8005a34:	4b17      	ldr	r3, [pc, #92]	; (8005a94 <sniprintf+0x64>)
 8005a36:	1e0c      	subs	r4, r1, #0
 8005a38:	681d      	ldr	r5, [r3, #0]
 8005a3a:	b09d      	sub	sp, #116	; 0x74
 8005a3c:	da08      	bge.n	8005a50 <sniprintf+0x20>
 8005a3e:	238b      	movs	r3, #139	; 0x8b
 8005a40:	602b      	str	r3, [r5, #0]
 8005a42:	f04f 30ff 	mov.w	r0, #4294967295
 8005a46:	b01d      	add	sp, #116	; 0x74
 8005a48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005a4c:	b002      	add	sp, #8
 8005a4e:	4770      	bx	lr
 8005a50:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005a54:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005a58:	bf14      	ite	ne
 8005a5a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005a5e:	4623      	moveq	r3, r4
 8005a60:	9304      	str	r3, [sp, #16]
 8005a62:	9307      	str	r3, [sp, #28]
 8005a64:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005a68:	9002      	str	r0, [sp, #8]
 8005a6a:	9006      	str	r0, [sp, #24]
 8005a6c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005a70:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005a72:	ab21      	add	r3, sp, #132	; 0x84
 8005a74:	a902      	add	r1, sp, #8
 8005a76:	4628      	mov	r0, r5
 8005a78:	9301      	str	r3, [sp, #4]
 8005a7a:	f000 f869 	bl	8005b50 <_svfiprintf_r>
 8005a7e:	1c43      	adds	r3, r0, #1
 8005a80:	bfbc      	itt	lt
 8005a82:	238b      	movlt	r3, #139	; 0x8b
 8005a84:	602b      	strlt	r3, [r5, #0]
 8005a86:	2c00      	cmp	r4, #0
 8005a88:	d0dd      	beq.n	8005a46 <sniprintf+0x16>
 8005a8a:	9b02      	ldr	r3, [sp, #8]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	701a      	strb	r2, [r3, #0]
 8005a90:	e7d9      	b.n	8005a46 <sniprintf+0x16>
 8005a92:	bf00      	nop
 8005a94:	2000001c 	.word	0x2000001c

08005a98 <__ssputs_r>:
 8005a98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a9c:	688e      	ldr	r6, [r1, #8]
 8005a9e:	429e      	cmp	r6, r3
 8005aa0:	4682      	mov	sl, r0
 8005aa2:	460c      	mov	r4, r1
 8005aa4:	4690      	mov	r8, r2
 8005aa6:	461f      	mov	r7, r3
 8005aa8:	d838      	bhi.n	8005b1c <__ssputs_r+0x84>
 8005aaa:	898a      	ldrh	r2, [r1, #12]
 8005aac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005ab0:	d032      	beq.n	8005b18 <__ssputs_r+0x80>
 8005ab2:	6825      	ldr	r5, [r4, #0]
 8005ab4:	6909      	ldr	r1, [r1, #16]
 8005ab6:	eba5 0901 	sub.w	r9, r5, r1
 8005aba:	6965      	ldr	r5, [r4, #20]
 8005abc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005ac0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005ac4:	3301      	adds	r3, #1
 8005ac6:	444b      	add	r3, r9
 8005ac8:	106d      	asrs	r5, r5, #1
 8005aca:	429d      	cmp	r5, r3
 8005acc:	bf38      	it	cc
 8005ace:	461d      	movcc	r5, r3
 8005ad0:	0553      	lsls	r3, r2, #21
 8005ad2:	d531      	bpl.n	8005b38 <__ssputs_r+0xa0>
 8005ad4:	4629      	mov	r1, r5
 8005ad6:	f000 fb55 	bl	8006184 <_malloc_r>
 8005ada:	4606      	mov	r6, r0
 8005adc:	b950      	cbnz	r0, 8005af4 <__ssputs_r+0x5c>
 8005ade:	230c      	movs	r3, #12
 8005ae0:	f8ca 3000 	str.w	r3, [sl]
 8005ae4:	89a3      	ldrh	r3, [r4, #12]
 8005ae6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005aea:	81a3      	strh	r3, [r4, #12]
 8005aec:	f04f 30ff 	mov.w	r0, #4294967295
 8005af0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005af4:	6921      	ldr	r1, [r4, #16]
 8005af6:	464a      	mov	r2, r9
 8005af8:	f7ff ff84 	bl	8005a04 <memcpy>
 8005afc:	89a3      	ldrh	r3, [r4, #12]
 8005afe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005b02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b06:	81a3      	strh	r3, [r4, #12]
 8005b08:	6126      	str	r6, [r4, #16]
 8005b0a:	6165      	str	r5, [r4, #20]
 8005b0c:	444e      	add	r6, r9
 8005b0e:	eba5 0509 	sub.w	r5, r5, r9
 8005b12:	6026      	str	r6, [r4, #0]
 8005b14:	60a5      	str	r5, [r4, #8]
 8005b16:	463e      	mov	r6, r7
 8005b18:	42be      	cmp	r6, r7
 8005b1a:	d900      	bls.n	8005b1e <__ssputs_r+0x86>
 8005b1c:	463e      	mov	r6, r7
 8005b1e:	6820      	ldr	r0, [r4, #0]
 8005b20:	4632      	mov	r2, r6
 8005b22:	4641      	mov	r1, r8
 8005b24:	f000 faa8 	bl	8006078 <memmove>
 8005b28:	68a3      	ldr	r3, [r4, #8]
 8005b2a:	1b9b      	subs	r3, r3, r6
 8005b2c:	60a3      	str	r3, [r4, #8]
 8005b2e:	6823      	ldr	r3, [r4, #0]
 8005b30:	4433      	add	r3, r6
 8005b32:	6023      	str	r3, [r4, #0]
 8005b34:	2000      	movs	r0, #0
 8005b36:	e7db      	b.n	8005af0 <__ssputs_r+0x58>
 8005b38:	462a      	mov	r2, r5
 8005b3a:	f000 fb97 	bl	800626c <_realloc_r>
 8005b3e:	4606      	mov	r6, r0
 8005b40:	2800      	cmp	r0, #0
 8005b42:	d1e1      	bne.n	8005b08 <__ssputs_r+0x70>
 8005b44:	6921      	ldr	r1, [r4, #16]
 8005b46:	4650      	mov	r0, sl
 8005b48:	f000 fab0 	bl	80060ac <_free_r>
 8005b4c:	e7c7      	b.n	8005ade <__ssputs_r+0x46>
	...

08005b50 <_svfiprintf_r>:
 8005b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b54:	4698      	mov	r8, r3
 8005b56:	898b      	ldrh	r3, [r1, #12]
 8005b58:	061b      	lsls	r3, r3, #24
 8005b5a:	b09d      	sub	sp, #116	; 0x74
 8005b5c:	4607      	mov	r7, r0
 8005b5e:	460d      	mov	r5, r1
 8005b60:	4614      	mov	r4, r2
 8005b62:	d50e      	bpl.n	8005b82 <_svfiprintf_r+0x32>
 8005b64:	690b      	ldr	r3, [r1, #16]
 8005b66:	b963      	cbnz	r3, 8005b82 <_svfiprintf_r+0x32>
 8005b68:	2140      	movs	r1, #64	; 0x40
 8005b6a:	f000 fb0b 	bl	8006184 <_malloc_r>
 8005b6e:	6028      	str	r0, [r5, #0]
 8005b70:	6128      	str	r0, [r5, #16]
 8005b72:	b920      	cbnz	r0, 8005b7e <_svfiprintf_r+0x2e>
 8005b74:	230c      	movs	r3, #12
 8005b76:	603b      	str	r3, [r7, #0]
 8005b78:	f04f 30ff 	mov.w	r0, #4294967295
 8005b7c:	e0d1      	b.n	8005d22 <_svfiprintf_r+0x1d2>
 8005b7e:	2340      	movs	r3, #64	; 0x40
 8005b80:	616b      	str	r3, [r5, #20]
 8005b82:	2300      	movs	r3, #0
 8005b84:	9309      	str	r3, [sp, #36]	; 0x24
 8005b86:	2320      	movs	r3, #32
 8005b88:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005b8c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005b90:	2330      	movs	r3, #48	; 0x30
 8005b92:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005d3c <_svfiprintf_r+0x1ec>
 8005b96:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005b9a:	f04f 0901 	mov.w	r9, #1
 8005b9e:	4623      	mov	r3, r4
 8005ba0:	469a      	mov	sl, r3
 8005ba2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ba6:	b10a      	cbz	r2, 8005bac <_svfiprintf_r+0x5c>
 8005ba8:	2a25      	cmp	r2, #37	; 0x25
 8005baa:	d1f9      	bne.n	8005ba0 <_svfiprintf_r+0x50>
 8005bac:	ebba 0b04 	subs.w	fp, sl, r4
 8005bb0:	d00b      	beq.n	8005bca <_svfiprintf_r+0x7a>
 8005bb2:	465b      	mov	r3, fp
 8005bb4:	4622      	mov	r2, r4
 8005bb6:	4629      	mov	r1, r5
 8005bb8:	4638      	mov	r0, r7
 8005bba:	f7ff ff6d 	bl	8005a98 <__ssputs_r>
 8005bbe:	3001      	adds	r0, #1
 8005bc0:	f000 80aa 	beq.w	8005d18 <_svfiprintf_r+0x1c8>
 8005bc4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005bc6:	445a      	add	r2, fp
 8005bc8:	9209      	str	r2, [sp, #36]	; 0x24
 8005bca:	f89a 3000 	ldrb.w	r3, [sl]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	f000 80a2 	beq.w	8005d18 <_svfiprintf_r+0x1c8>
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	f04f 32ff 	mov.w	r2, #4294967295
 8005bda:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005bde:	f10a 0a01 	add.w	sl, sl, #1
 8005be2:	9304      	str	r3, [sp, #16]
 8005be4:	9307      	str	r3, [sp, #28]
 8005be6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005bea:	931a      	str	r3, [sp, #104]	; 0x68
 8005bec:	4654      	mov	r4, sl
 8005bee:	2205      	movs	r2, #5
 8005bf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bf4:	4851      	ldr	r0, [pc, #324]	; (8005d3c <_svfiprintf_r+0x1ec>)
 8005bf6:	f7fa fb3b 	bl	8000270 <memchr>
 8005bfa:	9a04      	ldr	r2, [sp, #16]
 8005bfc:	b9d8      	cbnz	r0, 8005c36 <_svfiprintf_r+0xe6>
 8005bfe:	06d0      	lsls	r0, r2, #27
 8005c00:	bf44      	itt	mi
 8005c02:	2320      	movmi	r3, #32
 8005c04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c08:	0711      	lsls	r1, r2, #28
 8005c0a:	bf44      	itt	mi
 8005c0c:	232b      	movmi	r3, #43	; 0x2b
 8005c0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c12:	f89a 3000 	ldrb.w	r3, [sl]
 8005c16:	2b2a      	cmp	r3, #42	; 0x2a
 8005c18:	d015      	beq.n	8005c46 <_svfiprintf_r+0xf6>
 8005c1a:	9a07      	ldr	r2, [sp, #28]
 8005c1c:	4654      	mov	r4, sl
 8005c1e:	2000      	movs	r0, #0
 8005c20:	f04f 0c0a 	mov.w	ip, #10
 8005c24:	4621      	mov	r1, r4
 8005c26:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c2a:	3b30      	subs	r3, #48	; 0x30
 8005c2c:	2b09      	cmp	r3, #9
 8005c2e:	d94e      	bls.n	8005cce <_svfiprintf_r+0x17e>
 8005c30:	b1b0      	cbz	r0, 8005c60 <_svfiprintf_r+0x110>
 8005c32:	9207      	str	r2, [sp, #28]
 8005c34:	e014      	b.n	8005c60 <_svfiprintf_r+0x110>
 8005c36:	eba0 0308 	sub.w	r3, r0, r8
 8005c3a:	fa09 f303 	lsl.w	r3, r9, r3
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	9304      	str	r3, [sp, #16]
 8005c42:	46a2      	mov	sl, r4
 8005c44:	e7d2      	b.n	8005bec <_svfiprintf_r+0x9c>
 8005c46:	9b03      	ldr	r3, [sp, #12]
 8005c48:	1d19      	adds	r1, r3, #4
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	9103      	str	r1, [sp, #12]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	bfbb      	ittet	lt
 8005c52:	425b      	neglt	r3, r3
 8005c54:	f042 0202 	orrlt.w	r2, r2, #2
 8005c58:	9307      	strge	r3, [sp, #28]
 8005c5a:	9307      	strlt	r3, [sp, #28]
 8005c5c:	bfb8      	it	lt
 8005c5e:	9204      	strlt	r2, [sp, #16]
 8005c60:	7823      	ldrb	r3, [r4, #0]
 8005c62:	2b2e      	cmp	r3, #46	; 0x2e
 8005c64:	d10c      	bne.n	8005c80 <_svfiprintf_r+0x130>
 8005c66:	7863      	ldrb	r3, [r4, #1]
 8005c68:	2b2a      	cmp	r3, #42	; 0x2a
 8005c6a:	d135      	bne.n	8005cd8 <_svfiprintf_r+0x188>
 8005c6c:	9b03      	ldr	r3, [sp, #12]
 8005c6e:	1d1a      	adds	r2, r3, #4
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	9203      	str	r2, [sp, #12]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	bfb8      	it	lt
 8005c78:	f04f 33ff 	movlt.w	r3, #4294967295
 8005c7c:	3402      	adds	r4, #2
 8005c7e:	9305      	str	r3, [sp, #20]
 8005c80:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005d4c <_svfiprintf_r+0x1fc>
 8005c84:	7821      	ldrb	r1, [r4, #0]
 8005c86:	2203      	movs	r2, #3
 8005c88:	4650      	mov	r0, sl
 8005c8a:	f7fa faf1 	bl	8000270 <memchr>
 8005c8e:	b140      	cbz	r0, 8005ca2 <_svfiprintf_r+0x152>
 8005c90:	2340      	movs	r3, #64	; 0x40
 8005c92:	eba0 000a 	sub.w	r0, r0, sl
 8005c96:	fa03 f000 	lsl.w	r0, r3, r0
 8005c9a:	9b04      	ldr	r3, [sp, #16]
 8005c9c:	4303      	orrs	r3, r0
 8005c9e:	3401      	adds	r4, #1
 8005ca0:	9304      	str	r3, [sp, #16]
 8005ca2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ca6:	4826      	ldr	r0, [pc, #152]	; (8005d40 <_svfiprintf_r+0x1f0>)
 8005ca8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005cac:	2206      	movs	r2, #6
 8005cae:	f7fa fadf 	bl	8000270 <memchr>
 8005cb2:	2800      	cmp	r0, #0
 8005cb4:	d038      	beq.n	8005d28 <_svfiprintf_r+0x1d8>
 8005cb6:	4b23      	ldr	r3, [pc, #140]	; (8005d44 <_svfiprintf_r+0x1f4>)
 8005cb8:	bb1b      	cbnz	r3, 8005d02 <_svfiprintf_r+0x1b2>
 8005cba:	9b03      	ldr	r3, [sp, #12]
 8005cbc:	3307      	adds	r3, #7
 8005cbe:	f023 0307 	bic.w	r3, r3, #7
 8005cc2:	3308      	adds	r3, #8
 8005cc4:	9303      	str	r3, [sp, #12]
 8005cc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cc8:	4433      	add	r3, r6
 8005cca:	9309      	str	r3, [sp, #36]	; 0x24
 8005ccc:	e767      	b.n	8005b9e <_svfiprintf_r+0x4e>
 8005cce:	fb0c 3202 	mla	r2, ip, r2, r3
 8005cd2:	460c      	mov	r4, r1
 8005cd4:	2001      	movs	r0, #1
 8005cd6:	e7a5      	b.n	8005c24 <_svfiprintf_r+0xd4>
 8005cd8:	2300      	movs	r3, #0
 8005cda:	3401      	adds	r4, #1
 8005cdc:	9305      	str	r3, [sp, #20]
 8005cde:	4619      	mov	r1, r3
 8005ce0:	f04f 0c0a 	mov.w	ip, #10
 8005ce4:	4620      	mov	r0, r4
 8005ce6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005cea:	3a30      	subs	r2, #48	; 0x30
 8005cec:	2a09      	cmp	r2, #9
 8005cee:	d903      	bls.n	8005cf8 <_svfiprintf_r+0x1a8>
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d0c5      	beq.n	8005c80 <_svfiprintf_r+0x130>
 8005cf4:	9105      	str	r1, [sp, #20]
 8005cf6:	e7c3      	b.n	8005c80 <_svfiprintf_r+0x130>
 8005cf8:	fb0c 2101 	mla	r1, ip, r1, r2
 8005cfc:	4604      	mov	r4, r0
 8005cfe:	2301      	movs	r3, #1
 8005d00:	e7f0      	b.n	8005ce4 <_svfiprintf_r+0x194>
 8005d02:	ab03      	add	r3, sp, #12
 8005d04:	9300      	str	r3, [sp, #0]
 8005d06:	462a      	mov	r2, r5
 8005d08:	4b0f      	ldr	r3, [pc, #60]	; (8005d48 <_svfiprintf_r+0x1f8>)
 8005d0a:	a904      	add	r1, sp, #16
 8005d0c:	4638      	mov	r0, r7
 8005d0e:	f3af 8000 	nop.w
 8005d12:	1c42      	adds	r2, r0, #1
 8005d14:	4606      	mov	r6, r0
 8005d16:	d1d6      	bne.n	8005cc6 <_svfiprintf_r+0x176>
 8005d18:	89ab      	ldrh	r3, [r5, #12]
 8005d1a:	065b      	lsls	r3, r3, #25
 8005d1c:	f53f af2c 	bmi.w	8005b78 <_svfiprintf_r+0x28>
 8005d20:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005d22:	b01d      	add	sp, #116	; 0x74
 8005d24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d28:	ab03      	add	r3, sp, #12
 8005d2a:	9300      	str	r3, [sp, #0]
 8005d2c:	462a      	mov	r2, r5
 8005d2e:	4b06      	ldr	r3, [pc, #24]	; (8005d48 <_svfiprintf_r+0x1f8>)
 8005d30:	a904      	add	r1, sp, #16
 8005d32:	4638      	mov	r0, r7
 8005d34:	f000 f87a 	bl	8005e2c <_printf_i>
 8005d38:	e7eb      	b.n	8005d12 <_svfiprintf_r+0x1c2>
 8005d3a:	bf00      	nop
 8005d3c:	080064a4 	.word	0x080064a4
 8005d40:	080064ae 	.word	0x080064ae
 8005d44:	00000000 	.word	0x00000000
 8005d48:	08005a99 	.word	0x08005a99
 8005d4c:	080064aa 	.word	0x080064aa

08005d50 <_printf_common>:
 8005d50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d54:	4616      	mov	r6, r2
 8005d56:	4699      	mov	r9, r3
 8005d58:	688a      	ldr	r2, [r1, #8]
 8005d5a:	690b      	ldr	r3, [r1, #16]
 8005d5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005d60:	4293      	cmp	r3, r2
 8005d62:	bfb8      	it	lt
 8005d64:	4613      	movlt	r3, r2
 8005d66:	6033      	str	r3, [r6, #0]
 8005d68:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005d6c:	4607      	mov	r7, r0
 8005d6e:	460c      	mov	r4, r1
 8005d70:	b10a      	cbz	r2, 8005d76 <_printf_common+0x26>
 8005d72:	3301      	adds	r3, #1
 8005d74:	6033      	str	r3, [r6, #0]
 8005d76:	6823      	ldr	r3, [r4, #0]
 8005d78:	0699      	lsls	r1, r3, #26
 8005d7a:	bf42      	ittt	mi
 8005d7c:	6833      	ldrmi	r3, [r6, #0]
 8005d7e:	3302      	addmi	r3, #2
 8005d80:	6033      	strmi	r3, [r6, #0]
 8005d82:	6825      	ldr	r5, [r4, #0]
 8005d84:	f015 0506 	ands.w	r5, r5, #6
 8005d88:	d106      	bne.n	8005d98 <_printf_common+0x48>
 8005d8a:	f104 0a19 	add.w	sl, r4, #25
 8005d8e:	68e3      	ldr	r3, [r4, #12]
 8005d90:	6832      	ldr	r2, [r6, #0]
 8005d92:	1a9b      	subs	r3, r3, r2
 8005d94:	42ab      	cmp	r3, r5
 8005d96:	dc26      	bgt.n	8005de6 <_printf_common+0x96>
 8005d98:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005d9c:	1e13      	subs	r3, r2, #0
 8005d9e:	6822      	ldr	r2, [r4, #0]
 8005da0:	bf18      	it	ne
 8005da2:	2301      	movne	r3, #1
 8005da4:	0692      	lsls	r2, r2, #26
 8005da6:	d42b      	bmi.n	8005e00 <_printf_common+0xb0>
 8005da8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005dac:	4649      	mov	r1, r9
 8005dae:	4638      	mov	r0, r7
 8005db0:	47c0      	blx	r8
 8005db2:	3001      	adds	r0, #1
 8005db4:	d01e      	beq.n	8005df4 <_printf_common+0xa4>
 8005db6:	6823      	ldr	r3, [r4, #0]
 8005db8:	68e5      	ldr	r5, [r4, #12]
 8005dba:	6832      	ldr	r2, [r6, #0]
 8005dbc:	f003 0306 	and.w	r3, r3, #6
 8005dc0:	2b04      	cmp	r3, #4
 8005dc2:	bf08      	it	eq
 8005dc4:	1aad      	subeq	r5, r5, r2
 8005dc6:	68a3      	ldr	r3, [r4, #8]
 8005dc8:	6922      	ldr	r2, [r4, #16]
 8005dca:	bf0c      	ite	eq
 8005dcc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005dd0:	2500      	movne	r5, #0
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	bfc4      	itt	gt
 8005dd6:	1a9b      	subgt	r3, r3, r2
 8005dd8:	18ed      	addgt	r5, r5, r3
 8005dda:	2600      	movs	r6, #0
 8005ddc:	341a      	adds	r4, #26
 8005dde:	42b5      	cmp	r5, r6
 8005de0:	d11a      	bne.n	8005e18 <_printf_common+0xc8>
 8005de2:	2000      	movs	r0, #0
 8005de4:	e008      	b.n	8005df8 <_printf_common+0xa8>
 8005de6:	2301      	movs	r3, #1
 8005de8:	4652      	mov	r2, sl
 8005dea:	4649      	mov	r1, r9
 8005dec:	4638      	mov	r0, r7
 8005dee:	47c0      	blx	r8
 8005df0:	3001      	adds	r0, #1
 8005df2:	d103      	bne.n	8005dfc <_printf_common+0xac>
 8005df4:	f04f 30ff 	mov.w	r0, #4294967295
 8005df8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dfc:	3501      	adds	r5, #1
 8005dfe:	e7c6      	b.n	8005d8e <_printf_common+0x3e>
 8005e00:	18e1      	adds	r1, r4, r3
 8005e02:	1c5a      	adds	r2, r3, #1
 8005e04:	2030      	movs	r0, #48	; 0x30
 8005e06:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005e0a:	4422      	add	r2, r4
 8005e0c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005e10:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005e14:	3302      	adds	r3, #2
 8005e16:	e7c7      	b.n	8005da8 <_printf_common+0x58>
 8005e18:	2301      	movs	r3, #1
 8005e1a:	4622      	mov	r2, r4
 8005e1c:	4649      	mov	r1, r9
 8005e1e:	4638      	mov	r0, r7
 8005e20:	47c0      	blx	r8
 8005e22:	3001      	adds	r0, #1
 8005e24:	d0e6      	beq.n	8005df4 <_printf_common+0xa4>
 8005e26:	3601      	adds	r6, #1
 8005e28:	e7d9      	b.n	8005dde <_printf_common+0x8e>
	...

08005e2c <_printf_i>:
 8005e2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e30:	7e0f      	ldrb	r7, [r1, #24]
 8005e32:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005e34:	2f78      	cmp	r7, #120	; 0x78
 8005e36:	4691      	mov	r9, r2
 8005e38:	4680      	mov	r8, r0
 8005e3a:	460c      	mov	r4, r1
 8005e3c:	469a      	mov	sl, r3
 8005e3e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005e42:	d807      	bhi.n	8005e54 <_printf_i+0x28>
 8005e44:	2f62      	cmp	r7, #98	; 0x62
 8005e46:	d80a      	bhi.n	8005e5e <_printf_i+0x32>
 8005e48:	2f00      	cmp	r7, #0
 8005e4a:	f000 80d8 	beq.w	8005ffe <_printf_i+0x1d2>
 8005e4e:	2f58      	cmp	r7, #88	; 0x58
 8005e50:	f000 80a3 	beq.w	8005f9a <_printf_i+0x16e>
 8005e54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e58:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005e5c:	e03a      	b.n	8005ed4 <_printf_i+0xa8>
 8005e5e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005e62:	2b15      	cmp	r3, #21
 8005e64:	d8f6      	bhi.n	8005e54 <_printf_i+0x28>
 8005e66:	a101      	add	r1, pc, #4	; (adr r1, 8005e6c <_printf_i+0x40>)
 8005e68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005e6c:	08005ec5 	.word	0x08005ec5
 8005e70:	08005ed9 	.word	0x08005ed9
 8005e74:	08005e55 	.word	0x08005e55
 8005e78:	08005e55 	.word	0x08005e55
 8005e7c:	08005e55 	.word	0x08005e55
 8005e80:	08005e55 	.word	0x08005e55
 8005e84:	08005ed9 	.word	0x08005ed9
 8005e88:	08005e55 	.word	0x08005e55
 8005e8c:	08005e55 	.word	0x08005e55
 8005e90:	08005e55 	.word	0x08005e55
 8005e94:	08005e55 	.word	0x08005e55
 8005e98:	08005fe5 	.word	0x08005fe5
 8005e9c:	08005f09 	.word	0x08005f09
 8005ea0:	08005fc7 	.word	0x08005fc7
 8005ea4:	08005e55 	.word	0x08005e55
 8005ea8:	08005e55 	.word	0x08005e55
 8005eac:	08006007 	.word	0x08006007
 8005eb0:	08005e55 	.word	0x08005e55
 8005eb4:	08005f09 	.word	0x08005f09
 8005eb8:	08005e55 	.word	0x08005e55
 8005ebc:	08005e55 	.word	0x08005e55
 8005ec0:	08005fcf 	.word	0x08005fcf
 8005ec4:	682b      	ldr	r3, [r5, #0]
 8005ec6:	1d1a      	adds	r2, r3, #4
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	602a      	str	r2, [r5, #0]
 8005ecc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ed0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	e0a3      	b.n	8006020 <_printf_i+0x1f4>
 8005ed8:	6820      	ldr	r0, [r4, #0]
 8005eda:	6829      	ldr	r1, [r5, #0]
 8005edc:	0606      	lsls	r6, r0, #24
 8005ede:	f101 0304 	add.w	r3, r1, #4
 8005ee2:	d50a      	bpl.n	8005efa <_printf_i+0xce>
 8005ee4:	680e      	ldr	r6, [r1, #0]
 8005ee6:	602b      	str	r3, [r5, #0]
 8005ee8:	2e00      	cmp	r6, #0
 8005eea:	da03      	bge.n	8005ef4 <_printf_i+0xc8>
 8005eec:	232d      	movs	r3, #45	; 0x2d
 8005eee:	4276      	negs	r6, r6
 8005ef0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ef4:	485e      	ldr	r0, [pc, #376]	; (8006070 <_printf_i+0x244>)
 8005ef6:	230a      	movs	r3, #10
 8005ef8:	e019      	b.n	8005f2e <_printf_i+0x102>
 8005efa:	680e      	ldr	r6, [r1, #0]
 8005efc:	602b      	str	r3, [r5, #0]
 8005efe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005f02:	bf18      	it	ne
 8005f04:	b236      	sxthne	r6, r6
 8005f06:	e7ef      	b.n	8005ee8 <_printf_i+0xbc>
 8005f08:	682b      	ldr	r3, [r5, #0]
 8005f0a:	6820      	ldr	r0, [r4, #0]
 8005f0c:	1d19      	adds	r1, r3, #4
 8005f0e:	6029      	str	r1, [r5, #0]
 8005f10:	0601      	lsls	r1, r0, #24
 8005f12:	d501      	bpl.n	8005f18 <_printf_i+0xec>
 8005f14:	681e      	ldr	r6, [r3, #0]
 8005f16:	e002      	b.n	8005f1e <_printf_i+0xf2>
 8005f18:	0646      	lsls	r6, r0, #25
 8005f1a:	d5fb      	bpl.n	8005f14 <_printf_i+0xe8>
 8005f1c:	881e      	ldrh	r6, [r3, #0]
 8005f1e:	4854      	ldr	r0, [pc, #336]	; (8006070 <_printf_i+0x244>)
 8005f20:	2f6f      	cmp	r7, #111	; 0x6f
 8005f22:	bf0c      	ite	eq
 8005f24:	2308      	moveq	r3, #8
 8005f26:	230a      	movne	r3, #10
 8005f28:	2100      	movs	r1, #0
 8005f2a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005f2e:	6865      	ldr	r5, [r4, #4]
 8005f30:	60a5      	str	r5, [r4, #8]
 8005f32:	2d00      	cmp	r5, #0
 8005f34:	bfa2      	ittt	ge
 8005f36:	6821      	ldrge	r1, [r4, #0]
 8005f38:	f021 0104 	bicge.w	r1, r1, #4
 8005f3c:	6021      	strge	r1, [r4, #0]
 8005f3e:	b90e      	cbnz	r6, 8005f44 <_printf_i+0x118>
 8005f40:	2d00      	cmp	r5, #0
 8005f42:	d04d      	beq.n	8005fe0 <_printf_i+0x1b4>
 8005f44:	4615      	mov	r5, r2
 8005f46:	fbb6 f1f3 	udiv	r1, r6, r3
 8005f4a:	fb03 6711 	mls	r7, r3, r1, r6
 8005f4e:	5dc7      	ldrb	r7, [r0, r7]
 8005f50:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005f54:	4637      	mov	r7, r6
 8005f56:	42bb      	cmp	r3, r7
 8005f58:	460e      	mov	r6, r1
 8005f5a:	d9f4      	bls.n	8005f46 <_printf_i+0x11a>
 8005f5c:	2b08      	cmp	r3, #8
 8005f5e:	d10b      	bne.n	8005f78 <_printf_i+0x14c>
 8005f60:	6823      	ldr	r3, [r4, #0]
 8005f62:	07de      	lsls	r6, r3, #31
 8005f64:	d508      	bpl.n	8005f78 <_printf_i+0x14c>
 8005f66:	6923      	ldr	r3, [r4, #16]
 8005f68:	6861      	ldr	r1, [r4, #4]
 8005f6a:	4299      	cmp	r1, r3
 8005f6c:	bfde      	ittt	le
 8005f6e:	2330      	movle	r3, #48	; 0x30
 8005f70:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005f74:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005f78:	1b52      	subs	r2, r2, r5
 8005f7a:	6122      	str	r2, [r4, #16]
 8005f7c:	f8cd a000 	str.w	sl, [sp]
 8005f80:	464b      	mov	r3, r9
 8005f82:	aa03      	add	r2, sp, #12
 8005f84:	4621      	mov	r1, r4
 8005f86:	4640      	mov	r0, r8
 8005f88:	f7ff fee2 	bl	8005d50 <_printf_common>
 8005f8c:	3001      	adds	r0, #1
 8005f8e:	d14c      	bne.n	800602a <_printf_i+0x1fe>
 8005f90:	f04f 30ff 	mov.w	r0, #4294967295
 8005f94:	b004      	add	sp, #16
 8005f96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f9a:	4835      	ldr	r0, [pc, #212]	; (8006070 <_printf_i+0x244>)
 8005f9c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005fa0:	6829      	ldr	r1, [r5, #0]
 8005fa2:	6823      	ldr	r3, [r4, #0]
 8005fa4:	f851 6b04 	ldr.w	r6, [r1], #4
 8005fa8:	6029      	str	r1, [r5, #0]
 8005faa:	061d      	lsls	r5, r3, #24
 8005fac:	d514      	bpl.n	8005fd8 <_printf_i+0x1ac>
 8005fae:	07df      	lsls	r7, r3, #31
 8005fb0:	bf44      	itt	mi
 8005fb2:	f043 0320 	orrmi.w	r3, r3, #32
 8005fb6:	6023      	strmi	r3, [r4, #0]
 8005fb8:	b91e      	cbnz	r6, 8005fc2 <_printf_i+0x196>
 8005fba:	6823      	ldr	r3, [r4, #0]
 8005fbc:	f023 0320 	bic.w	r3, r3, #32
 8005fc0:	6023      	str	r3, [r4, #0]
 8005fc2:	2310      	movs	r3, #16
 8005fc4:	e7b0      	b.n	8005f28 <_printf_i+0xfc>
 8005fc6:	6823      	ldr	r3, [r4, #0]
 8005fc8:	f043 0320 	orr.w	r3, r3, #32
 8005fcc:	6023      	str	r3, [r4, #0]
 8005fce:	2378      	movs	r3, #120	; 0x78
 8005fd0:	4828      	ldr	r0, [pc, #160]	; (8006074 <_printf_i+0x248>)
 8005fd2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005fd6:	e7e3      	b.n	8005fa0 <_printf_i+0x174>
 8005fd8:	0659      	lsls	r1, r3, #25
 8005fda:	bf48      	it	mi
 8005fdc:	b2b6      	uxthmi	r6, r6
 8005fde:	e7e6      	b.n	8005fae <_printf_i+0x182>
 8005fe0:	4615      	mov	r5, r2
 8005fe2:	e7bb      	b.n	8005f5c <_printf_i+0x130>
 8005fe4:	682b      	ldr	r3, [r5, #0]
 8005fe6:	6826      	ldr	r6, [r4, #0]
 8005fe8:	6961      	ldr	r1, [r4, #20]
 8005fea:	1d18      	adds	r0, r3, #4
 8005fec:	6028      	str	r0, [r5, #0]
 8005fee:	0635      	lsls	r5, r6, #24
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	d501      	bpl.n	8005ff8 <_printf_i+0x1cc>
 8005ff4:	6019      	str	r1, [r3, #0]
 8005ff6:	e002      	b.n	8005ffe <_printf_i+0x1d2>
 8005ff8:	0670      	lsls	r0, r6, #25
 8005ffa:	d5fb      	bpl.n	8005ff4 <_printf_i+0x1c8>
 8005ffc:	8019      	strh	r1, [r3, #0]
 8005ffe:	2300      	movs	r3, #0
 8006000:	6123      	str	r3, [r4, #16]
 8006002:	4615      	mov	r5, r2
 8006004:	e7ba      	b.n	8005f7c <_printf_i+0x150>
 8006006:	682b      	ldr	r3, [r5, #0]
 8006008:	1d1a      	adds	r2, r3, #4
 800600a:	602a      	str	r2, [r5, #0]
 800600c:	681d      	ldr	r5, [r3, #0]
 800600e:	6862      	ldr	r2, [r4, #4]
 8006010:	2100      	movs	r1, #0
 8006012:	4628      	mov	r0, r5
 8006014:	f7fa f92c 	bl	8000270 <memchr>
 8006018:	b108      	cbz	r0, 800601e <_printf_i+0x1f2>
 800601a:	1b40      	subs	r0, r0, r5
 800601c:	6060      	str	r0, [r4, #4]
 800601e:	6863      	ldr	r3, [r4, #4]
 8006020:	6123      	str	r3, [r4, #16]
 8006022:	2300      	movs	r3, #0
 8006024:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006028:	e7a8      	b.n	8005f7c <_printf_i+0x150>
 800602a:	6923      	ldr	r3, [r4, #16]
 800602c:	462a      	mov	r2, r5
 800602e:	4649      	mov	r1, r9
 8006030:	4640      	mov	r0, r8
 8006032:	47d0      	blx	sl
 8006034:	3001      	adds	r0, #1
 8006036:	d0ab      	beq.n	8005f90 <_printf_i+0x164>
 8006038:	6823      	ldr	r3, [r4, #0]
 800603a:	079b      	lsls	r3, r3, #30
 800603c:	d413      	bmi.n	8006066 <_printf_i+0x23a>
 800603e:	68e0      	ldr	r0, [r4, #12]
 8006040:	9b03      	ldr	r3, [sp, #12]
 8006042:	4298      	cmp	r0, r3
 8006044:	bfb8      	it	lt
 8006046:	4618      	movlt	r0, r3
 8006048:	e7a4      	b.n	8005f94 <_printf_i+0x168>
 800604a:	2301      	movs	r3, #1
 800604c:	4632      	mov	r2, r6
 800604e:	4649      	mov	r1, r9
 8006050:	4640      	mov	r0, r8
 8006052:	47d0      	blx	sl
 8006054:	3001      	adds	r0, #1
 8006056:	d09b      	beq.n	8005f90 <_printf_i+0x164>
 8006058:	3501      	adds	r5, #1
 800605a:	68e3      	ldr	r3, [r4, #12]
 800605c:	9903      	ldr	r1, [sp, #12]
 800605e:	1a5b      	subs	r3, r3, r1
 8006060:	42ab      	cmp	r3, r5
 8006062:	dcf2      	bgt.n	800604a <_printf_i+0x21e>
 8006064:	e7eb      	b.n	800603e <_printf_i+0x212>
 8006066:	2500      	movs	r5, #0
 8006068:	f104 0619 	add.w	r6, r4, #25
 800606c:	e7f5      	b.n	800605a <_printf_i+0x22e>
 800606e:	bf00      	nop
 8006070:	080064b5 	.word	0x080064b5
 8006074:	080064c6 	.word	0x080064c6

08006078 <memmove>:
 8006078:	4288      	cmp	r0, r1
 800607a:	b510      	push	{r4, lr}
 800607c:	eb01 0402 	add.w	r4, r1, r2
 8006080:	d902      	bls.n	8006088 <memmove+0x10>
 8006082:	4284      	cmp	r4, r0
 8006084:	4623      	mov	r3, r4
 8006086:	d807      	bhi.n	8006098 <memmove+0x20>
 8006088:	1e43      	subs	r3, r0, #1
 800608a:	42a1      	cmp	r1, r4
 800608c:	d008      	beq.n	80060a0 <memmove+0x28>
 800608e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006092:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006096:	e7f8      	b.n	800608a <memmove+0x12>
 8006098:	4402      	add	r2, r0
 800609a:	4601      	mov	r1, r0
 800609c:	428a      	cmp	r2, r1
 800609e:	d100      	bne.n	80060a2 <memmove+0x2a>
 80060a0:	bd10      	pop	{r4, pc}
 80060a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80060a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80060aa:	e7f7      	b.n	800609c <memmove+0x24>

080060ac <_free_r>:
 80060ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80060ae:	2900      	cmp	r1, #0
 80060b0:	d044      	beq.n	800613c <_free_r+0x90>
 80060b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060b6:	9001      	str	r0, [sp, #4]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	f1a1 0404 	sub.w	r4, r1, #4
 80060be:	bfb8      	it	lt
 80060c0:	18e4      	addlt	r4, r4, r3
 80060c2:	f000 f913 	bl	80062ec <__malloc_lock>
 80060c6:	4a1e      	ldr	r2, [pc, #120]	; (8006140 <_free_r+0x94>)
 80060c8:	9801      	ldr	r0, [sp, #4]
 80060ca:	6813      	ldr	r3, [r2, #0]
 80060cc:	b933      	cbnz	r3, 80060dc <_free_r+0x30>
 80060ce:	6063      	str	r3, [r4, #4]
 80060d0:	6014      	str	r4, [r2, #0]
 80060d2:	b003      	add	sp, #12
 80060d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80060d8:	f000 b90e 	b.w	80062f8 <__malloc_unlock>
 80060dc:	42a3      	cmp	r3, r4
 80060de:	d908      	bls.n	80060f2 <_free_r+0x46>
 80060e0:	6825      	ldr	r5, [r4, #0]
 80060e2:	1961      	adds	r1, r4, r5
 80060e4:	428b      	cmp	r3, r1
 80060e6:	bf01      	itttt	eq
 80060e8:	6819      	ldreq	r1, [r3, #0]
 80060ea:	685b      	ldreq	r3, [r3, #4]
 80060ec:	1949      	addeq	r1, r1, r5
 80060ee:	6021      	streq	r1, [r4, #0]
 80060f0:	e7ed      	b.n	80060ce <_free_r+0x22>
 80060f2:	461a      	mov	r2, r3
 80060f4:	685b      	ldr	r3, [r3, #4]
 80060f6:	b10b      	cbz	r3, 80060fc <_free_r+0x50>
 80060f8:	42a3      	cmp	r3, r4
 80060fa:	d9fa      	bls.n	80060f2 <_free_r+0x46>
 80060fc:	6811      	ldr	r1, [r2, #0]
 80060fe:	1855      	adds	r5, r2, r1
 8006100:	42a5      	cmp	r5, r4
 8006102:	d10b      	bne.n	800611c <_free_r+0x70>
 8006104:	6824      	ldr	r4, [r4, #0]
 8006106:	4421      	add	r1, r4
 8006108:	1854      	adds	r4, r2, r1
 800610a:	42a3      	cmp	r3, r4
 800610c:	6011      	str	r1, [r2, #0]
 800610e:	d1e0      	bne.n	80060d2 <_free_r+0x26>
 8006110:	681c      	ldr	r4, [r3, #0]
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	6053      	str	r3, [r2, #4]
 8006116:	4421      	add	r1, r4
 8006118:	6011      	str	r1, [r2, #0]
 800611a:	e7da      	b.n	80060d2 <_free_r+0x26>
 800611c:	d902      	bls.n	8006124 <_free_r+0x78>
 800611e:	230c      	movs	r3, #12
 8006120:	6003      	str	r3, [r0, #0]
 8006122:	e7d6      	b.n	80060d2 <_free_r+0x26>
 8006124:	6825      	ldr	r5, [r4, #0]
 8006126:	1961      	adds	r1, r4, r5
 8006128:	428b      	cmp	r3, r1
 800612a:	bf04      	itt	eq
 800612c:	6819      	ldreq	r1, [r3, #0]
 800612e:	685b      	ldreq	r3, [r3, #4]
 8006130:	6063      	str	r3, [r4, #4]
 8006132:	bf04      	itt	eq
 8006134:	1949      	addeq	r1, r1, r5
 8006136:	6021      	streq	r1, [r4, #0]
 8006138:	6054      	str	r4, [r2, #4]
 800613a:	e7ca      	b.n	80060d2 <_free_r+0x26>
 800613c:	b003      	add	sp, #12
 800613e:	bd30      	pop	{r4, r5, pc}
 8006140:	20014494 	.word	0x20014494

08006144 <sbrk_aligned>:
 8006144:	b570      	push	{r4, r5, r6, lr}
 8006146:	4e0e      	ldr	r6, [pc, #56]	; (8006180 <sbrk_aligned+0x3c>)
 8006148:	460c      	mov	r4, r1
 800614a:	6831      	ldr	r1, [r6, #0]
 800614c:	4605      	mov	r5, r0
 800614e:	b911      	cbnz	r1, 8006156 <sbrk_aligned+0x12>
 8006150:	f000 f8bc 	bl	80062cc <_sbrk_r>
 8006154:	6030      	str	r0, [r6, #0]
 8006156:	4621      	mov	r1, r4
 8006158:	4628      	mov	r0, r5
 800615a:	f000 f8b7 	bl	80062cc <_sbrk_r>
 800615e:	1c43      	adds	r3, r0, #1
 8006160:	d00a      	beq.n	8006178 <sbrk_aligned+0x34>
 8006162:	1cc4      	adds	r4, r0, #3
 8006164:	f024 0403 	bic.w	r4, r4, #3
 8006168:	42a0      	cmp	r0, r4
 800616a:	d007      	beq.n	800617c <sbrk_aligned+0x38>
 800616c:	1a21      	subs	r1, r4, r0
 800616e:	4628      	mov	r0, r5
 8006170:	f000 f8ac 	bl	80062cc <_sbrk_r>
 8006174:	3001      	adds	r0, #1
 8006176:	d101      	bne.n	800617c <sbrk_aligned+0x38>
 8006178:	f04f 34ff 	mov.w	r4, #4294967295
 800617c:	4620      	mov	r0, r4
 800617e:	bd70      	pop	{r4, r5, r6, pc}
 8006180:	20014498 	.word	0x20014498

08006184 <_malloc_r>:
 8006184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006188:	1ccd      	adds	r5, r1, #3
 800618a:	f025 0503 	bic.w	r5, r5, #3
 800618e:	3508      	adds	r5, #8
 8006190:	2d0c      	cmp	r5, #12
 8006192:	bf38      	it	cc
 8006194:	250c      	movcc	r5, #12
 8006196:	2d00      	cmp	r5, #0
 8006198:	4607      	mov	r7, r0
 800619a:	db01      	blt.n	80061a0 <_malloc_r+0x1c>
 800619c:	42a9      	cmp	r1, r5
 800619e:	d905      	bls.n	80061ac <_malloc_r+0x28>
 80061a0:	230c      	movs	r3, #12
 80061a2:	603b      	str	r3, [r7, #0]
 80061a4:	2600      	movs	r6, #0
 80061a6:	4630      	mov	r0, r6
 80061a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061ac:	4e2e      	ldr	r6, [pc, #184]	; (8006268 <_malloc_r+0xe4>)
 80061ae:	f000 f89d 	bl	80062ec <__malloc_lock>
 80061b2:	6833      	ldr	r3, [r6, #0]
 80061b4:	461c      	mov	r4, r3
 80061b6:	bb34      	cbnz	r4, 8006206 <_malloc_r+0x82>
 80061b8:	4629      	mov	r1, r5
 80061ba:	4638      	mov	r0, r7
 80061bc:	f7ff ffc2 	bl	8006144 <sbrk_aligned>
 80061c0:	1c43      	adds	r3, r0, #1
 80061c2:	4604      	mov	r4, r0
 80061c4:	d14d      	bne.n	8006262 <_malloc_r+0xde>
 80061c6:	6834      	ldr	r4, [r6, #0]
 80061c8:	4626      	mov	r6, r4
 80061ca:	2e00      	cmp	r6, #0
 80061cc:	d140      	bne.n	8006250 <_malloc_r+0xcc>
 80061ce:	6823      	ldr	r3, [r4, #0]
 80061d0:	4631      	mov	r1, r6
 80061d2:	4638      	mov	r0, r7
 80061d4:	eb04 0803 	add.w	r8, r4, r3
 80061d8:	f000 f878 	bl	80062cc <_sbrk_r>
 80061dc:	4580      	cmp	r8, r0
 80061de:	d13a      	bne.n	8006256 <_malloc_r+0xd2>
 80061e0:	6821      	ldr	r1, [r4, #0]
 80061e2:	3503      	adds	r5, #3
 80061e4:	1a6d      	subs	r5, r5, r1
 80061e6:	f025 0503 	bic.w	r5, r5, #3
 80061ea:	3508      	adds	r5, #8
 80061ec:	2d0c      	cmp	r5, #12
 80061ee:	bf38      	it	cc
 80061f0:	250c      	movcc	r5, #12
 80061f2:	4629      	mov	r1, r5
 80061f4:	4638      	mov	r0, r7
 80061f6:	f7ff ffa5 	bl	8006144 <sbrk_aligned>
 80061fa:	3001      	adds	r0, #1
 80061fc:	d02b      	beq.n	8006256 <_malloc_r+0xd2>
 80061fe:	6823      	ldr	r3, [r4, #0]
 8006200:	442b      	add	r3, r5
 8006202:	6023      	str	r3, [r4, #0]
 8006204:	e00e      	b.n	8006224 <_malloc_r+0xa0>
 8006206:	6822      	ldr	r2, [r4, #0]
 8006208:	1b52      	subs	r2, r2, r5
 800620a:	d41e      	bmi.n	800624a <_malloc_r+0xc6>
 800620c:	2a0b      	cmp	r2, #11
 800620e:	d916      	bls.n	800623e <_malloc_r+0xba>
 8006210:	1961      	adds	r1, r4, r5
 8006212:	42a3      	cmp	r3, r4
 8006214:	6025      	str	r5, [r4, #0]
 8006216:	bf18      	it	ne
 8006218:	6059      	strne	r1, [r3, #4]
 800621a:	6863      	ldr	r3, [r4, #4]
 800621c:	bf08      	it	eq
 800621e:	6031      	streq	r1, [r6, #0]
 8006220:	5162      	str	r2, [r4, r5]
 8006222:	604b      	str	r3, [r1, #4]
 8006224:	4638      	mov	r0, r7
 8006226:	f104 060b 	add.w	r6, r4, #11
 800622a:	f000 f865 	bl	80062f8 <__malloc_unlock>
 800622e:	f026 0607 	bic.w	r6, r6, #7
 8006232:	1d23      	adds	r3, r4, #4
 8006234:	1af2      	subs	r2, r6, r3
 8006236:	d0b6      	beq.n	80061a6 <_malloc_r+0x22>
 8006238:	1b9b      	subs	r3, r3, r6
 800623a:	50a3      	str	r3, [r4, r2]
 800623c:	e7b3      	b.n	80061a6 <_malloc_r+0x22>
 800623e:	6862      	ldr	r2, [r4, #4]
 8006240:	42a3      	cmp	r3, r4
 8006242:	bf0c      	ite	eq
 8006244:	6032      	streq	r2, [r6, #0]
 8006246:	605a      	strne	r2, [r3, #4]
 8006248:	e7ec      	b.n	8006224 <_malloc_r+0xa0>
 800624a:	4623      	mov	r3, r4
 800624c:	6864      	ldr	r4, [r4, #4]
 800624e:	e7b2      	b.n	80061b6 <_malloc_r+0x32>
 8006250:	4634      	mov	r4, r6
 8006252:	6876      	ldr	r6, [r6, #4]
 8006254:	e7b9      	b.n	80061ca <_malloc_r+0x46>
 8006256:	230c      	movs	r3, #12
 8006258:	603b      	str	r3, [r7, #0]
 800625a:	4638      	mov	r0, r7
 800625c:	f000 f84c 	bl	80062f8 <__malloc_unlock>
 8006260:	e7a1      	b.n	80061a6 <_malloc_r+0x22>
 8006262:	6025      	str	r5, [r4, #0]
 8006264:	e7de      	b.n	8006224 <_malloc_r+0xa0>
 8006266:	bf00      	nop
 8006268:	20014494 	.word	0x20014494

0800626c <_realloc_r>:
 800626c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006270:	4680      	mov	r8, r0
 8006272:	4614      	mov	r4, r2
 8006274:	460e      	mov	r6, r1
 8006276:	b921      	cbnz	r1, 8006282 <_realloc_r+0x16>
 8006278:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800627c:	4611      	mov	r1, r2
 800627e:	f7ff bf81 	b.w	8006184 <_malloc_r>
 8006282:	b92a      	cbnz	r2, 8006290 <_realloc_r+0x24>
 8006284:	f7ff ff12 	bl	80060ac <_free_r>
 8006288:	4625      	mov	r5, r4
 800628a:	4628      	mov	r0, r5
 800628c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006290:	f000 f838 	bl	8006304 <_malloc_usable_size_r>
 8006294:	4284      	cmp	r4, r0
 8006296:	4607      	mov	r7, r0
 8006298:	d802      	bhi.n	80062a0 <_realloc_r+0x34>
 800629a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800629e:	d812      	bhi.n	80062c6 <_realloc_r+0x5a>
 80062a0:	4621      	mov	r1, r4
 80062a2:	4640      	mov	r0, r8
 80062a4:	f7ff ff6e 	bl	8006184 <_malloc_r>
 80062a8:	4605      	mov	r5, r0
 80062aa:	2800      	cmp	r0, #0
 80062ac:	d0ed      	beq.n	800628a <_realloc_r+0x1e>
 80062ae:	42bc      	cmp	r4, r7
 80062b0:	4622      	mov	r2, r4
 80062b2:	4631      	mov	r1, r6
 80062b4:	bf28      	it	cs
 80062b6:	463a      	movcs	r2, r7
 80062b8:	f7ff fba4 	bl	8005a04 <memcpy>
 80062bc:	4631      	mov	r1, r6
 80062be:	4640      	mov	r0, r8
 80062c0:	f7ff fef4 	bl	80060ac <_free_r>
 80062c4:	e7e1      	b.n	800628a <_realloc_r+0x1e>
 80062c6:	4635      	mov	r5, r6
 80062c8:	e7df      	b.n	800628a <_realloc_r+0x1e>
	...

080062cc <_sbrk_r>:
 80062cc:	b538      	push	{r3, r4, r5, lr}
 80062ce:	4d06      	ldr	r5, [pc, #24]	; (80062e8 <_sbrk_r+0x1c>)
 80062d0:	2300      	movs	r3, #0
 80062d2:	4604      	mov	r4, r0
 80062d4:	4608      	mov	r0, r1
 80062d6:	602b      	str	r3, [r5, #0]
 80062d8:	f000 f81e 	bl	8006318 <_sbrk>
 80062dc:	1c43      	adds	r3, r0, #1
 80062de:	d102      	bne.n	80062e6 <_sbrk_r+0x1a>
 80062e0:	682b      	ldr	r3, [r5, #0]
 80062e2:	b103      	cbz	r3, 80062e6 <_sbrk_r+0x1a>
 80062e4:	6023      	str	r3, [r4, #0]
 80062e6:	bd38      	pop	{r3, r4, r5, pc}
 80062e8:	2001449c 	.word	0x2001449c

080062ec <__malloc_lock>:
 80062ec:	4801      	ldr	r0, [pc, #4]	; (80062f4 <__malloc_lock+0x8>)
 80062ee:	f000 b811 	b.w	8006314 <__retarget_lock_acquire_recursive>
 80062f2:	bf00      	nop
 80062f4:	200144a0 	.word	0x200144a0

080062f8 <__malloc_unlock>:
 80062f8:	4801      	ldr	r0, [pc, #4]	; (8006300 <__malloc_unlock+0x8>)
 80062fa:	f000 b80c 	b.w	8006316 <__retarget_lock_release_recursive>
 80062fe:	bf00      	nop
 8006300:	200144a0 	.word	0x200144a0

08006304 <_malloc_usable_size_r>:
 8006304:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006308:	1f18      	subs	r0, r3, #4
 800630a:	2b00      	cmp	r3, #0
 800630c:	bfbc      	itt	lt
 800630e:	580b      	ldrlt	r3, [r1, r0]
 8006310:	18c0      	addlt	r0, r0, r3
 8006312:	4770      	bx	lr

08006314 <__retarget_lock_acquire_recursive>:
 8006314:	4770      	bx	lr

08006316 <__retarget_lock_release_recursive>:
 8006316:	4770      	bx	lr

08006318 <_sbrk>:
 8006318:	4a04      	ldr	r2, [pc, #16]	; (800632c <_sbrk+0x14>)
 800631a:	6811      	ldr	r1, [r2, #0]
 800631c:	4603      	mov	r3, r0
 800631e:	b909      	cbnz	r1, 8006324 <_sbrk+0xc>
 8006320:	4903      	ldr	r1, [pc, #12]	; (8006330 <_sbrk+0x18>)
 8006322:	6011      	str	r1, [r2, #0]
 8006324:	6810      	ldr	r0, [r2, #0]
 8006326:	4403      	add	r3, r0
 8006328:	6013      	str	r3, [r2, #0]
 800632a:	4770      	bx	lr
 800632c:	200144a4 	.word	0x200144a4
 8006330:	200144a8 	.word	0x200144a8

08006334 <_init>:
 8006334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006336:	bf00      	nop
 8006338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800633a:	bc08      	pop	{r3}
 800633c:	469e      	mov	lr, r3
 800633e:	4770      	bx	lr

08006340 <_fini>:
 8006340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006342:	bf00      	nop
 8006344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006346:	bc08      	pop	{r3}
 8006348:	469e      	mov	lr, r3
 800634a:	4770      	bx	lr
