
002LED_Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005738  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  080058c8  080058c8  000158c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a48  08005a48  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08005a48  08005a48  00015a48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a50  08005a50  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a50  08005a50  00015a50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005a54  08005a54  00015a54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08005a58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002001c  2**0
                  CONTENTS
 10 .bss          00014414  2000001c  2000001c  0002001c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20014430  20014430  0002001c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012140  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000029ec  00000000  00000000  0003218c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001130  00000000  00000000  00034b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fc8  00000000  00000000  00035ca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023564  00000000  00000000  00036c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013020  00000000  00000000  0005a1d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6578  00000000  00000000  0006d1f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014376c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004758  00000000  00000000  001437bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000001c 	.word	0x2000001c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080058b0 	.word	0x080058b0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000020 	.word	0x20000020
 80001cc:	080058b0 	.word	0x080058b0

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012e5c 	.word	0x20012e5c

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295
 8000274:	f04f 30ff 	movne.w	r0, #4294967295
 8000278:	f000 b974 	b.w	8000564 <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9d08      	ldr	r5, [sp, #32]
 800029a:	4604      	mov	r4, r0
 800029c:	468e      	mov	lr, r1
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d14d      	bne.n	800033e <__udivmoddi4+0xaa>
 80002a2:	428a      	cmp	r2, r1
 80002a4:	4694      	mov	ip, r2
 80002a6:	d969      	bls.n	800037c <__udivmoddi4+0xe8>
 80002a8:	fab2 f282 	clz	r2, r2
 80002ac:	b152      	cbz	r2, 80002c4 <__udivmoddi4+0x30>
 80002ae:	fa01 f302 	lsl.w	r3, r1, r2
 80002b2:	f1c2 0120 	rsb	r1, r2, #32
 80002b6:	fa20 f101 	lsr.w	r1, r0, r1
 80002ba:	fa0c fc02 	lsl.w	ip, ip, r2
 80002be:	ea41 0e03 	orr.w	lr, r1, r3
 80002c2:	4094      	lsls	r4, r2
 80002c4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002c8:	0c21      	lsrs	r1, r4, #16
 80002ca:	fbbe f6f8 	udiv	r6, lr, r8
 80002ce:	fa1f f78c 	uxth.w	r7, ip
 80002d2:	fb08 e316 	mls	r3, r8, r6, lr
 80002d6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002da:	fb06 f107 	mul.w	r1, r6, r7
 80002de:	4299      	cmp	r1, r3
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x64>
 80002e2:	eb1c 0303 	adds.w	r3, ip, r3
 80002e6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ea:	f080 811f 	bcs.w	800052c <__udivmoddi4+0x298>
 80002ee:	4299      	cmp	r1, r3
 80002f0:	f240 811c 	bls.w	800052c <__udivmoddi4+0x298>
 80002f4:	3e02      	subs	r6, #2
 80002f6:	4463      	add	r3, ip
 80002f8:	1a5b      	subs	r3, r3, r1
 80002fa:	b2a4      	uxth	r4, r4
 80002fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000300:	fb08 3310 	mls	r3, r8, r0, r3
 8000304:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000308:	fb00 f707 	mul.w	r7, r0, r7
 800030c:	42a7      	cmp	r7, r4
 800030e:	d90a      	bls.n	8000326 <__udivmoddi4+0x92>
 8000310:	eb1c 0404 	adds.w	r4, ip, r4
 8000314:	f100 33ff 	add.w	r3, r0, #4294967295
 8000318:	f080 810a 	bcs.w	8000530 <__udivmoddi4+0x29c>
 800031c:	42a7      	cmp	r7, r4
 800031e:	f240 8107 	bls.w	8000530 <__udivmoddi4+0x29c>
 8000322:	4464      	add	r4, ip
 8000324:	3802      	subs	r0, #2
 8000326:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800032a:	1be4      	subs	r4, r4, r7
 800032c:	2600      	movs	r6, #0
 800032e:	b11d      	cbz	r5, 8000338 <__udivmoddi4+0xa4>
 8000330:	40d4      	lsrs	r4, r2
 8000332:	2300      	movs	r3, #0
 8000334:	e9c5 4300 	strd	r4, r3, [r5]
 8000338:	4631      	mov	r1, r6
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	428b      	cmp	r3, r1
 8000340:	d909      	bls.n	8000356 <__udivmoddi4+0xc2>
 8000342:	2d00      	cmp	r5, #0
 8000344:	f000 80ef 	beq.w	8000526 <__udivmoddi4+0x292>
 8000348:	2600      	movs	r6, #0
 800034a:	e9c5 0100 	strd	r0, r1, [r5]
 800034e:	4630      	mov	r0, r6
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	fab3 f683 	clz	r6, r3
 800035a:	2e00      	cmp	r6, #0
 800035c:	d14a      	bne.n	80003f4 <__udivmoddi4+0x160>
 800035e:	428b      	cmp	r3, r1
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xd4>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 80f9 	bhi.w	800055a <__udivmoddi4+0x2c6>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb61 0303 	sbc.w	r3, r1, r3
 800036e:	2001      	movs	r0, #1
 8000370:	469e      	mov	lr, r3
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e0      	beq.n	8000338 <__udivmoddi4+0xa4>
 8000376:	e9c5 4e00 	strd	r4, lr, [r5]
 800037a:	e7dd      	b.n	8000338 <__udivmoddi4+0xa4>
 800037c:	b902      	cbnz	r2, 8000380 <__udivmoddi4+0xec>
 800037e:	deff      	udf	#255	; 0xff
 8000380:	fab2 f282 	clz	r2, r2
 8000384:	2a00      	cmp	r2, #0
 8000386:	f040 8092 	bne.w	80004ae <__udivmoddi4+0x21a>
 800038a:	eba1 010c 	sub.w	r1, r1, ip
 800038e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000392:	fa1f fe8c 	uxth.w	lr, ip
 8000396:	2601      	movs	r6, #1
 8000398:	0c20      	lsrs	r0, r4, #16
 800039a:	fbb1 f3f7 	udiv	r3, r1, r7
 800039e:	fb07 1113 	mls	r1, r7, r3, r1
 80003a2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a6:	fb0e f003 	mul.w	r0, lr, r3
 80003aa:	4288      	cmp	r0, r1
 80003ac:	d908      	bls.n	80003c0 <__udivmoddi4+0x12c>
 80003ae:	eb1c 0101 	adds.w	r1, ip, r1
 80003b2:	f103 38ff 	add.w	r8, r3, #4294967295
 80003b6:	d202      	bcs.n	80003be <__udivmoddi4+0x12a>
 80003b8:	4288      	cmp	r0, r1
 80003ba:	f200 80cb 	bhi.w	8000554 <__udivmoddi4+0x2c0>
 80003be:	4643      	mov	r3, r8
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f7 	udiv	r0, r1, r7
 80003c8:	fb07 1110 	mls	r1, r7, r0, r1
 80003cc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003d0:	fb0e fe00 	mul.w	lr, lr, r0
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x156>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80003e0:	d202      	bcs.n	80003e8 <__udivmoddi4+0x154>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	f200 80bb 	bhi.w	800055e <__udivmoddi4+0x2ca>
 80003e8:	4608      	mov	r0, r1
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003f2:	e79c      	b.n	800032e <__udivmoddi4+0x9a>
 80003f4:	f1c6 0720 	rsb	r7, r6, #32
 80003f8:	40b3      	lsls	r3, r6
 80003fa:	fa22 fc07 	lsr.w	ip, r2, r7
 80003fe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000402:	fa20 f407 	lsr.w	r4, r0, r7
 8000406:	fa01 f306 	lsl.w	r3, r1, r6
 800040a:	431c      	orrs	r4, r3
 800040c:	40f9      	lsrs	r1, r7
 800040e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000412:	fa00 f306 	lsl.w	r3, r0, r6
 8000416:	fbb1 f8f9 	udiv	r8, r1, r9
 800041a:	0c20      	lsrs	r0, r4, #16
 800041c:	fa1f fe8c 	uxth.w	lr, ip
 8000420:	fb09 1118 	mls	r1, r9, r8, r1
 8000424:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000428:	fb08 f00e 	mul.w	r0, r8, lr
 800042c:	4288      	cmp	r0, r1
 800042e:	fa02 f206 	lsl.w	r2, r2, r6
 8000432:	d90b      	bls.n	800044c <__udivmoddi4+0x1b8>
 8000434:	eb1c 0101 	adds.w	r1, ip, r1
 8000438:	f108 3aff 	add.w	sl, r8, #4294967295
 800043c:	f080 8088 	bcs.w	8000550 <__udivmoddi4+0x2bc>
 8000440:	4288      	cmp	r0, r1
 8000442:	f240 8085 	bls.w	8000550 <__udivmoddi4+0x2bc>
 8000446:	f1a8 0802 	sub.w	r8, r8, #2
 800044a:	4461      	add	r1, ip
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f9 	udiv	r0, r1, r9
 8000454:	fb09 1110 	mls	r1, r9, r0, r1
 8000458:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800045c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000460:	458e      	cmp	lr, r1
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x1e2>
 8000464:	eb1c 0101 	adds.w	r1, ip, r1
 8000468:	f100 34ff 	add.w	r4, r0, #4294967295
 800046c:	d26c      	bcs.n	8000548 <__udivmoddi4+0x2b4>
 800046e:	458e      	cmp	lr, r1
 8000470:	d96a      	bls.n	8000548 <__udivmoddi4+0x2b4>
 8000472:	3802      	subs	r0, #2
 8000474:	4461      	add	r1, ip
 8000476:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800047a:	fba0 9402 	umull	r9, r4, r0, r2
 800047e:	eba1 010e 	sub.w	r1, r1, lr
 8000482:	42a1      	cmp	r1, r4
 8000484:	46c8      	mov	r8, r9
 8000486:	46a6      	mov	lr, r4
 8000488:	d356      	bcc.n	8000538 <__udivmoddi4+0x2a4>
 800048a:	d053      	beq.n	8000534 <__udivmoddi4+0x2a0>
 800048c:	b15d      	cbz	r5, 80004a6 <__udivmoddi4+0x212>
 800048e:	ebb3 0208 	subs.w	r2, r3, r8
 8000492:	eb61 010e 	sbc.w	r1, r1, lr
 8000496:	fa01 f707 	lsl.w	r7, r1, r7
 800049a:	fa22 f306 	lsr.w	r3, r2, r6
 800049e:	40f1      	lsrs	r1, r6
 80004a0:	431f      	orrs	r7, r3
 80004a2:	e9c5 7100 	strd	r7, r1, [r5]
 80004a6:	2600      	movs	r6, #0
 80004a8:	4631      	mov	r1, r6
 80004aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ae:	f1c2 0320 	rsb	r3, r2, #32
 80004b2:	40d8      	lsrs	r0, r3
 80004b4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b8:	fa21 f303 	lsr.w	r3, r1, r3
 80004bc:	4091      	lsls	r1, r2
 80004be:	4301      	orrs	r1, r0
 80004c0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c4:	fa1f fe8c 	uxth.w	lr, ip
 80004c8:	fbb3 f0f7 	udiv	r0, r3, r7
 80004cc:	fb07 3610 	mls	r6, r7, r0, r3
 80004d0:	0c0b      	lsrs	r3, r1, #16
 80004d2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004d6:	fb00 f60e 	mul.w	r6, r0, lr
 80004da:	429e      	cmp	r6, r3
 80004dc:	fa04 f402 	lsl.w	r4, r4, r2
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x260>
 80004e2:	eb1c 0303 	adds.w	r3, ip, r3
 80004e6:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ea:	d22f      	bcs.n	800054c <__udivmoddi4+0x2b8>
 80004ec:	429e      	cmp	r6, r3
 80004ee:	d92d      	bls.n	800054c <__udivmoddi4+0x2b8>
 80004f0:	3802      	subs	r0, #2
 80004f2:	4463      	add	r3, ip
 80004f4:	1b9b      	subs	r3, r3, r6
 80004f6:	b289      	uxth	r1, r1
 80004f8:	fbb3 f6f7 	udiv	r6, r3, r7
 80004fc:	fb07 3316 	mls	r3, r7, r6, r3
 8000500:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000504:	fb06 f30e 	mul.w	r3, r6, lr
 8000508:	428b      	cmp	r3, r1
 800050a:	d908      	bls.n	800051e <__udivmoddi4+0x28a>
 800050c:	eb1c 0101 	adds.w	r1, ip, r1
 8000510:	f106 38ff 	add.w	r8, r6, #4294967295
 8000514:	d216      	bcs.n	8000544 <__udivmoddi4+0x2b0>
 8000516:	428b      	cmp	r3, r1
 8000518:	d914      	bls.n	8000544 <__udivmoddi4+0x2b0>
 800051a:	3e02      	subs	r6, #2
 800051c:	4461      	add	r1, ip
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000524:	e738      	b.n	8000398 <__udivmoddi4+0x104>
 8000526:	462e      	mov	r6, r5
 8000528:	4628      	mov	r0, r5
 800052a:	e705      	b.n	8000338 <__udivmoddi4+0xa4>
 800052c:	4606      	mov	r6, r0
 800052e:	e6e3      	b.n	80002f8 <__udivmoddi4+0x64>
 8000530:	4618      	mov	r0, r3
 8000532:	e6f8      	b.n	8000326 <__udivmoddi4+0x92>
 8000534:	454b      	cmp	r3, r9
 8000536:	d2a9      	bcs.n	800048c <__udivmoddi4+0x1f8>
 8000538:	ebb9 0802 	subs.w	r8, r9, r2
 800053c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000540:	3801      	subs	r0, #1
 8000542:	e7a3      	b.n	800048c <__udivmoddi4+0x1f8>
 8000544:	4646      	mov	r6, r8
 8000546:	e7ea      	b.n	800051e <__udivmoddi4+0x28a>
 8000548:	4620      	mov	r0, r4
 800054a:	e794      	b.n	8000476 <__udivmoddi4+0x1e2>
 800054c:	4640      	mov	r0, r8
 800054e:	e7d1      	b.n	80004f4 <__udivmoddi4+0x260>
 8000550:	46d0      	mov	r8, sl
 8000552:	e77b      	b.n	800044c <__udivmoddi4+0x1b8>
 8000554:	3b02      	subs	r3, #2
 8000556:	4461      	add	r1, ip
 8000558:	e732      	b.n	80003c0 <__udivmoddi4+0x12c>
 800055a:	4630      	mov	r0, r6
 800055c:	e709      	b.n	8000372 <__udivmoddi4+0xde>
 800055e:	4464      	add	r4, ip
 8000560:	3802      	subs	r0, #2
 8000562:	e742      	b.n	80003ea <__udivmoddi4+0x156>

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b08a      	sub	sp, #40	; 0x28
 800056c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056e:	f000 fa63 	bl	8000a38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000572:	f000 f86d 	bl	8000650 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000576:	f000 f8d5 	bl	8000724 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  SEGGER_UART_init(500000);
 800057a:	482d      	ldr	r0, [pc, #180]	; (8000630 <main+0xc8>)
 800057c:	f003 f868 	bl	8003650 <SEGGER_UART_init>

  DWT_CTRL |= (1 << 0);
 8000580:	4b2c      	ldr	r3, [pc, #176]	; (8000634 <main+0xcc>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a2b      	ldr	r2, [pc, #172]	; (8000634 <main+0xcc>)
 8000586:	f043 0301 	orr.w	r3, r3, #1
 800058a:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 800058c:	f002 fe8a 	bl	80032a4 <SEGGER_SYSVIEW_Conf>

  status = xTaskCreate(led_blue_handler, "LED_blue_task", 200, NULL, 2, &task1_handle);
 8000590:	f107 030c 	add.w	r3, r7, #12
 8000594:	9301      	str	r3, [sp, #4]
 8000596:	2302      	movs	r3, #2
 8000598:	9300      	str	r3, [sp, #0]
 800059a:	2300      	movs	r3, #0
 800059c:	22c8      	movs	r2, #200	; 0xc8
 800059e:	4926      	ldr	r1, [pc, #152]	; (8000638 <main+0xd0>)
 80005a0:	4826      	ldr	r0, [pc, #152]	; (800063c <main+0xd4>)
 80005a2:	f001 fd40 	bl	8002026 <xTaskCreate>
 80005a6:	61f8      	str	r0, [r7, #28]

  configASSERT(status == pdPASS);
 80005a8:	69fb      	ldr	r3, [r7, #28]
 80005aa:	2b01      	cmp	r3, #1
 80005ac:	d00a      	beq.n	80005c4 <main+0x5c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005b2:	f383 8811 	msr	BASEPRI, r3
 80005b6:	f3bf 8f6f 	isb	sy
 80005ba:	f3bf 8f4f 	dsb	sy
 80005be:	61bb      	str	r3, [r7, #24]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005c0:	bf00      	nop
 80005c2:	e7fe      	b.n	80005c2 <main+0x5a>

  status = xTaskCreate(led_red_handler, "LED_red_task", 200, NULL, 2, &task2_handle);
 80005c4:	f107 0308 	add.w	r3, r7, #8
 80005c8:	9301      	str	r3, [sp, #4]
 80005ca:	2302      	movs	r3, #2
 80005cc:	9300      	str	r3, [sp, #0]
 80005ce:	2300      	movs	r3, #0
 80005d0:	22c8      	movs	r2, #200	; 0xc8
 80005d2:	491b      	ldr	r1, [pc, #108]	; (8000640 <main+0xd8>)
 80005d4:	481b      	ldr	r0, [pc, #108]	; (8000644 <main+0xdc>)
 80005d6:	f001 fd26 	bl	8002026 <xTaskCreate>
 80005da:	61f8      	str	r0, [r7, #28]

  configASSERT(status == pdPASS);
 80005dc:	69fb      	ldr	r3, [r7, #28]
 80005de:	2b01      	cmp	r3, #1
 80005e0:	d00a      	beq.n	80005f8 <main+0x90>
        __asm volatile
 80005e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005e6:	f383 8811 	msr	BASEPRI, r3
 80005ea:	f3bf 8f6f 	isb	sy
 80005ee:	f3bf 8f4f 	dsb	sy
 80005f2:	617b      	str	r3, [r7, #20]
    }
 80005f4:	bf00      	nop
 80005f6:	e7fe      	b.n	80005f6 <main+0x8e>

  status = xTaskCreate(led_orange_handler, "LED_orange_task", 200, NULL, 2, &task3_handle);
 80005f8:	1d3b      	adds	r3, r7, #4
 80005fa:	9301      	str	r3, [sp, #4]
 80005fc:	2302      	movs	r3, #2
 80005fe:	9300      	str	r3, [sp, #0]
 8000600:	2300      	movs	r3, #0
 8000602:	22c8      	movs	r2, #200	; 0xc8
 8000604:	4910      	ldr	r1, [pc, #64]	; (8000648 <main+0xe0>)
 8000606:	4811      	ldr	r0, [pc, #68]	; (800064c <main+0xe4>)
 8000608:	f001 fd0d 	bl	8002026 <xTaskCreate>
 800060c:	61f8      	str	r0, [r7, #28]

  configASSERT(status == pdPASS);
 800060e:	69fb      	ldr	r3, [r7, #28]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d00a      	beq.n	800062a <main+0xc2>
        __asm volatile
 8000614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000618:	f383 8811 	msr	BASEPRI, r3
 800061c:	f3bf 8f6f 	isb	sy
 8000620:	f3bf 8f4f 	dsb	sy
 8000624:	613b      	str	r3, [r7, #16]
    }
 8000626:	bf00      	nop
 8000628:	e7fe      	b.n	8000628 <main+0xc0>

  vTaskStartScheduler();
 800062a:	f001 fe5f 	bl	80022ec <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800062e:	e7fe      	b.n	800062e <main+0xc6>
 8000630:	0007a120 	.word	0x0007a120
 8000634:	e0001000 	.word	0xe0001000
 8000638:	080058c8 	.word	0x080058c8
 800063c:	080007c9 	.word	0x080007c9
 8000640:	080058d8 	.word	0x080058d8
 8000644:	080007f5 	.word	0x080007f5
 8000648:	080058e8 	.word	0x080058e8
 800064c:	08000821 	.word	0x08000821

08000650 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b094      	sub	sp, #80	; 0x50
 8000654:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000656:	f107 0320 	add.w	r3, r7, #32
 800065a:	2230      	movs	r2, #48	; 0x30
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f005 f91e 	bl	80058a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000664:	f107 030c 	add.w	r3, r7, #12
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
 8000672:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000674:	2300      	movs	r3, #0
 8000676:	60bb      	str	r3, [r7, #8]
 8000678:	4b28      	ldr	r3, [pc, #160]	; (800071c <SystemClock_Config+0xcc>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800067c:	4a27      	ldr	r2, [pc, #156]	; (800071c <SystemClock_Config+0xcc>)
 800067e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000682:	6413      	str	r3, [r2, #64]	; 0x40
 8000684:	4b25      	ldr	r3, [pc, #148]	; (800071c <SystemClock_Config+0xcc>)
 8000686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000688:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800068c:	60bb      	str	r3, [r7, #8]
 800068e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000690:	2300      	movs	r3, #0
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	4b22      	ldr	r3, [pc, #136]	; (8000720 <SystemClock_Config+0xd0>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a21      	ldr	r2, [pc, #132]	; (8000720 <SystemClock_Config+0xd0>)
 800069a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800069e:	6013      	str	r3, [r2, #0]
 80006a0:	4b1f      	ldr	r3, [pc, #124]	; (8000720 <SystemClock_Config+0xd0>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006a8:	607b      	str	r3, [r7, #4]
 80006aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006ac:	2302      	movs	r3, #2
 80006ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b0:	2301      	movs	r3, #1
 80006b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b4:	2310      	movs	r3, #16
 80006b6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b8:	2302      	movs	r3, #2
 80006ba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006bc:	2300      	movs	r3, #0
 80006be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006c0:	2308      	movs	r3, #8
 80006c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006c4:	23a8      	movs	r3, #168	; 0xa8
 80006c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006c8:	2302      	movs	r3, #2
 80006ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006cc:	2307      	movs	r3, #7
 80006ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d0:	f107 0320 	add.w	r3, r7, #32
 80006d4:	4618      	mov	r0, r3
 80006d6:	f000 fcc7 	bl	8001068 <HAL_RCC_OscConfig>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006e0:	f000 f8c6 	bl	8000870 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e4:	230f      	movs	r3, #15
 80006e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e8:	2302      	movs	r3, #2
 80006ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ec:	2300      	movs	r3, #0
 80006ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006f0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006fc:	f107 030c 	add.w	r3, r7, #12
 8000700:	2105      	movs	r1, #5
 8000702:	4618      	mov	r0, r3
 8000704:	f000 ff28 	bl	8001558 <HAL_RCC_ClockConfig>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800070e:	f000 f8af 	bl	8000870 <Error_Handler>
  }
}
 8000712:	bf00      	nop
 8000714:	3750      	adds	r7, #80	; 0x50
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	40023800 	.word	0x40023800
 8000720:	40007000 	.word	0x40007000

08000724 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b088      	sub	sp, #32
 8000728:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072a:	f107 030c 	add.w	r3, r7, #12
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]
 8000734:	609a      	str	r2, [r3, #8]
 8000736:	60da      	str	r2, [r3, #12]
 8000738:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	60bb      	str	r3, [r7, #8]
 800073e:	4b20      	ldr	r3, [pc, #128]	; (80007c0 <MX_GPIO_Init+0x9c>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4a1f      	ldr	r2, [pc, #124]	; (80007c0 <MX_GPIO_Init+0x9c>)
 8000744:	f043 0304 	orr.w	r3, r3, #4
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4b1d      	ldr	r3, [pc, #116]	; (80007c0 <MX_GPIO_Init+0x9c>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f003 0304 	and.w	r3, r3, #4
 8000752:	60bb      	str	r3, [r7, #8]
 8000754:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	607b      	str	r3, [r7, #4]
 800075a:	4b19      	ldr	r3, [pc, #100]	; (80007c0 <MX_GPIO_Init+0x9c>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a18      	ldr	r2, [pc, #96]	; (80007c0 <MX_GPIO_Init+0x9c>)
 8000760:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
 8000766:	4b16      	ldr	r3, [pc, #88]	; (80007c0 <MX_GPIO_Init+0x9c>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800076e:	607b      	str	r3, [r7, #4]
 8000770:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	603b      	str	r3, [r7, #0]
 8000776:	4b12      	ldr	r3, [pc, #72]	; (80007c0 <MX_GPIO_Init+0x9c>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	4a11      	ldr	r2, [pc, #68]	; (80007c0 <MX_GPIO_Init+0x9c>)
 800077c:	f043 0308 	orr.w	r3, r3, #8
 8000780:	6313      	str	r3, [r2, #48]	; 0x30
 8000782:	4b0f      	ldr	r3, [pc, #60]	; (80007c0 <MX_GPIO_Init+0x9c>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	f003 0308 	and.w	r3, r3, #8
 800078a:	603b      	str	r3, [r7, #0]
 800078c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800078e:	2200      	movs	r2, #0
 8000790:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000794:	480b      	ldr	r0, [pc, #44]	; (80007c4 <MX_GPIO_Init+0xa0>)
 8000796:	f000 fc33 	bl	8001000 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800079a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800079e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a0:	2301      	movs	r3, #1
 80007a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a4:	2300      	movs	r3, #0
 80007a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a8:	2300      	movs	r3, #0
 80007aa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007ac:	f107 030c 	add.w	r3, r7, #12
 80007b0:	4619      	mov	r1, r3
 80007b2:	4804      	ldr	r0, [pc, #16]	; (80007c4 <MX_GPIO_Init+0xa0>)
 80007b4:	f000 fa88 	bl	8000cc8 <HAL_GPIO_Init>

}
 80007b8:	bf00      	nop
 80007ba:	3720      	adds	r7, #32
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	40023800 	.word	0x40023800
 80007c4:	40020c00 	.word	0x40020c00

080007c8 <led_blue_handler>:

/* USER CODE BEGIN 4 */
static void led_blue_handler(void* parameters)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
	while(1)
	{
		//blue PD15
		SEGGER_SYSVIEW_PrintfTarget("Toggling blue LED");
 80007d0:	4806      	ldr	r0, [pc, #24]	; (80007ec <led_blue_handler+0x24>)
 80007d2:	f004 ff85 	bl	80056e0 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 80007d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007da:	4805      	ldr	r0, [pc, #20]	; (80007f0 <led_blue_handler+0x28>)
 80007dc:	f000 fc29 	bl	8001032 <HAL_GPIO_TogglePin>
		HAL_Delay(1000); //blocking delay, it will change with non-blocking delay
 80007e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007e4:	f000 f96a 	bl	8000abc <HAL_Delay>
		SEGGER_SYSVIEW_PrintfTarget("Toggling blue LED");
 80007e8:	e7f2      	b.n	80007d0 <led_blue_handler+0x8>
 80007ea:	bf00      	nop
 80007ec:	080058f8 	.word	0x080058f8
 80007f0:	40020c00 	.word	0x40020c00

080007f4 <led_red_handler>:
	}
}

static void led_red_handler(void* parameters)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
	while(1)
	{
		//red PD14

		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 80007fc:	4806      	ldr	r0, [pc, #24]	; (8000818 <led_red_handler+0x24>)
 80007fe:	f004 ff6f 	bl	80056e0 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000802:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000806:	4805      	ldr	r0, [pc, #20]	; (800081c <led_red_handler+0x28>)
 8000808:	f000 fc13 	bl	8001032 <HAL_GPIO_TogglePin>
		HAL_Delay(800); //blocking delay
 800080c:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000810:	f000 f954 	bl	8000abc <HAL_Delay>
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 8000814:	e7f2      	b.n	80007fc <led_red_handler+0x8>
 8000816:	bf00      	nop
 8000818:	0800590c 	.word	0x0800590c
 800081c:	40020c00 	.word	0x40020c00

08000820 <led_orange_handler>:
	}
}

static void led_orange_handler(void* parameters)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
	while(1)
	{
		//orange PD13

		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 8000828:	4806      	ldr	r0, [pc, #24]	; (8000844 <led_orange_handler+0x24>)
 800082a:	f004 ff59 	bl	80056e0 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 800082e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000832:	4805      	ldr	r0, [pc, #20]	; (8000848 <led_orange_handler+0x28>)
 8000834:	f000 fbfd 	bl	8001032 <HAL_GPIO_TogglePin>
		HAL_Delay(400); //blocking delay
 8000838:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800083c:	f000 f93e 	bl	8000abc <HAL_Delay>
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 8000840:	e7f2      	b.n	8000828 <led_orange_handler+0x8>
 8000842:	bf00      	nop
 8000844:	08005920 	.word	0x08005920
 8000848:	40020c00 	.word	0x40020c00

0800084c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4a04      	ldr	r2, [pc, #16]	; (800086c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800085a:	4293      	cmp	r3, r2
 800085c:	d101      	bne.n	8000862 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800085e:	f000 f90d 	bl	8000a7c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000862:	bf00      	nop
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	40001000 	.word	0x40001000

08000870 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000874:	b672      	cpsid	i
}
 8000876:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000878:	e7fe      	b.n	8000878 <Error_Handler+0x8>
	...

0800087c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	607b      	str	r3, [r7, #4]
 8000886:	4b10      	ldr	r3, [pc, #64]	; (80008c8 <HAL_MspInit+0x4c>)
 8000888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800088a:	4a0f      	ldr	r2, [pc, #60]	; (80008c8 <HAL_MspInit+0x4c>)
 800088c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000890:	6453      	str	r3, [r2, #68]	; 0x44
 8000892:	4b0d      	ldr	r3, [pc, #52]	; (80008c8 <HAL_MspInit+0x4c>)
 8000894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000896:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800089a:	607b      	str	r3, [r7, #4]
 800089c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	603b      	str	r3, [r7, #0]
 80008a2:	4b09      	ldr	r3, [pc, #36]	; (80008c8 <HAL_MspInit+0x4c>)
 80008a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a6:	4a08      	ldr	r2, [pc, #32]	; (80008c8 <HAL_MspInit+0x4c>)
 80008a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008ac:	6413      	str	r3, [r2, #64]	; 0x40
 80008ae:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <HAL_MspInit+0x4c>)
 80008b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008b6:	603b      	str	r3, [r7, #0]
 80008b8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 80008ba:	f002 f93d 	bl	8002b38 <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 80008be:	bf00      	nop
 80008c0:	3708      	adds	r7, #8
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	40023800 	.word	0x40023800

080008cc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b08c      	sub	sp, #48	; 0x30
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80008d4:	2300      	movs	r3, #0
 80008d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80008d8:	2300      	movs	r3, #0
 80008da:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80008dc:	2200      	movs	r2, #0
 80008de:	6879      	ldr	r1, [r7, #4]
 80008e0:	2036      	movs	r0, #54	; 0x36
 80008e2:	f000 f9c7 	bl	8000c74 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80008e6:	2036      	movs	r0, #54	; 0x36
 80008e8:	f000 f9e0 	bl	8000cac <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80008ec:	2300      	movs	r3, #0
 80008ee:	60fb      	str	r3, [r7, #12]
 80008f0:	4b1f      	ldr	r3, [pc, #124]	; (8000970 <HAL_InitTick+0xa4>)
 80008f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f4:	4a1e      	ldr	r2, [pc, #120]	; (8000970 <HAL_InitTick+0xa4>)
 80008f6:	f043 0310 	orr.w	r3, r3, #16
 80008fa:	6413      	str	r3, [r2, #64]	; 0x40
 80008fc:	4b1c      	ldr	r3, [pc, #112]	; (8000970 <HAL_InitTick+0xa4>)
 80008fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000900:	f003 0310 	and.w	r3, r3, #16
 8000904:	60fb      	str	r3, [r7, #12]
 8000906:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000908:	f107 0210 	add.w	r2, r7, #16
 800090c:	f107 0314 	add.w	r3, r7, #20
 8000910:	4611      	mov	r1, r2
 8000912:	4618      	mov	r0, r3
 8000914:	f001 f82c 	bl	8001970 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000918:	f001 f816 	bl	8001948 <HAL_RCC_GetPCLK1Freq>
 800091c:	4603      	mov	r3, r0
 800091e:	005b      	lsls	r3, r3, #1
 8000920:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000924:	4a13      	ldr	r2, [pc, #76]	; (8000974 <HAL_InitTick+0xa8>)
 8000926:	fba2 2303 	umull	r2, r3, r2, r3
 800092a:	0c9b      	lsrs	r3, r3, #18
 800092c:	3b01      	subs	r3, #1
 800092e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000930:	4b11      	ldr	r3, [pc, #68]	; (8000978 <HAL_InitTick+0xac>)
 8000932:	4a12      	ldr	r2, [pc, #72]	; (800097c <HAL_InitTick+0xb0>)
 8000934:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000936:	4b10      	ldr	r3, [pc, #64]	; (8000978 <HAL_InitTick+0xac>)
 8000938:	f240 32e7 	movw	r2, #999	; 0x3e7
 800093c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800093e:	4a0e      	ldr	r2, [pc, #56]	; (8000978 <HAL_InitTick+0xac>)
 8000940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000942:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000944:	4b0c      	ldr	r3, [pc, #48]	; (8000978 <HAL_InitTick+0xac>)
 8000946:	2200      	movs	r2, #0
 8000948:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800094a:	4b0b      	ldr	r3, [pc, #44]	; (8000978 <HAL_InitTick+0xac>)
 800094c:	2200      	movs	r2, #0
 800094e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000950:	4809      	ldr	r0, [pc, #36]	; (8000978 <HAL_InitTick+0xac>)
 8000952:	f001 f83f 	bl	80019d4 <HAL_TIM_Base_Init>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d104      	bne.n	8000966 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800095c:	4806      	ldr	r0, [pc, #24]	; (8000978 <HAL_InitTick+0xac>)
 800095e:	f001 f893 	bl	8001a88 <HAL_TIM_Base_Start_IT>
 8000962:	4603      	mov	r3, r0
 8000964:	e000      	b.n	8000968 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000966:	2301      	movs	r3, #1
}
 8000968:	4618      	mov	r0, r3
 800096a:	3730      	adds	r7, #48	; 0x30
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	40023800 	.word	0x40023800
 8000974:	431bde83 	.word	0x431bde83
 8000978:	20000038 	.word	0x20000038
 800097c:	40001000 	.word	0x40001000

08000980 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000984:	e7fe      	b.n	8000984 <NMI_Handler+0x4>

08000986 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000986:	b480      	push	{r7}
 8000988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800098a:	e7fe      	b.n	800098a <HardFault_Handler+0x4>

0800098c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000990:	e7fe      	b.n	8000990 <MemManage_Handler+0x4>

08000992 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000992:	b480      	push	{r7}
 8000994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000996:	e7fe      	b.n	8000996 <BusFault_Handler+0x4>

08000998 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800099c:	e7fe      	b.n	800099c <UsageFault_Handler+0x4>

0800099e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800099e:	b480      	push	{r7}
 80009a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009a2:	bf00      	nop
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr

080009ac <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80009b0:	4802      	ldr	r0, [pc, #8]	; (80009bc <TIM6_DAC_IRQHandler+0x10>)
 80009b2:	f001 f8d9 	bl	8001b68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80009b6:	bf00      	nop
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	20000038 	.word	0x20000038

080009c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009c4:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <SystemInit+0x20>)
 80009c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009ca:	4a05      	ldr	r2, [pc, #20]	; (80009e0 <SystemInit+0x20>)
 80009cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009d4:	bf00      	nop
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	e000ed00 	.word	0xe000ed00

080009e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80009e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a1c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009e8:	480d      	ldr	r0, [pc, #52]	; (8000a20 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80009ea:	490e      	ldr	r1, [pc, #56]	; (8000a24 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80009ec:	4a0e      	ldr	r2, [pc, #56]	; (8000a28 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009f0:	e002      	b.n	80009f8 <LoopCopyDataInit>

080009f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009f6:	3304      	adds	r3, #4

080009f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009fc:	d3f9      	bcc.n	80009f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009fe:	4a0b      	ldr	r2, [pc, #44]	; (8000a2c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a00:	4c0b      	ldr	r4, [pc, #44]	; (8000a30 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a04:	e001      	b.n	8000a0a <LoopFillZerobss>

08000a06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a08:	3204      	adds	r2, #4

08000a0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a0c:	d3fb      	bcc.n	8000a06 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a0e:	f7ff ffd7 	bl	80009c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a12:	f004 ff03 	bl	800581c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a16:	f7ff fda7 	bl	8000568 <main>
  bx  lr    
 8000a1a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000a1c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a24:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000a28:	08005a58 	.word	0x08005a58
  ldr r2, =_sbss
 8000a2c:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000a30:	20014430 	.word	0x20014430

08000a34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a34:	e7fe      	b.n	8000a34 <ADC_IRQHandler>
	...

08000a38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a3c:	4b0e      	ldr	r3, [pc, #56]	; (8000a78 <HAL_Init+0x40>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a0d      	ldr	r2, [pc, #52]	; (8000a78 <HAL_Init+0x40>)
 8000a42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a48:	4b0b      	ldr	r3, [pc, #44]	; (8000a78 <HAL_Init+0x40>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a0a      	ldr	r2, [pc, #40]	; (8000a78 <HAL_Init+0x40>)
 8000a4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a54:	4b08      	ldr	r3, [pc, #32]	; (8000a78 <HAL_Init+0x40>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a07      	ldr	r2, [pc, #28]	; (8000a78 <HAL_Init+0x40>)
 8000a5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a60:	2003      	movs	r0, #3
 8000a62:	f000 f8fc 	bl	8000c5e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a66:	2000      	movs	r0, #0
 8000a68:	f7ff ff30 	bl	80008cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a6c:	f7ff ff06 	bl	800087c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a70:	2300      	movs	r3, #0
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	40023c00 	.word	0x40023c00

08000a7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a80:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <HAL_IncTick+0x20>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	461a      	mov	r2, r3
 8000a86:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <HAL_IncTick+0x24>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	4413      	add	r3, r2
 8000a8c:	4a04      	ldr	r2, [pc, #16]	; (8000aa0 <HAL_IncTick+0x24>)
 8000a8e:	6013      	str	r3, [r2, #0]
}
 8000a90:	bf00      	nop
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	20000008 	.word	0x20000008
 8000aa0:	20000080 	.word	0x20000080

08000aa4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  return uwTick;
 8000aa8:	4b03      	ldr	r3, [pc, #12]	; (8000ab8 <HAL_GetTick+0x14>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	20000080 	.word	0x20000080

08000abc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b084      	sub	sp, #16
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ac4:	f7ff ffee 	bl	8000aa4 <HAL_GetTick>
 8000ac8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ad4:	d005      	beq.n	8000ae2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ad6:	4b0a      	ldr	r3, [pc, #40]	; (8000b00 <HAL_Delay+0x44>)
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	461a      	mov	r2, r3
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	4413      	add	r3, r2
 8000ae0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ae2:	bf00      	nop
 8000ae4:	f7ff ffde 	bl	8000aa4 <HAL_GetTick>
 8000ae8:	4602      	mov	r2, r0
 8000aea:	68bb      	ldr	r3, [r7, #8]
 8000aec:	1ad3      	subs	r3, r2, r3
 8000aee:	68fa      	ldr	r2, [r7, #12]
 8000af0:	429a      	cmp	r2, r3
 8000af2:	d8f7      	bhi.n	8000ae4 <HAL_Delay+0x28>
  {
  }
}
 8000af4:	bf00      	nop
 8000af6:	bf00      	nop
 8000af8:	3710      	adds	r7, #16
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	20000008 	.word	0x20000008

08000b04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b085      	sub	sp, #20
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	f003 0307 	and.w	r3, r3, #7
 8000b12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b14:	4b0c      	ldr	r3, [pc, #48]	; (8000b48 <__NVIC_SetPriorityGrouping+0x44>)
 8000b16:	68db      	ldr	r3, [r3, #12]
 8000b18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b1a:	68ba      	ldr	r2, [r7, #8]
 8000b1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b20:	4013      	ands	r3, r2
 8000b22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b28:	68bb      	ldr	r3, [r7, #8]
 8000b2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b36:	4a04      	ldr	r2, [pc, #16]	; (8000b48 <__NVIC_SetPriorityGrouping+0x44>)
 8000b38:	68bb      	ldr	r3, [r7, #8]
 8000b3a:	60d3      	str	r3, [r2, #12]
}
 8000b3c:	bf00      	nop
 8000b3e:	3714      	adds	r7, #20
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr
 8000b48:	e000ed00 	.word	0xe000ed00

08000b4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b50:	4b04      	ldr	r3, [pc, #16]	; (8000b64 <__NVIC_GetPriorityGrouping+0x18>)
 8000b52:	68db      	ldr	r3, [r3, #12]
 8000b54:	0a1b      	lsrs	r3, r3, #8
 8000b56:	f003 0307 	and.w	r3, r3, #7
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr
 8000b64:	e000ed00 	.word	0xe000ed00

08000b68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	4603      	mov	r3, r0
 8000b70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	db0b      	blt.n	8000b92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b7a:	79fb      	ldrb	r3, [r7, #7]
 8000b7c:	f003 021f 	and.w	r2, r3, #31
 8000b80:	4907      	ldr	r1, [pc, #28]	; (8000ba0 <__NVIC_EnableIRQ+0x38>)
 8000b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b86:	095b      	lsrs	r3, r3, #5
 8000b88:	2001      	movs	r0, #1
 8000b8a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b92:	bf00      	nop
 8000b94:	370c      	adds	r7, #12
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	e000e100 	.word	0xe000e100

08000ba4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b083      	sub	sp, #12
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	4603      	mov	r3, r0
 8000bac:	6039      	str	r1, [r7, #0]
 8000bae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	db0a      	blt.n	8000bce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	b2da      	uxtb	r2, r3
 8000bbc:	490c      	ldr	r1, [pc, #48]	; (8000bf0 <__NVIC_SetPriority+0x4c>)
 8000bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc2:	0112      	lsls	r2, r2, #4
 8000bc4:	b2d2      	uxtb	r2, r2
 8000bc6:	440b      	add	r3, r1
 8000bc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bcc:	e00a      	b.n	8000be4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	b2da      	uxtb	r2, r3
 8000bd2:	4908      	ldr	r1, [pc, #32]	; (8000bf4 <__NVIC_SetPriority+0x50>)
 8000bd4:	79fb      	ldrb	r3, [r7, #7]
 8000bd6:	f003 030f 	and.w	r3, r3, #15
 8000bda:	3b04      	subs	r3, #4
 8000bdc:	0112      	lsls	r2, r2, #4
 8000bde:	b2d2      	uxtb	r2, r2
 8000be0:	440b      	add	r3, r1
 8000be2:	761a      	strb	r2, [r3, #24]
}
 8000be4:	bf00      	nop
 8000be6:	370c      	adds	r7, #12
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr
 8000bf0:	e000e100 	.word	0xe000e100
 8000bf4:	e000ed00 	.word	0xe000ed00

08000bf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b089      	sub	sp, #36	; 0x24
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	60f8      	str	r0, [r7, #12]
 8000c00:	60b9      	str	r1, [r7, #8]
 8000c02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	f003 0307 	and.w	r3, r3, #7
 8000c0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c0c:	69fb      	ldr	r3, [r7, #28]
 8000c0e:	f1c3 0307 	rsb	r3, r3, #7
 8000c12:	2b04      	cmp	r3, #4
 8000c14:	bf28      	it	cs
 8000c16:	2304      	movcs	r3, #4
 8000c18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c1a:	69fb      	ldr	r3, [r7, #28]
 8000c1c:	3304      	adds	r3, #4
 8000c1e:	2b06      	cmp	r3, #6
 8000c20:	d902      	bls.n	8000c28 <NVIC_EncodePriority+0x30>
 8000c22:	69fb      	ldr	r3, [r7, #28]
 8000c24:	3b03      	subs	r3, #3
 8000c26:	e000      	b.n	8000c2a <NVIC_EncodePriority+0x32>
 8000c28:	2300      	movs	r3, #0
 8000c2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c30:	69bb      	ldr	r3, [r7, #24]
 8000c32:	fa02 f303 	lsl.w	r3, r2, r3
 8000c36:	43da      	mvns	r2, r3
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	401a      	ands	r2, r3
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c40:	f04f 31ff 	mov.w	r1, #4294967295
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	fa01 f303 	lsl.w	r3, r1, r3
 8000c4a:	43d9      	mvns	r1, r3
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c50:	4313      	orrs	r3, r2
         );
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3724      	adds	r7, #36	; 0x24
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr

08000c5e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c5e:	b580      	push	{r7, lr}
 8000c60:	b082      	sub	sp, #8
 8000c62:	af00      	add	r7, sp, #0
 8000c64:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c66:	6878      	ldr	r0, [r7, #4]
 8000c68:	f7ff ff4c 	bl	8000b04 <__NVIC_SetPriorityGrouping>
}
 8000c6c:	bf00      	nop
 8000c6e:	3708      	adds	r7, #8
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}

08000c74 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b086      	sub	sp, #24
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	60b9      	str	r1, [r7, #8]
 8000c7e:	607a      	str	r2, [r7, #4]
 8000c80:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c82:	2300      	movs	r3, #0
 8000c84:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c86:	f7ff ff61 	bl	8000b4c <__NVIC_GetPriorityGrouping>
 8000c8a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c8c:	687a      	ldr	r2, [r7, #4]
 8000c8e:	68b9      	ldr	r1, [r7, #8]
 8000c90:	6978      	ldr	r0, [r7, #20]
 8000c92:	f7ff ffb1 	bl	8000bf8 <NVIC_EncodePriority>
 8000c96:	4602      	mov	r2, r0
 8000c98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c9c:	4611      	mov	r1, r2
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f7ff ff80 	bl	8000ba4 <__NVIC_SetPriority>
}
 8000ca4:	bf00      	nop
 8000ca6:	3718      	adds	r7, #24
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}

08000cac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f7ff ff54 	bl	8000b68 <__NVIC_EnableIRQ>
}
 8000cc0:	bf00      	nop
 8000cc2:	3708      	adds	r7, #8
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}

08000cc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b089      	sub	sp, #36	; 0x24
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
 8000cd0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cde:	2300      	movs	r3, #0
 8000ce0:	61fb      	str	r3, [r7, #28]
 8000ce2:	e16b      	b.n	8000fbc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	69fb      	ldr	r3, [r7, #28]
 8000ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	697a      	ldr	r2, [r7, #20]
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000cf8:	693a      	ldr	r2, [r7, #16]
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	f040 815a 	bne.w	8000fb6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	f003 0303 	and.w	r3, r3, #3
 8000d0a:	2b01      	cmp	r3, #1
 8000d0c:	d005      	beq.n	8000d1a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d16:	2b02      	cmp	r3, #2
 8000d18:	d130      	bne.n	8000d7c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	689b      	ldr	r3, [r3, #8]
 8000d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d20:	69fb      	ldr	r3, [r7, #28]
 8000d22:	005b      	lsls	r3, r3, #1
 8000d24:	2203      	movs	r2, #3
 8000d26:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2a:	43db      	mvns	r3, r3
 8000d2c:	69ba      	ldr	r2, [r7, #24]
 8000d2e:	4013      	ands	r3, r2
 8000d30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	68da      	ldr	r2, [r3, #12]
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	005b      	lsls	r3, r3, #1
 8000d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3e:	69ba      	ldr	r2, [r7, #24]
 8000d40:	4313      	orrs	r3, r2
 8000d42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	69ba      	ldr	r2, [r7, #24]
 8000d48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d50:	2201      	movs	r2, #1
 8000d52:	69fb      	ldr	r3, [r7, #28]
 8000d54:	fa02 f303 	lsl.w	r3, r2, r3
 8000d58:	43db      	mvns	r3, r3
 8000d5a:	69ba      	ldr	r2, [r7, #24]
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	091b      	lsrs	r3, r3, #4
 8000d66:	f003 0201 	and.w	r2, r3, #1
 8000d6a:	69fb      	ldr	r3, [r7, #28]
 8000d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d70:	69ba      	ldr	r2, [r7, #24]
 8000d72:	4313      	orrs	r3, r2
 8000d74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	69ba      	ldr	r2, [r7, #24]
 8000d7a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	f003 0303 	and.w	r3, r3, #3
 8000d84:	2b03      	cmp	r3, #3
 8000d86:	d017      	beq.n	8000db8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	68db      	ldr	r3, [r3, #12]
 8000d8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	005b      	lsls	r3, r3, #1
 8000d92:	2203      	movs	r2, #3
 8000d94:	fa02 f303 	lsl.w	r3, r2, r3
 8000d98:	43db      	mvns	r3, r3
 8000d9a:	69ba      	ldr	r2, [r7, #24]
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	689a      	ldr	r2, [r3, #8]
 8000da4:	69fb      	ldr	r3, [r7, #28]
 8000da6:	005b      	lsls	r3, r3, #1
 8000da8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dac:	69ba      	ldr	r2, [r7, #24]
 8000dae:	4313      	orrs	r3, r2
 8000db0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	69ba      	ldr	r2, [r7, #24]
 8000db6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	f003 0303 	and.w	r3, r3, #3
 8000dc0:	2b02      	cmp	r3, #2
 8000dc2:	d123      	bne.n	8000e0c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000dc4:	69fb      	ldr	r3, [r7, #28]
 8000dc6:	08da      	lsrs	r2, r3, #3
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	3208      	adds	r2, #8
 8000dcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	f003 0307 	and.w	r3, r3, #7
 8000dd8:	009b      	lsls	r3, r3, #2
 8000dda:	220f      	movs	r2, #15
 8000ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8000de0:	43db      	mvns	r3, r3
 8000de2:	69ba      	ldr	r2, [r7, #24]
 8000de4:	4013      	ands	r3, r2
 8000de6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	691a      	ldr	r2, [r3, #16]
 8000dec:	69fb      	ldr	r3, [r7, #28]
 8000dee:	f003 0307 	and.w	r3, r3, #7
 8000df2:	009b      	lsls	r3, r3, #2
 8000df4:	fa02 f303 	lsl.w	r3, r2, r3
 8000df8:	69ba      	ldr	r2, [r7, #24]
 8000dfa:	4313      	orrs	r3, r2
 8000dfc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	08da      	lsrs	r2, r3, #3
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	3208      	adds	r2, #8
 8000e06:	69b9      	ldr	r1, [r7, #24]
 8000e08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	005b      	lsls	r3, r3, #1
 8000e16:	2203      	movs	r2, #3
 8000e18:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1c:	43db      	mvns	r3, r3
 8000e1e:	69ba      	ldr	r2, [r7, #24]
 8000e20:	4013      	ands	r3, r2
 8000e22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	f003 0203 	and.w	r2, r3, #3
 8000e2c:	69fb      	ldr	r3, [r7, #28]
 8000e2e:	005b      	lsls	r3, r3, #1
 8000e30:	fa02 f303 	lsl.w	r3, r2, r3
 8000e34:	69ba      	ldr	r2, [r7, #24]
 8000e36:	4313      	orrs	r3, r2
 8000e38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	69ba      	ldr	r2, [r7, #24]
 8000e3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	f000 80b4 	beq.w	8000fb6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e4e:	2300      	movs	r3, #0
 8000e50:	60fb      	str	r3, [r7, #12]
 8000e52:	4b60      	ldr	r3, [pc, #384]	; (8000fd4 <HAL_GPIO_Init+0x30c>)
 8000e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e56:	4a5f      	ldr	r2, [pc, #380]	; (8000fd4 <HAL_GPIO_Init+0x30c>)
 8000e58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e5c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e5e:	4b5d      	ldr	r3, [pc, #372]	; (8000fd4 <HAL_GPIO_Init+0x30c>)
 8000e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e66:	60fb      	str	r3, [r7, #12]
 8000e68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e6a:	4a5b      	ldr	r2, [pc, #364]	; (8000fd8 <HAL_GPIO_Init+0x310>)
 8000e6c:	69fb      	ldr	r3, [r7, #28]
 8000e6e:	089b      	lsrs	r3, r3, #2
 8000e70:	3302      	adds	r3, #2
 8000e72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	f003 0303 	and.w	r3, r3, #3
 8000e7e:	009b      	lsls	r3, r3, #2
 8000e80:	220f      	movs	r2, #15
 8000e82:	fa02 f303 	lsl.w	r3, r2, r3
 8000e86:	43db      	mvns	r3, r3
 8000e88:	69ba      	ldr	r2, [r7, #24]
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4a52      	ldr	r2, [pc, #328]	; (8000fdc <HAL_GPIO_Init+0x314>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d02b      	beq.n	8000eee <HAL_GPIO_Init+0x226>
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4a51      	ldr	r2, [pc, #324]	; (8000fe0 <HAL_GPIO_Init+0x318>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d025      	beq.n	8000eea <HAL_GPIO_Init+0x222>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4a50      	ldr	r2, [pc, #320]	; (8000fe4 <HAL_GPIO_Init+0x31c>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d01f      	beq.n	8000ee6 <HAL_GPIO_Init+0x21e>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4a4f      	ldr	r2, [pc, #316]	; (8000fe8 <HAL_GPIO_Init+0x320>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d019      	beq.n	8000ee2 <HAL_GPIO_Init+0x21a>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4a4e      	ldr	r2, [pc, #312]	; (8000fec <HAL_GPIO_Init+0x324>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d013      	beq.n	8000ede <HAL_GPIO_Init+0x216>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4a4d      	ldr	r2, [pc, #308]	; (8000ff0 <HAL_GPIO_Init+0x328>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d00d      	beq.n	8000eda <HAL_GPIO_Init+0x212>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4a4c      	ldr	r2, [pc, #304]	; (8000ff4 <HAL_GPIO_Init+0x32c>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d007      	beq.n	8000ed6 <HAL_GPIO_Init+0x20e>
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4a4b      	ldr	r2, [pc, #300]	; (8000ff8 <HAL_GPIO_Init+0x330>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d101      	bne.n	8000ed2 <HAL_GPIO_Init+0x20a>
 8000ece:	2307      	movs	r3, #7
 8000ed0:	e00e      	b.n	8000ef0 <HAL_GPIO_Init+0x228>
 8000ed2:	2308      	movs	r3, #8
 8000ed4:	e00c      	b.n	8000ef0 <HAL_GPIO_Init+0x228>
 8000ed6:	2306      	movs	r3, #6
 8000ed8:	e00a      	b.n	8000ef0 <HAL_GPIO_Init+0x228>
 8000eda:	2305      	movs	r3, #5
 8000edc:	e008      	b.n	8000ef0 <HAL_GPIO_Init+0x228>
 8000ede:	2304      	movs	r3, #4
 8000ee0:	e006      	b.n	8000ef0 <HAL_GPIO_Init+0x228>
 8000ee2:	2303      	movs	r3, #3
 8000ee4:	e004      	b.n	8000ef0 <HAL_GPIO_Init+0x228>
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	e002      	b.n	8000ef0 <HAL_GPIO_Init+0x228>
 8000eea:	2301      	movs	r3, #1
 8000eec:	e000      	b.n	8000ef0 <HAL_GPIO_Init+0x228>
 8000eee:	2300      	movs	r3, #0
 8000ef0:	69fa      	ldr	r2, [r7, #28]
 8000ef2:	f002 0203 	and.w	r2, r2, #3
 8000ef6:	0092      	lsls	r2, r2, #2
 8000ef8:	4093      	lsls	r3, r2
 8000efa:	69ba      	ldr	r2, [r7, #24]
 8000efc:	4313      	orrs	r3, r2
 8000efe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f00:	4935      	ldr	r1, [pc, #212]	; (8000fd8 <HAL_GPIO_Init+0x310>)
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	089b      	lsrs	r3, r3, #2
 8000f06:	3302      	adds	r3, #2
 8000f08:	69ba      	ldr	r2, [r7, #24]
 8000f0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f0e:	4b3b      	ldr	r3, [pc, #236]	; (8000ffc <HAL_GPIO_Init+0x334>)
 8000f10:	689b      	ldr	r3, [r3, #8]
 8000f12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	43db      	mvns	r3, r3
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d003      	beq.n	8000f32 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000f2a:	69ba      	ldr	r2, [r7, #24]
 8000f2c:	693b      	ldr	r3, [r7, #16]
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f32:	4a32      	ldr	r2, [pc, #200]	; (8000ffc <HAL_GPIO_Init+0x334>)
 8000f34:	69bb      	ldr	r3, [r7, #24]
 8000f36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f38:	4b30      	ldr	r3, [pc, #192]	; (8000ffc <HAL_GPIO_Init+0x334>)
 8000f3a:	68db      	ldr	r3, [r3, #12]
 8000f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	43db      	mvns	r3, r3
 8000f42:	69ba      	ldr	r2, [r7, #24]
 8000f44:	4013      	ands	r3, r2
 8000f46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d003      	beq.n	8000f5c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	693b      	ldr	r3, [r7, #16]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f5c:	4a27      	ldr	r2, [pc, #156]	; (8000ffc <HAL_GPIO_Init+0x334>)
 8000f5e:	69bb      	ldr	r3, [r7, #24]
 8000f60:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f62:	4b26      	ldr	r3, [pc, #152]	; (8000ffc <HAL_GPIO_Init+0x334>)
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	43db      	mvns	r3, r3
 8000f6c:	69ba      	ldr	r2, [r7, #24]
 8000f6e:	4013      	ands	r3, r2
 8000f70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d003      	beq.n	8000f86 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000f7e:	69ba      	ldr	r2, [r7, #24]
 8000f80:	693b      	ldr	r3, [r7, #16]
 8000f82:	4313      	orrs	r3, r2
 8000f84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f86:	4a1d      	ldr	r2, [pc, #116]	; (8000ffc <HAL_GPIO_Init+0x334>)
 8000f88:	69bb      	ldr	r3, [r7, #24]
 8000f8a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f8c:	4b1b      	ldr	r3, [pc, #108]	; (8000ffc <HAL_GPIO_Init+0x334>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	43db      	mvns	r3, r3
 8000f96:	69ba      	ldr	r2, [r7, #24]
 8000f98:	4013      	ands	r3, r2
 8000f9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d003      	beq.n	8000fb0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	693b      	ldr	r3, [r7, #16]
 8000fac:	4313      	orrs	r3, r2
 8000fae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000fb0:	4a12      	ldr	r2, [pc, #72]	; (8000ffc <HAL_GPIO_Init+0x334>)
 8000fb2:	69bb      	ldr	r3, [r7, #24]
 8000fb4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	3301      	adds	r3, #1
 8000fba:	61fb      	str	r3, [r7, #28]
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	2b0f      	cmp	r3, #15
 8000fc0:	f67f ae90 	bls.w	8000ce4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000fc4:	bf00      	nop
 8000fc6:	bf00      	nop
 8000fc8:	3724      	adds	r7, #36	; 0x24
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	40023800 	.word	0x40023800
 8000fd8:	40013800 	.word	0x40013800
 8000fdc:	40020000 	.word	0x40020000
 8000fe0:	40020400 	.word	0x40020400
 8000fe4:	40020800 	.word	0x40020800
 8000fe8:	40020c00 	.word	0x40020c00
 8000fec:	40021000 	.word	0x40021000
 8000ff0:	40021400 	.word	0x40021400
 8000ff4:	40021800 	.word	0x40021800
 8000ff8:	40021c00 	.word	0x40021c00
 8000ffc:	40013c00 	.word	0x40013c00

08001000 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	460b      	mov	r3, r1
 800100a:	807b      	strh	r3, [r7, #2]
 800100c:	4613      	mov	r3, r2
 800100e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001010:	787b      	ldrb	r3, [r7, #1]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d003      	beq.n	800101e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001016:	887a      	ldrh	r2, [r7, #2]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800101c:	e003      	b.n	8001026 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800101e:	887b      	ldrh	r3, [r7, #2]
 8001020:	041a      	lsls	r2, r3, #16
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	619a      	str	r2, [r3, #24]
}
 8001026:	bf00      	nop
 8001028:	370c      	adds	r7, #12
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr

08001032 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001032:	b480      	push	{r7}
 8001034:	b085      	sub	sp, #20
 8001036:	af00      	add	r7, sp, #0
 8001038:	6078      	str	r0, [r7, #4]
 800103a:	460b      	mov	r3, r1
 800103c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	695b      	ldr	r3, [r3, #20]
 8001042:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001044:	887a      	ldrh	r2, [r7, #2]
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	4013      	ands	r3, r2
 800104a:	041a      	lsls	r2, r3, #16
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	43d9      	mvns	r1, r3
 8001050:	887b      	ldrh	r3, [r7, #2]
 8001052:	400b      	ands	r3, r1
 8001054:	431a      	orrs	r2, r3
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	619a      	str	r2, [r3, #24]
}
 800105a:	bf00      	nop
 800105c:	3714      	adds	r7, #20
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
	...

08001068 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b086      	sub	sp, #24
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d101      	bne.n	800107a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	e267      	b.n	800154a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f003 0301 	and.w	r3, r3, #1
 8001082:	2b00      	cmp	r3, #0
 8001084:	d075      	beq.n	8001172 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001086:	4b88      	ldr	r3, [pc, #544]	; (80012a8 <HAL_RCC_OscConfig+0x240>)
 8001088:	689b      	ldr	r3, [r3, #8]
 800108a:	f003 030c 	and.w	r3, r3, #12
 800108e:	2b04      	cmp	r3, #4
 8001090:	d00c      	beq.n	80010ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001092:	4b85      	ldr	r3, [pc, #532]	; (80012a8 <HAL_RCC_OscConfig+0x240>)
 8001094:	689b      	ldr	r3, [r3, #8]
 8001096:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800109a:	2b08      	cmp	r3, #8
 800109c:	d112      	bne.n	80010c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800109e:	4b82      	ldr	r3, [pc, #520]	; (80012a8 <HAL_RCC_OscConfig+0x240>)
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80010aa:	d10b      	bne.n	80010c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010ac:	4b7e      	ldr	r3, [pc, #504]	; (80012a8 <HAL_RCC_OscConfig+0x240>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d05b      	beq.n	8001170 <HAL_RCC_OscConfig+0x108>
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d157      	bne.n	8001170 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80010c0:	2301      	movs	r3, #1
 80010c2:	e242      	b.n	800154a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010cc:	d106      	bne.n	80010dc <HAL_RCC_OscConfig+0x74>
 80010ce:	4b76      	ldr	r3, [pc, #472]	; (80012a8 <HAL_RCC_OscConfig+0x240>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a75      	ldr	r2, [pc, #468]	; (80012a8 <HAL_RCC_OscConfig+0x240>)
 80010d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010d8:	6013      	str	r3, [r2, #0]
 80010da:	e01d      	b.n	8001118 <HAL_RCC_OscConfig+0xb0>
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010e4:	d10c      	bne.n	8001100 <HAL_RCC_OscConfig+0x98>
 80010e6:	4b70      	ldr	r3, [pc, #448]	; (80012a8 <HAL_RCC_OscConfig+0x240>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a6f      	ldr	r2, [pc, #444]	; (80012a8 <HAL_RCC_OscConfig+0x240>)
 80010ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010f0:	6013      	str	r3, [r2, #0]
 80010f2:	4b6d      	ldr	r3, [pc, #436]	; (80012a8 <HAL_RCC_OscConfig+0x240>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a6c      	ldr	r2, [pc, #432]	; (80012a8 <HAL_RCC_OscConfig+0x240>)
 80010f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010fc:	6013      	str	r3, [r2, #0]
 80010fe:	e00b      	b.n	8001118 <HAL_RCC_OscConfig+0xb0>
 8001100:	4b69      	ldr	r3, [pc, #420]	; (80012a8 <HAL_RCC_OscConfig+0x240>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a68      	ldr	r2, [pc, #416]	; (80012a8 <HAL_RCC_OscConfig+0x240>)
 8001106:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800110a:	6013      	str	r3, [r2, #0]
 800110c:	4b66      	ldr	r3, [pc, #408]	; (80012a8 <HAL_RCC_OscConfig+0x240>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a65      	ldr	r2, [pc, #404]	; (80012a8 <HAL_RCC_OscConfig+0x240>)
 8001112:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001116:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d013      	beq.n	8001148 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001120:	f7ff fcc0 	bl	8000aa4 <HAL_GetTick>
 8001124:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001126:	e008      	b.n	800113a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001128:	f7ff fcbc 	bl	8000aa4 <HAL_GetTick>
 800112c:	4602      	mov	r2, r0
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	2b64      	cmp	r3, #100	; 0x64
 8001134:	d901      	bls.n	800113a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001136:	2303      	movs	r3, #3
 8001138:	e207      	b.n	800154a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800113a:	4b5b      	ldr	r3, [pc, #364]	; (80012a8 <HAL_RCC_OscConfig+0x240>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001142:	2b00      	cmp	r3, #0
 8001144:	d0f0      	beq.n	8001128 <HAL_RCC_OscConfig+0xc0>
 8001146:	e014      	b.n	8001172 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001148:	f7ff fcac 	bl	8000aa4 <HAL_GetTick>
 800114c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800114e:	e008      	b.n	8001162 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001150:	f7ff fca8 	bl	8000aa4 <HAL_GetTick>
 8001154:	4602      	mov	r2, r0
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	1ad3      	subs	r3, r2, r3
 800115a:	2b64      	cmp	r3, #100	; 0x64
 800115c:	d901      	bls.n	8001162 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800115e:	2303      	movs	r3, #3
 8001160:	e1f3      	b.n	800154a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001162:	4b51      	ldr	r3, [pc, #324]	; (80012a8 <HAL_RCC_OscConfig+0x240>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800116a:	2b00      	cmp	r3, #0
 800116c:	d1f0      	bne.n	8001150 <HAL_RCC_OscConfig+0xe8>
 800116e:	e000      	b.n	8001172 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001170:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f003 0302 	and.w	r3, r3, #2
 800117a:	2b00      	cmp	r3, #0
 800117c:	d063      	beq.n	8001246 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800117e:	4b4a      	ldr	r3, [pc, #296]	; (80012a8 <HAL_RCC_OscConfig+0x240>)
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	f003 030c 	and.w	r3, r3, #12
 8001186:	2b00      	cmp	r3, #0
 8001188:	d00b      	beq.n	80011a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800118a:	4b47      	ldr	r3, [pc, #284]	; (80012a8 <HAL_RCC_OscConfig+0x240>)
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001192:	2b08      	cmp	r3, #8
 8001194:	d11c      	bne.n	80011d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001196:	4b44      	ldr	r3, [pc, #272]	; (80012a8 <HAL_RCC_OscConfig+0x240>)
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d116      	bne.n	80011d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011a2:	4b41      	ldr	r3, [pc, #260]	; (80012a8 <HAL_RCC_OscConfig+0x240>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f003 0302 	and.w	r3, r3, #2
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d005      	beq.n	80011ba <HAL_RCC_OscConfig+0x152>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	68db      	ldr	r3, [r3, #12]
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d001      	beq.n	80011ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
 80011b8:	e1c7      	b.n	800154a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011ba:	4b3b      	ldr	r3, [pc, #236]	; (80012a8 <HAL_RCC_OscConfig+0x240>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	691b      	ldr	r3, [r3, #16]
 80011c6:	00db      	lsls	r3, r3, #3
 80011c8:	4937      	ldr	r1, [pc, #220]	; (80012a8 <HAL_RCC_OscConfig+0x240>)
 80011ca:	4313      	orrs	r3, r2
 80011cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011ce:	e03a      	b.n	8001246 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d020      	beq.n	800121a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011d8:	4b34      	ldr	r3, [pc, #208]	; (80012ac <HAL_RCC_OscConfig+0x244>)
 80011da:	2201      	movs	r2, #1
 80011dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011de:	f7ff fc61 	bl	8000aa4 <HAL_GetTick>
 80011e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011e4:	e008      	b.n	80011f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011e6:	f7ff fc5d 	bl	8000aa4 <HAL_GetTick>
 80011ea:	4602      	mov	r2, r0
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	1ad3      	subs	r3, r2, r3
 80011f0:	2b02      	cmp	r3, #2
 80011f2:	d901      	bls.n	80011f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80011f4:	2303      	movs	r3, #3
 80011f6:	e1a8      	b.n	800154a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011f8:	4b2b      	ldr	r3, [pc, #172]	; (80012a8 <HAL_RCC_OscConfig+0x240>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f003 0302 	and.w	r3, r3, #2
 8001200:	2b00      	cmp	r3, #0
 8001202:	d0f0      	beq.n	80011e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001204:	4b28      	ldr	r3, [pc, #160]	; (80012a8 <HAL_RCC_OscConfig+0x240>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	691b      	ldr	r3, [r3, #16]
 8001210:	00db      	lsls	r3, r3, #3
 8001212:	4925      	ldr	r1, [pc, #148]	; (80012a8 <HAL_RCC_OscConfig+0x240>)
 8001214:	4313      	orrs	r3, r2
 8001216:	600b      	str	r3, [r1, #0]
 8001218:	e015      	b.n	8001246 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800121a:	4b24      	ldr	r3, [pc, #144]	; (80012ac <HAL_RCC_OscConfig+0x244>)
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001220:	f7ff fc40 	bl	8000aa4 <HAL_GetTick>
 8001224:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001226:	e008      	b.n	800123a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001228:	f7ff fc3c 	bl	8000aa4 <HAL_GetTick>
 800122c:	4602      	mov	r2, r0
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	2b02      	cmp	r3, #2
 8001234:	d901      	bls.n	800123a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001236:	2303      	movs	r3, #3
 8001238:	e187      	b.n	800154a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800123a:	4b1b      	ldr	r3, [pc, #108]	; (80012a8 <HAL_RCC_OscConfig+0x240>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f003 0302 	and.w	r3, r3, #2
 8001242:	2b00      	cmp	r3, #0
 8001244:	d1f0      	bne.n	8001228 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f003 0308 	and.w	r3, r3, #8
 800124e:	2b00      	cmp	r3, #0
 8001250:	d036      	beq.n	80012c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	695b      	ldr	r3, [r3, #20]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d016      	beq.n	8001288 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800125a:	4b15      	ldr	r3, [pc, #84]	; (80012b0 <HAL_RCC_OscConfig+0x248>)
 800125c:	2201      	movs	r2, #1
 800125e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001260:	f7ff fc20 	bl	8000aa4 <HAL_GetTick>
 8001264:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001266:	e008      	b.n	800127a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001268:	f7ff fc1c 	bl	8000aa4 <HAL_GetTick>
 800126c:	4602      	mov	r2, r0
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	2b02      	cmp	r3, #2
 8001274:	d901      	bls.n	800127a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001276:	2303      	movs	r3, #3
 8001278:	e167      	b.n	800154a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800127a:	4b0b      	ldr	r3, [pc, #44]	; (80012a8 <HAL_RCC_OscConfig+0x240>)
 800127c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800127e:	f003 0302 	and.w	r3, r3, #2
 8001282:	2b00      	cmp	r3, #0
 8001284:	d0f0      	beq.n	8001268 <HAL_RCC_OscConfig+0x200>
 8001286:	e01b      	b.n	80012c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001288:	4b09      	ldr	r3, [pc, #36]	; (80012b0 <HAL_RCC_OscConfig+0x248>)
 800128a:	2200      	movs	r2, #0
 800128c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800128e:	f7ff fc09 	bl	8000aa4 <HAL_GetTick>
 8001292:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001294:	e00e      	b.n	80012b4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001296:	f7ff fc05 	bl	8000aa4 <HAL_GetTick>
 800129a:	4602      	mov	r2, r0
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	1ad3      	subs	r3, r2, r3
 80012a0:	2b02      	cmp	r3, #2
 80012a2:	d907      	bls.n	80012b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80012a4:	2303      	movs	r3, #3
 80012a6:	e150      	b.n	800154a <HAL_RCC_OscConfig+0x4e2>
 80012a8:	40023800 	.word	0x40023800
 80012ac:	42470000 	.word	0x42470000
 80012b0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012b4:	4b88      	ldr	r3, [pc, #544]	; (80014d8 <HAL_RCC_OscConfig+0x470>)
 80012b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012b8:	f003 0302 	and.w	r3, r3, #2
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d1ea      	bne.n	8001296 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f003 0304 	and.w	r3, r3, #4
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	f000 8097 	beq.w	80013fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012ce:	2300      	movs	r3, #0
 80012d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012d2:	4b81      	ldr	r3, [pc, #516]	; (80014d8 <HAL_RCC_OscConfig+0x470>)
 80012d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d10f      	bne.n	80012fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	60bb      	str	r3, [r7, #8]
 80012e2:	4b7d      	ldr	r3, [pc, #500]	; (80014d8 <HAL_RCC_OscConfig+0x470>)
 80012e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e6:	4a7c      	ldr	r2, [pc, #496]	; (80014d8 <HAL_RCC_OscConfig+0x470>)
 80012e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012ec:	6413      	str	r3, [r2, #64]	; 0x40
 80012ee:	4b7a      	ldr	r3, [pc, #488]	; (80014d8 <HAL_RCC_OscConfig+0x470>)
 80012f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012f6:	60bb      	str	r3, [r7, #8]
 80012f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012fa:	2301      	movs	r3, #1
 80012fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012fe:	4b77      	ldr	r3, [pc, #476]	; (80014dc <HAL_RCC_OscConfig+0x474>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001306:	2b00      	cmp	r3, #0
 8001308:	d118      	bne.n	800133c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800130a:	4b74      	ldr	r3, [pc, #464]	; (80014dc <HAL_RCC_OscConfig+0x474>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a73      	ldr	r2, [pc, #460]	; (80014dc <HAL_RCC_OscConfig+0x474>)
 8001310:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001314:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001316:	f7ff fbc5 	bl	8000aa4 <HAL_GetTick>
 800131a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800131c:	e008      	b.n	8001330 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800131e:	f7ff fbc1 	bl	8000aa4 <HAL_GetTick>
 8001322:	4602      	mov	r2, r0
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	1ad3      	subs	r3, r2, r3
 8001328:	2b02      	cmp	r3, #2
 800132a:	d901      	bls.n	8001330 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800132c:	2303      	movs	r3, #3
 800132e:	e10c      	b.n	800154a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001330:	4b6a      	ldr	r3, [pc, #424]	; (80014dc <HAL_RCC_OscConfig+0x474>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001338:	2b00      	cmp	r3, #0
 800133a:	d0f0      	beq.n	800131e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	2b01      	cmp	r3, #1
 8001342:	d106      	bne.n	8001352 <HAL_RCC_OscConfig+0x2ea>
 8001344:	4b64      	ldr	r3, [pc, #400]	; (80014d8 <HAL_RCC_OscConfig+0x470>)
 8001346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001348:	4a63      	ldr	r2, [pc, #396]	; (80014d8 <HAL_RCC_OscConfig+0x470>)
 800134a:	f043 0301 	orr.w	r3, r3, #1
 800134e:	6713      	str	r3, [r2, #112]	; 0x70
 8001350:	e01c      	b.n	800138c <HAL_RCC_OscConfig+0x324>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	2b05      	cmp	r3, #5
 8001358:	d10c      	bne.n	8001374 <HAL_RCC_OscConfig+0x30c>
 800135a:	4b5f      	ldr	r3, [pc, #380]	; (80014d8 <HAL_RCC_OscConfig+0x470>)
 800135c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800135e:	4a5e      	ldr	r2, [pc, #376]	; (80014d8 <HAL_RCC_OscConfig+0x470>)
 8001360:	f043 0304 	orr.w	r3, r3, #4
 8001364:	6713      	str	r3, [r2, #112]	; 0x70
 8001366:	4b5c      	ldr	r3, [pc, #368]	; (80014d8 <HAL_RCC_OscConfig+0x470>)
 8001368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800136a:	4a5b      	ldr	r2, [pc, #364]	; (80014d8 <HAL_RCC_OscConfig+0x470>)
 800136c:	f043 0301 	orr.w	r3, r3, #1
 8001370:	6713      	str	r3, [r2, #112]	; 0x70
 8001372:	e00b      	b.n	800138c <HAL_RCC_OscConfig+0x324>
 8001374:	4b58      	ldr	r3, [pc, #352]	; (80014d8 <HAL_RCC_OscConfig+0x470>)
 8001376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001378:	4a57      	ldr	r2, [pc, #348]	; (80014d8 <HAL_RCC_OscConfig+0x470>)
 800137a:	f023 0301 	bic.w	r3, r3, #1
 800137e:	6713      	str	r3, [r2, #112]	; 0x70
 8001380:	4b55      	ldr	r3, [pc, #340]	; (80014d8 <HAL_RCC_OscConfig+0x470>)
 8001382:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001384:	4a54      	ldr	r2, [pc, #336]	; (80014d8 <HAL_RCC_OscConfig+0x470>)
 8001386:	f023 0304 	bic.w	r3, r3, #4
 800138a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	689b      	ldr	r3, [r3, #8]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d015      	beq.n	80013c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001394:	f7ff fb86 	bl	8000aa4 <HAL_GetTick>
 8001398:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800139a:	e00a      	b.n	80013b2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800139c:	f7ff fb82 	bl	8000aa4 <HAL_GetTick>
 80013a0:	4602      	mov	r2, r0
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d901      	bls.n	80013b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80013ae:	2303      	movs	r3, #3
 80013b0:	e0cb      	b.n	800154a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013b2:	4b49      	ldr	r3, [pc, #292]	; (80014d8 <HAL_RCC_OscConfig+0x470>)
 80013b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013b6:	f003 0302 	and.w	r3, r3, #2
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d0ee      	beq.n	800139c <HAL_RCC_OscConfig+0x334>
 80013be:	e014      	b.n	80013ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013c0:	f7ff fb70 	bl	8000aa4 <HAL_GetTick>
 80013c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013c6:	e00a      	b.n	80013de <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013c8:	f7ff fb6c 	bl	8000aa4 <HAL_GetTick>
 80013cc:	4602      	mov	r2, r0
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d901      	bls.n	80013de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80013da:	2303      	movs	r3, #3
 80013dc:	e0b5      	b.n	800154a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013de:	4b3e      	ldr	r3, [pc, #248]	; (80014d8 <HAL_RCC_OscConfig+0x470>)
 80013e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013e2:	f003 0302 	and.w	r3, r3, #2
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d1ee      	bne.n	80013c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80013ea:	7dfb      	ldrb	r3, [r7, #23]
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d105      	bne.n	80013fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013f0:	4b39      	ldr	r3, [pc, #228]	; (80014d8 <HAL_RCC_OscConfig+0x470>)
 80013f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f4:	4a38      	ldr	r2, [pc, #224]	; (80014d8 <HAL_RCC_OscConfig+0x470>)
 80013f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013fa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	699b      	ldr	r3, [r3, #24]
 8001400:	2b00      	cmp	r3, #0
 8001402:	f000 80a1 	beq.w	8001548 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001406:	4b34      	ldr	r3, [pc, #208]	; (80014d8 <HAL_RCC_OscConfig+0x470>)
 8001408:	689b      	ldr	r3, [r3, #8]
 800140a:	f003 030c 	and.w	r3, r3, #12
 800140e:	2b08      	cmp	r3, #8
 8001410:	d05c      	beq.n	80014cc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	699b      	ldr	r3, [r3, #24]
 8001416:	2b02      	cmp	r3, #2
 8001418:	d141      	bne.n	800149e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800141a:	4b31      	ldr	r3, [pc, #196]	; (80014e0 <HAL_RCC_OscConfig+0x478>)
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001420:	f7ff fb40 	bl	8000aa4 <HAL_GetTick>
 8001424:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001426:	e008      	b.n	800143a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001428:	f7ff fb3c 	bl	8000aa4 <HAL_GetTick>
 800142c:	4602      	mov	r2, r0
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	2b02      	cmp	r3, #2
 8001434:	d901      	bls.n	800143a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001436:	2303      	movs	r3, #3
 8001438:	e087      	b.n	800154a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800143a:	4b27      	ldr	r3, [pc, #156]	; (80014d8 <HAL_RCC_OscConfig+0x470>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001442:	2b00      	cmp	r3, #0
 8001444:	d1f0      	bne.n	8001428 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	69da      	ldr	r2, [r3, #28]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6a1b      	ldr	r3, [r3, #32]
 800144e:	431a      	orrs	r2, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001454:	019b      	lsls	r3, r3, #6
 8001456:	431a      	orrs	r2, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800145c:	085b      	lsrs	r3, r3, #1
 800145e:	3b01      	subs	r3, #1
 8001460:	041b      	lsls	r3, r3, #16
 8001462:	431a      	orrs	r2, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001468:	061b      	lsls	r3, r3, #24
 800146a:	491b      	ldr	r1, [pc, #108]	; (80014d8 <HAL_RCC_OscConfig+0x470>)
 800146c:	4313      	orrs	r3, r2
 800146e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001470:	4b1b      	ldr	r3, [pc, #108]	; (80014e0 <HAL_RCC_OscConfig+0x478>)
 8001472:	2201      	movs	r2, #1
 8001474:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001476:	f7ff fb15 	bl	8000aa4 <HAL_GetTick>
 800147a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800147c:	e008      	b.n	8001490 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800147e:	f7ff fb11 	bl	8000aa4 <HAL_GetTick>
 8001482:	4602      	mov	r2, r0
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	1ad3      	subs	r3, r2, r3
 8001488:	2b02      	cmp	r3, #2
 800148a:	d901      	bls.n	8001490 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800148c:	2303      	movs	r3, #3
 800148e:	e05c      	b.n	800154a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001490:	4b11      	ldr	r3, [pc, #68]	; (80014d8 <HAL_RCC_OscConfig+0x470>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001498:	2b00      	cmp	r3, #0
 800149a:	d0f0      	beq.n	800147e <HAL_RCC_OscConfig+0x416>
 800149c:	e054      	b.n	8001548 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800149e:	4b10      	ldr	r3, [pc, #64]	; (80014e0 <HAL_RCC_OscConfig+0x478>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a4:	f7ff fafe 	bl	8000aa4 <HAL_GetTick>
 80014a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014aa:	e008      	b.n	80014be <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014ac:	f7ff fafa 	bl	8000aa4 <HAL_GetTick>
 80014b0:	4602      	mov	r2, r0
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	d901      	bls.n	80014be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80014ba:	2303      	movs	r3, #3
 80014bc:	e045      	b.n	800154a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014be:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <HAL_RCC_OscConfig+0x470>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d1f0      	bne.n	80014ac <HAL_RCC_OscConfig+0x444>
 80014ca:	e03d      	b.n	8001548 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	699b      	ldr	r3, [r3, #24]
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d107      	bne.n	80014e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
 80014d6:	e038      	b.n	800154a <HAL_RCC_OscConfig+0x4e2>
 80014d8:	40023800 	.word	0x40023800
 80014dc:	40007000 	.word	0x40007000
 80014e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80014e4:	4b1b      	ldr	r3, [pc, #108]	; (8001554 <HAL_RCC_OscConfig+0x4ec>)
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	699b      	ldr	r3, [r3, #24]
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d028      	beq.n	8001544 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014fc:	429a      	cmp	r2, r3
 80014fe:	d121      	bne.n	8001544 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800150a:	429a      	cmp	r2, r3
 800150c:	d11a      	bne.n	8001544 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800150e:	68fa      	ldr	r2, [r7, #12]
 8001510:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001514:	4013      	ands	r3, r2
 8001516:	687a      	ldr	r2, [r7, #4]
 8001518:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800151a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800151c:	4293      	cmp	r3, r2
 800151e:	d111      	bne.n	8001544 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800152a:	085b      	lsrs	r3, r3, #1
 800152c:	3b01      	subs	r3, #1
 800152e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001530:	429a      	cmp	r2, r3
 8001532:	d107      	bne.n	8001544 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800153e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001540:	429a      	cmp	r2, r3
 8001542:	d001      	beq.n	8001548 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001544:	2301      	movs	r3, #1
 8001546:	e000      	b.n	800154a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001548:	2300      	movs	r3, #0
}
 800154a:	4618      	mov	r0, r3
 800154c:	3718      	adds	r7, #24
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	40023800 	.word	0x40023800

08001558 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d101      	bne.n	800156c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	e0cc      	b.n	8001706 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800156c:	4b68      	ldr	r3, [pc, #416]	; (8001710 <HAL_RCC_ClockConfig+0x1b8>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f003 0307 	and.w	r3, r3, #7
 8001574:	683a      	ldr	r2, [r7, #0]
 8001576:	429a      	cmp	r2, r3
 8001578:	d90c      	bls.n	8001594 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800157a:	4b65      	ldr	r3, [pc, #404]	; (8001710 <HAL_RCC_ClockConfig+0x1b8>)
 800157c:	683a      	ldr	r2, [r7, #0]
 800157e:	b2d2      	uxtb	r2, r2
 8001580:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001582:	4b63      	ldr	r3, [pc, #396]	; (8001710 <HAL_RCC_ClockConfig+0x1b8>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 0307 	and.w	r3, r3, #7
 800158a:	683a      	ldr	r2, [r7, #0]
 800158c:	429a      	cmp	r2, r3
 800158e:	d001      	beq.n	8001594 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001590:	2301      	movs	r3, #1
 8001592:	e0b8      	b.n	8001706 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 0302 	and.w	r3, r3, #2
 800159c:	2b00      	cmp	r3, #0
 800159e:	d020      	beq.n	80015e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f003 0304 	and.w	r3, r3, #4
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d005      	beq.n	80015b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015ac:	4b59      	ldr	r3, [pc, #356]	; (8001714 <HAL_RCC_ClockConfig+0x1bc>)
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	4a58      	ldr	r2, [pc, #352]	; (8001714 <HAL_RCC_ClockConfig+0x1bc>)
 80015b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80015b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 0308 	and.w	r3, r3, #8
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d005      	beq.n	80015d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015c4:	4b53      	ldr	r3, [pc, #332]	; (8001714 <HAL_RCC_ClockConfig+0x1bc>)
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	4a52      	ldr	r2, [pc, #328]	; (8001714 <HAL_RCC_ClockConfig+0x1bc>)
 80015ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80015ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015d0:	4b50      	ldr	r3, [pc, #320]	; (8001714 <HAL_RCC_ClockConfig+0x1bc>)
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	494d      	ldr	r1, [pc, #308]	; (8001714 <HAL_RCC_ClockConfig+0x1bc>)
 80015de:	4313      	orrs	r3, r2
 80015e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 0301 	and.w	r3, r3, #1
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d044      	beq.n	8001678 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d107      	bne.n	8001606 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015f6:	4b47      	ldr	r3, [pc, #284]	; (8001714 <HAL_RCC_ClockConfig+0x1bc>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d119      	bne.n	8001636 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e07f      	b.n	8001706 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	2b02      	cmp	r3, #2
 800160c:	d003      	beq.n	8001616 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001612:	2b03      	cmp	r3, #3
 8001614:	d107      	bne.n	8001626 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001616:	4b3f      	ldr	r3, [pc, #252]	; (8001714 <HAL_RCC_ClockConfig+0x1bc>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800161e:	2b00      	cmp	r3, #0
 8001620:	d109      	bne.n	8001636 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	e06f      	b.n	8001706 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001626:	4b3b      	ldr	r3, [pc, #236]	; (8001714 <HAL_RCC_ClockConfig+0x1bc>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 0302 	and.w	r3, r3, #2
 800162e:	2b00      	cmp	r3, #0
 8001630:	d101      	bne.n	8001636 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e067      	b.n	8001706 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001636:	4b37      	ldr	r3, [pc, #220]	; (8001714 <HAL_RCC_ClockConfig+0x1bc>)
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	f023 0203 	bic.w	r2, r3, #3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	4934      	ldr	r1, [pc, #208]	; (8001714 <HAL_RCC_ClockConfig+0x1bc>)
 8001644:	4313      	orrs	r3, r2
 8001646:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001648:	f7ff fa2c 	bl	8000aa4 <HAL_GetTick>
 800164c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800164e:	e00a      	b.n	8001666 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001650:	f7ff fa28 	bl	8000aa4 <HAL_GetTick>
 8001654:	4602      	mov	r2, r0
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	f241 3288 	movw	r2, #5000	; 0x1388
 800165e:	4293      	cmp	r3, r2
 8001660:	d901      	bls.n	8001666 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e04f      	b.n	8001706 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001666:	4b2b      	ldr	r3, [pc, #172]	; (8001714 <HAL_RCC_ClockConfig+0x1bc>)
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	f003 020c 	and.w	r2, r3, #12
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	429a      	cmp	r2, r3
 8001676:	d1eb      	bne.n	8001650 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001678:	4b25      	ldr	r3, [pc, #148]	; (8001710 <HAL_RCC_ClockConfig+0x1b8>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 0307 	and.w	r3, r3, #7
 8001680:	683a      	ldr	r2, [r7, #0]
 8001682:	429a      	cmp	r2, r3
 8001684:	d20c      	bcs.n	80016a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001686:	4b22      	ldr	r3, [pc, #136]	; (8001710 <HAL_RCC_ClockConfig+0x1b8>)
 8001688:	683a      	ldr	r2, [r7, #0]
 800168a:	b2d2      	uxtb	r2, r2
 800168c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800168e:	4b20      	ldr	r3, [pc, #128]	; (8001710 <HAL_RCC_ClockConfig+0x1b8>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 0307 	and.w	r3, r3, #7
 8001696:	683a      	ldr	r2, [r7, #0]
 8001698:	429a      	cmp	r2, r3
 800169a:	d001      	beq.n	80016a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	e032      	b.n	8001706 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f003 0304 	and.w	r3, r3, #4
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d008      	beq.n	80016be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016ac:	4b19      	ldr	r3, [pc, #100]	; (8001714 <HAL_RCC_ClockConfig+0x1bc>)
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	4916      	ldr	r1, [pc, #88]	; (8001714 <HAL_RCC_ClockConfig+0x1bc>)
 80016ba:	4313      	orrs	r3, r2
 80016bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0308 	and.w	r3, r3, #8
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d009      	beq.n	80016de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016ca:	4b12      	ldr	r3, [pc, #72]	; (8001714 <HAL_RCC_ClockConfig+0x1bc>)
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	691b      	ldr	r3, [r3, #16]
 80016d6:	00db      	lsls	r3, r3, #3
 80016d8:	490e      	ldr	r1, [pc, #56]	; (8001714 <HAL_RCC_ClockConfig+0x1bc>)
 80016da:	4313      	orrs	r3, r2
 80016dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80016de:	f000 f821 	bl	8001724 <HAL_RCC_GetSysClockFreq>
 80016e2:	4602      	mov	r2, r0
 80016e4:	4b0b      	ldr	r3, [pc, #44]	; (8001714 <HAL_RCC_ClockConfig+0x1bc>)
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	091b      	lsrs	r3, r3, #4
 80016ea:	f003 030f 	and.w	r3, r3, #15
 80016ee:	490a      	ldr	r1, [pc, #40]	; (8001718 <HAL_RCC_ClockConfig+0x1c0>)
 80016f0:	5ccb      	ldrb	r3, [r1, r3]
 80016f2:	fa22 f303 	lsr.w	r3, r2, r3
 80016f6:	4a09      	ldr	r2, [pc, #36]	; (800171c <HAL_RCC_ClockConfig+0x1c4>)
 80016f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80016fa:	4b09      	ldr	r3, [pc, #36]	; (8001720 <HAL_RCC_ClockConfig+0x1c8>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4618      	mov	r0, r3
 8001700:	f7ff f8e4 	bl	80008cc <HAL_InitTick>

  return HAL_OK;
 8001704:	2300      	movs	r3, #0
}
 8001706:	4618      	mov	r0, r3
 8001708:	3710      	adds	r7, #16
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	40023c00 	.word	0x40023c00
 8001714:	40023800 	.word	0x40023800
 8001718:	08005a08 	.word	0x08005a08
 800171c:	20000000 	.word	0x20000000
 8001720:	20000004 	.word	0x20000004

08001724 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001724:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001728:	b094      	sub	sp, #80	; 0x50
 800172a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800172c:	2300      	movs	r3, #0
 800172e:	647b      	str	r3, [r7, #68]	; 0x44
 8001730:	2300      	movs	r3, #0
 8001732:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001734:	2300      	movs	r3, #0
 8001736:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001738:	2300      	movs	r3, #0
 800173a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800173c:	4b79      	ldr	r3, [pc, #484]	; (8001924 <HAL_RCC_GetSysClockFreq+0x200>)
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	f003 030c 	and.w	r3, r3, #12
 8001744:	2b08      	cmp	r3, #8
 8001746:	d00d      	beq.n	8001764 <HAL_RCC_GetSysClockFreq+0x40>
 8001748:	2b08      	cmp	r3, #8
 800174a:	f200 80e1 	bhi.w	8001910 <HAL_RCC_GetSysClockFreq+0x1ec>
 800174e:	2b00      	cmp	r3, #0
 8001750:	d002      	beq.n	8001758 <HAL_RCC_GetSysClockFreq+0x34>
 8001752:	2b04      	cmp	r3, #4
 8001754:	d003      	beq.n	800175e <HAL_RCC_GetSysClockFreq+0x3a>
 8001756:	e0db      	b.n	8001910 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001758:	4b73      	ldr	r3, [pc, #460]	; (8001928 <HAL_RCC_GetSysClockFreq+0x204>)
 800175a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800175c:	e0db      	b.n	8001916 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800175e:	4b73      	ldr	r3, [pc, #460]	; (800192c <HAL_RCC_GetSysClockFreq+0x208>)
 8001760:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001762:	e0d8      	b.n	8001916 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001764:	4b6f      	ldr	r3, [pc, #444]	; (8001924 <HAL_RCC_GetSysClockFreq+0x200>)
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800176c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800176e:	4b6d      	ldr	r3, [pc, #436]	; (8001924 <HAL_RCC_GetSysClockFreq+0x200>)
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d063      	beq.n	8001842 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800177a:	4b6a      	ldr	r3, [pc, #424]	; (8001924 <HAL_RCC_GetSysClockFreq+0x200>)
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	099b      	lsrs	r3, r3, #6
 8001780:	2200      	movs	r2, #0
 8001782:	63bb      	str	r3, [r7, #56]	; 0x38
 8001784:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001788:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800178c:	633b      	str	r3, [r7, #48]	; 0x30
 800178e:	2300      	movs	r3, #0
 8001790:	637b      	str	r3, [r7, #52]	; 0x34
 8001792:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001796:	4622      	mov	r2, r4
 8001798:	462b      	mov	r3, r5
 800179a:	f04f 0000 	mov.w	r0, #0
 800179e:	f04f 0100 	mov.w	r1, #0
 80017a2:	0159      	lsls	r1, r3, #5
 80017a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017a8:	0150      	lsls	r0, r2, #5
 80017aa:	4602      	mov	r2, r0
 80017ac:	460b      	mov	r3, r1
 80017ae:	4621      	mov	r1, r4
 80017b0:	1a51      	subs	r1, r2, r1
 80017b2:	6139      	str	r1, [r7, #16]
 80017b4:	4629      	mov	r1, r5
 80017b6:	eb63 0301 	sbc.w	r3, r3, r1
 80017ba:	617b      	str	r3, [r7, #20]
 80017bc:	f04f 0200 	mov.w	r2, #0
 80017c0:	f04f 0300 	mov.w	r3, #0
 80017c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80017c8:	4659      	mov	r1, fp
 80017ca:	018b      	lsls	r3, r1, #6
 80017cc:	4651      	mov	r1, sl
 80017ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017d2:	4651      	mov	r1, sl
 80017d4:	018a      	lsls	r2, r1, #6
 80017d6:	4651      	mov	r1, sl
 80017d8:	ebb2 0801 	subs.w	r8, r2, r1
 80017dc:	4659      	mov	r1, fp
 80017de:	eb63 0901 	sbc.w	r9, r3, r1
 80017e2:	f04f 0200 	mov.w	r2, #0
 80017e6:	f04f 0300 	mov.w	r3, #0
 80017ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80017ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80017f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80017f6:	4690      	mov	r8, r2
 80017f8:	4699      	mov	r9, r3
 80017fa:	4623      	mov	r3, r4
 80017fc:	eb18 0303 	adds.w	r3, r8, r3
 8001800:	60bb      	str	r3, [r7, #8]
 8001802:	462b      	mov	r3, r5
 8001804:	eb49 0303 	adc.w	r3, r9, r3
 8001808:	60fb      	str	r3, [r7, #12]
 800180a:	f04f 0200 	mov.w	r2, #0
 800180e:	f04f 0300 	mov.w	r3, #0
 8001812:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001816:	4629      	mov	r1, r5
 8001818:	024b      	lsls	r3, r1, #9
 800181a:	4621      	mov	r1, r4
 800181c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001820:	4621      	mov	r1, r4
 8001822:	024a      	lsls	r2, r1, #9
 8001824:	4610      	mov	r0, r2
 8001826:	4619      	mov	r1, r3
 8001828:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800182a:	2200      	movs	r2, #0
 800182c:	62bb      	str	r3, [r7, #40]	; 0x28
 800182e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001830:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001834:	f7fe fd16 	bl	8000264 <__aeabi_uldivmod>
 8001838:	4602      	mov	r2, r0
 800183a:	460b      	mov	r3, r1
 800183c:	4613      	mov	r3, r2
 800183e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001840:	e058      	b.n	80018f4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001842:	4b38      	ldr	r3, [pc, #224]	; (8001924 <HAL_RCC_GetSysClockFreq+0x200>)
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	099b      	lsrs	r3, r3, #6
 8001848:	2200      	movs	r2, #0
 800184a:	4618      	mov	r0, r3
 800184c:	4611      	mov	r1, r2
 800184e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001852:	623b      	str	r3, [r7, #32]
 8001854:	2300      	movs	r3, #0
 8001856:	627b      	str	r3, [r7, #36]	; 0x24
 8001858:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800185c:	4642      	mov	r2, r8
 800185e:	464b      	mov	r3, r9
 8001860:	f04f 0000 	mov.w	r0, #0
 8001864:	f04f 0100 	mov.w	r1, #0
 8001868:	0159      	lsls	r1, r3, #5
 800186a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800186e:	0150      	lsls	r0, r2, #5
 8001870:	4602      	mov	r2, r0
 8001872:	460b      	mov	r3, r1
 8001874:	4641      	mov	r1, r8
 8001876:	ebb2 0a01 	subs.w	sl, r2, r1
 800187a:	4649      	mov	r1, r9
 800187c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001880:	f04f 0200 	mov.w	r2, #0
 8001884:	f04f 0300 	mov.w	r3, #0
 8001888:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800188c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001890:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001894:	ebb2 040a 	subs.w	r4, r2, sl
 8001898:	eb63 050b 	sbc.w	r5, r3, fp
 800189c:	f04f 0200 	mov.w	r2, #0
 80018a0:	f04f 0300 	mov.w	r3, #0
 80018a4:	00eb      	lsls	r3, r5, #3
 80018a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018aa:	00e2      	lsls	r2, r4, #3
 80018ac:	4614      	mov	r4, r2
 80018ae:	461d      	mov	r5, r3
 80018b0:	4643      	mov	r3, r8
 80018b2:	18e3      	adds	r3, r4, r3
 80018b4:	603b      	str	r3, [r7, #0]
 80018b6:	464b      	mov	r3, r9
 80018b8:	eb45 0303 	adc.w	r3, r5, r3
 80018bc:	607b      	str	r3, [r7, #4]
 80018be:	f04f 0200 	mov.w	r2, #0
 80018c2:	f04f 0300 	mov.w	r3, #0
 80018c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80018ca:	4629      	mov	r1, r5
 80018cc:	028b      	lsls	r3, r1, #10
 80018ce:	4621      	mov	r1, r4
 80018d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80018d4:	4621      	mov	r1, r4
 80018d6:	028a      	lsls	r2, r1, #10
 80018d8:	4610      	mov	r0, r2
 80018da:	4619      	mov	r1, r3
 80018dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018de:	2200      	movs	r2, #0
 80018e0:	61bb      	str	r3, [r7, #24]
 80018e2:	61fa      	str	r2, [r7, #28]
 80018e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80018e8:	f7fe fcbc 	bl	8000264 <__aeabi_uldivmod>
 80018ec:	4602      	mov	r2, r0
 80018ee:	460b      	mov	r3, r1
 80018f0:	4613      	mov	r3, r2
 80018f2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80018f4:	4b0b      	ldr	r3, [pc, #44]	; (8001924 <HAL_RCC_GetSysClockFreq+0x200>)
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	0c1b      	lsrs	r3, r3, #16
 80018fa:	f003 0303 	and.w	r3, r3, #3
 80018fe:	3301      	adds	r3, #1
 8001900:	005b      	lsls	r3, r3, #1
 8001902:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001904:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001906:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001908:	fbb2 f3f3 	udiv	r3, r2, r3
 800190c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800190e:	e002      	b.n	8001916 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001910:	4b05      	ldr	r3, [pc, #20]	; (8001928 <HAL_RCC_GetSysClockFreq+0x204>)
 8001912:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001914:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001916:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001918:	4618      	mov	r0, r3
 800191a:	3750      	adds	r7, #80	; 0x50
 800191c:	46bd      	mov	sp, r7
 800191e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001922:	bf00      	nop
 8001924:	40023800 	.word	0x40023800
 8001928:	00f42400 	.word	0x00f42400
 800192c:	007a1200 	.word	0x007a1200

08001930 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001934:	4b03      	ldr	r3, [pc, #12]	; (8001944 <HAL_RCC_GetHCLKFreq+0x14>)
 8001936:	681b      	ldr	r3, [r3, #0]
}
 8001938:	4618      	mov	r0, r3
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	20000000 	.word	0x20000000

08001948 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800194c:	f7ff fff0 	bl	8001930 <HAL_RCC_GetHCLKFreq>
 8001950:	4602      	mov	r2, r0
 8001952:	4b05      	ldr	r3, [pc, #20]	; (8001968 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	0a9b      	lsrs	r3, r3, #10
 8001958:	f003 0307 	and.w	r3, r3, #7
 800195c:	4903      	ldr	r1, [pc, #12]	; (800196c <HAL_RCC_GetPCLK1Freq+0x24>)
 800195e:	5ccb      	ldrb	r3, [r1, r3]
 8001960:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001964:	4618      	mov	r0, r3
 8001966:	bd80      	pop	{r7, pc}
 8001968:	40023800 	.word	0x40023800
 800196c:	08005a18 	.word	0x08005a18

08001970 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	220f      	movs	r2, #15
 800197e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001980:	4b12      	ldr	r3, [pc, #72]	; (80019cc <HAL_RCC_GetClockConfig+0x5c>)
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	f003 0203 	and.w	r2, r3, #3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800198c:	4b0f      	ldr	r3, [pc, #60]	; (80019cc <HAL_RCC_GetClockConfig+0x5c>)
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001998:	4b0c      	ldr	r3, [pc, #48]	; (80019cc <HAL_RCC_GetClockConfig+0x5c>)
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80019a4:	4b09      	ldr	r3, [pc, #36]	; (80019cc <HAL_RCC_GetClockConfig+0x5c>)
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	08db      	lsrs	r3, r3, #3
 80019aa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80019b2:	4b07      	ldr	r3, [pc, #28]	; (80019d0 <HAL_RCC_GetClockConfig+0x60>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0207 	and.w	r2, r3, #7
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	601a      	str	r2, [r3, #0]
}
 80019be:	bf00      	nop
 80019c0:	370c      	adds	r7, #12
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	40023800 	.word	0x40023800
 80019d0:	40023c00 	.word	0x40023c00

080019d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d101      	bne.n	80019e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e041      	b.n	8001a6a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d106      	bne.n	8001a00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2200      	movs	r2, #0
 80019f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f000 f839 	bl	8001a72 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2202      	movs	r2, #2
 8001a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	3304      	adds	r3, #4
 8001a10:	4619      	mov	r1, r3
 8001a12:	4610      	mov	r0, r2
 8001a14:	f000 f9d8 	bl	8001dc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2201      	movs	r2, #1
 8001a24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2201      	movs	r2, #1
 8001a34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2201      	movs	r2, #1
 8001a44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2201      	movs	r2, #1
 8001a54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2201      	movs	r2, #1
 8001a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001a68:	2300      	movs	r3, #0
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}

08001a72 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001a72:	b480      	push	{r7}
 8001a74:	b083      	sub	sp, #12
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001a7a:	bf00      	nop
 8001a7c:	370c      	adds	r7, #12
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
	...

08001a88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b085      	sub	sp, #20
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d001      	beq.n	8001aa0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e04e      	b.n	8001b3e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2202      	movs	r2, #2
 8001aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	68da      	ldr	r2, [r3, #12]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f042 0201 	orr.w	r2, r2, #1
 8001ab6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a23      	ldr	r2, [pc, #140]	; (8001b4c <HAL_TIM_Base_Start_IT+0xc4>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d022      	beq.n	8001b08 <HAL_TIM_Base_Start_IT+0x80>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001aca:	d01d      	beq.n	8001b08 <HAL_TIM_Base_Start_IT+0x80>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a1f      	ldr	r2, [pc, #124]	; (8001b50 <HAL_TIM_Base_Start_IT+0xc8>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d018      	beq.n	8001b08 <HAL_TIM_Base_Start_IT+0x80>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a1e      	ldr	r2, [pc, #120]	; (8001b54 <HAL_TIM_Base_Start_IT+0xcc>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d013      	beq.n	8001b08 <HAL_TIM_Base_Start_IT+0x80>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a1c      	ldr	r2, [pc, #112]	; (8001b58 <HAL_TIM_Base_Start_IT+0xd0>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d00e      	beq.n	8001b08 <HAL_TIM_Base_Start_IT+0x80>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a1b      	ldr	r2, [pc, #108]	; (8001b5c <HAL_TIM_Base_Start_IT+0xd4>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d009      	beq.n	8001b08 <HAL_TIM_Base_Start_IT+0x80>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a19      	ldr	r2, [pc, #100]	; (8001b60 <HAL_TIM_Base_Start_IT+0xd8>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d004      	beq.n	8001b08 <HAL_TIM_Base_Start_IT+0x80>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a18      	ldr	r2, [pc, #96]	; (8001b64 <HAL_TIM_Base_Start_IT+0xdc>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d111      	bne.n	8001b2c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	f003 0307 	and.w	r3, r3, #7
 8001b12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	2b06      	cmp	r3, #6
 8001b18:	d010      	beq.n	8001b3c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f042 0201 	orr.w	r2, r2, #1
 8001b28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b2a:	e007      	b.n	8001b3c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f042 0201 	orr.w	r2, r2, #1
 8001b3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b3c:	2300      	movs	r3, #0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3714      	adds	r7, #20
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	40010000 	.word	0x40010000
 8001b50:	40000400 	.word	0x40000400
 8001b54:	40000800 	.word	0x40000800
 8001b58:	40000c00 	.word	0x40000c00
 8001b5c:	40010400 	.word	0x40010400
 8001b60:	40014000 	.word	0x40014000
 8001b64:	40001800 	.word	0x40001800

08001b68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	691b      	ldr	r3, [r3, #16]
 8001b76:	f003 0302 	and.w	r3, r3, #2
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d122      	bne.n	8001bc4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	f003 0302 	and.w	r3, r3, #2
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	d11b      	bne.n	8001bc4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f06f 0202 	mvn.w	r2, #2
 8001b94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2201      	movs	r2, #1
 8001b9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	699b      	ldr	r3, [r3, #24]
 8001ba2:	f003 0303 	and.w	r3, r3, #3
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d003      	beq.n	8001bb2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f000 f8ee 	bl	8001d8c <HAL_TIM_IC_CaptureCallback>
 8001bb0:	e005      	b.n	8001bbe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f000 f8e0 	bl	8001d78 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f000 f8f1 	bl	8001da0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	691b      	ldr	r3, [r3, #16]
 8001bca:	f003 0304 	and.w	r3, r3, #4
 8001bce:	2b04      	cmp	r3, #4
 8001bd0:	d122      	bne.n	8001c18 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	f003 0304 	and.w	r3, r3, #4
 8001bdc:	2b04      	cmp	r3, #4
 8001bde:	d11b      	bne.n	8001c18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f06f 0204 	mvn.w	r2, #4
 8001be8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2202      	movs	r2, #2
 8001bee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	699b      	ldr	r3, [r3, #24]
 8001bf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d003      	beq.n	8001c06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f000 f8c4 	bl	8001d8c <HAL_TIM_IC_CaptureCallback>
 8001c04:	e005      	b.n	8001c12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f000 f8b6 	bl	8001d78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f000 f8c7 	bl	8001da0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2200      	movs	r2, #0
 8001c16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	691b      	ldr	r3, [r3, #16]
 8001c1e:	f003 0308 	and.w	r3, r3, #8
 8001c22:	2b08      	cmp	r3, #8
 8001c24:	d122      	bne.n	8001c6c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	f003 0308 	and.w	r3, r3, #8
 8001c30:	2b08      	cmp	r3, #8
 8001c32:	d11b      	bne.n	8001c6c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f06f 0208 	mvn.w	r2, #8
 8001c3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2204      	movs	r2, #4
 8001c42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	69db      	ldr	r3, [r3, #28]
 8001c4a:	f003 0303 	and.w	r3, r3, #3
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d003      	beq.n	8001c5a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f000 f89a 	bl	8001d8c <HAL_TIM_IC_CaptureCallback>
 8001c58:	e005      	b.n	8001c66 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f000 f88c 	bl	8001d78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f000 f89d 	bl	8001da0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	691b      	ldr	r3, [r3, #16]
 8001c72:	f003 0310 	and.w	r3, r3, #16
 8001c76:	2b10      	cmp	r3, #16
 8001c78:	d122      	bne.n	8001cc0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	f003 0310 	and.w	r3, r3, #16
 8001c84:	2b10      	cmp	r3, #16
 8001c86:	d11b      	bne.n	8001cc0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f06f 0210 	mvn.w	r2, #16
 8001c90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2208      	movs	r2, #8
 8001c96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	69db      	ldr	r3, [r3, #28]
 8001c9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d003      	beq.n	8001cae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f000 f870 	bl	8001d8c <HAL_TIM_IC_CaptureCallback>
 8001cac:	e005      	b.n	8001cba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f000 f862 	bl	8001d78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	f000 f873 	bl	8001da0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	691b      	ldr	r3, [r3, #16]
 8001cc6:	f003 0301 	and.w	r3, r3, #1
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d10e      	bne.n	8001cec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	f003 0301 	and.w	r3, r3, #1
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d107      	bne.n	8001cec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f06f 0201 	mvn.w	r2, #1
 8001ce4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f7fe fdb0 	bl	800084c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	691b      	ldr	r3, [r3, #16]
 8001cf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cf6:	2b80      	cmp	r3, #128	; 0x80
 8001cf8:	d10e      	bne.n	8001d18 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d04:	2b80      	cmp	r3, #128	; 0x80
 8001d06:	d107      	bne.n	8001d18 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001d10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f000 f902 	bl	8001f1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	691b      	ldr	r3, [r3, #16]
 8001d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d22:	2b40      	cmp	r3, #64	; 0x40
 8001d24:	d10e      	bne.n	8001d44 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d30:	2b40      	cmp	r3, #64	; 0x40
 8001d32:	d107      	bne.n	8001d44 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001d3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f000 f838 	bl	8001db4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	691b      	ldr	r3, [r3, #16]
 8001d4a:	f003 0320 	and.w	r3, r3, #32
 8001d4e:	2b20      	cmp	r3, #32
 8001d50:	d10e      	bne.n	8001d70 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	f003 0320 	and.w	r3, r3, #32
 8001d5c:	2b20      	cmp	r3, #32
 8001d5e:	d107      	bne.n	8001d70 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f06f 0220 	mvn.w	r2, #32
 8001d68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f000 f8cc 	bl	8001f08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d70:	bf00      	nop
 8001d72:	3708      	adds	r7, #8
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}

08001d78 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001d80:	bf00      	nop
 8001d82:	370c      	adds	r7, #12
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr

08001d8c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001d94:	bf00      	nop
 8001d96:	370c      	adds	r7, #12
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr

08001da0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001da8:	bf00      	nop
 8001daa:	370c      	adds	r7, #12
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001dbc:	bf00      	nop
 8001dbe:	370c      	adds	r7, #12
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr

08001dc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b085      	sub	sp, #20
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	4a40      	ldr	r2, [pc, #256]	; (8001edc <TIM_Base_SetConfig+0x114>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d013      	beq.n	8001e08 <TIM_Base_SetConfig+0x40>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001de6:	d00f      	beq.n	8001e08 <TIM_Base_SetConfig+0x40>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	4a3d      	ldr	r2, [pc, #244]	; (8001ee0 <TIM_Base_SetConfig+0x118>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d00b      	beq.n	8001e08 <TIM_Base_SetConfig+0x40>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	4a3c      	ldr	r2, [pc, #240]	; (8001ee4 <TIM_Base_SetConfig+0x11c>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d007      	beq.n	8001e08 <TIM_Base_SetConfig+0x40>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	4a3b      	ldr	r2, [pc, #236]	; (8001ee8 <TIM_Base_SetConfig+0x120>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d003      	beq.n	8001e08 <TIM_Base_SetConfig+0x40>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	4a3a      	ldr	r2, [pc, #232]	; (8001eec <TIM_Base_SetConfig+0x124>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d108      	bne.n	8001e1a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	68fa      	ldr	r2, [r7, #12]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4a2f      	ldr	r2, [pc, #188]	; (8001edc <TIM_Base_SetConfig+0x114>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d02b      	beq.n	8001e7a <TIM_Base_SetConfig+0xb2>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e28:	d027      	beq.n	8001e7a <TIM_Base_SetConfig+0xb2>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4a2c      	ldr	r2, [pc, #176]	; (8001ee0 <TIM_Base_SetConfig+0x118>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d023      	beq.n	8001e7a <TIM_Base_SetConfig+0xb2>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4a2b      	ldr	r2, [pc, #172]	; (8001ee4 <TIM_Base_SetConfig+0x11c>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d01f      	beq.n	8001e7a <TIM_Base_SetConfig+0xb2>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a2a      	ldr	r2, [pc, #168]	; (8001ee8 <TIM_Base_SetConfig+0x120>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d01b      	beq.n	8001e7a <TIM_Base_SetConfig+0xb2>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a29      	ldr	r2, [pc, #164]	; (8001eec <TIM_Base_SetConfig+0x124>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d017      	beq.n	8001e7a <TIM_Base_SetConfig+0xb2>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a28      	ldr	r2, [pc, #160]	; (8001ef0 <TIM_Base_SetConfig+0x128>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d013      	beq.n	8001e7a <TIM_Base_SetConfig+0xb2>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a27      	ldr	r2, [pc, #156]	; (8001ef4 <TIM_Base_SetConfig+0x12c>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d00f      	beq.n	8001e7a <TIM_Base_SetConfig+0xb2>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a26      	ldr	r2, [pc, #152]	; (8001ef8 <TIM_Base_SetConfig+0x130>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d00b      	beq.n	8001e7a <TIM_Base_SetConfig+0xb2>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a25      	ldr	r2, [pc, #148]	; (8001efc <TIM_Base_SetConfig+0x134>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d007      	beq.n	8001e7a <TIM_Base_SetConfig+0xb2>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a24      	ldr	r2, [pc, #144]	; (8001f00 <TIM_Base_SetConfig+0x138>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d003      	beq.n	8001e7a <TIM_Base_SetConfig+0xb2>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a23      	ldr	r2, [pc, #140]	; (8001f04 <TIM_Base_SetConfig+0x13c>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d108      	bne.n	8001e8c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	68db      	ldr	r3, [r3, #12]
 8001e86:	68fa      	ldr	r2, [r7, #12]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	695b      	ldr	r3, [r3, #20]
 8001e96:	4313      	orrs	r3, r2
 8001e98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	68fa      	ldr	r2, [r7, #12]
 8001e9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	689a      	ldr	r2, [r3, #8]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	4a0a      	ldr	r2, [pc, #40]	; (8001edc <TIM_Base_SetConfig+0x114>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d003      	beq.n	8001ec0 <TIM_Base_SetConfig+0xf8>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	4a0c      	ldr	r2, [pc, #48]	; (8001eec <TIM_Base_SetConfig+0x124>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d103      	bne.n	8001ec8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	691a      	ldr	r2, [r3, #16]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2201      	movs	r2, #1
 8001ecc:	615a      	str	r2, [r3, #20]
}
 8001ece:	bf00      	nop
 8001ed0:	3714      	adds	r7, #20
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	40010000 	.word	0x40010000
 8001ee0:	40000400 	.word	0x40000400
 8001ee4:	40000800 	.word	0x40000800
 8001ee8:	40000c00 	.word	0x40000c00
 8001eec:	40010400 	.word	0x40010400
 8001ef0:	40014000 	.word	0x40014000
 8001ef4:	40014400 	.word	0x40014400
 8001ef8:	40014800 	.word	0x40014800
 8001efc:	40001800 	.word	0x40001800
 8001f00:	40001c00 	.word	0x40001c00
 8001f04:	40002000 	.word	0x40002000

08001f08 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001f10:	bf00      	nop
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001f24:	bf00      	nop
 8001f26:	370c      	adds	r7, #12
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr

08001f30 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	f103 0208 	add.w	r2, r3, #8
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	f04f 32ff 	mov.w	r2, #4294967295
 8001f48:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	f103 0208 	add.w	r2, r3, #8
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	f103 0208 	add.w	r2, r3, #8
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2200      	movs	r2, #0
 8001f62:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001f64:	bf00      	nop
 8001f66:	370c      	adds	r7, #12
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr

08001f70 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001f7e:	bf00      	nop
 8001f80:	370c      	adds	r7, #12
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr

08001f8a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8001f8a:	b480      	push	{r7}
 8001f8c:	b085      	sub	sp, #20
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	6078      	str	r0, [r7, #4]
 8001f92:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	68fa      	ldr	r2, [r7, #12]
 8001f9e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	689a      	ldr	r2, [r3, #8]
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	683a      	ldr	r2, [r7, #0]
 8001fae:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	683a      	ldr	r2, [r7, #0]
 8001fb4:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	687a      	ldr	r2, [r7, #4]
 8001fba:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	1c5a      	adds	r2, r3, #1
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	601a      	str	r2, [r3, #0]
}
 8001fc6:	bf00      	nop
 8001fc8:	3714      	adds	r7, #20
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr

08001fd2 <uxListRemove>:
    ( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001fd2:	b480      	push	{r7}
 8001fd4:	b085      	sub	sp, #20
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	691b      	ldr	r3, [r3, #16]
 8001fde:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	6892      	ldr	r2, [r2, #8]
 8001fe8:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	6852      	ldr	r2, [r2, #4]
 8001ff2:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d103      	bne.n	8002006 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	689a      	ldr	r2, [r3, #8]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2200      	movs	r2, #0
 800200a:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	1e5a      	subs	r2, r3, #1
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
}
 800201a:	4618      	mov	r0, r3
 800201c:	3714      	adds	r7, #20
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr

08002026 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002026:	b580      	push	{r7, lr}
 8002028:	b08c      	sub	sp, #48	; 0x30
 800202a:	af04      	add	r7, sp, #16
 800202c:	60f8      	str	r0, [r7, #12]
 800202e:	60b9      	str	r1, [r7, #8]
 8002030:	603b      	str	r3, [r7, #0]
 8002032:	4613      	mov	r3, r2
 8002034:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002036:	88fb      	ldrh	r3, [r7, #6]
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	4618      	mov	r0, r3
 800203c:	f000 ff26 	bl	8002e8c <pvPortMalloc>
 8002040:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d00e      	beq.n	8002066 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002048:	2058      	movs	r0, #88	; 0x58
 800204a:	f000 ff1f 	bl	8002e8c <pvPortMalloc>
 800204e:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d003      	beq.n	800205e <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	697a      	ldr	r2, [r7, #20]
 800205a:	631a      	str	r2, [r3, #48]	; 0x30
 800205c:	e005      	b.n	800206a <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 800205e:	6978      	ldr	r0, [r7, #20]
 8002060:	f000 fff4 	bl	800304c <vPortFree>
 8002064:	e001      	b.n	800206a <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002066:	2300      	movs	r3, #0
 8002068:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d013      	beq.n	8002098 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002070:	88fa      	ldrh	r2, [r7, #6]
 8002072:	2300      	movs	r3, #0
 8002074:	9303      	str	r3, [sp, #12]
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	9302      	str	r3, [sp, #8]
 800207a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800207c:	9301      	str	r3, [sp, #4]
 800207e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002080:	9300      	str	r3, [sp, #0]
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	68b9      	ldr	r1, [r7, #8]
 8002086:	68f8      	ldr	r0, [r7, #12]
 8002088:	f000 f80e 	bl	80020a8 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800208c:	69f8      	ldr	r0, [r7, #28]
 800208e:	f000 f8a1 	bl	80021d4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002092:	2301      	movs	r3, #1
 8002094:	61bb      	str	r3, [r7, #24]
 8002096:	e002      	b.n	800209e <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002098:	f04f 33ff 	mov.w	r3, #4294967295
 800209c:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800209e:	69bb      	ldr	r3, [r7, #24]
    }
 80020a0:	4618      	mov	r0, r3
 80020a2:	3720      	adds	r7, #32
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b088      	sub	sp, #32
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	60f8      	str	r0, [r7, #12]
 80020b0:	60b9      	str	r1, [r7, #8]
 80020b2:	607a      	str	r2, [r7, #4]
 80020b4:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80020b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020b8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	461a      	mov	r2, r3
 80020c0:	21a5      	movs	r1, #165	; 0xa5
 80020c2:	f003 fbed 	bl	80058a0 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80020c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80020d0:	3b01      	subs	r3, #1
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	4413      	add	r3, r2
 80020d6:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80020d8:	69bb      	ldr	r3, [r7, #24]
 80020da:	f023 0307 	bic.w	r3, r3, #7
 80020de:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80020e0:	69bb      	ldr	r3, [r7, #24]
 80020e2:	f003 0307 	and.w	r3, r3, #7
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d00a      	beq.n	8002100 <prvInitialiseNewTask+0x58>
        __asm volatile
 80020ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020ee:	f383 8811 	msr	BASEPRI, r3
 80020f2:	f3bf 8f6f 	isb	sy
 80020f6:	f3bf 8f4f 	dsb	sy
 80020fa:	617b      	str	r3, [r7, #20]
    }
 80020fc:	bf00      	nop
 80020fe:	e7fe      	b.n	80020fe <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d01f      	beq.n	8002146 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002106:	2300      	movs	r3, #0
 8002108:	61fb      	str	r3, [r7, #28]
 800210a:	e012      	b.n	8002132 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800210c:	68ba      	ldr	r2, [r7, #8]
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	4413      	add	r3, r2
 8002112:	7819      	ldrb	r1, [r3, #0]
 8002114:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	4413      	add	r3, r2
 800211a:	3334      	adds	r3, #52	; 0x34
 800211c:	460a      	mov	r2, r1
 800211e:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002120:	68ba      	ldr	r2, [r7, #8]
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	4413      	add	r3, r2
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d006      	beq.n	800213a <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	3301      	adds	r3, #1
 8002130:	61fb      	str	r3, [r7, #28]
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	2b09      	cmp	r3, #9
 8002136:	d9e9      	bls.n	800210c <prvInitialiseNewTask+0x64>
 8002138:	e000      	b.n	800213c <prvInitialiseNewTask+0x94>
            {
                break;
 800213a:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800213c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800213e:	2200      	movs	r2, #0
 8002140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002144:	e003      	b.n	800214e <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002148:	2200      	movs	r2, #0
 800214a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800214e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002150:	2b04      	cmp	r3, #4
 8002152:	d901      	bls.n	8002158 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002154:	2304      	movs	r3, #4
 8002156:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800215a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800215c:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 800215e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002160:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002162:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002166:	2200      	movs	r2, #0
 8002168:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800216a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800216c:	3304      	adds	r3, #4
 800216e:	4618      	mov	r0, r3
 8002170:	f7ff fefe 	bl	8001f70 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002176:	3318      	adds	r3, #24
 8002178:	4618      	mov	r0, r3
 800217a:	f7ff fef9 	bl	8001f70 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800217e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002180:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002182:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002186:	f1c3 0205 	rsb	r2, r3, #5
 800218a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800218c:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800218e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002190:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002192:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002196:	3350      	adds	r3, #80	; 0x50
 8002198:	2204      	movs	r2, #4
 800219a:	2100      	movs	r1, #0
 800219c:	4618      	mov	r0, r3
 800219e:	f003 fb7f 	bl	80058a0 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80021a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021a4:	3354      	adds	r3, #84	; 0x54
 80021a6:	2201      	movs	r2, #1
 80021a8:	2100      	movs	r1, #0
 80021aa:	4618      	mov	r0, r3
 80021ac:	f003 fb78 	bl	80058a0 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80021b0:	683a      	ldr	r2, [r7, #0]
 80021b2:	68f9      	ldr	r1, [r7, #12]
 80021b4:	69b8      	ldr	r0, [r7, #24]
 80021b6:	f000 fb8d 	bl	80028d4 <pxPortInitialiseStack>
 80021ba:	4602      	mov	r2, r0
 80021bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021be:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80021c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d002      	beq.n	80021cc <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80021c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80021ca:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80021cc:	bf00      	nop
 80021ce:	3720      	adds	r7, #32
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}

080021d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80021d4:	b5b0      	push	{r4, r5, r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af02      	add	r7, sp, #8
 80021da:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80021dc:	f000 fd2a 	bl	8002c34 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80021e0:	4b3b      	ldr	r3, [pc, #236]	; (80022d0 <prvAddNewTaskToReadyList+0xfc>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	3301      	adds	r3, #1
 80021e6:	4a3a      	ldr	r2, [pc, #232]	; (80022d0 <prvAddNewTaskToReadyList+0xfc>)
 80021e8:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80021ea:	4b3a      	ldr	r3, [pc, #232]	; (80022d4 <prvAddNewTaskToReadyList+0x100>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d109      	bne.n	8002206 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80021f2:	4a38      	ldr	r2, [pc, #224]	; (80022d4 <prvAddNewTaskToReadyList+0x100>)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80021f8:	4b35      	ldr	r3, [pc, #212]	; (80022d0 <prvAddNewTaskToReadyList+0xfc>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d110      	bne.n	8002222 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002200:	f000 face 	bl	80027a0 <prvInitialiseTaskLists>
 8002204:	e00d      	b.n	8002222 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002206:	4b34      	ldr	r3, [pc, #208]	; (80022d8 <prvAddNewTaskToReadyList+0x104>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d109      	bne.n	8002222 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800220e:	4b31      	ldr	r3, [pc, #196]	; (80022d4 <prvAddNewTaskToReadyList+0x100>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002218:	429a      	cmp	r2, r3
 800221a:	d802      	bhi.n	8002222 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800221c:	4a2d      	ldr	r2, [pc, #180]	; (80022d4 <prvAddNewTaskToReadyList+0x100>)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002222:	4b2e      	ldr	r3, [pc, #184]	; (80022dc <prvAddNewTaskToReadyList+0x108>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	3301      	adds	r3, #1
 8002228:	4a2c      	ldr	r2, [pc, #176]	; (80022dc <prvAddNewTaskToReadyList+0x108>)
 800222a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 800222c:	4b2b      	ldr	r3, [pc, #172]	; (80022dc <prvAddNewTaskToReadyList+0x108>)
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d016      	beq.n	8002268 <prvAddNewTaskToReadyList+0x94>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4618      	mov	r0, r3
 800223e:	f003 f8ad 	bl	800539c <SEGGER_SYSVIEW_OnTaskCreate>
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002252:	461d      	mov	r5, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	461c      	mov	r4, r3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225e:	1ae3      	subs	r3, r4, r3
 8002260:	9300      	str	r3, [sp, #0]
 8002262:	462b      	mov	r3, r5
 8002264:	f001 f8c0 	bl	80033e8 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	4618      	mov	r0, r3
 800226c:	f003 f91a 	bl	80054a4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002274:	2201      	movs	r2, #1
 8002276:	409a      	lsls	r2, r3
 8002278:	4b19      	ldr	r3, [pc, #100]	; (80022e0 <prvAddNewTaskToReadyList+0x10c>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4313      	orrs	r3, r2
 800227e:	4a18      	ldr	r2, [pc, #96]	; (80022e0 <prvAddNewTaskToReadyList+0x10c>)
 8002280:	6013      	str	r3, [r2, #0]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002286:	4613      	mov	r3, r2
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	4413      	add	r3, r2
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	4a15      	ldr	r2, [pc, #84]	; (80022e4 <prvAddNewTaskToReadyList+0x110>)
 8002290:	441a      	add	r2, r3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	3304      	adds	r3, #4
 8002296:	4619      	mov	r1, r3
 8002298:	4610      	mov	r0, r2
 800229a:	f7ff fe76 	bl	8001f8a <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800229e:	f000 fcf9 	bl	8002c94 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80022a2:	4b0d      	ldr	r3, [pc, #52]	; (80022d8 <prvAddNewTaskToReadyList+0x104>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d00e      	beq.n	80022c8 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80022aa:	4b0a      	ldr	r3, [pc, #40]	; (80022d4 <prvAddNewTaskToReadyList+0x100>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d207      	bcs.n	80022c8 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80022b8:	4b0b      	ldr	r3, [pc, #44]	; (80022e8 <prvAddNewTaskToReadyList+0x114>)
 80022ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022be:	601a      	str	r2, [r3, #0]
 80022c0:	f3bf 8f4f 	dsb	sy
 80022c4:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80022c8:	bf00      	nop
 80022ca:	3708      	adds	r7, #8
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bdb0      	pop	{r4, r5, r7, pc}
 80022d0:	2000015c 	.word	0x2000015c
 80022d4:	20000084 	.word	0x20000084
 80022d8:	20000168 	.word	0x20000168
 80022dc:	20000178 	.word	0x20000178
 80022e0:	20000164 	.word	0x20000164
 80022e4:	20000088 	.word	0x20000088
 80022e8:	e000ed04 	.word	0xe000ed04

080022ec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b086      	sub	sp, #24
 80022f0:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80022f2:	4b24      	ldr	r3, [pc, #144]	; (8002384 <vTaskStartScheduler+0x98>)
 80022f4:	9301      	str	r3, [sp, #4]
 80022f6:	2300      	movs	r3, #0
 80022f8:	9300      	str	r3, [sp, #0]
 80022fa:	2300      	movs	r3, #0
 80022fc:	2282      	movs	r2, #130	; 0x82
 80022fe:	4922      	ldr	r1, [pc, #136]	; (8002388 <vTaskStartScheduler+0x9c>)
 8002300:	4822      	ldr	r0, [pc, #136]	; (800238c <vTaskStartScheduler+0xa0>)
 8002302:	f7ff fe90 	bl	8002026 <xTaskCreate>
 8002306:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2b01      	cmp	r3, #1
 800230c:	d124      	bne.n	8002358 <vTaskStartScheduler+0x6c>
        __asm volatile
 800230e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002312:	f383 8811 	msr	BASEPRI, r3
 8002316:	f3bf 8f6f 	isb	sy
 800231a:	f3bf 8f4f 	dsb	sy
 800231e:	60bb      	str	r3, [r7, #8]
    }
 8002320:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002322:	4b1b      	ldr	r3, [pc, #108]	; (8002390 <vTaskStartScheduler+0xa4>)
 8002324:	f04f 32ff 	mov.w	r2, #4294967295
 8002328:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800232a:	4b1a      	ldr	r3, [pc, #104]	; (8002394 <vTaskStartScheduler+0xa8>)
 800232c:	2201      	movs	r2, #1
 800232e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002330:	4b19      	ldr	r3, [pc, #100]	; (8002398 <vTaskStartScheduler+0xac>)
 8002332:	2200      	movs	r2, #0
 8002334:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002336:	4b19      	ldr	r3, [pc, #100]	; (800239c <vTaskStartScheduler+0xb0>)
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	4b12      	ldr	r3, [pc, #72]	; (8002384 <vTaskStartScheduler+0x98>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	429a      	cmp	r2, r3
 8002340:	d102      	bne.n	8002348 <vTaskStartScheduler+0x5c>
 8002342:	f003 f80f 	bl	8005364 <SEGGER_SYSVIEW_OnIdle>
 8002346:	e004      	b.n	8002352 <vTaskStartScheduler+0x66>
 8002348:	4b14      	ldr	r3, [pc, #80]	; (800239c <vTaskStartScheduler+0xb0>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4618      	mov	r0, r3
 800234e:	f003 f867 	bl	8005420 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002352:	f000 fb4f 	bl	80029f4 <xPortStartScheduler>
 8002356:	e00e      	b.n	8002376 <vTaskStartScheduler+0x8a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800235e:	d10a      	bne.n	8002376 <vTaskStartScheduler+0x8a>
        __asm volatile
 8002360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002364:	f383 8811 	msr	BASEPRI, r3
 8002368:	f3bf 8f6f 	isb	sy
 800236c:	f3bf 8f4f 	dsb	sy
 8002370:	607b      	str	r3, [r7, #4]
    }
 8002372:	bf00      	nop
 8002374:	e7fe      	b.n	8002374 <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002376:	4b0a      	ldr	r3, [pc, #40]	; (80023a0 <vTaskStartScheduler+0xb4>)
 8002378:	681b      	ldr	r3, [r3, #0]
}
 800237a:	bf00      	nop
 800237c:	3710      	adds	r7, #16
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	20000180 	.word	0x20000180
 8002388:	08005934 	.word	0x08005934
 800238c:	08002771 	.word	0x08002771
 8002390:	2000017c 	.word	0x2000017c
 8002394:	20000168 	.word	0x20000168
 8002398:	20000160 	.word	0x20000160
 800239c:	20000084 	.word	0x20000084
 80023a0:	2000000c 	.word	0x2000000c

080023a4 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80023a8:	4b04      	ldr	r3, [pc, #16]	; (80023bc <vTaskSuspendAll+0x18>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	3301      	adds	r3, #1
 80023ae:	4a03      	ldr	r2, [pc, #12]	; (80023bc <vTaskSuspendAll+0x18>)
 80023b0:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80023b2:	bf00      	nop
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr
 80023bc:	20000184 	.word	0x20000184

080023c0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80023c6:	2300      	movs	r3, #0
 80023c8:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80023ca:	2300      	movs	r3, #0
 80023cc:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80023ce:	4b43      	ldr	r3, [pc, #268]	; (80024dc <xTaskResumeAll+0x11c>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d10a      	bne.n	80023ec <xTaskResumeAll+0x2c>
        __asm volatile
 80023d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023da:	f383 8811 	msr	BASEPRI, r3
 80023de:	f3bf 8f6f 	isb	sy
 80023e2:	f3bf 8f4f 	dsb	sy
 80023e6:	603b      	str	r3, [r7, #0]
    }
 80023e8:	bf00      	nop
 80023ea:	e7fe      	b.n	80023ea <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80023ec:	f000 fc22 	bl	8002c34 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80023f0:	4b3a      	ldr	r3, [pc, #232]	; (80024dc <xTaskResumeAll+0x11c>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	3b01      	subs	r3, #1
 80023f6:	4a39      	ldr	r2, [pc, #228]	; (80024dc <xTaskResumeAll+0x11c>)
 80023f8:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80023fa:	4b38      	ldr	r3, [pc, #224]	; (80024dc <xTaskResumeAll+0x11c>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d165      	bne.n	80024ce <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002402:	4b37      	ldr	r3, [pc, #220]	; (80024e0 <xTaskResumeAll+0x120>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d061      	beq.n	80024ce <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800240a:	e032      	b.n	8002472 <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800240c:	4b35      	ldr	r3, [pc, #212]	; (80024e4 <xTaskResumeAll+0x124>)
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	3318      	adds	r3, #24
 8002418:	4618      	mov	r0, r3
 800241a:	f7ff fdda 	bl	8001fd2 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	3304      	adds	r3, #4
 8002422:	4618      	mov	r0, r3
 8002424:	f7ff fdd5 	bl	8001fd2 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	4618      	mov	r0, r3
 800242c:	f003 f83a 	bl	80054a4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002434:	2201      	movs	r2, #1
 8002436:	409a      	lsls	r2, r3
 8002438:	4b2b      	ldr	r3, [pc, #172]	; (80024e8 <xTaskResumeAll+0x128>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4313      	orrs	r3, r2
 800243e:	4a2a      	ldr	r2, [pc, #168]	; (80024e8 <xTaskResumeAll+0x128>)
 8002440:	6013      	str	r3, [r2, #0]
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002446:	4613      	mov	r3, r2
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	4413      	add	r3, r2
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	4a27      	ldr	r2, [pc, #156]	; (80024ec <xTaskResumeAll+0x12c>)
 8002450:	441a      	add	r2, r3
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	3304      	adds	r3, #4
 8002456:	4619      	mov	r1, r3
 8002458:	4610      	mov	r0, r2
 800245a:	f7ff fd96 	bl	8001f8a <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002462:	4b23      	ldr	r3, [pc, #140]	; (80024f0 <xTaskResumeAll+0x130>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002468:	429a      	cmp	r2, r3
 800246a:	d302      	bcc.n	8002472 <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 800246c:	4b21      	ldr	r3, [pc, #132]	; (80024f4 <xTaskResumeAll+0x134>)
 800246e:	2201      	movs	r2, #1
 8002470:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002472:	4b1c      	ldr	r3, [pc, #112]	; (80024e4 <xTaskResumeAll+0x124>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d1c8      	bne.n	800240c <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d001      	beq.n	8002484 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002480:	f000 fa0c 	bl	800289c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002484:	4b1c      	ldr	r3, [pc, #112]	; (80024f8 <xTaskResumeAll+0x138>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d010      	beq.n	80024b2 <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002490:	f000 f848 	bl	8002524 <xTaskIncrementTick>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d002      	beq.n	80024a0 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 800249a:	4b16      	ldr	r3, [pc, #88]	; (80024f4 <xTaskResumeAll+0x134>)
 800249c:	2201      	movs	r2, #1
 800249e:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	3b01      	subs	r3, #1
 80024a4:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d1f1      	bne.n	8002490 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 80024ac:	4b12      	ldr	r3, [pc, #72]	; (80024f8 <xTaskResumeAll+0x138>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80024b2:	4b10      	ldr	r3, [pc, #64]	; (80024f4 <xTaskResumeAll+0x134>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d009      	beq.n	80024ce <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80024ba:	2301      	movs	r3, #1
 80024bc:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80024be:	4b0f      	ldr	r3, [pc, #60]	; (80024fc <xTaskResumeAll+0x13c>)
 80024c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024c4:	601a      	str	r2, [r3, #0]
 80024c6:	f3bf 8f4f 	dsb	sy
 80024ca:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80024ce:	f000 fbe1 	bl	8002c94 <vPortExitCritical>

    return xAlreadyYielded;
 80024d2:	68bb      	ldr	r3, [r7, #8]
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3710      	adds	r7, #16
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	20000184 	.word	0x20000184
 80024e0:	2000015c 	.word	0x2000015c
 80024e4:	2000011c 	.word	0x2000011c
 80024e8:	20000164 	.word	0x20000164
 80024ec:	20000088 	.word	0x20000088
 80024f0:	20000084 	.word	0x20000084
 80024f4:	20000170 	.word	0x20000170
 80024f8:	2000016c 	.word	0x2000016c
 80024fc:	e000ed04 	.word	0xe000ed04

08002500 <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002506:	f000 fc81 	bl	8002e0c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800250a:	2300      	movs	r3, #0
 800250c:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 800250e:	4b04      	ldr	r3, [pc, #16]	; (8002520 <xTaskGetTickCountFromISR+0x20>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002514:	683b      	ldr	r3, [r7, #0]
}
 8002516:	4618      	mov	r0, r3
 8002518:	3708      	adds	r7, #8
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	20000160 	.word	0x20000160

08002524 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b086      	sub	sp, #24
 8002528:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800252a:	2300      	movs	r3, #0
 800252c:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800252e:	4b50      	ldr	r3, [pc, #320]	; (8002670 <xTaskIncrementTick+0x14c>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	2b00      	cmp	r3, #0
 8002534:	f040 8092 	bne.w	800265c <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002538:	4b4e      	ldr	r3, [pc, #312]	; (8002674 <xTaskIncrementTick+0x150>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	3301      	adds	r3, #1
 800253e:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002540:	4a4c      	ldr	r2, [pc, #304]	; (8002674 <xTaskIncrementTick+0x150>)
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d120      	bne.n	800258e <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 800254c:	4b4a      	ldr	r3, [pc, #296]	; (8002678 <xTaskIncrementTick+0x154>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d00a      	beq.n	800256c <xTaskIncrementTick+0x48>
        __asm volatile
 8002556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800255a:	f383 8811 	msr	BASEPRI, r3
 800255e:	f3bf 8f6f 	isb	sy
 8002562:	f3bf 8f4f 	dsb	sy
 8002566:	603b      	str	r3, [r7, #0]
    }
 8002568:	bf00      	nop
 800256a:	e7fe      	b.n	800256a <xTaskIncrementTick+0x46>
 800256c:	4b42      	ldr	r3, [pc, #264]	; (8002678 <xTaskIncrementTick+0x154>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	60fb      	str	r3, [r7, #12]
 8002572:	4b42      	ldr	r3, [pc, #264]	; (800267c <xTaskIncrementTick+0x158>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a40      	ldr	r2, [pc, #256]	; (8002678 <xTaskIncrementTick+0x154>)
 8002578:	6013      	str	r3, [r2, #0]
 800257a:	4a40      	ldr	r2, [pc, #256]	; (800267c <xTaskIncrementTick+0x158>)
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	6013      	str	r3, [r2, #0]
 8002580:	4b3f      	ldr	r3, [pc, #252]	; (8002680 <xTaskIncrementTick+0x15c>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	3301      	adds	r3, #1
 8002586:	4a3e      	ldr	r2, [pc, #248]	; (8002680 <xTaskIncrementTick+0x15c>)
 8002588:	6013      	str	r3, [r2, #0]
 800258a:	f000 f987 	bl	800289c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800258e:	4b3d      	ldr	r3, [pc, #244]	; (8002684 <xTaskIncrementTick+0x160>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	693a      	ldr	r2, [r7, #16]
 8002594:	429a      	cmp	r2, r3
 8002596:	d34c      	bcc.n	8002632 <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002598:	4b37      	ldr	r3, [pc, #220]	; (8002678 <xTaskIncrementTick+0x154>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d104      	bne.n	80025ac <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80025a2:	4b38      	ldr	r3, [pc, #224]	; (8002684 <xTaskIncrementTick+0x160>)
 80025a4:	f04f 32ff 	mov.w	r2, #4294967295
 80025a8:	601a      	str	r2, [r3, #0]
                    break;
 80025aa:	e042      	b.n	8002632 <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80025ac:	4b32      	ldr	r3, [pc, #200]	; (8002678 <xTaskIncrementTick+0x154>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80025bc:	693a      	ldr	r2, [r7, #16]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d203      	bcs.n	80025cc <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80025c4:	4a2f      	ldr	r2, [pc, #188]	; (8002684 <xTaskIncrementTick+0x160>)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80025ca:	e032      	b.n	8002632 <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	3304      	adds	r3, #4
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7ff fcfe 	bl	8001fd2 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d004      	beq.n	80025e8 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	3318      	adds	r3, #24
 80025e2:	4618      	mov	r0, r3
 80025e4:	f7ff fcf5 	bl	8001fd2 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	4618      	mov	r0, r3
 80025ec:	f002 ff5a 	bl	80054a4 <SEGGER_SYSVIEW_OnTaskStartReady>
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f4:	2201      	movs	r2, #1
 80025f6:	409a      	lsls	r2, r3
 80025f8:	4b23      	ldr	r3, [pc, #140]	; (8002688 <xTaskIncrementTick+0x164>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4313      	orrs	r3, r2
 80025fe:	4a22      	ldr	r2, [pc, #136]	; (8002688 <xTaskIncrementTick+0x164>)
 8002600:	6013      	str	r3, [r2, #0]
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002606:	4613      	mov	r3, r2
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	4413      	add	r3, r2
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	4a1f      	ldr	r2, [pc, #124]	; (800268c <xTaskIncrementTick+0x168>)
 8002610:	441a      	add	r2, r3
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	3304      	adds	r3, #4
 8002616:	4619      	mov	r1, r3
 8002618:	4610      	mov	r0, r2
 800261a:	f7ff fcb6 	bl	8001f8a <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002622:	4b1b      	ldr	r3, [pc, #108]	; (8002690 <xTaskIncrementTick+0x16c>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002628:	429a      	cmp	r2, r3
 800262a:	d3b5      	bcc.n	8002598 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 800262c:	2301      	movs	r3, #1
 800262e:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002630:	e7b2      	b.n	8002598 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002632:	4b17      	ldr	r3, [pc, #92]	; (8002690 <xTaskIncrementTick+0x16c>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002638:	4914      	ldr	r1, [pc, #80]	; (800268c <xTaskIncrementTick+0x168>)
 800263a:	4613      	mov	r3, r2
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	4413      	add	r3, r2
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	440b      	add	r3, r1
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	2b01      	cmp	r3, #1
 8002648:	d901      	bls.n	800264e <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 800264a:	2301      	movs	r3, #1
 800264c:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 800264e:	4b11      	ldr	r3, [pc, #68]	; (8002694 <xTaskIncrementTick+0x170>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d007      	beq.n	8002666 <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 8002656:	2301      	movs	r3, #1
 8002658:	617b      	str	r3, [r7, #20]
 800265a:	e004      	b.n	8002666 <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800265c:	4b0e      	ldr	r3, [pc, #56]	; (8002698 <xTaskIncrementTick+0x174>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	3301      	adds	r3, #1
 8002662:	4a0d      	ldr	r2, [pc, #52]	; (8002698 <xTaskIncrementTick+0x174>)
 8002664:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002666:	697b      	ldr	r3, [r7, #20]
}
 8002668:	4618      	mov	r0, r3
 800266a:	3718      	adds	r7, #24
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	20000184 	.word	0x20000184
 8002674:	20000160 	.word	0x20000160
 8002678:	20000114 	.word	0x20000114
 800267c:	20000118 	.word	0x20000118
 8002680:	20000174 	.word	0x20000174
 8002684:	2000017c 	.word	0x2000017c
 8002688:	20000164 	.word	0x20000164
 800268c:	20000088 	.word	0x20000088
 8002690:	20000084 	.word	0x20000084
 8002694:	20000170 	.word	0x20000170
 8002698:	2000016c 	.word	0x2000016c

0800269c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b086      	sub	sp, #24
 80026a0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80026a2:	4b2d      	ldr	r3, [pc, #180]	; (8002758 <vTaskSwitchContext+0xbc>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d003      	beq.n	80026b2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80026aa:	4b2c      	ldr	r3, [pc, #176]	; (800275c <vTaskSwitchContext+0xc0>)
 80026ac:	2201      	movs	r2, #1
 80026ae:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80026b0:	e04d      	b.n	800274e <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 80026b2:	4b2a      	ldr	r3, [pc, #168]	; (800275c <vTaskSwitchContext+0xc0>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80026b8:	4b29      	ldr	r3, [pc, #164]	; (8002760 <vTaskSwitchContext+0xc4>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	fab3 f383 	clz	r3, r3
 80026c4:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80026c6:	7afb      	ldrb	r3, [r7, #11]
 80026c8:	f1c3 031f 	rsb	r3, r3, #31
 80026cc:	617b      	str	r3, [r7, #20]
 80026ce:	4925      	ldr	r1, [pc, #148]	; (8002764 <vTaskSwitchContext+0xc8>)
 80026d0:	697a      	ldr	r2, [r7, #20]
 80026d2:	4613      	mov	r3, r2
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	4413      	add	r3, r2
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	440b      	add	r3, r1
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d10a      	bne.n	80026f8 <vTaskSwitchContext+0x5c>
        __asm volatile
 80026e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026e6:	f383 8811 	msr	BASEPRI, r3
 80026ea:	f3bf 8f6f 	isb	sy
 80026ee:	f3bf 8f4f 	dsb	sy
 80026f2:	607b      	str	r3, [r7, #4]
    }
 80026f4:	bf00      	nop
 80026f6:	e7fe      	b.n	80026f6 <vTaskSwitchContext+0x5a>
 80026f8:	697a      	ldr	r2, [r7, #20]
 80026fa:	4613      	mov	r3, r2
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	4413      	add	r3, r2
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	4a18      	ldr	r2, [pc, #96]	; (8002764 <vTaskSwitchContext+0xc8>)
 8002704:	4413      	add	r3, r2
 8002706:	613b      	str	r3, [r7, #16]
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	685a      	ldr	r2, [r3, #4]
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	605a      	str	r2, [r3, #4]
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	685a      	ldr	r2, [r3, #4]
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	3308      	adds	r3, #8
 800271a:	429a      	cmp	r2, r3
 800271c:	d104      	bne.n	8002728 <vTaskSwitchContext+0x8c>
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	685a      	ldr	r2, [r3, #4]
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	605a      	str	r2, [r3, #4]
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	68db      	ldr	r3, [r3, #12]
 800272e:	4a0e      	ldr	r2, [pc, #56]	; (8002768 <vTaskSwitchContext+0xcc>)
 8002730:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8002732:	4b0d      	ldr	r3, [pc, #52]	; (8002768 <vTaskSwitchContext+0xcc>)
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	4b0d      	ldr	r3, [pc, #52]	; (800276c <vTaskSwitchContext+0xd0>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	429a      	cmp	r2, r3
 800273c:	d102      	bne.n	8002744 <vTaskSwitchContext+0xa8>
 800273e:	f002 fe11 	bl	8005364 <SEGGER_SYSVIEW_OnIdle>
}
 8002742:	e004      	b.n	800274e <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8002744:	4b08      	ldr	r3, [pc, #32]	; (8002768 <vTaskSwitchContext+0xcc>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4618      	mov	r0, r3
 800274a:	f002 fe69 	bl	8005420 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 800274e:	bf00      	nop
 8002750:	3718      	adds	r7, #24
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	20000184 	.word	0x20000184
 800275c:	20000170 	.word	0x20000170
 8002760:	20000164 	.word	0x20000164
 8002764:	20000088 	.word	0x20000088
 8002768:	20000084 	.word	0x20000084
 800276c:	20000180 	.word	0x20000180

08002770 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002778:	f000 f852 	bl	8002820 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800277c:	4b06      	ldr	r3, [pc, #24]	; (8002798 <prvIdleTask+0x28>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	2b01      	cmp	r3, #1
 8002782:	d9f9      	bls.n	8002778 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8002784:	4b05      	ldr	r3, [pc, #20]	; (800279c <prvIdleTask+0x2c>)
 8002786:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800278a:	601a      	str	r2, [r3, #0]
 800278c:	f3bf 8f4f 	dsb	sy
 8002790:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002794:	e7f0      	b.n	8002778 <prvIdleTask+0x8>
 8002796:	bf00      	nop
 8002798:	20000088 	.word	0x20000088
 800279c:	e000ed04 	.word	0xe000ed04

080027a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80027a6:	2300      	movs	r3, #0
 80027a8:	607b      	str	r3, [r7, #4]
 80027aa:	e00c      	b.n	80027c6 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80027ac:	687a      	ldr	r2, [r7, #4]
 80027ae:	4613      	mov	r3, r2
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	4413      	add	r3, r2
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	4a12      	ldr	r2, [pc, #72]	; (8002800 <prvInitialiseTaskLists+0x60>)
 80027b8:	4413      	add	r3, r2
 80027ba:	4618      	mov	r0, r3
 80027bc:	f7ff fbb8 	bl	8001f30 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	3301      	adds	r3, #1
 80027c4:	607b      	str	r3, [r7, #4]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2b04      	cmp	r3, #4
 80027ca:	d9ef      	bls.n	80027ac <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80027cc:	480d      	ldr	r0, [pc, #52]	; (8002804 <prvInitialiseTaskLists+0x64>)
 80027ce:	f7ff fbaf 	bl	8001f30 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80027d2:	480d      	ldr	r0, [pc, #52]	; (8002808 <prvInitialiseTaskLists+0x68>)
 80027d4:	f7ff fbac 	bl	8001f30 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80027d8:	480c      	ldr	r0, [pc, #48]	; (800280c <prvInitialiseTaskLists+0x6c>)
 80027da:	f7ff fba9 	bl	8001f30 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80027de:	480c      	ldr	r0, [pc, #48]	; (8002810 <prvInitialiseTaskLists+0x70>)
 80027e0:	f7ff fba6 	bl	8001f30 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80027e4:	480b      	ldr	r0, [pc, #44]	; (8002814 <prvInitialiseTaskLists+0x74>)
 80027e6:	f7ff fba3 	bl	8001f30 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80027ea:	4b0b      	ldr	r3, [pc, #44]	; (8002818 <prvInitialiseTaskLists+0x78>)
 80027ec:	4a05      	ldr	r2, [pc, #20]	; (8002804 <prvInitialiseTaskLists+0x64>)
 80027ee:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80027f0:	4b0a      	ldr	r3, [pc, #40]	; (800281c <prvInitialiseTaskLists+0x7c>)
 80027f2:	4a05      	ldr	r2, [pc, #20]	; (8002808 <prvInitialiseTaskLists+0x68>)
 80027f4:	601a      	str	r2, [r3, #0]
}
 80027f6:	bf00      	nop
 80027f8:	3708      	adds	r7, #8
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	20000088 	.word	0x20000088
 8002804:	200000ec 	.word	0x200000ec
 8002808:	20000100 	.word	0x20000100
 800280c:	2000011c 	.word	0x2000011c
 8002810:	20000130 	.word	0x20000130
 8002814:	20000148 	.word	0x20000148
 8002818:	20000114 	.word	0x20000114
 800281c:	20000118 	.word	0x20000118

08002820 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002826:	e019      	b.n	800285c <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8002828:	f000 fa04 	bl	8002c34 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800282c:	4b10      	ldr	r3, [pc, #64]	; (8002870 <prvCheckTasksWaitingTermination+0x50>)
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	3304      	adds	r3, #4
 8002838:	4618      	mov	r0, r3
 800283a:	f7ff fbca 	bl	8001fd2 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 800283e:	4b0d      	ldr	r3, [pc, #52]	; (8002874 <prvCheckTasksWaitingTermination+0x54>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	3b01      	subs	r3, #1
 8002844:	4a0b      	ldr	r2, [pc, #44]	; (8002874 <prvCheckTasksWaitingTermination+0x54>)
 8002846:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8002848:	4b0b      	ldr	r3, [pc, #44]	; (8002878 <prvCheckTasksWaitingTermination+0x58>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	3b01      	subs	r3, #1
 800284e:	4a0a      	ldr	r2, [pc, #40]	; (8002878 <prvCheckTasksWaitingTermination+0x58>)
 8002850:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8002852:	f000 fa1f 	bl	8002c94 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f000 f810 	bl	800287c <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800285c:	4b06      	ldr	r3, [pc, #24]	; (8002878 <prvCheckTasksWaitingTermination+0x58>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d1e1      	bne.n	8002828 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8002864:	bf00      	nop
 8002866:	bf00      	nop
 8002868:	3708      	adds	r7, #8
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	20000130 	.word	0x20000130
 8002874:	2000015c 	.word	0x2000015c
 8002878:	20000144 	.word	0x20000144

0800287c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002888:	4618      	mov	r0, r3
 800288a:	f000 fbdf 	bl	800304c <vPortFree>
                vPortFree( pxTCB );
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f000 fbdc 	bl	800304c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002894:	bf00      	nop
 8002896:	3708      	adds	r7, #8
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}

0800289c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80028a0:	4b0a      	ldr	r3, [pc, #40]	; (80028cc <prvResetNextTaskUnblockTime+0x30>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d104      	bne.n	80028b4 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80028aa:	4b09      	ldr	r3, [pc, #36]	; (80028d0 <prvResetNextTaskUnblockTime+0x34>)
 80028ac:	f04f 32ff 	mov.w	r2, #4294967295
 80028b0:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80028b2:	e005      	b.n	80028c0 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80028b4:	4b05      	ldr	r3, [pc, #20]	; (80028cc <prvResetNextTaskUnblockTime+0x30>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a04      	ldr	r2, [pc, #16]	; (80028d0 <prvResetNextTaskUnblockTime+0x34>)
 80028be:	6013      	str	r3, [r2, #0]
}
 80028c0:	bf00      	nop
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
 80028ca:	bf00      	nop
 80028cc:	20000114 	.word	0x20000114
 80028d0:	2000017c 	.word	0x2000017c

080028d4 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80028d4:	b480      	push	{r7}
 80028d6:	b085      	sub	sp, #20
 80028d8:	af00      	add	r7, sp, #0
 80028da:	60f8      	str	r0, [r7, #12]
 80028dc:	60b9      	str	r1, [r7, #8]
 80028de:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	3b04      	subs	r3, #4
 80028e4:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80028ec:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	3b04      	subs	r3, #4
 80028f2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	f023 0201 	bic.w	r2, r3, #1
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	3b04      	subs	r3, #4
 8002902:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002904:	4a0c      	ldr	r2, [pc, #48]	; (8002938 <pxPortInitialiseStack+0x64>)
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	3b14      	subs	r3, #20
 800290e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	3b04      	subs	r3, #4
 800291a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	f06f 0202 	mvn.w	r2, #2
 8002922:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	3b20      	subs	r3, #32
 8002928:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800292a:	68fb      	ldr	r3, [r7, #12]
}
 800292c:	4618      	mov	r0, r3
 800292e:	3714      	adds	r7, #20
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr
 8002938:	0800293d 	.word	0x0800293d

0800293c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800293c:	b480      	push	{r7}
 800293e:	b085      	sub	sp, #20
 8002940:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002942:	2300      	movs	r3, #0
 8002944:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002946:	4b12      	ldr	r3, [pc, #72]	; (8002990 <prvTaskExitError+0x54>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800294e:	d00a      	beq.n	8002966 <prvTaskExitError+0x2a>
        __asm volatile
 8002950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002954:	f383 8811 	msr	BASEPRI, r3
 8002958:	f3bf 8f6f 	isb	sy
 800295c:	f3bf 8f4f 	dsb	sy
 8002960:	60fb      	str	r3, [r7, #12]
    }
 8002962:	bf00      	nop
 8002964:	e7fe      	b.n	8002964 <prvTaskExitError+0x28>
        __asm volatile
 8002966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800296a:	f383 8811 	msr	BASEPRI, r3
 800296e:	f3bf 8f6f 	isb	sy
 8002972:	f3bf 8f4f 	dsb	sy
 8002976:	60bb      	str	r3, [r7, #8]
    }
 8002978:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800297a:	bf00      	nop
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d0fc      	beq.n	800297c <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002982:	bf00      	nop
 8002984:	bf00      	nop
 8002986:	3714      	adds	r7, #20
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr
 8002990:	20000010 	.word	0x20000010
	...

080029a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80029a0:	4b07      	ldr	r3, [pc, #28]	; (80029c0 <pxCurrentTCBConst2>)
 80029a2:	6819      	ldr	r1, [r3, #0]
 80029a4:	6808      	ldr	r0, [r1, #0]
 80029a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029aa:	f380 8809 	msr	PSP, r0
 80029ae:	f3bf 8f6f 	isb	sy
 80029b2:	f04f 0000 	mov.w	r0, #0
 80029b6:	f380 8811 	msr	BASEPRI, r0
 80029ba:	4770      	bx	lr
 80029bc:	f3af 8000 	nop.w

080029c0 <pxCurrentTCBConst2>:
 80029c0:	20000084 	.word	0x20000084
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80029c4:	bf00      	nop
 80029c6:	bf00      	nop

080029c8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80029c8:	4808      	ldr	r0, [pc, #32]	; (80029ec <prvPortStartFirstTask+0x24>)
 80029ca:	6800      	ldr	r0, [r0, #0]
 80029cc:	6800      	ldr	r0, [r0, #0]
 80029ce:	f380 8808 	msr	MSP, r0
 80029d2:	f04f 0000 	mov.w	r0, #0
 80029d6:	f380 8814 	msr	CONTROL, r0
 80029da:	b662      	cpsie	i
 80029dc:	b661      	cpsie	f
 80029de:	f3bf 8f4f 	dsb	sy
 80029e2:	f3bf 8f6f 	isb	sy
 80029e6:	df00      	svc	0
 80029e8:	bf00      	nop
 80029ea:	0000      	.short	0x0000
 80029ec:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80029f0:	bf00      	nop
 80029f2:	bf00      	nop

080029f4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b086      	sub	sp, #24
 80029f8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80029fa:	4b46      	ldr	r3, [pc, #280]	; (8002b14 <xPortStartScheduler+0x120>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a46      	ldr	r2, [pc, #280]	; (8002b18 <xPortStartScheduler+0x124>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d10a      	bne.n	8002a1a <xPortStartScheduler+0x26>
        __asm volatile
 8002a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a08:	f383 8811 	msr	BASEPRI, r3
 8002a0c:	f3bf 8f6f 	isb	sy
 8002a10:	f3bf 8f4f 	dsb	sy
 8002a14:	613b      	str	r3, [r7, #16]
    }
 8002a16:	bf00      	nop
 8002a18:	e7fe      	b.n	8002a18 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002a1a:	4b3e      	ldr	r3, [pc, #248]	; (8002b14 <xPortStartScheduler+0x120>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a3f      	ldr	r2, [pc, #252]	; (8002b1c <xPortStartScheduler+0x128>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d10a      	bne.n	8002a3a <xPortStartScheduler+0x46>
        __asm volatile
 8002a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a28:	f383 8811 	msr	BASEPRI, r3
 8002a2c:	f3bf 8f6f 	isb	sy
 8002a30:	f3bf 8f4f 	dsb	sy
 8002a34:	60fb      	str	r3, [r7, #12]
    }
 8002a36:	bf00      	nop
 8002a38:	e7fe      	b.n	8002a38 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002a3a:	4b39      	ldr	r3, [pc, #228]	; (8002b20 <xPortStartScheduler+0x12c>)
 8002a3c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	22ff      	movs	r2, #255	; 0xff
 8002a4a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002a54:	78fb      	ldrb	r3, [r7, #3]
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002a5c:	b2da      	uxtb	r2, r3
 8002a5e:	4b31      	ldr	r3, [pc, #196]	; (8002b24 <xPortStartScheduler+0x130>)
 8002a60:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002a62:	4b31      	ldr	r3, [pc, #196]	; (8002b28 <xPortStartScheduler+0x134>)
 8002a64:	2207      	movs	r2, #7
 8002a66:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002a68:	e009      	b.n	8002a7e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8002a6a:	4b2f      	ldr	r3, [pc, #188]	; (8002b28 <xPortStartScheduler+0x134>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	3b01      	subs	r3, #1
 8002a70:	4a2d      	ldr	r2, [pc, #180]	; (8002b28 <xPortStartScheduler+0x134>)
 8002a72:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002a74:	78fb      	ldrb	r3, [r7, #3]
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	005b      	lsls	r3, r3, #1
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002a7e:	78fb      	ldrb	r3, [r7, #3]
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a86:	2b80      	cmp	r3, #128	; 0x80
 8002a88:	d0ef      	beq.n	8002a6a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002a8a:	4b27      	ldr	r3, [pc, #156]	; (8002b28 <xPortStartScheduler+0x134>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f1c3 0307 	rsb	r3, r3, #7
 8002a92:	2b04      	cmp	r3, #4
 8002a94:	d00a      	beq.n	8002aac <xPortStartScheduler+0xb8>
        __asm volatile
 8002a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a9a:	f383 8811 	msr	BASEPRI, r3
 8002a9e:	f3bf 8f6f 	isb	sy
 8002aa2:	f3bf 8f4f 	dsb	sy
 8002aa6:	60bb      	str	r3, [r7, #8]
    }
 8002aa8:	bf00      	nop
 8002aaa:	e7fe      	b.n	8002aaa <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002aac:	4b1e      	ldr	r3, [pc, #120]	; (8002b28 <xPortStartScheduler+0x134>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	021b      	lsls	r3, r3, #8
 8002ab2:	4a1d      	ldr	r2, [pc, #116]	; (8002b28 <xPortStartScheduler+0x134>)
 8002ab4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002ab6:	4b1c      	ldr	r3, [pc, #112]	; (8002b28 <xPortStartScheduler+0x134>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002abe:	4a1a      	ldr	r2, [pc, #104]	; (8002b28 <xPortStartScheduler+0x134>)
 8002ac0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	b2da      	uxtb	r2, r3
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002aca:	4b18      	ldr	r3, [pc, #96]	; (8002b2c <xPortStartScheduler+0x138>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a17      	ldr	r2, [pc, #92]	; (8002b2c <xPortStartScheduler+0x138>)
 8002ad0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ad4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002ad6:	4b15      	ldr	r3, [pc, #84]	; (8002b2c <xPortStartScheduler+0x138>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a14      	ldr	r2, [pc, #80]	; (8002b2c <xPortStartScheduler+0x138>)
 8002adc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002ae0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002ae2:	f000 f963 	bl	8002dac <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002ae6:	4b12      	ldr	r3, [pc, #72]	; (8002b30 <xPortStartScheduler+0x13c>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8002aec:	f000 f982 	bl	8002df4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002af0:	4b10      	ldr	r3, [pc, #64]	; (8002b34 <xPortStartScheduler+0x140>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a0f      	ldr	r2, [pc, #60]	; (8002b34 <xPortStartScheduler+0x140>)
 8002af6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002afa:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8002afc:	f7ff ff64 	bl	80029c8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002b00:	f7ff fdcc 	bl	800269c <vTaskSwitchContext>
    prvTaskExitError();
 8002b04:	f7ff ff1a 	bl	800293c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002b08:	2300      	movs	r3, #0
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3718      	adds	r7, #24
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	e000ed00 	.word	0xe000ed00
 8002b18:	410fc271 	.word	0x410fc271
 8002b1c:	410fc270 	.word	0x410fc270
 8002b20:	e000e400 	.word	0xe000e400
 8002b24:	20000188 	.word	0x20000188
 8002b28:	2000018c 	.word	0x2000018c
 8002b2c:	e000ed20 	.word	0xe000ed20
 8002b30:	20000010 	.word	0x20000010
 8002b34:	e000ef34 	.word	0xe000ef34

08002b38 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b087      	sub	sp, #28
 8002b3c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002b3e:	4b37      	ldr	r3, [pc, #220]	; (8002c1c <vInitPrioGroupValue+0xe4>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a37      	ldr	r2, [pc, #220]	; (8002c20 <vInitPrioGroupValue+0xe8>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d10a      	bne.n	8002b5e <vInitPrioGroupValue+0x26>
        __asm volatile
 8002b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b4c:	f383 8811 	msr	BASEPRI, r3
 8002b50:	f3bf 8f6f 	isb	sy
 8002b54:	f3bf 8f4f 	dsb	sy
 8002b58:	613b      	str	r3, [r7, #16]
    }
 8002b5a:	bf00      	nop
 8002b5c:	e7fe      	b.n	8002b5c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002b5e:	4b2f      	ldr	r3, [pc, #188]	; (8002c1c <vInitPrioGroupValue+0xe4>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a30      	ldr	r2, [pc, #192]	; (8002c24 <vInitPrioGroupValue+0xec>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d10a      	bne.n	8002b7e <vInitPrioGroupValue+0x46>
        __asm volatile
 8002b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b6c:	f383 8811 	msr	BASEPRI, r3
 8002b70:	f3bf 8f6f 	isb	sy
 8002b74:	f3bf 8f4f 	dsb	sy
 8002b78:	60fb      	str	r3, [r7, #12]
    }
 8002b7a:	bf00      	nop
 8002b7c:	e7fe      	b.n	8002b7c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002b7e:	4b2a      	ldr	r3, [pc, #168]	; (8002c28 <vInitPrioGroupValue+0xf0>)
 8002b80:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	22ff      	movs	r2, #255	; 0xff
 8002b8e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002b98:	78fb      	ldrb	r3, [r7, #3]
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002ba0:	b2da      	uxtb	r2, r3
 8002ba2:	4b22      	ldr	r3, [pc, #136]	; (8002c2c <vInitPrioGroupValue+0xf4>)
 8002ba4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002ba6:	4b22      	ldr	r3, [pc, #136]	; (8002c30 <vInitPrioGroupValue+0xf8>)
 8002ba8:	2207      	movs	r2, #7
 8002baa:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002bac:	e009      	b.n	8002bc2 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8002bae:	4b20      	ldr	r3, [pc, #128]	; (8002c30 <vInitPrioGroupValue+0xf8>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	3b01      	subs	r3, #1
 8002bb4:	4a1e      	ldr	r2, [pc, #120]	; (8002c30 <vInitPrioGroupValue+0xf8>)
 8002bb6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002bb8:	78fb      	ldrb	r3, [r7, #3]
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	005b      	lsls	r3, r3, #1
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002bc2:	78fb      	ldrb	r3, [r7, #3]
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bca:	2b80      	cmp	r3, #128	; 0x80
 8002bcc:	d0ef      	beq.n	8002bae <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002bce:	4b18      	ldr	r3, [pc, #96]	; (8002c30 <vInitPrioGroupValue+0xf8>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f1c3 0307 	rsb	r3, r3, #7
 8002bd6:	2b04      	cmp	r3, #4
 8002bd8:	d00a      	beq.n	8002bf0 <vInitPrioGroupValue+0xb8>
        __asm volatile
 8002bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bde:	f383 8811 	msr	BASEPRI, r3
 8002be2:	f3bf 8f6f 	isb	sy
 8002be6:	f3bf 8f4f 	dsb	sy
 8002bea:	60bb      	str	r3, [r7, #8]
    }
 8002bec:	bf00      	nop
 8002bee:	e7fe      	b.n	8002bee <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002bf0:	4b0f      	ldr	r3, [pc, #60]	; (8002c30 <vInitPrioGroupValue+0xf8>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	021b      	lsls	r3, r3, #8
 8002bf6:	4a0e      	ldr	r2, [pc, #56]	; (8002c30 <vInitPrioGroupValue+0xf8>)
 8002bf8:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002bfa:	4b0d      	ldr	r3, [pc, #52]	; (8002c30 <vInitPrioGroupValue+0xf8>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002c02:	4a0b      	ldr	r2, [pc, #44]	; (8002c30 <vInitPrioGroupValue+0xf8>)
 8002c04:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	b2da      	uxtb	r2, r3
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8002c0e:	bf00      	nop
 8002c10:	371c      	adds	r7, #28
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr
 8002c1a:	bf00      	nop
 8002c1c:	e000ed00 	.word	0xe000ed00
 8002c20:	410fc271 	.word	0x410fc271
 8002c24:	410fc270 	.word	0x410fc270
 8002c28:	e000e400 	.word	0xe000e400
 8002c2c:	20000188 	.word	0x20000188
 8002c30:	2000018c 	.word	0x2000018c

08002c34 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
        __asm volatile
 8002c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c3e:	f383 8811 	msr	BASEPRI, r3
 8002c42:	f3bf 8f6f 	isb	sy
 8002c46:	f3bf 8f4f 	dsb	sy
 8002c4a:	607b      	str	r3, [r7, #4]
    }
 8002c4c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002c4e:	4b0f      	ldr	r3, [pc, #60]	; (8002c8c <vPortEnterCritical+0x58>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	3301      	adds	r3, #1
 8002c54:	4a0d      	ldr	r2, [pc, #52]	; (8002c8c <vPortEnterCritical+0x58>)
 8002c56:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8002c58:	4b0c      	ldr	r3, [pc, #48]	; (8002c8c <vPortEnterCritical+0x58>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d10f      	bne.n	8002c80 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002c60:	4b0b      	ldr	r3, [pc, #44]	; (8002c90 <vPortEnterCritical+0x5c>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d00a      	beq.n	8002c80 <vPortEnterCritical+0x4c>
        __asm volatile
 8002c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c6e:	f383 8811 	msr	BASEPRI, r3
 8002c72:	f3bf 8f6f 	isb	sy
 8002c76:	f3bf 8f4f 	dsb	sy
 8002c7a:	603b      	str	r3, [r7, #0]
    }
 8002c7c:	bf00      	nop
 8002c7e:	e7fe      	b.n	8002c7e <vPortEnterCritical+0x4a>
    }
}
 8002c80:	bf00      	nop
 8002c82:	370c      	adds	r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr
 8002c8c:	20000010 	.word	0x20000010
 8002c90:	e000ed04 	.word	0xe000ed04

08002c94 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002c94:	b480      	push	{r7}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8002c9a:	4b12      	ldr	r3, [pc, #72]	; (8002ce4 <vPortExitCritical+0x50>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d10a      	bne.n	8002cb8 <vPortExitCritical+0x24>
        __asm volatile
 8002ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ca6:	f383 8811 	msr	BASEPRI, r3
 8002caa:	f3bf 8f6f 	isb	sy
 8002cae:	f3bf 8f4f 	dsb	sy
 8002cb2:	607b      	str	r3, [r7, #4]
    }
 8002cb4:	bf00      	nop
 8002cb6:	e7fe      	b.n	8002cb6 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8002cb8:	4b0a      	ldr	r3, [pc, #40]	; (8002ce4 <vPortExitCritical+0x50>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	3b01      	subs	r3, #1
 8002cbe:	4a09      	ldr	r2, [pc, #36]	; (8002ce4 <vPortExitCritical+0x50>)
 8002cc0:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002cc2:	4b08      	ldr	r3, [pc, #32]	; (8002ce4 <vPortExitCritical+0x50>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d105      	bne.n	8002cd6 <vPortExitCritical+0x42>
 8002cca:	2300      	movs	r3, #0
 8002ccc:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002cd4:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8002cd6:	bf00      	nop
 8002cd8:	370c      	adds	r7, #12
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr
 8002ce2:	bf00      	nop
 8002ce4:	20000010 	.word	0x20000010
	...

08002cf0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002cf0:	f3ef 8009 	mrs	r0, PSP
 8002cf4:	f3bf 8f6f 	isb	sy
 8002cf8:	4b15      	ldr	r3, [pc, #84]	; (8002d50 <pxCurrentTCBConst>)
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	f01e 0f10 	tst.w	lr, #16
 8002d00:	bf08      	it	eq
 8002d02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002d06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d0a:	6010      	str	r0, [r2, #0]
 8002d0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002d10:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002d14:	f380 8811 	msr	BASEPRI, r0
 8002d18:	f3bf 8f4f 	dsb	sy
 8002d1c:	f3bf 8f6f 	isb	sy
 8002d20:	f7ff fcbc 	bl	800269c <vTaskSwitchContext>
 8002d24:	f04f 0000 	mov.w	r0, #0
 8002d28:	f380 8811 	msr	BASEPRI, r0
 8002d2c:	bc09      	pop	{r0, r3}
 8002d2e:	6819      	ldr	r1, [r3, #0]
 8002d30:	6808      	ldr	r0, [r1, #0]
 8002d32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d36:	f01e 0f10 	tst.w	lr, #16
 8002d3a:	bf08      	it	eq
 8002d3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002d40:	f380 8809 	msr	PSP, r0
 8002d44:	f3bf 8f6f 	isb	sy
 8002d48:	4770      	bx	lr
 8002d4a:	bf00      	nop
 8002d4c:	f3af 8000 	nop.w

08002d50 <pxCurrentTCBConst>:
 8002d50:	20000084 	.word	0x20000084
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002d54:	bf00      	nop
 8002d56:	bf00      	nop

08002d58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0
        __asm volatile
 8002d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d62:	f383 8811 	msr	BASEPRI, r3
 8002d66:	f3bf 8f6f 	isb	sy
 8002d6a:	f3bf 8f4f 	dsb	sy
 8002d6e:	607b      	str	r3, [r7, #4]
    }
 8002d70:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8002d72:	f002 fa7d 	bl	8005270 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002d76:	f7ff fbd5 	bl	8002524 <xTaskIncrementTick>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d006      	beq.n	8002d8e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8002d80:	f002 fad4 	bl	800532c <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002d84:	4b08      	ldr	r3, [pc, #32]	; (8002da8 <SysTick_Handler+0x50>)
 8002d86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d8a:	601a      	str	r2, [r3, #0]
 8002d8c:	e001      	b.n	8002d92 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 8002d8e:	f002 fab1 	bl	80052f4 <SEGGER_SYSVIEW_RecordExitISR>
 8002d92:	2300      	movs	r3, #0
 8002d94:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	f383 8811 	msr	BASEPRI, r3
    }
 8002d9c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8002d9e:	bf00      	nop
 8002da0:	3708      	adds	r7, #8
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	e000ed04 	.word	0xe000ed04

08002dac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8002dac:	b480      	push	{r7}
 8002dae:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002db0:	4b0b      	ldr	r3, [pc, #44]	; (8002de0 <vPortSetupTimerInterrupt+0x34>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002db6:	4b0b      	ldr	r3, [pc, #44]	; (8002de4 <vPortSetupTimerInterrupt+0x38>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002dbc:	4b0a      	ldr	r3, [pc, #40]	; (8002de8 <vPortSetupTimerInterrupt+0x3c>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a0a      	ldr	r2, [pc, #40]	; (8002dec <vPortSetupTimerInterrupt+0x40>)
 8002dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8002dc6:	099b      	lsrs	r3, r3, #6
 8002dc8:	4a09      	ldr	r2, [pc, #36]	; (8002df0 <vPortSetupTimerInterrupt+0x44>)
 8002dca:	3b01      	subs	r3, #1
 8002dcc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002dce:	4b04      	ldr	r3, [pc, #16]	; (8002de0 <vPortSetupTimerInterrupt+0x34>)
 8002dd0:	2207      	movs	r2, #7
 8002dd2:	601a      	str	r2, [r3, #0]
}
 8002dd4:	bf00      	nop
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr
 8002dde:	bf00      	nop
 8002de0:	e000e010 	.word	0xe000e010
 8002de4:	e000e018 	.word	0xe000e018
 8002de8:	20000000 	.word	0x20000000
 8002dec:	10624dd3 	.word	0x10624dd3
 8002df0:	e000e014 	.word	0xe000e014

08002df4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8002df4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002e04 <vPortEnableVFP+0x10>
 8002df8:	6801      	ldr	r1, [r0, #0]
 8002dfa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002dfe:	6001      	str	r1, [r0, #0]
 8002e00:	4770      	bx	lr
 8002e02:	0000      	.short	0x0000
 8002e04:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8002e08:	bf00      	nop
 8002e0a:	bf00      	nop

08002e0c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8002e0c:	b480      	push	{r7}
 8002e0e:	b085      	sub	sp, #20
 8002e10:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8002e12:	f3ef 8305 	mrs	r3, IPSR
 8002e16:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2b0f      	cmp	r3, #15
 8002e1c:	d914      	bls.n	8002e48 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002e1e:	4a17      	ldr	r2, [pc, #92]	; (8002e7c <vPortValidateInterruptPriority+0x70>)
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	4413      	add	r3, r2
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002e28:	4b15      	ldr	r3, [pc, #84]	; (8002e80 <vPortValidateInterruptPriority+0x74>)
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	7afa      	ldrb	r2, [r7, #11]
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d20a      	bcs.n	8002e48 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8002e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e36:	f383 8811 	msr	BASEPRI, r3
 8002e3a:	f3bf 8f6f 	isb	sy
 8002e3e:	f3bf 8f4f 	dsb	sy
 8002e42:	607b      	str	r3, [r7, #4]
    }
 8002e44:	bf00      	nop
 8002e46:	e7fe      	b.n	8002e46 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002e48:	4b0e      	ldr	r3, [pc, #56]	; (8002e84 <vPortValidateInterruptPriority+0x78>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002e50:	4b0d      	ldr	r3, [pc, #52]	; (8002e88 <vPortValidateInterruptPriority+0x7c>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d90a      	bls.n	8002e6e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8002e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e5c:	f383 8811 	msr	BASEPRI, r3
 8002e60:	f3bf 8f6f 	isb	sy
 8002e64:	f3bf 8f4f 	dsb	sy
 8002e68:	603b      	str	r3, [r7, #0]
    }
 8002e6a:	bf00      	nop
 8002e6c:	e7fe      	b.n	8002e6c <vPortValidateInterruptPriority+0x60>
    }
 8002e6e:	bf00      	nop
 8002e70:	3714      	adds	r7, #20
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr
 8002e7a:	bf00      	nop
 8002e7c:	e000e3f0 	.word	0xe000e3f0
 8002e80:	20000188 	.word	0x20000188
 8002e84:	e000ed0c 	.word	0xe000ed0c
 8002e88:	2000018c 	.word	0x2000018c

08002e8c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b08a      	sub	sp, #40	; 0x28
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8002e94:	2300      	movs	r3, #0
 8002e96:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8002e98:	f7ff fa84 	bl	80023a4 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8002e9c:	4b65      	ldr	r3, [pc, #404]	; (8003034 <pvPortMalloc+0x1a8>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d101      	bne.n	8002ea8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8002ea4:	f000 f934 	bl	8003110 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002ea8:	4b63      	ldr	r3, [pc, #396]	; (8003038 <pvPortMalloc+0x1ac>)
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	4013      	ands	r3, r2
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	f040 80a7 	bne.w	8003004 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d02d      	beq.n	8002f18 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8002ebc:	2208      	movs	r2, #8
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d227      	bcs.n	8002f18 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8002ec8:	2208      	movs	r2, #8
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4413      	add	r3, r2
 8002ece:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	f003 0307 	and.w	r3, r3, #7
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d021      	beq.n	8002f1e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	f023 0307 	bic.w	r3, r3, #7
 8002ee0:	3308      	adds	r3, #8
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d214      	bcs.n	8002f12 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f023 0307 	bic.w	r3, r3, #7
 8002eee:	3308      	adds	r3, #8
 8002ef0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f003 0307 	and.w	r3, r3, #7
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d010      	beq.n	8002f1e <pvPortMalloc+0x92>
        __asm volatile
 8002efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f00:	f383 8811 	msr	BASEPRI, r3
 8002f04:	f3bf 8f6f 	isb	sy
 8002f08:	f3bf 8f4f 	dsb	sy
 8002f0c:	617b      	str	r3, [r7, #20]
    }
 8002f0e:	bf00      	nop
 8002f10:	e7fe      	b.n	8002f10 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8002f12:	2300      	movs	r3, #0
 8002f14:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002f16:	e002      	b.n	8002f1e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	607b      	str	r3, [r7, #4]
 8002f1c:	e000      	b.n	8002f20 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002f1e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d06e      	beq.n	8003004 <pvPortMalloc+0x178>
 8002f26:	4b45      	ldr	r3, [pc, #276]	; (800303c <pvPortMalloc+0x1b0>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d869      	bhi.n	8003004 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8002f30:	4b43      	ldr	r3, [pc, #268]	; (8003040 <pvPortMalloc+0x1b4>)
 8002f32:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8002f34:	4b42      	ldr	r3, [pc, #264]	; (8003040 <pvPortMalloc+0x1b4>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002f3a:	e004      	b.n	8002f46 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8002f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8002f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d903      	bls.n	8002f58 <pvPortMalloc+0xcc>
 8002f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d1f1      	bne.n	8002f3c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8002f58:	4b36      	ldr	r3, [pc, #216]	; (8003034 <pvPortMalloc+0x1a8>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d050      	beq.n	8003004 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002f62:	6a3b      	ldr	r3, [r7, #32]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	2208      	movs	r2, #8
 8002f68:	4413      	add	r3, r2
 8002f6a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	6a3b      	ldr	r3, [r7, #32]
 8002f72:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f76:	685a      	ldr	r2, [r3, #4]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	1ad2      	subs	r2, r2, r3
 8002f7c:	2308      	movs	r3, #8
 8002f7e:	005b      	lsls	r3, r3, #1
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d91f      	bls.n	8002fc4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002f84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4413      	add	r3, r2
 8002f8a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002f8c:	69bb      	ldr	r3, [r7, #24]
 8002f8e:	f003 0307 	and.w	r3, r3, #7
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d00a      	beq.n	8002fac <pvPortMalloc+0x120>
        __asm volatile
 8002f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f9a:	f383 8811 	msr	BASEPRI, r3
 8002f9e:	f3bf 8f6f 	isb	sy
 8002fa2:	f3bf 8f4f 	dsb	sy
 8002fa6:	613b      	str	r3, [r7, #16]
    }
 8002fa8:	bf00      	nop
 8002faa:	e7fe      	b.n	8002faa <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fae:	685a      	ldr	r2, [r3, #4]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	1ad2      	subs	r2, r2, r3
 8002fb4:	69bb      	ldr	r3, [r7, #24]
 8002fb6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8002fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002fbe:	69b8      	ldr	r0, [r7, #24]
 8002fc0:	f000 f908 	bl	80031d4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002fc4:	4b1d      	ldr	r3, [pc, #116]	; (800303c <pvPortMalloc+0x1b0>)
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	4a1b      	ldr	r2, [pc, #108]	; (800303c <pvPortMalloc+0x1b0>)
 8002fd0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002fd2:	4b1a      	ldr	r3, [pc, #104]	; (800303c <pvPortMalloc+0x1b0>)
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	4b1b      	ldr	r3, [pc, #108]	; (8003044 <pvPortMalloc+0x1b8>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d203      	bcs.n	8002fe6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002fde:	4b17      	ldr	r3, [pc, #92]	; (800303c <pvPortMalloc+0x1b0>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a18      	ldr	r2, [pc, #96]	; (8003044 <pvPortMalloc+0x1b8>)
 8002fe4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe8:	685a      	ldr	r2, [r3, #4]
 8002fea:	4b13      	ldr	r3, [pc, #76]	; (8003038 <pvPortMalloc+0x1ac>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	431a      	orrs	r2, r3
 8002ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8002ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8002ffa:	4b13      	ldr	r3, [pc, #76]	; (8003048 <pvPortMalloc+0x1bc>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	3301      	adds	r3, #1
 8003000:	4a11      	ldr	r2, [pc, #68]	; (8003048 <pvPortMalloc+0x1bc>)
 8003002:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003004:	f7ff f9dc 	bl	80023c0 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	f003 0307 	and.w	r3, r3, #7
 800300e:	2b00      	cmp	r3, #0
 8003010:	d00a      	beq.n	8003028 <pvPortMalloc+0x19c>
        __asm volatile
 8003012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003016:	f383 8811 	msr	BASEPRI, r3
 800301a:	f3bf 8f6f 	isb	sy
 800301e:	f3bf 8f4f 	dsb	sy
 8003022:	60fb      	str	r3, [r7, #12]
    }
 8003024:	bf00      	nop
 8003026:	e7fe      	b.n	8003026 <pvPortMalloc+0x19a>
    return pvReturn;
 8003028:	69fb      	ldr	r3, [r7, #28]
}
 800302a:	4618      	mov	r0, r3
 800302c:	3728      	adds	r7, #40	; 0x28
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	20012d98 	.word	0x20012d98
 8003038:	20012dac 	.word	0x20012dac
 800303c:	20012d9c 	.word	0x20012d9c
 8003040:	20012d90 	.word	0x20012d90
 8003044:	20012da0 	.word	0x20012da0
 8003048:	20012da4 	.word	0x20012da4

0800304c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b086      	sub	sp, #24
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d04d      	beq.n	80030fa <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800305e:	2308      	movs	r3, #8
 8003060:	425b      	negs	r3, r3
 8003062:	697a      	ldr	r2, [r7, #20]
 8003064:	4413      	add	r3, r2
 8003066:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	685a      	ldr	r2, [r3, #4]
 8003070:	4b24      	ldr	r3, [pc, #144]	; (8003104 <vPortFree+0xb8>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4013      	ands	r3, r2
 8003076:	2b00      	cmp	r3, #0
 8003078:	d10a      	bne.n	8003090 <vPortFree+0x44>
        __asm volatile
 800307a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800307e:	f383 8811 	msr	BASEPRI, r3
 8003082:	f3bf 8f6f 	isb	sy
 8003086:	f3bf 8f4f 	dsb	sy
 800308a:	60fb      	str	r3, [r7, #12]
    }
 800308c:	bf00      	nop
 800308e:	e7fe      	b.n	800308e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d00a      	beq.n	80030ae <vPortFree+0x62>
        __asm volatile
 8003098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800309c:	f383 8811 	msr	BASEPRI, r3
 80030a0:	f3bf 8f6f 	isb	sy
 80030a4:	f3bf 8f4f 	dsb	sy
 80030a8:	60bb      	str	r3, [r7, #8]
    }
 80030aa:	bf00      	nop
 80030ac:	e7fe      	b.n	80030ac <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	685a      	ldr	r2, [r3, #4]
 80030b2:	4b14      	ldr	r3, [pc, #80]	; (8003104 <vPortFree+0xb8>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4013      	ands	r3, r2
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d01e      	beq.n	80030fa <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d11a      	bne.n	80030fa <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	685a      	ldr	r2, [r3, #4]
 80030c8:	4b0e      	ldr	r3, [pc, #56]	; (8003104 <vPortFree+0xb8>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	43db      	mvns	r3, r3
 80030ce:	401a      	ands	r2, r3
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80030d4:	f7ff f966 	bl	80023a4 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	685a      	ldr	r2, [r3, #4]
 80030dc:	4b0a      	ldr	r3, [pc, #40]	; (8003108 <vPortFree+0xbc>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4413      	add	r3, r2
 80030e2:	4a09      	ldr	r2, [pc, #36]	; (8003108 <vPortFree+0xbc>)
 80030e4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80030e6:	6938      	ldr	r0, [r7, #16]
 80030e8:	f000 f874 	bl	80031d4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80030ec:	4b07      	ldr	r3, [pc, #28]	; (800310c <vPortFree+0xc0>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	3301      	adds	r3, #1
 80030f2:	4a06      	ldr	r2, [pc, #24]	; (800310c <vPortFree+0xc0>)
 80030f4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80030f6:	f7ff f963 	bl	80023c0 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80030fa:	bf00      	nop
 80030fc:	3718      	adds	r7, #24
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	20012dac 	.word	0x20012dac
 8003108:	20012d9c 	.word	0x20012d9c
 800310c:	20012da8 	.word	0x20012da8

08003110 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003110:	b480      	push	{r7}
 8003112:	b085      	sub	sp, #20
 8003114:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003116:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800311a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800311c:	4b27      	ldr	r3, [pc, #156]	; (80031bc <prvHeapInit+0xac>)
 800311e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	f003 0307 	and.w	r3, r3, #7
 8003126:	2b00      	cmp	r3, #0
 8003128:	d00c      	beq.n	8003144 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	3307      	adds	r3, #7
 800312e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f023 0307 	bic.w	r3, r3, #7
 8003136:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003138:	68ba      	ldr	r2, [r7, #8]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	4a1f      	ldr	r2, [pc, #124]	; (80031bc <prvHeapInit+0xac>)
 8003140:	4413      	add	r3, r2
 8003142:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003148:	4a1d      	ldr	r2, [pc, #116]	; (80031c0 <prvHeapInit+0xb0>)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800314e:	4b1c      	ldr	r3, [pc, #112]	; (80031c0 <prvHeapInit+0xb0>)
 8003150:	2200      	movs	r2, #0
 8003152:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	68ba      	ldr	r2, [r7, #8]
 8003158:	4413      	add	r3, r2
 800315a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800315c:	2208      	movs	r2, #8
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	1a9b      	subs	r3, r3, r2
 8003162:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f023 0307 	bic.w	r3, r3, #7
 800316a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	4a15      	ldr	r2, [pc, #84]	; (80031c4 <prvHeapInit+0xb4>)
 8003170:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003172:	4b14      	ldr	r3, [pc, #80]	; (80031c4 <prvHeapInit+0xb4>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	2200      	movs	r2, #0
 8003178:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800317a:	4b12      	ldr	r3, [pc, #72]	; (80031c4 <prvHeapInit+0xb4>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	2200      	movs	r2, #0
 8003180:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	68fa      	ldr	r2, [r7, #12]
 800318a:	1ad2      	subs	r2, r2, r3
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003190:	4b0c      	ldr	r3, [pc, #48]	; (80031c4 <prvHeapInit+0xb4>)
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	4a0a      	ldr	r2, [pc, #40]	; (80031c8 <prvHeapInit+0xb8>)
 800319e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	4a09      	ldr	r2, [pc, #36]	; (80031cc <prvHeapInit+0xbc>)
 80031a6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80031a8:	4b09      	ldr	r3, [pc, #36]	; (80031d0 <prvHeapInit+0xc0>)
 80031aa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80031ae:	601a      	str	r2, [r3, #0]
}
 80031b0:	bf00      	nop
 80031b2:	3714      	adds	r7, #20
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr
 80031bc:	20000190 	.word	0x20000190
 80031c0:	20012d90 	.word	0x20012d90
 80031c4:	20012d98 	.word	0x20012d98
 80031c8:	20012da0 	.word	0x20012da0
 80031cc:	20012d9c 	.word	0x20012d9c
 80031d0:	20012dac 	.word	0x20012dac

080031d4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80031d4:	b480      	push	{r7}
 80031d6:	b085      	sub	sp, #20
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80031dc:	4b28      	ldr	r3, [pc, #160]	; (8003280 <prvInsertBlockIntoFreeList+0xac>)
 80031de:	60fb      	str	r3, [r7, #12]
 80031e0:	e002      	b.n	80031e8 <prvInsertBlockIntoFreeList+0x14>
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	60fb      	str	r3, [r7, #12]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d8f7      	bhi.n	80031e2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	68ba      	ldr	r2, [r7, #8]
 80031fc:	4413      	add	r3, r2
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	429a      	cmp	r2, r3
 8003202:	d108      	bne.n	8003216 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	685a      	ldr	r2, [r3, #4]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	441a      	add	r2, r3
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	68ba      	ldr	r2, [r7, #8]
 8003220:	441a      	add	r2, r3
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	429a      	cmp	r2, r3
 8003228:	d118      	bne.n	800325c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	4b15      	ldr	r3, [pc, #84]	; (8003284 <prvInsertBlockIntoFreeList+0xb0>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	429a      	cmp	r2, r3
 8003234:	d00d      	beq.n	8003252 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	685a      	ldr	r2, [r3, #4]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	441a      	add	r2, r3
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	601a      	str	r2, [r3, #0]
 8003250:	e008      	b.n	8003264 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003252:	4b0c      	ldr	r3, [pc, #48]	; (8003284 <prvInsertBlockIntoFreeList+0xb0>)
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	601a      	str	r2, [r3, #0]
 800325a:	e003      	b.n	8003264 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003264:	68fa      	ldr	r2, [r7, #12]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	429a      	cmp	r2, r3
 800326a:	d002      	beq.n	8003272 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003272:	bf00      	nop
 8003274:	3714      	adds	r7, #20
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr
 800327e:	bf00      	nop
 8003280:	20012d90 	.word	0x20012d90
 8003284:	20012d98 	.word	0x20012d98

08003288 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8003288:	b580      	push	{r7, lr}
 800328a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 800328c:	4803      	ldr	r0, [pc, #12]	; (800329c <_cbSendSystemDesc+0x14>)
 800328e:	f001 ff99 	bl	80051c4 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8003292:	4803      	ldr	r0, [pc, #12]	; (80032a0 <_cbSendSystemDesc+0x18>)
 8003294:	f001 ff96 	bl	80051c4 <SEGGER_SYSVIEW_SendSysDesc>
}
 8003298:	bf00      	nop
 800329a:	bd80      	pop	{r7, pc}
 800329c:	0800593c 	.word	0x0800593c
 80032a0:	08005980 	.word	0x08005980

080032a4 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80032a4:	b580      	push	{r7, lr}
 80032a6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80032a8:	4b06      	ldr	r3, [pc, #24]	; (80032c4 <SEGGER_SYSVIEW_Conf+0x20>)
 80032aa:	6818      	ldr	r0, [r3, #0]
 80032ac:	4b05      	ldr	r3, [pc, #20]	; (80032c4 <SEGGER_SYSVIEW_Conf+0x20>)
 80032ae:	6819      	ldr	r1, [r3, #0]
 80032b0:	4b05      	ldr	r3, [pc, #20]	; (80032c8 <SEGGER_SYSVIEW_Conf+0x24>)
 80032b2:	4a06      	ldr	r2, [pc, #24]	; (80032cc <SEGGER_SYSVIEW_Conf+0x28>)
 80032b4:	f001 fc0a 	bl	8004acc <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80032b8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80032bc:	f001 fc4a 	bl	8004b54 <SEGGER_SYSVIEW_SetRAMBase>
}
 80032c0:	bf00      	nop
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	20000000 	.word	0x20000000
 80032c8:	08003289 	.word	0x08003289
 80032cc:	08005a20 	.word	0x08005a20

080032d0 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80032d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032d2:	b085      	sub	sp, #20
 80032d4:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80032d6:	2300      	movs	r3, #0
 80032d8:	607b      	str	r3, [r7, #4]
 80032da:	e033      	b.n	8003344 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80032dc:	491e      	ldr	r1, [pc, #120]	; (8003358 <_cbSendTaskList+0x88>)
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	4613      	mov	r3, r2
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	4413      	add	r3, r2
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	440b      	add	r3, r1
 80032ea:	6818      	ldr	r0, [r3, #0]
 80032ec:	491a      	ldr	r1, [pc, #104]	; (8003358 <_cbSendTaskList+0x88>)
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	4613      	mov	r3, r2
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	4413      	add	r3, r2
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	440b      	add	r3, r1
 80032fa:	3304      	adds	r3, #4
 80032fc:	6819      	ldr	r1, [r3, #0]
 80032fe:	4c16      	ldr	r4, [pc, #88]	; (8003358 <_cbSendTaskList+0x88>)
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	4613      	mov	r3, r2
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	4413      	add	r3, r2
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	4423      	add	r3, r4
 800330c:	3308      	adds	r3, #8
 800330e:	681c      	ldr	r4, [r3, #0]
 8003310:	4d11      	ldr	r5, [pc, #68]	; (8003358 <_cbSendTaskList+0x88>)
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	4613      	mov	r3, r2
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	4413      	add	r3, r2
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	442b      	add	r3, r5
 800331e:	330c      	adds	r3, #12
 8003320:	681d      	ldr	r5, [r3, #0]
 8003322:	4e0d      	ldr	r6, [pc, #52]	; (8003358 <_cbSendTaskList+0x88>)
 8003324:	687a      	ldr	r2, [r7, #4]
 8003326:	4613      	mov	r3, r2
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	4413      	add	r3, r2
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	4433      	add	r3, r6
 8003330:	3310      	adds	r3, #16
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	9300      	str	r3, [sp, #0]
 8003336:	462b      	mov	r3, r5
 8003338:	4622      	mov	r2, r4
 800333a:	f000 f8bd 	bl	80034b8 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	3301      	adds	r3, #1
 8003342:	607b      	str	r3, [r7, #4]
 8003344:	4b05      	ldr	r3, [pc, #20]	; (800335c <_cbSendTaskList+0x8c>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	687a      	ldr	r2, [r7, #4]
 800334a:	429a      	cmp	r2, r3
 800334c:	d3c6      	bcc.n	80032dc <_cbSendTaskList+0xc>
  }
}
 800334e:	bf00      	nop
 8003350:	bf00      	nop
 8003352:	370c      	adds	r7, #12
 8003354:	46bd      	mov	sp, r7
 8003356:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003358:	20012db0 	.word	0x20012db0
 800335c:	20012e50 	.word	0x20012e50

08003360 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8003360:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003364:	b082      	sub	sp, #8
 8003366:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8003368:	f7ff f8ca 	bl	8002500 <xTaskGetTickCountFromISR>
 800336c:	4603      	mov	r3, r0
 800336e:	2200      	movs	r2, #0
 8003370:	469a      	mov	sl, r3
 8003372:	4693      	mov	fp, r2
 8003374:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8003378:	e9d7 0100 	ldrd	r0, r1, [r7]
 800337c:	4602      	mov	r2, r0
 800337e:	460b      	mov	r3, r1
 8003380:	f04f 0a00 	mov.w	sl, #0
 8003384:	f04f 0b00 	mov.w	fp, #0
 8003388:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 800338c:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8003390:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8003394:	4652      	mov	r2, sl
 8003396:	465b      	mov	r3, fp
 8003398:	1a14      	subs	r4, r2, r0
 800339a:	eb63 0501 	sbc.w	r5, r3, r1
 800339e:	f04f 0200 	mov.w	r2, #0
 80033a2:	f04f 0300 	mov.w	r3, #0
 80033a6:	00ab      	lsls	r3, r5, #2
 80033a8:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80033ac:	00a2      	lsls	r2, r4, #2
 80033ae:	4614      	mov	r4, r2
 80033b0:	461d      	mov	r5, r3
 80033b2:	eb14 0800 	adds.w	r8, r4, r0
 80033b6:	eb45 0901 	adc.w	r9, r5, r1
 80033ba:	f04f 0200 	mov.w	r2, #0
 80033be:	f04f 0300 	mov.w	r3, #0
 80033c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80033c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80033ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80033ce:	4690      	mov	r8, r2
 80033d0:	4699      	mov	r9, r3
 80033d2:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 80033d6:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80033da:	4610      	mov	r0, r2
 80033dc:	4619      	mov	r1, r3
 80033de:	3708      	adds	r7, #8
 80033e0:	46bd      	mov	sp, r7
 80033e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080033e8 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b086      	sub	sp, #24
 80033ec:	af02      	add	r7, sp, #8
 80033ee:	60f8      	str	r0, [r7, #12]
 80033f0:	60b9      	str	r1, [r7, #8]
 80033f2:	607a      	str	r2, [r7, #4]
 80033f4:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80033f6:	2205      	movs	r2, #5
 80033f8:	492b      	ldr	r1, [pc, #172]	; (80034a8 <SYSVIEW_AddTask+0xc0>)
 80033fa:	68b8      	ldr	r0, [r7, #8]
 80033fc:	f002 fa32 	bl	8005864 <memcmp>
 8003400:	4603      	mov	r3, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	d04b      	beq.n	800349e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8003406:	4b29      	ldr	r3, [pc, #164]	; (80034ac <SYSVIEW_AddTask+0xc4>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	2b07      	cmp	r3, #7
 800340c:	d903      	bls.n	8003416 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800340e:	4828      	ldr	r0, [pc, #160]	; (80034b0 <SYSVIEW_AddTask+0xc8>)
 8003410:	f002 f97a 	bl	8005708 <SEGGER_SYSVIEW_Warn>
    return;
 8003414:	e044      	b.n	80034a0 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8003416:	4b25      	ldr	r3, [pc, #148]	; (80034ac <SYSVIEW_AddTask+0xc4>)
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	4926      	ldr	r1, [pc, #152]	; (80034b4 <SYSVIEW_AddTask+0xcc>)
 800341c:	4613      	mov	r3, r2
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	4413      	add	r3, r2
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	440b      	add	r3, r1
 8003426:	68fa      	ldr	r2, [r7, #12]
 8003428:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800342a:	4b20      	ldr	r3, [pc, #128]	; (80034ac <SYSVIEW_AddTask+0xc4>)
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	4921      	ldr	r1, [pc, #132]	; (80034b4 <SYSVIEW_AddTask+0xcc>)
 8003430:	4613      	mov	r3, r2
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	4413      	add	r3, r2
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	440b      	add	r3, r1
 800343a:	3304      	adds	r3, #4
 800343c:	68ba      	ldr	r2, [r7, #8]
 800343e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8003440:	4b1a      	ldr	r3, [pc, #104]	; (80034ac <SYSVIEW_AddTask+0xc4>)
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	491b      	ldr	r1, [pc, #108]	; (80034b4 <SYSVIEW_AddTask+0xcc>)
 8003446:	4613      	mov	r3, r2
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	4413      	add	r3, r2
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	440b      	add	r3, r1
 8003450:	3308      	adds	r3, #8
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8003456:	4b15      	ldr	r3, [pc, #84]	; (80034ac <SYSVIEW_AddTask+0xc4>)
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	4916      	ldr	r1, [pc, #88]	; (80034b4 <SYSVIEW_AddTask+0xcc>)
 800345c:	4613      	mov	r3, r2
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	4413      	add	r3, r2
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	440b      	add	r3, r1
 8003466:	330c      	adds	r3, #12
 8003468:	683a      	ldr	r2, [r7, #0]
 800346a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800346c:	4b0f      	ldr	r3, [pc, #60]	; (80034ac <SYSVIEW_AddTask+0xc4>)
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	4910      	ldr	r1, [pc, #64]	; (80034b4 <SYSVIEW_AddTask+0xcc>)
 8003472:	4613      	mov	r3, r2
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	4413      	add	r3, r2
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	440b      	add	r3, r1
 800347c:	3310      	adds	r3, #16
 800347e:	69ba      	ldr	r2, [r7, #24]
 8003480:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8003482:	4b0a      	ldr	r3, [pc, #40]	; (80034ac <SYSVIEW_AddTask+0xc4>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	3301      	adds	r3, #1
 8003488:	4a08      	ldr	r2, [pc, #32]	; (80034ac <SYSVIEW_AddTask+0xc4>)
 800348a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800348c:	69bb      	ldr	r3, [r7, #24]
 800348e:	9300      	str	r3, [sp, #0]
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	68b9      	ldr	r1, [r7, #8]
 8003496:	68f8      	ldr	r0, [r7, #12]
 8003498:	f000 f80e 	bl	80034b8 <SYSVIEW_SendTaskInfo>
 800349c:	e000      	b.n	80034a0 <SYSVIEW_AddTask+0xb8>
    return;
 800349e:	bf00      	nop

}
 80034a0:	3710      	adds	r7, #16
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	08005990 	.word	0x08005990
 80034ac:	20012e50 	.word	0x20012e50
 80034b0:	08005998 	.word	0x08005998
 80034b4:	20012db0 	.word	0x20012db0

080034b8 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b08a      	sub	sp, #40	; 0x28
 80034bc:	af00      	add	r7, sp, #0
 80034be:	60f8      	str	r0, [r7, #12]
 80034c0:	60b9      	str	r1, [r7, #8]
 80034c2:	607a      	str	r2, [r7, #4]
 80034c4:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80034c6:	f107 0314 	add.w	r3, r7, #20
 80034ca:	2214      	movs	r2, #20
 80034cc:	2100      	movs	r1, #0
 80034ce:	4618      	mov	r0, r3
 80034d0:	f002 f9e6 	bl	80058a0 <memset>
  TaskInfo.TaskID     = TaskID;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 80034e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034e6:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80034e8:	f107 0314 	add.w	r3, r7, #20
 80034ec:	4618      	mov	r0, r3
 80034ee:	f001 fd71 	bl	8004fd4 <SEGGER_SYSVIEW_SendTaskInfo>
}
 80034f2:	bf00      	nop
 80034f4:	3728      	adds	r7, #40	; 0x28
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
	...

080034fc <__NVIC_EnableIRQ>:
{
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
 8003502:	4603      	mov	r3, r0
 8003504:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800350a:	2b00      	cmp	r3, #0
 800350c:	db0b      	blt.n	8003526 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800350e:	79fb      	ldrb	r3, [r7, #7]
 8003510:	f003 021f 	and.w	r2, r3, #31
 8003514:	4907      	ldr	r1, [pc, #28]	; (8003534 <__NVIC_EnableIRQ+0x38>)
 8003516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800351a:	095b      	lsrs	r3, r3, #5
 800351c:	2001      	movs	r0, #1
 800351e:	fa00 f202 	lsl.w	r2, r0, r2
 8003522:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003526:	bf00      	nop
 8003528:	370c      	adds	r7, #12
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr
 8003532:	bf00      	nop
 8003534:	e000e100 	.word	0xe000e100

08003538 <__NVIC_SetPriority>:
{
 8003538:	b480      	push	{r7}
 800353a:	b083      	sub	sp, #12
 800353c:	af00      	add	r7, sp, #0
 800353e:	4603      	mov	r3, r0
 8003540:	6039      	str	r1, [r7, #0]
 8003542:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003544:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003548:	2b00      	cmp	r3, #0
 800354a:	db0a      	blt.n	8003562 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	b2da      	uxtb	r2, r3
 8003550:	490c      	ldr	r1, [pc, #48]	; (8003584 <__NVIC_SetPriority+0x4c>)
 8003552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003556:	0112      	lsls	r2, r2, #4
 8003558:	b2d2      	uxtb	r2, r2
 800355a:	440b      	add	r3, r1
 800355c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003560:	e00a      	b.n	8003578 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	b2da      	uxtb	r2, r3
 8003566:	4908      	ldr	r1, [pc, #32]	; (8003588 <__NVIC_SetPriority+0x50>)
 8003568:	79fb      	ldrb	r3, [r7, #7]
 800356a:	f003 030f 	and.w	r3, r3, #15
 800356e:	3b04      	subs	r3, #4
 8003570:	0112      	lsls	r2, r2, #4
 8003572:	b2d2      	uxtb	r2, r2
 8003574:	440b      	add	r3, r1
 8003576:	761a      	strb	r2, [r3, #24]
}
 8003578:	bf00      	nop
 800357a:	370c      	adds	r7, #12
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr
 8003584:	e000e100 	.word	0xe000e100
 8003588:	e000ed00 	.word	0xe000ed00

0800358c <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 800358c:	b580      	push	{r7, lr}
 800358e:	b082      	sub	sp, #8
 8003590:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 8003592:	f002 f915 	bl	80057c0 <SEGGER_SYSVIEW_IsStarted>
 8003596:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d101      	bne.n	80035a2 <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 800359e:	f001 fb9d 	bl	8004cdc <SEGGER_SYSVIEW_Start>
  }
}
 80035a2:	bf00      	nop
 80035a4:	3708      	adds	r7, #8
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
	...

080035ac <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b082      	sub	sp, #8
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	4603      	mov	r3, r0
 80035b4:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 80035b6:	4b0c      	ldr	r3, [pc, #48]	; (80035e8 <_cbOnUARTRx+0x3c>)
 80035b8:	781b      	ldrb	r3, [r3, #0]
 80035ba:	2b03      	cmp	r3, #3
 80035bc:	d806      	bhi.n	80035cc <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 80035be:	4b0a      	ldr	r3, [pc, #40]	; (80035e8 <_cbOnUARTRx+0x3c>)
 80035c0:	781b      	ldrb	r3, [r3, #0]
 80035c2:	3301      	adds	r3, #1
 80035c4:	b2da      	uxtb	r2, r3
 80035c6:	4b08      	ldr	r3, [pc, #32]	; (80035e8 <_cbOnUARTRx+0x3c>)
 80035c8:	701a      	strb	r2, [r3, #0]
    goto Done;
 80035ca:	e009      	b.n	80035e0 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 80035cc:	f7ff ffde 	bl	800358c <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 80035d0:	4b05      	ldr	r3, [pc, #20]	; (80035e8 <_cbOnUARTRx+0x3c>)
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	4618      	mov	r0, r3
 80035d6:	1dfb      	adds	r3, r7, #7
 80035d8:	2201      	movs	r2, #1
 80035da:	4619      	mov	r1, r3
 80035dc:	f000 fb9a 	bl	8003d14 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 80035e0:	bf00      	nop
}
 80035e2:	3708      	adds	r7, #8
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	20000014 	.word	0x20000014

080035ec <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b084      	sub	sp, #16
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 80035f4:	4b14      	ldr	r3, [pc, #80]	; (8003648 <_cbOnUARTTx+0x5c>)
 80035f6:	785b      	ldrb	r3, [r3, #1]
 80035f8:	2b03      	cmp	r3, #3
 80035fa:	d80f      	bhi.n	800361c <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 80035fc:	4b12      	ldr	r3, [pc, #72]	; (8003648 <_cbOnUARTTx+0x5c>)
 80035fe:	785b      	ldrb	r3, [r3, #1]
 8003600:	461a      	mov	r2, r3
 8003602:	4b12      	ldr	r3, [pc, #72]	; (800364c <_cbOnUARTTx+0x60>)
 8003604:	5c9a      	ldrb	r2, [r3, r2]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 800360a:	4b0f      	ldr	r3, [pc, #60]	; (8003648 <_cbOnUARTTx+0x5c>)
 800360c:	785b      	ldrb	r3, [r3, #1]
 800360e:	3301      	adds	r3, #1
 8003610:	b2da      	uxtb	r2, r3
 8003612:	4b0d      	ldr	r3, [pc, #52]	; (8003648 <_cbOnUARTTx+0x5c>)
 8003614:	705a      	strb	r2, [r3, #1]
    r = 1;
 8003616:	2301      	movs	r3, #1
 8003618:	60fb      	str	r3, [r7, #12]
    goto Done;
 800361a:	e00f      	b.n	800363c <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 800361c:	4b0a      	ldr	r3, [pc, #40]	; (8003648 <_cbOnUARTTx+0x5c>)
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	2201      	movs	r2, #1
 8003622:	6879      	ldr	r1, [r7, #4]
 8003624:	4618      	mov	r0, r3
 8003626:	f000 fa19 	bl	8003a5c <SEGGER_RTT_ReadUpBufferNoLock>
 800362a:	4603      	mov	r3, r0
 800362c:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2b00      	cmp	r3, #0
 8003632:	da02      	bge.n	800363a <_cbOnUARTTx+0x4e>
    r = 0;
 8003634:	2300      	movs	r3, #0
 8003636:	60fb      	str	r3, [r7, #12]
 8003638:	e000      	b.n	800363c <_cbOnUARTTx+0x50>
  }
Done:
 800363a:	bf00      	nop
  return r;
 800363c:	68fb      	ldr	r3, [r7, #12]
}
 800363e:	4618      	mov	r0, r3
 8003640:	3710      	adds	r7, #16
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	20000014 	.word	0x20000014
 800364c:	08005a28 	.word	0x08005a28

08003650 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b082      	sub	sp, #8
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8003658:	4a04      	ldr	r2, [pc, #16]	; (800366c <SEGGER_UART_init+0x1c>)
 800365a:	4905      	ldr	r1, [pc, #20]	; (8003670 <SEGGER_UART_init+0x20>)
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f000 f863 	bl	8003728 <HIF_UART_Init>
}
 8003662:	bf00      	nop
 8003664:	3708      	adds	r7, #8
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	080035ad 	.word	0x080035ad
 8003670:	080035ed 	.word	0x080035ed

08003674 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8003674:	b580      	push	{r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 800367a:	4b1e      	ldr	r3, [pc, #120]	; (80036f4 <USART2_IRQHandler+0x80>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f003 0320 	and.w	r3, r3, #32
 8003686:	2b00      	cmp	r3, #0
 8003688:	d011      	beq.n	80036ae <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 800368a:	4b1b      	ldr	r3, [pc, #108]	; (80036f8 <USART2_IRQHandler+0x84>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	b2db      	uxtb	r3, r3
 8003690:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	f003 030b 	and.w	r3, r3, #11
 8003698:	2b00      	cmp	r3, #0
 800369a:	d108      	bne.n	80036ae <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 800369c:	4b17      	ldr	r3, [pc, #92]	; (80036fc <USART2_IRQHandler+0x88>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d004      	beq.n	80036ae <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 80036a4:	4b15      	ldr	r3, [pc, #84]	; (80036fc <USART2_IRQHandler+0x88>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	79fa      	ldrb	r2, [r7, #7]
 80036aa:	4610      	mov	r0, r2
 80036ac:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d01a      	beq.n	80036ee <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 80036b8:	4b11      	ldr	r3, [pc, #68]	; (8003700 <USART2_IRQHandler+0x8c>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d015      	beq.n	80036ec <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 80036c0:	4b0f      	ldr	r3, [pc, #60]	; (8003700 <USART2_IRQHandler+0x8c>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	1dfa      	adds	r2, r7, #7
 80036c6:	4610      	mov	r0, r2
 80036c8:	4798      	blx	r3
 80036ca:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d106      	bne.n	80036e0 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 80036d2:	4b0c      	ldr	r3, [pc, #48]	; (8003704 <USART2_IRQHandler+0x90>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a0b      	ldr	r2, [pc, #44]	; (8003704 <USART2_IRQHandler+0x90>)
 80036d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036dc:	6013      	str	r3, [r2, #0]
 80036de:	e006      	b.n	80036ee <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 80036e0:	4b04      	ldr	r3, [pc, #16]	; (80036f4 <USART2_IRQHandler+0x80>)
 80036e2:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 80036e4:	79fa      	ldrb	r2, [r7, #7]
 80036e6:	4b04      	ldr	r3, [pc, #16]	; (80036f8 <USART2_IRQHandler+0x84>)
 80036e8:	601a      	str	r2, [r3, #0]
 80036ea:	e000      	b.n	80036ee <USART2_IRQHandler+0x7a>
      return;
 80036ec:	bf00      	nop
    }
  }
}
 80036ee:	3710      	adds	r7, #16
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	40004400 	.word	0x40004400
 80036f8:	40004404 	.word	0x40004404
 80036fc:	20012e54 	.word	0x20012e54
 8003700:	20012e58 	.word	0x20012e58
 8003704:	4000440c 	.word	0x4000440c

08003708 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8003708:	b480      	push	{r7}
 800370a:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 800370c:	4b05      	ldr	r3, [pc, #20]	; (8003724 <HIF_UART_EnableTXEInterrupt+0x1c>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a04      	ldr	r2, [pc, #16]	; (8003724 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8003712:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003716:	6013      	str	r3, [r2, #0]
}
 8003718:	bf00      	nop
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr
 8003722:	bf00      	nop
 8003724:	4000440c 	.word	0x4000440c

08003728 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8003728:	b580      	push	{r7, lr}
 800372a:	b086      	sub	sp, #24
 800372c:	af00      	add	r7, sp, #0
 800372e:	60f8      	str	r0, [r7, #12]
 8003730:	60b9      	str	r1, [r7, #8]
 8003732:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8003734:	4b2e      	ldr	r3, [pc, #184]	; (80037f0 <HIF_UART_Init+0xc8>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a2d      	ldr	r2, [pc, #180]	; (80037f0 <HIF_UART_Init+0xc8>)
 800373a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800373e:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8003740:	4b2c      	ldr	r3, [pc, #176]	; (80037f4 <HIF_UART_Init+0xcc>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a2b      	ldr	r2, [pc, #172]	; (80037f4 <HIF_UART_Init+0xcc>)
 8003746:	f043 0301 	orr.w	r3, r3, #1
 800374a:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 800374c:	4b2a      	ldr	r3, [pc, #168]	; (80037f8 <HIF_UART_Init+0xd0>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003758:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8003760:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8003762:	4a25      	ldr	r2, [pc, #148]	; (80037f8 <HIF_UART_Init+0xd0>)
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8003768:	4b24      	ldr	r3, [pc, #144]	; (80037fc <HIF_UART_Init+0xd4>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003774:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 800377c:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 800377e:	4a1f      	ldr	r2, [pc, #124]	; (80037fc <HIF_UART_Init+0xd4>)
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8003784:	4b1e      	ldr	r3, [pc, #120]	; (8003800 <HIF_UART_Init+0xd8>)
 8003786:	f24a 022c 	movw	r2, #41004	; 0xa02c
 800378a:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 800378c:	4b1d      	ldr	r3, [pc, #116]	; (8003804 <HIF_UART_Init+0xdc>)
 800378e:	2200      	movs	r2, #0
 8003790:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8003792:	4b1d      	ldr	r3, [pc, #116]	; (8003808 <HIF_UART_Init+0xe0>)
 8003794:	2280      	movs	r2, #128	; 0x80
 8003796:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	00db      	lsls	r3, r3, #3
 800379c:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 800379e:	4a1b      	ldr	r2, [pc, #108]	; (800380c <HIF_UART_Init+0xe4>)
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80037a6:	3301      	adds	r3, #1
 80037a8:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	085b      	lsrs	r3, r3, #1
 80037ae:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037b6:	d302      	bcc.n	80037be <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 80037b8:	f640 73ff 	movw	r3, #4095	; 0xfff
 80037bc:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d004      	beq.n	80037ce <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	011b      	lsls	r3, r3, #4
 80037c8:	4a11      	ldr	r2, [pc, #68]	; (8003810 <HIF_UART_Init+0xe8>)
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 80037ce:	4a11      	ldr	r2, [pc, #68]	; (8003814 <HIF_UART_Init+0xec>)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 80037d4:	4a10      	ldr	r2, [pc, #64]	; (8003818 <HIF_UART_Init+0xf0>)
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 80037da:	2106      	movs	r1, #6
 80037dc:	2026      	movs	r0, #38	; 0x26
 80037de:	f7ff feab 	bl	8003538 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 80037e2:	2026      	movs	r0, #38	; 0x26
 80037e4:	f7ff fe8a 	bl	80034fc <__NVIC_EnableIRQ>
}
 80037e8:	bf00      	nop
 80037ea:	3718      	adds	r7, #24
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	40023840 	.word	0x40023840
 80037f4:	40023830 	.word	0x40023830
 80037f8:	40020020 	.word	0x40020020
 80037fc:	40020000 	.word	0x40020000
 8003800:	4000440c 	.word	0x4000440c
 8003804:	40004410 	.word	0x40004410
 8003808:	40004414 	.word	0x40004414
 800380c:	0501bd00 	.word	0x0501bd00
 8003810:	40004408 	.word	0x40004408
 8003814:	20012e54 	.word	0x20012e54
 8003818:	20012e58 	.word	0x20012e58

0800381c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8003822:	4b24      	ldr	r3, [pc, #144]	; (80038b4 <_DoInit+0x98>)
 8003824:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2203      	movs	r2, #3
 800382a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2203      	movs	r2, #3
 8003830:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4a20      	ldr	r2, [pc, #128]	; (80038b8 <_DoInit+0x9c>)
 8003836:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	4a20      	ldr	r2, [pc, #128]	; (80038bc <_DoInit+0xa0>)
 800383c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003844:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2200      	movs	r2, #0
 8003850:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	4a17      	ldr	r2, [pc, #92]	; (80038b8 <_DoInit+0x9c>)
 800385c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4a17      	ldr	r2, [pc, #92]	; (80038c0 <_DoInit+0xa4>)
 8003862:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2210      	movs	r2, #16
 8003868:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2200      	movs	r2, #0
 800386e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2200      	movs	r2, #0
 8003874:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	3307      	adds	r3, #7
 8003880:	4a10      	ldr	r2, [pc, #64]	; (80038c4 <_DoInit+0xa8>)
 8003882:	6810      	ldr	r0, [r2, #0]
 8003884:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003886:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4a0e      	ldr	r2, [pc, #56]	; (80038c8 <_DoInit+0xac>)
 800388e:	6810      	ldr	r0, [r2, #0]
 8003890:	6018      	str	r0, [r3, #0]
 8003892:	8891      	ldrh	r1, [r2, #4]
 8003894:	7992      	ldrb	r2, [r2, #6]
 8003896:	8099      	strh	r1, [r3, #4]
 8003898:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800389a:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2220      	movs	r2, #32
 80038a2:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80038a4:	f3bf 8f5f 	dmb	sy
}
 80038a8:	bf00      	nop
 80038aa:	370c      	adds	r7, #12
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr
 80038b4:	20012e5c 	.word	0x20012e5c
 80038b8:	080059e8 	.word	0x080059e8
 80038bc:	20012f04 	.word	0x20012f04
 80038c0:	20013304 	.word	0x20013304
 80038c4:	080059f4 	.word	0x080059f4
 80038c8:	080059f8 	.word	0x080059f8

080038cc <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b08a      	sub	sp, #40	; 0x28
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	60f8      	str	r0, [r7, #12]
 80038d4:	60b9      	str	r1, [r7, #8]
 80038d6:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 80038d8:	2300      	movs	r3, #0
 80038da:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 80038e8:	69ba      	ldr	r2, [r7, #24]
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d905      	bls.n	80038fc <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 80038f0:	69ba      	ldr	r2, [r7, #24]
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	3b01      	subs	r3, #1
 80038f8:	627b      	str	r3, [r7, #36]	; 0x24
 80038fa:	e007      	b.n	800390c <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	689a      	ldr	r2, [r3, #8]
 8003900:	69b9      	ldr	r1, [r7, #24]
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	1acb      	subs	r3, r1, r3
 8003906:	4413      	add	r3, r2
 8003908:	3b01      	subs	r3, #1
 800390a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	689a      	ldr	r2, [r3, #8]
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	1ad3      	subs	r3, r2, r3
 8003914:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003916:	4293      	cmp	r3, r2
 8003918:	bf28      	it	cs
 800391a:	4613      	movcs	r3, r2
 800391c:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 800391e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	4293      	cmp	r3, r2
 8003924:	bf28      	it	cs
 8003926:	4613      	movcs	r3, r2
 8003928:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	685a      	ldr	r2, [r3, #4]
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	4413      	add	r3, r2
 8003932:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8003934:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003936:	68b9      	ldr	r1, [r7, #8]
 8003938:	6978      	ldr	r0, [r7, #20]
 800393a:	f001 ffa3 	bl	8005884 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 800393e:	6a3a      	ldr	r2, [r7, #32]
 8003940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003942:	4413      	add	r3, r2
 8003944:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8003946:	68ba      	ldr	r2, [r7, #8]
 8003948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394a:	4413      	add	r3, r2
 800394c:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8003956:	69fa      	ldr	r2, [r7, #28]
 8003958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800395a:	4413      	add	r3, r2
 800395c:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	69fa      	ldr	r2, [r7, #28]
 8003964:	429a      	cmp	r2, r3
 8003966:	d101      	bne.n	800396c <_WriteBlocking+0xa0>
      WrOff = 0u;
 8003968:	2300      	movs	r3, #0
 800396a:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800396c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	69fa      	ldr	r2, [r7, #28]
 8003974:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d1b2      	bne.n	80038e2 <_WriteBlocking+0x16>
  return NumBytesWritten;
 800397c:	6a3b      	ldr	r3, [r7, #32]
}
 800397e:	4618      	mov	r0, r3
 8003980:	3728      	adds	r7, #40	; 0x28
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}

08003986 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8003986:	b580      	push	{r7, lr}
 8003988:	b088      	sub	sp, #32
 800398a:	af00      	add	r7, sp, #0
 800398c:	60f8      	str	r0, [r7, #12]
 800398e:	60b9      	str	r1, [r7, #8]
 8003990:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	689a      	ldr	r2, [r3, #8]
 800399c:	69fb      	ldr	r3, [r7, #28]
 800399e:	1ad3      	subs	r3, r2, r3
 80039a0:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 80039a2:	69ba      	ldr	r2, [r7, #24]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d911      	bls.n	80039ce <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	685a      	ldr	r2, [r3, #4]
 80039ae:	69fb      	ldr	r3, [r7, #28]
 80039b0:	4413      	add	r3, r2
 80039b2:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	68b9      	ldr	r1, [r7, #8]
 80039b8:	6938      	ldr	r0, [r7, #16]
 80039ba:	f001 ff63 	bl	8005884 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80039be:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 80039c2:	69fa      	ldr	r2, [r7, #28]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	441a      	add	r2, r3
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 80039cc:	e01f      	b.n	8003a0e <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 80039ce:	69bb      	ldr	r3, [r7, #24]
 80039d0:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	685a      	ldr	r2, [r3, #4]
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	4413      	add	r3, r2
 80039da:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 80039dc:	697a      	ldr	r2, [r7, #20]
 80039de:	68b9      	ldr	r1, [r7, #8]
 80039e0:	6938      	ldr	r0, [r7, #16]
 80039e2:	f001 ff4f 	bl	8005884 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	69bb      	ldr	r3, [r7, #24]
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 80039f4:	68ba      	ldr	r2, [r7, #8]
 80039f6:	69bb      	ldr	r3, [r7, #24]
 80039f8:	4413      	add	r3, r2
 80039fa:	697a      	ldr	r2, [r7, #20]
 80039fc:	4619      	mov	r1, r3
 80039fe:	6938      	ldr	r0, [r7, #16]
 8003a00:	f001 ff40 	bl	8005884 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003a04:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	697a      	ldr	r2, [r7, #20]
 8003a0c:	60da      	str	r2, [r3, #12]
}
 8003a0e:	bf00      	nop
 8003a10:	3720      	adds	r7, #32
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}

08003a16 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8003a16:	b480      	push	{r7}
 8003a18:	b087      	sub	sp, #28
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	691b      	ldr	r3, [r3, #16]
 8003a22:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8003a2a:	693a      	ldr	r2, [r7, #16]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d808      	bhi.n	8003a44 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	689a      	ldr	r2, [r3, #8]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	1ad2      	subs	r2, r2, r3
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	4413      	add	r3, r2
 8003a3e:	3b01      	subs	r3, #1
 8003a40:	617b      	str	r3, [r7, #20]
 8003a42:	e004      	b.n	8003a4e <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8003a44:	693a      	ldr	r2, [r7, #16]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	3b01      	subs	r3, #1
 8003a4c:	617b      	str	r3, [r7, #20]
  }
  return r;
 8003a4e:	697b      	ldr	r3, [r7, #20]
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	371c      	adds	r7, #28
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr

08003a5c <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b08c      	sub	sp, #48	; 0x30
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	60f8      	str	r0, [r7, #12]
 8003a64:	60b9      	str	r1, [r7, #8]
 8003a66:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8003a68:	4b3e      	ldr	r3, [pc, #248]	; (8003b64 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8003a6a:	623b      	str	r3, [r7, #32]
 8003a6c:	6a3b      	ldr	r3, [r7, #32]
 8003a6e:	781b      	ldrb	r3, [r3, #0]
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d101      	bne.n	8003a7a <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8003a76:	f7ff fed1 	bl	800381c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	1c5a      	adds	r2, r3, #1
 8003a7e:	4613      	mov	r3, r2
 8003a80:	005b      	lsls	r3, r3, #1
 8003a82:	4413      	add	r3, r2
 8003a84:	00db      	lsls	r3, r3, #3
 8003a86:	4a37      	ldr	r2, [pc, #220]	; (8003b64 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8003a88:	4413      	add	r3, r2
 8003a8a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8003a90:	69fb      	ldr	r3, [r7, #28]
 8003a92:	691b      	ldr	r3, [r3, #16]
 8003a94:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003aa0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003aa2:	69bb      	ldr	r3, [r7, #24]
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d92b      	bls.n	8003b00 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	689a      	ldr	r2, [r3, #8]
 8003aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aae:	1ad3      	subs	r3, r2, r3
 8003ab0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003ab2:	697a      	ldr	r2, [r7, #20]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	bf28      	it	cs
 8003aba:	4613      	movcs	r3, r2
 8003abc:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003abe:	69fb      	ldr	r3, [r7, #28]
 8003ac0:	685a      	ldr	r2, [r3, #4]
 8003ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ac4:	4413      	add	r3, r2
 8003ac6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003ac8:	697a      	ldr	r2, [r7, #20]
 8003aca:	6939      	ldr	r1, [r7, #16]
 8003acc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003ace:	f001 fed9 	bl	8005884 <memcpy>
    NumBytesRead += NumBytesRem;
 8003ad2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	4413      	add	r3, r2
 8003ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003ada:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	4413      	add	r3, r2
 8003ae0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	1ad3      	subs	r3, r2, r3
 8003ae8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003aea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	4413      	add	r3, r2
 8003af0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d101      	bne.n	8003b00 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8003afc:	2300      	movs	r3, #0
 8003afe:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003b00:	69ba      	ldr	r2, [r7, #24]
 8003b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003b08:	697a      	ldr	r2, [r7, #20]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	bf28      	it	cs
 8003b10:	4613      	movcs	r3, r2
 8003b12:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d019      	beq.n	8003b4e <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	685a      	ldr	r2, [r3, #4]
 8003b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b20:	4413      	add	r3, r2
 8003b22:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003b24:	697a      	ldr	r2, [r7, #20]
 8003b26:	6939      	ldr	r1, [r7, #16]
 8003b28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003b2a:	f001 feab 	bl	8005884 <memcpy>
    NumBytesRead += NumBytesRem;
 8003b2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	4413      	add	r3, r2
 8003b34:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003b36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	4413      	add	r3, r2
 8003b3c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003b46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	4413      	add	r3, r2
 8003b4c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8003b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d002      	beq.n	8003b5a <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003b54:	69fb      	ldr	r3, [r7, #28]
 8003b56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b58:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8003b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3730      	adds	r7, #48	; 0x30
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	20012e5c 	.word	0x20012e5c

08003b68 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b08c      	sub	sp, #48	; 0x30
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	60f8      	str	r0, [r7, #12]
 8003b70:	60b9      	str	r1, [r7, #8]
 8003b72:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8003b74:	4b3e      	ldr	r3, [pc, #248]	; (8003c70 <SEGGER_RTT_ReadNoLock+0x108>)
 8003b76:	623b      	str	r3, [r7, #32]
 8003b78:	6a3b      	ldr	r3, [r7, #32]
 8003b7a:	781b      	ldrb	r3, [r3, #0]
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d101      	bne.n	8003b86 <SEGGER_RTT_ReadNoLock+0x1e>
 8003b82:	f7ff fe4b 	bl	800381c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003b86:	68fa      	ldr	r2, [r7, #12]
 8003b88:	4613      	mov	r3, r2
 8003b8a:	005b      	lsls	r3, r3, #1
 8003b8c:	4413      	add	r3, r2
 8003b8e:	00db      	lsls	r3, r3, #3
 8003b90:	3360      	adds	r3, #96	; 0x60
 8003b92:	4a37      	ldr	r2, [pc, #220]	; (8003c70 <SEGGER_RTT_ReadNoLock+0x108>)
 8003b94:	4413      	add	r3, r2
 8003b96:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8003b9c:	69fb      	ldr	r3, [r7, #28]
 8003b9e:	691b      	ldr	r3, [r3, #16]
 8003ba0:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003bac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bae:	69bb      	ldr	r3, [r7, #24]
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d92b      	bls.n	8003c0c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	689a      	ldr	r2, [r3, #8]
 8003bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bba:	1ad3      	subs	r3, r2, r3
 8003bbc:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003bbe:	697a      	ldr	r2, [r7, #20]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	bf28      	it	cs
 8003bc6:	4613      	movcs	r3, r2
 8003bc8:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003bca:	69fb      	ldr	r3, [r7, #28]
 8003bcc:	685a      	ldr	r2, [r3, #4]
 8003bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bd0:	4413      	add	r3, r2
 8003bd2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003bd4:	697a      	ldr	r2, [r7, #20]
 8003bd6:	6939      	ldr	r1, [r7, #16]
 8003bd8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003bda:	f001 fe53 	bl	8005884 <memcpy>
    NumBytesRead += NumBytesRem;
 8003bde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	4413      	add	r3, r2
 8003be4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003be6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	4413      	add	r3, r2
 8003bec:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003bee:	687a      	ldr	r2, [r7, #4]
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	1ad3      	subs	r3, r2, r3
 8003bf4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003bf6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	4413      	add	r3, r2
 8003bfc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003bfe:	69fb      	ldr	r3, [r7, #28]
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d101      	bne.n	8003c0c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003c0c:	69ba      	ldr	r2, [r7, #24]
 8003c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003c14:	697a      	ldr	r2, [r7, #20]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	bf28      	it	cs
 8003c1c:	4613      	movcs	r3, r2
 8003c1e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d019      	beq.n	8003c5a <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003c26:	69fb      	ldr	r3, [r7, #28]
 8003c28:	685a      	ldr	r2, [r3, #4]
 8003c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c2c:	4413      	add	r3, r2
 8003c2e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003c30:	697a      	ldr	r2, [r7, #20]
 8003c32:	6939      	ldr	r1, [r7, #16]
 8003c34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003c36:	f001 fe25 	bl	8005884 <memcpy>
    NumBytesRead += NumBytesRem;
 8003c3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	4413      	add	r3, r2
 8003c40:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003c42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	4413      	add	r3, r2
 8003c48:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	1ad3      	subs	r3, r2, r3
 8003c50:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003c52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	4413      	add	r3, r2
 8003c58:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8003c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d002      	beq.n	8003c66 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c64:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8003c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3730      	adds	r7, #48	; 0x30
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	20012e5c 	.word	0x20012e5c

08003c74 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b088      	sub	sp, #32
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	60f8      	str	r0, [r7, #12]
 8003c7c:	60b9      	str	r1, [r7, #8]
 8003c7e:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003c84:	68fa      	ldr	r2, [r7, #12]
 8003c86:	4613      	mov	r3, r2
 8003c88:	005b      	lsls	r3, r3, #1
 8003c8a:	4413      	add	r3, r2
 8003c8c:	00db      	lsls	r3, r3, #3
 8003c8e:	3360      	adds	r3, #96	; 0x60
 8003c90:	4a1f      	ldr	r2, [pc, #124]	; (8003d10 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 8003c92:	4413      	add	r3, r2
 8003c94:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	695b      	ldr	r3, [r3, #20]
 8003c9a:	2b02      	cmp	r3, #2
 8003c9c:	d029      	beq.n	8003cf2 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 8003c9e:	2b02      	cmp	r3, #2
 8003ca0:	d82e      	bhi.n	8003d00 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d002      	beq.n	8003cac <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d013      	beq.n	8003cd2 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 8003caa:	e029      	b.n	8003d00 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8003cac:	6978      	ldr	r0, [r7, #20]
 8003cae:	f7ff feb2 	bl	8003a16 <_GetAvailWriteSpace>
 8003cb2:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8003cb4:	693a      	ldr	r2, [r7, #16]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d202      	bcs.n	8003cc2 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8003cc0:	e021      	b.n	8003d06 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8003cc6:	687a      	ldr	r2, [r7, #4]
 8003cc8:	69b9      	ldr	r1, [r7, #24]
 8003cca:	6978      	ldr	r0, [r7, #20]
 8003ccc:	f7ff fe5b 	bl	8003986 <_WriteNoCheck>
    break;
 8003cd0:	e019      	b.n	8003d06 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8003cd2:	6978      	ldr	r0, [r7, #20]
 8003cd4:	f7ff fe9f 	bl	8003a16 <_GetAvailWriteSpace>
 8003cd8:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	bf28      	it	cs
 8003ce2:	4613      	movcs	r3, r2
 8003ce4:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8003ce6:	69fa      	ldr	r2, [r7, #28]
 8003ce8:	69b9      	ldr	r1, [r7, #24]
 8003cea:	6978      	ldr	r0, [r7, #20]
 8003cec:	f7ff fe4b 	bl	8003986 <_WriteNoCheck>
    break;
 8003cf0:	e009      	b.n	8003d06 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	69b9      	ldr	r1, [r7, #24]
 8003cf6:	6978      	ldr	r0, [r7, #20]
 8003cf8:	f7ff fde8 	bl	80038cc <_WriteBlocking>
 8003cfc:	61f8      	str	r0, [r7, #28]
    break;
 8003cfe:	e002      	b.n	8003d06 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8003d00:	2300      	movs	r3, #0
 8003d02:	61fb      	str	r3, [r7, #28]
    break;
 8003d04:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8003d06:	69fb      	ldr	r3, [r7, #28]
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3720      	adds	r7, #32
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	20012e5c 	.word	0x20012e5c

08003d14 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b088      	sub	sp, #32
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	60f8      	str	r0, [r7, #12]
 8003d1c:	60b9      	str	r1, [r7, #8]
 8003d1e:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8003d20:	4b0e      	ldr	r3, [pc, #56]	; (8003d5c <SEGGER_RTT_WriteDownBuffer+0x48>)
 8003d22:	61fb      	str	r3, [r7, #28]
 8003d24:	69fb      	ldr	r3, [r7, #28]
 8003d26:	781b      	ldrb	r3, [r3, #0]
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d101      	bne.n	8003d32 <SEGGER_RTT_WriteDownBuffer+0x1e>
 8003d2e:	f7ff fd75 	bl	800381c <_DoInit>
  SEGGER_RTT_LOCK();
 8003d32:	f3ef 8311 	mrs	r3, BASEPRI
 8003d36:	f04f 0120 	mov.w	r1, #32
 8003d3a:	f381 8811 	msr	BASEPRI, r1
 8003d3e:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8003d40:	687a      	ldr	r2, [r7, #4]
 8003d42:	68b9      	ldr	r1, [r7, #8]
 8003d44:	68f8      	ldr	r0, [r7, #12]
 8003d46:	f7ff ff95 	bl	8003c74 <SEGGER_RTT_WriteDownBufferNoLock>
 8003d4a:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8003d4c:	69bb      	ldr	r3, [r7, #24]
 8003d4e:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8003d52:	697b      	ldr	r3, [r7, #20]
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3720      	adds	r7, #32
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}
 8003d5c:	20012e5c 	.word	0x20012e5c

08003d60 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b088      	sub	sp, #32
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	60f8      	str	r0, [r7, #12]
 8003d68:	60b9      	str	r1, [r7, #8]
 8003d6a:	607a      	str	r2, [r7, #4]
 8003d6c:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8003d6e:	4b3d      	ldr	r3, [pc, #244]	; (8003e64 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003d70:	61bb      	str	r3, [r7, #24]
 8003d72:	69bb      	ldr	r3, [r7, #24]
 8003d74:	781b      	ldrb	r3, [r3, #0]
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d101      	bne.n	8003d80 <SEGGER_RTT_AllocUpBuffer+0x20>
 8003d7c:	f7ff fd4e 	bl	800381c <_DoInit>
  SEGGER_RTT_LOCK();
 8003d80:	f3ef 8311 	mrs	r3, BASEPRI
 8003d84:	f04f 0120 	mov.w	r1, #32
 8003d88:	f381 8811 	msr	BASEPRI, r1
 8003d8c:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003d8e:	4b35      	ldr	r3, [pc, #212]	; (8003e64 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003d90:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8003d92:	2300      	movs	r3, #0
 8003d94:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8003d96:	6939      	ldr	r1, [r7, #16]
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	1c5a      	adds	r2, r3, #1
 8003d9c:	4613      	mov	r3, r2
 8003d9e:	005b      	lsls	r3, r3, #1
 8003da0:	4413      	add	r3, r2
 8003da2:	00db      	lsls	r3, r3, #3
 8003da4:	440b      	add	r3, r1
 8003da6:	3304      	adds	r3, #4
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d008      	beq.n	8003dc0 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	3301      	adds	r3, #1
 8003db2:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	691b      	ldr	r3, [r3, #16]
 8003db8:	69fa      	ldr	r2, [r7, #28]
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	dbeb      	blt.n	8003d96 <SEGGER_RTT_AllocUpBuffer+0x36>
 8003dbe:	e000      	b.n	8003dc2 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8003dc0:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	691b      	ldr	r3, [r3, #16]
 8003dc6:	69fa      	ldr	r2, [r7, #28]
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	da3f      	bge.n	8003e4c <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8003dcc:	6939      	ldr	r1, [r7, #16]
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	1c5a      	adds	r2, r3, #1
 8003dd2:	4613      	mov	r3, r2
 8003dd4:	005b      	lsls	r3, r3, #1
 8003dd6:	4413      	add	r3, r2
 8003dd8:	00db      	lsls	r3, r3, #3
 8003dda:	440b      	add	r3, r1
 8003ddc:	68fa      	ldr	r2, [r7, #12]
 8003dde:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8003de0:	6939      	ldr	r1, [r7, #16]
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	1c5a      	adds	r2, r3, #1
 8003de6:	4613      	mov	r3, r2
 8003de8:	005b      	lsls	r3, r3, #1
 8003dea:	4413      	add	r3, r2
 8003dec:	00db      	lsls	r3, r3, #3
 8003dee:	440b      	add	r3, r1
 8003df0:	3304      	adds	r3, #4
 8003df2:	68ba      	ldr	r2, [r7, #8]
 8003df4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8003df6:	6939      	ldr	r1, [r7, #16]
 8003df8:	69fa      	ldr	r2, [r7, #28]
 8003dfa:	4613      	mov	r3, r2
 8003dfc:	005b      	lsls	r3, r3, #1
 8003dfe:	4413      	add	r3, r2
 8003e00:	00db      	lsls	r3, r3, #3
 8003e02:	440b      	add	r3, r1
 8003e04:	3320      	adds	r3, #32
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8003e0a:	6939      	ldr	r1, [r7, #16]
 8003e0c:	69fa      	ldr	r2, [r7, #28]
 8003e0e:	4613      	mov	r3, r2
 8003e10:	005b      	lsls	r3, r3, #1
 8003e12:	4413      	add	r3, r2
 8003e14:	00db      	lsls	r3, r3, #3
 8003e16:	440b      	add	r3, r1
 8003e18:	3328      	adds	r3, #40	; 0x28
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8003e1e:	6939      	ldr	r1, [r7, #16]
 8003e20:	69fa      	ldr	r2, [r7, #28]
 8003e22:	4613      	mov	r3, r2
 8003e24:	005b      	lsls	r3, r3, #1
 8003e26:	4413      	add	r3, r2
 8003e28:	00db      	lsls	r3, r3, #3
 8003e2a:	440b      	add	r3, r1
 8003e2c:	3324      	adds	r3, #36	; 0x24
 8003e2e:	2200      	movs	r2, #0
 8003e30:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8003e32:	6939      	ldr	r1, [r7, #16]
 8003e34:	69fa      	ldr	r2, [r7, #28]
 8003e36:	4613      	mov	r3, r2
 8003e38:	005b      	lsls	r3, r3, #1
 8003e3a:	4413      	add	r3, r2
 8003e3c:	00db      	lsls	r3, r3, #3
 8003e3e:	440b      	add	r3, r1
 8003e40:	332c      	adds	r3, #44	; 0x2c
 8003e42:	683a      	ldr	r2, [r7, #0]
 8003e44:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003e46:	f3bf 8f5f 	dmb	sy
 8003e4a:	e002      	b.n	8003e52 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8003e4c:	f04f 33ff 	mov.w	r3, #4294967295
 8003e50:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8003e58:	69fb      	ldr	r3, [r7, #28]
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3720      	adds	r7, #32
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	20012e5c 	.word	0x20012e5c

08003e68 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b088      	sub	sp, #32
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	60f8      	str	r0, [r7, #12]
 8003e70:	60b9      	str	r1, [r7, #8]
 8003e72:	607a      	str	r2, [r7, #4]
 8003e74:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8003e76:	4b33      	ldr	r3, [pc, #204]	; (8003f44 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8003e78:	61bb      	str	r3, [r7, #24]
 8003e7a:	69bb      	ldr	r3, [r7, #24]
 8003e7c:	781b      	ldrb	r3, [r3, #0]
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d101      	bne.n	8003e88 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8003e84:	f7ff fcca 	bl	800381c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003e88:	4b2e      	ldr	r3, [pc, #184]	; (8003f44 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8003e8a:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	695b      	ldr	r3, [r3, #20]
 8003e90:	461a      	mov	r2, r3
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d24d      	bcs.n	8003f34 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8003e98:	f3ef 8311 	mrs	r3, BASEPRI
 8003e9c:	f04f 0120 	mov.w	r1, #32
 8003ea0:	f381 8811 	msr	BASEPRI, r1
 8003ea4:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d031      	beq.n	8003f10 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8003eac:	6979      	ldr	r1, [r7, #20]
 8003eae:	68fa      	ldr	r2, [r7, #12]
 8003eb0:	4613      	mov	r3, r2
 8003eb2:	005b      	lsls	r3, r3, #1
 8003eb4:	4413      	add	r3, r2
 8003eb6:	00db      	lsls	r3, r3, #3
 8003eb8:	440b      	add	r3, r1
 8003eba:	3360      	adds	r3, #96	; 0x60
 8003ebc:	68ba      	ldr	r2, [r7, #8]
 8003ebe:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8003ec0:	6979      	ldr	r1, [r7, #20]
 8003ec2:	68fa      	ldr	r2, [r7, #12]
 8003ec4:	4613      	mov	r3, r2
 8003ec6:	005b      	lsls	r3, r3, #1
 8003ec8:	4413      	add	r3, r2
 8003eca:	00db      	lsls	r3, r3, #3
 8003ecc:	440b      	add	r3, r1
 8003ece:	3364      	adds	r3, #100	; 0x64
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8003ed4:	6979      	ldr	r1, [r7, #20]
 8003ed6:	68fa      	ldr	r2, [r7, #12]
 8003ed8:	4613      	mov	r3, r2
 8003eda:	005b      	lsls	r3, r3, #1
 8003edc:	4413      	add	r3, r2
 8003ede:	00db      	lsls	r3, r3, #3
 8003ee0:	440b      	add	r3, r1
 8003ee2:	3368      	adds	r3, #104	; 0x68
 8003ee4:	683a      	ldr	r2, [r7, #0]
 8003ee6:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8003ee8:	6979      	ldr	r1, [r7, #20]
 8003eea:	68fa      	ldr	r2, [r7, #12]
 8003eec:	4613      	mov	r3, r2
 8003eee:	005b      	lsls	r3, r3, #1
 8003ef0:	4413      	add	r3, r2
 8003ef2:	00db      	lsls	r3, r3, #3
 8003ef4:	440b      	add	r3, r1
 8003ef6:	3370      	adds	r3, #112	; 0x70
 8003ef8:	2200      	movs	r2, #0
 8003efa:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8003efc:	6979      	ldr	r1, [r7, #20]
 8003efe:	68fa      	ldr	r2, [r7, #12]
 8003f00:	4613      	mov	r3, r2
 8003f02:	005b      	lsls	r3, r3, #1
 8003f04:	4413      	add	r3, r2
 8003f06:	00db      	lsls	r3, r3, #3
 8003f08:	440b      	add	r3, r1
 8003f0a:	336c      	adds	r3, #108	; 0x6c
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8003f10:	6979      	ldr	r1, [r7, #20]
 8003f12:	68fa      	ldr	r2, [r7, #12]
 8003f14:	4613      	mov	r3, r2
 8003f16:	005b      	lsls	r3, r3, #1
 8003f18:	4413      	add	r3, r2
 8003f1a:	00db      	lsls	r3, r3, #3
 8003f1c:	440b      	add	r3, r1
 8003f1e:	3374      	adds	r3, #116	; 0x74
 8003f20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f22:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003f24:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	61fb      	str	r3, [r7, #28]
 8003f32:	e002      	b.n	8003f3a <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8003f34:	f04f 33ff 	mov.w	r3, #4294967295
 8003f38:	61fb      	str	r3, [r7, #28]
  }
  return r;
 8003f3a:	69fb      	ldr	r3, [r7, #28]
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3720      	adds	r7, #32
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}
 8003f44:	20012e5c 	.word	0x20012e5c

08003f48 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8003f48:	b480      	push	{r7}
 8003f4a:	b087      	sub	sp, #28
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	60f8      	str	r0, [r7, #12]
 8003f50:	60b9      	str	r1, [r7, #8]
 8003f52:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8003f54:	2300      	movs	r3, #0
 8003f56:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8003f58:	e002      	b.n	8003f60 <_EncodeStr+0x18>
    Len++;
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	3301      	adds	r3, #1
 8003f5e:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8003f60:	68ba      	ldr	r2, [r7, #8]
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	4413      	add	r3, r2
 8003f66:	781b      	ldrb	r3, [r3, #0]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d1f6      	bne.n	8003f5a <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8003f6c:	693a      	ldr	r2, [r7, #16]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d901      	bls.n	8003f78 <_EncodeStr+0x30>
    Len = Limit;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	2bfe      	cmp	r3, #254	; 0xfe
 8003f7c:	d806      	bhi.n	8003f8c <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	1c5a      	adds	r2, r3, #1
 8003f82:	60fa      	str	r2, [r7, #12]
 8003f84:	693a      	ldr	r2, [r7, #16]
 8003f86:	b2d2      	uxtb	r2, r2
 8003f88:	701a      	strb	r2, [r3, #0]
 8003f8a:	e011      	b.n	8003fb0 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	1c5a      	adds	r2, r3, #1
 8003f90:	60fa      	str	r2, [r7, #12]
 8003f92:	22ff      	movs	r2, #255	; 0xff
 8003f94:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	1c5a      	adds	r2, r3, #1
 8003f9a:	60fa      	str	r2, [r7, #12]
 8003f9c:	693a      	ldr	r2, [r7, #16]
 8003f9e:	b2d2      	uxtb	r2, r2
 8003fa0:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	0a19      	lsrs	r1, r3, #8
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	1c5a      	adds	r2, r3, #1
 8003faa:	60fa      	str	r2, [r7, #12]
 8003fac:	b2ca      	uxtb	r2, r1
 8003fae:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8003fb4:	e00a      	b.n	8003fcc <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8003fb6:	68ba      	ldr	r2, [r7, #8]
 8003fb8:	1c53      	adds	r3, r2, #1
 8003fba:	60bb      	str	r3, [r7, #8]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	1c59      	adds	r1, r3, #1
 8003fc0:	60f9      	str	r1, [r7, #12]
 8003fc2:	7812      	ldrb	r2, [r2, #0]
 8003fc4:	701a      	strb	r2, [r3, #0]
    n++;
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	3301      	adds	r3, #1
 8003fca:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8003fcc:	697a      	ldr	r2, [r7, #20]
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d3f0      	bcc.n	8003fb6 <_EncodeStr+0x6e>
  }
  return pPayload;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	371c      	adds	r7, #28
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe0:	4770      	bx	lr

08003fe2 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8003fe2:	b480      	push	{r7}
 8003fe4:	b083      	sub	sp, #12
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	3304      	adds	r3, #4
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	370c      	adds	r7, #12
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr
	...

08003ffc <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b082      	sub	sp, #8
 8004000:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004002:	4b36      	ldr	r3, [pc, #216]	; (80040dc <_HandleIncomingPacket+0xe0>)
 8004004:	7e1b      	ldrb	r3, [r3, #24]
 8004006:	4618      	mov	r0, r3
 8004008:	1cfb      	adds	r3, r7, #3
 800400a:	2201      	movs	r2, #1
 800400c:	4619      	mov	r1, r3
 800400e:	f7ff fdab 	bl	8003b68 <SEGGER_RTT_ReadNoLock>
 8004012:	4603      	mov	r3, r0
 8004014:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2b00      	cmp	r3, #0
 800401a:	dd54      	ble.n	80040c6 <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 800401c:	78fb      	ldrb	r3, [r7, #3]
 800401e:	2b80      	cmp	r3, #128	; 0x80
 8004020:	d032      	beq.n	8004088 <_HandleIncomingPacket+0x8c>
 8004022:	2b80      	cmp	r3, #128	; 0x80
 8004024:	dc42      	bgt.n	80040ac <_HandleIncomingPacket+0xb0>
 8004026:	2b07      	cmp	r3, #7
 8004028:	dc16      	bgt.n	8004058 <_HandleIncomingPacket+0x5c>
 800402a:	2b00      	cmp	r3, #0
 800402c:	dd3e      	ble.n	80040ac <_HandleIncomingPacket+0xb0>
 800402e:	3b01      	subs	r3, #1
 8004030:	2b06      	cmp	r3, #6
 8004032:	d83b      	bhi.n	80040ac <_HandleIncomingPacket+0xb0>
 8004034:	a201      	add	r2, pc, #4	; (adr r2, 800403c <_HandleIncomingPacket+0x40>)
 8004036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800403a:	bf00      	nop
 800403c:	0800405f 	.word	0x0800405f
 8004040:	08004065 	.word	0x08004065
 8004044:	0800406b 	.word	0x0800406b
 8004048:	08004071 	.word	0x08004071
 800404c:	08004077 	.word	0x08004077
 8004050:	0800407d 	.word	0x0800407d
 8004054:	08004083 	.word	0x08004083
 8004058:	2b7f      	cmp	r3, #127	; 0x7f
 800405a:	d036      	beq.n	80040ca <_HandleIncomingPacket+0xce>
 800405c:	e026      	b.n	80040ac <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800405e:	f000 fe3d 	bl	8004cdc <SEGGER_SYSVIEW_Start>
      break;
 8004062:	e037      	b.n	80040d4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8004064:	f000 fef6 	bl	8004e54 <SEGGER_SYSVIEW_Stop>
      break;
 8004068:	e034      	b.n	80040d4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800406a:	f001 f8cf 	bl	800520c <SEGGER_SYSVIEW_RecordSystime>
      break;
 800406e:	e031      	b.n	80040d4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8004070:	f001 f894 	bl	800519c <SEGGER_SYSVIEW_SendTaskList>
      break;
 8004074:	e02e      	b.n	80040d4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8004076:	f000 ff13 	bl	8004ea0 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800407a:	e02b      	b.n	80040d4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800407c:	f001 faf2 	bl	8005664 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8004080:	e028      	b.n	80040d4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8004082:	f001 fad1 	bl	8005628 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8004086:	e025      	b.n	80040d4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004088:	4b14      	ldr	r3, [pc, #80]	; (80040dc <_HandleIncomingPacket+0xe0>)
 800408a:	7e1b      	ldrb	r3, [r3, #24]
 800408c:	4618      	mov	r0, r3
 800408e:	1cfb      	adds	r3, r7, #3
 8004090:	2201      	movs	r2, #1
 8004092:	4619      	mov	r1, r3
 8004094:	f7ff fd68 	bl	8003b68 <SEGGER_RTT_ReadNoLock>
 8004098:	4603      	mov	r3, r0
 800409a:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	dd15      	ble.n	80040ce <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80040a2:	78fb      	ldrb	r3, [r7, #3]
 80040a4:	4618      	mov	r0, r3
 80040a6:	f001 fa3f 	bl	8005528 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80040aa:	e010      	b.n	80040ce <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80040ac:	78fb      	ldrb	r3, [r7, #3]
 80040ae:	b25b      	sxtb	r3, r3
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	da0e      	bge.n	80040d2 <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80040b4:	4b09      	ldr	r3, [pc, #36]	; (80040dc <_HandleIncomingPacket+0xe0>)
 80040b6:	7e1b      	ldrb	r3, [r3, #24]
 80040b8:	4618      	mov	r0, r3
 80040ba:	1cfb      	adds	r3, r7, #3
 80040bc:	2201      	movs	r2, #1
 80040be:	4619      	mov	r1, r3
 80040c0:	f7ff fd52 	bl	8003b68 <SEGGER_RTT_ReadNoLock>
      }
      break;
 80040c4:	e005      	b.n	80040d2 <_HandleIncomingPacket+0xd6>
    }
  }
 80040c6:	bf00      	nop
 80040c8:	e004      	b.n	80040d4 <_HandleIncomingPacket+0xd8>
      break;
 80040ca:	bf00      	nop
 80040cc:	e002      	b.n	80040d4 <_HandleIncomingPacket+0xd8>
      break;
 80040ce:	bf00      	nop
 80040d0:	e000      	b.n	80040d4 <_HandleIncomingPacket+0xd8>
      break;
 80040d2:	bf00      	nop
}
 80040d4:	bf00      	nop
 80040d6:	3708      	adds	r7, #8
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}
 80040dc:	2001431c 	.word	0x2001431c

080040e0 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b08c      	sub	sp, #48	; 0x30
 80040e4:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80040e6:	2301      	movs	r3, #1
 80040e8:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80040ea:	1d3b      	adds	r3, r7, #4
 80040ec:	3301      	adds	r3, #1
 80040ee:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80040f0:	69fb      	ldr	r3, [r7, #28]
 80040f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040f4:	4b32      	ldr	r3, [pc, #200]	; (80041c0 <_TrySendOverflowPacket+0xe0>)
 80040f6:	695b      	ldr	r3, [r3, #20]
 80040f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80040fa:	e00b      	b.n	8004114 <_TrySendOverflowPacket+0x34>
 80040fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040fe:	b2da      	uxtb	r2, r3
 8004100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004102:	1c59      	adds	r1, r3, #1
 8004104:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004106:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800410a:	b2d2      	uxtb	r2, r2
 800410c:	701a      	strb	r2, [r3, #0]
 800410e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004110:	09db      	lsrs	r3, r3, #7
 8004112:	62bb      	str	r3, [r7, #40]	; 0x28
 8004114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004116:	2b7f      	cmp	r3, #127	; 0x7f
 8004118:	d8f0      	bhi.n	80040fc <_TrySendOverflowPacket+0x1c>
 800411a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800411c:	1c5a      	adds	r2, r3, #1
 800411e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004120:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004122:	b2d2      	uxtb	r2, r2
 8004124:	701a      	strb	r2, [r3, #0]
 8004126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004128:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800412a:	4b26      	ldr	r3, [pc, #152]	; (80041c4 <_TrySendOverflowPacket+0xe4>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004130:	4b23      	ldr	r3, [pc, #140]	; (80041c0 <_TrySendOverflowPacket+0xe0>)
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	69ba      	ldr	r2, [r7, #24]
 8004136:	1ad3      	subs	r3, r2, r3
 8004138:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800413a:	69fb      	ldr	r3, [r7, #28]
 800413c:	627b      	str	r3, [r7, #36]	; 0x24
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	623b      	str	r3, [r7, #32]
 8004142:	e00b      	b.n	800415c <_TrySendOverflowPacket+0x7c>
 8004144:	6a3b      	ldr	r3, [r7, #32]
 8004146:	b2da      	uxtb	r2, r3
 8004148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800414a:	1c59      	adds	r1, r3, #1
 800414c:	6279      	str	r1, [r7, #36]	; 0x24
 800414e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004152:	b2d2      	uxtb	r2, r2
 8004154:	701a      	strb	r2, [r3, #0]
 8004156:	6a3b      	ldr	r3, [r7, #32]
 8004158:	09db      	lsrs	r3, r3, #7
 800415a:	623b      	str	r3, [r7, #32]
 800415c:	6a3b      	ldr	r3, [r7, #32]
 800415e:	2b7f      	cmp	r3, #127	; 0x7f
 8004160:	d8f0      	bhi.n	8004144 <_TrySendOverflowPacket+0x64>
 8004162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004164:	1c5a      	adds	r2, r3, #1
 8004166:	627a      	str	r2, [r7, #36]	; 0x24
 8004168:	6a3a      	ldr	r2, [r7, #32]
 800416a:	b2d2      	uxtb	r2, r2
 800416c:	701a      	strb	r2, [r3, #0]
 800416e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004170:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8004172:	4b13      	ldr	r3, [pc, #76]	; (80041c0 <_TrySendOverflowPacket+0xe0>)
 8004174:	785b      	ldrb	r3, [r3, #1]
 8004176:	4618      	mov	r0, r3
 8004178:	1d3b      	adds	r3, r7, #4
 800417a:	69fa      	ldr	r2, [r7, #28]
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	461a      	mov	r2, r3
 8004180:	1d3b      	adds	r3, r7, #4
 8004182:	4619      	mov	r1, r3
 8004184:	f7fc f824 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004188:	4603      	mov	r3, r0
 800418a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 800418c:	f7ff fabc 	bl	8003708 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d009      	beq.n	80041aa <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004196:	4a0a      	ldr	r2, [pc, #40]	; (80041c0 <_TrySendOverflowPacket+0xe0>)
 8004198:	69bb      	ldr	r3, [r7, #24]
 800419a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800419c:	4b08      	ldr	r3, [pc, #32]	; (80041c0 <_TrySendOverflowPacket+0xe0>)
 800419e:	781b      	ldrb	r3, [r3, #0]
 80041a0:	3b01      	subs	r3, #1
 80041a2:	b2da      	uxtb	r2, r3
 80041a4:	4b06      	ldr	r3, [pc, #24]	; (80041c0 <_TrySendOverflowPacket+0xe0>)
 80041a6:	701a      	strb	r2, [r3, #0]
 80041a8:	e004      	b.n	80041b4 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80041aa:	4b05      	ldr	r3, [pc, #20]	; (80041c0 <_TrySendOverflowPacket+0xe0>)
 80041ac:	695b      	ldr	r3, [r3, #20]
 80041ae:	3301      	adds	r3, #1
 80041b0:	4a03      	ldr	r2, [pc, #12]	; (80041c0 <_TrySendOverflowPacket+0xe0>)
 80041b2:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80041b4:	693b      	ldr	r3, [r7, #16]
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3730      	adds	r7, #48	; 0x30
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	bf00      	nop
 80041c0:	2001431c 	.word	0x2001431c
 80041c4:	e0001004 	.word	0xe0001004

080041c8 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b08a      	sub	sp, #40	; 0x28
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	60f8      	str	r0, [r7, #12]
 80041d0:	60b9      	str	r1, [r7, #8]
 80041d2:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80041d4:	4b6d      	ldr	r3, [pc, #436]	; (800438c <_SendPacket+0x1c4>)
 80041d6:	781b      	ldrb	r3, [r3, #0]
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d010      	beq.n	80041fe <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80041dc:	4b6b      	ldr	r3, [pc, #428]	; (800438c <_SendPacket+0x1c4>)
 80041de:	781b      	ldrb	r3, [r3, #0]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	f000 80a5 	beq.w	8004330 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80041e6:	4b69      	ldr	r3, [pc, #420]	; (800438c <_SendPacket+0x1c4>)
 80041e8:	781b      	ldrb	r3, [r3, #0]
 80041ea:	2b02      	cmp	r3, #2
 80041ec:	d109      	bne.n	8004202 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80041ee:	f7ff ff77 	bl	80040e0 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80041f2:	4b66      	ldr	r3, [pc, #408]	; (800438c <_SendPacket+0x1c4>)
 80041f4:	781b      	ldrb	r3, [r3, #0]
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	f040 809c 	bne.w	8004334 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 80041fc:	e001      	b.n	8004202 <_SendPacket+0x3a>
    goto Send;
 80041fe:	bf00      	nop
 8004200:	e000      	b.n	8004204 <_SendPacket+0x3c>
Send:
 8004202:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2b1f      	cmp	r3, #31
 8004208:	d809      	bhi.n	800421e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800420a:	4b60      	ldr	r3, [pc, #384]	; (800438c <_SendPacket+0x1c4>)
 800420c:	69da      	ldr	r2, [r3, #28]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	fa22 f303 	lsr.w	r3, r2, r3
 8004214:	f003 0301 	and.w	r3, r3, #1
 8004218:	2b00      	cmp	r3, #0
 800421a:	f040 808d 	bne.w	8004338 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2b17      	cmp	r3, #23
 8004222:	d807      	bhi.n	8004234 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	3b01      	subs	r3, #1
 8004228:	60fb      	str	r3, [r7, #12]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	b2da      	uxtb	r2, r3
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	701a      	strb	r2, [r3, #0]
 8004232:	e03d      	b.n	80042b0 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8004234:	68ba      	ldr	r2, [r7, #8]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 800423c:	69fb      	ldr	r3, [r7, #28]
 800423e:	2b7f      	cmp	r3, #127	; 0x7f
 8004240:	d912      	bls.n	8004268 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	09da      	lsrs	r2, r3, #7
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	3b01      	subs	r3, #1
 800424a:	60fb      	str	r3, [r7, #12]
 800424c:	b2d2      	uxtb	r2, r2
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8004252:	69fb      	ldr	r3, [r7, #28]
 8004254:	b2db      	uxtb	r3, r3
 8004256:	68fa      	ldr	r2, [r7, #12]
 8004258:	3a01      	subs	r2, #1
 800425a:	60fa      	str	r2, [r7, #12]
 800425c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004260:	b2da      	uxtb	r2, r3
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	701a      	strb	r2, [r3, #0]
 8004266:	e006      	b.n	8004276 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	3b01      	subs	r3, #1
 800426c:	60fb      	str	r3, [r7, #12]
 800426e:	69fb      	ldr	r3, [r7, #28]
 8004270:	b2da      	uxtb	r2, r3
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2b7f      	cmp	r3, #127	; 0x7f
 800427a:	d912      	bls.n	80042a2 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	09da      	lsrs	r2, r3, #7
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	3b01      	subs	r3, #1
 8004284:	60fb      	str	r3, [r7, #12]
 8004286:	b2d2      	uxtb	r2, r2
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	b2db      	uxtb	r3, r3
 8004290:	68fa      	ldr	r2, [r7, #12]
 8004292:	3a01      	subs	r2, #1
 8004294:	60fa      	str	r2, [r7, #12]
 8004296:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800429a:	b2da      	uxtb	r2, r3
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	701a      	strb	r2, [r3, #0]
 80042a0:	e006      	b.n	80042b0 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	3b01      	subs	r3, #1
 80042a6:	60fb      	str	r3, [r7, #12]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	b2da      	uxtb	r2, r3
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80042b0:	4b37      	ldr	r3, [pc, #220]	; (8004390 <_SendPacket+0x1c8>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80042b6:	4b35      	ldr	r3, [pc, #212]	; (800438c <_SendPacket+0x1c4>)
 80042b8:	68db      	ldr	r3, [r3, #12]
 80042ba:	69ba      	ldr	r2, [r7, #24]
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	627b      	str	r3, [r7, #36]	; 0x24
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	623b      	str	r3, [r7, #32]
 80042c8:	e00b      	b.n	80042e2 <_SendPacket+0x11a>
 80042ca:	6a3b      	ldr	r3, [r7, #32]
 80042cc:	b2da      	uxtb	r2, r3
 80042ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d0:	1c59      	adds	r1, r3, #1
 80042d2:	6279      	str	r1, [r7, #36]	; 0x24
 80042d4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80042d8:	b2d2      	uxtb	r2, r2
 80042da:	701a      	strb	r2, [r3, #0]
 80042dc:	6a3b      	ldr	r3, [r7, #32]
 80042de:	09db      	lsrs	r3, r3, #7
 80042e0:	623b      	str	r3, [r7, #32]
 80042e2:	6a3b      	ldr	r3, [r7, #32]
 80042e4:	2b7f      	cmp	r3, #127	; 0x7f
 80042e6:	d8f0      	bhi.n	80042ca <_SendPacket+0x102>
 80042e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ea:	1c5a      	adds	r2, r3, #1
 80042ec:	627a      	str	r2, [r7, #36]	; 0x24
 80042ee:	6a3a      	ldr	r2, [r7, #32]
 80042f0:	b2d2      	uxtb	r2, r2
 80042f2:	701a      	strb	r2, [r3, #0]
 80042f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f6:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 80042f8:	4b24      	ldr	r3, [pc, #144]	; (800438c <_SendPacket+0x1c4>)
 80042fa:	785b      	ldrb	r3, [r3, #1]
 80042fc:	4618      	mov	r0, r3
 80042fe:	68ba      	ldr	r2, [r7, #8]
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	1ad3      	subs	r3, r2, r3
 8004304:	461a      	mov	r2, r3
 8004306:	68f9      	ldr	r1, [r7, #12]
 8004308:	f7fb ff62 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800430c:	4603      	mov	r3, r0
 800430e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8004310:	f7ff f9fa 	bl	8003708 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d003      	beq.n	8004322 <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800431a:	4a1c      	ldr	r2, [pc, #112]	; (800438c <_SendPacket+0x1c4>)
 800431c:	69bb      	ldr	r3, [r7, #24]
 800431e:	60d3      	str	r3, [r2, #12]
 8004320:	e00b      	b.n	800433a <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8004322:	4b1a      	ldr	r3, [pc, #104]	; (800438c <_SendPacket+0x1c4>)
 8004324:	781b      	ldrb	r3, [r3, #0]
 8004326:	3301      	adds	r3, #1
 8004328:	b2da      	uxtb	r2, r3
 800432a:	4b18      	ldr	r3, [pc, #96]	; (800438c <_SendPacket+0x1c4>)
 800432c:	701a      	strb	r2, [r3, #0]
 800432e:	e004      	b.n	800433a <_SendPacket+0x172>
    goto SendDone;
 8004330:	bf00      	nop
 8004332:	e002      	b.n	800433a <_SendPacket+0x172>
      goto SendDone;
 8004334:	bf00      	nop
 8004336:	e000      	b.n	800433a <_SendPacket+0x172>
      goto SendDone;
 8004338:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800433a:	4b14      	ldr	r3, [pc, #80]	; (800438c <_SendPacket+0x1c4>)
 800433c:	7e1b      	ldrb	r3, [r3, #24]
 800433e:	4619      	mov	r1, r3
 8004340:	4a14      	ldr	r2, [pc, #80]	; (8004394 <_SendPacket+0x1cc>)
 8004342:	460b      	mov	r3, r1
 8004344:	005b      	lsls	r3, r3, #1
 8004346:	440b      	add	r3, r1
 8004348:	00db      	lsls	r3, r3, #3
 800434a:	4413      	add	r3, r2
 800434c:	336c      	adds	r3, #108	; 0x6c
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	4b0e      	ldr	r3, [pc, #56]	; (800438c <_SendPacket+0x1c4>)
 8004352:	7e1b      	ldrb	r3, [r3, #24]
 8004354:	4618      	mov	r0, r3
 8004356:	490f      	ldr	r1, [pc, #60]	; (8004394 <_SendPacket+0x1cc>)
 8004358:	4603      	mov	r3, r0
 800435a:	005b      	lsls	r3, r3, #1
 800435c:	4403      	add	r3, r0
 800435e:	00db      	lsls	r3, r3, #3
 8004360:	440b      	add	r3, r1
 8004362:	3370      	adds	r3, #112	; 0x70
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	429a      	cmp	r2, r3
 8004368:	d00b      	beq.n	8004382 <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800436a:	4b08      	ldr	r3, [pc, #32]	; (800438c <_SendPacket+0x1c4>)
 800436c:	789b      	ldrb	r3, [r3, #2]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d107      	bne.n	8004382 <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8004372:	4b06      	ldr	r3, [pc, #24]	; (800438c <_SendPacket+0x1c4>)
 8004374:	2201      	movs	r2, #1
 8004376:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004378:	f7ff fe40 	bl	8003ffc <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800437c:	4b03      	ldr	r3, [pc, #12]	; (800438c <_SendPacket+0x1c4>)
 800437e:	2200      	movs	r2, #0
 8004380:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8004382:	bf00      	nop
 8004384:	3728      	adds	r7, #40	; 0x28
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}
 800438a:	bf00      	nop
 800438c:	2001431c 	.word	0x2001431c
 8004390:	e0001004 	.word	0xe0001004
 8004394:	20012e5c 	.word	0x20012e5c

08004398 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8004398:	b580      	push	{r7, lr}
 800439a:	b08a      	sub	sp, #40	; 0x28
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
 80043a0:	460b      	mov	r3, r1
 80043a2:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	691b      	ldr	r3, [r3, #16]
 80043a8:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	3301      	adds	r3, #1
 80043ae:	2b80      	cmp	r3, #128	; 0x80
 80043b0:	d80a      	bhi.n	80043c8 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	1c59      	adds	r1, r3, #1
 80043b8:	687a      	ldr	r2, [r7, #4]
 80043ba:	6051      	str	r1, [r2, #4]
 80043bc:	78fa      	ldrb	r2, [r7, #3]
 80043be:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	1c5a      	adds	r2, r3, #1
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	691b      	ldr	r3, [r3, #16]
 80043cc:	2b80      	cmp	r3, #128	; 0x80
 80043ce:	d15a      	bne.n	8004486 <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	691a      	ldr	r2, [r3, #16]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	b2d2      	uxtb	r2, r2
 80043da:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	68db      	ldr	r3, [r3, #12]
 80043e6:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	627b      	str	r3, [r7, #36]	; 0x24
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	623b      	str	r3, [r7, #32]
 80043f0:	e00b      	b.n	800440a <_StoreChar+0x72>
 80043f2:	6a3b      	ldr	r3, [r7, #32]
 80043f4:	b2da      	uxtb	r2, r3
 80043f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f8:	1c59      	adds	r1, r3, #1
 80043fa:	6279      	str	r1, [r7, #36]	; 0x24
 80043fc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004400:	b2d2      	uxtb	r2, r2
 8004402:	701a      	strb	r2, [r3, #0]
 8004404:	6a3b      	ldr	r3, [r7, #32]
 8004406:	09db      	lsrs	r3, r3, #7
 8004408:	623b      	str	r3, [r7, #32]
 800440a:	6a3b      	ldr	r3, [r7, #32]
 800440c:	2b7f      	cmp	r3, #127	; 0x7f
 800440e:	d8f0      	bhi.n	80043f2 <_StoreChar+0x5a>
 8004410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004412:	1c5a      	adds	r2, r3, #1
 8004414:	627a      	str	r2, [r7, #36]	; 0x24
 8004416:	6a3a      	ldr	r2, [r7, #32]
 8004418:	b2d2      	uxtb	r2, r2
 800441a:	701a      	strb	r2, [r3, #0]
 800441c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441e:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	61fb      	str	r3, [r7, #28]
 8004424:	2300      	movs	r3, #0
 8004426:	61bb      	str	r3, [r7, #24]
 8004428:	e00b      	b.n	8004442 <_StoreChar+0xaa>
 800442a:	69bb      	ldr	r3, [r7, #24]
 800442c:	b2da      	uxtb	r2, r3
 800442e:	69fb      	ldr	r3, [r7, #28]
 8004430:	1c59      	adds	r1, r3, #1
 8004432:	61f9      	str	r1, [r7, #28]
 8004434:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004438:	b2d2      	uxtb	r2, r2
 800443a:	701a      	strb	r2, [r3, #0]
 800443c:	69bb      	ldr	r3, [r7, #24]
 800443e:	09db      	lsrs	r3, r3, #7
 8004440:	61bb      	str	r3, [r7, #24]
 8004442:	69bb      	ldr	r3, [r7, #24]
 8004444:	2b7f      	cmp	r3, #127	; 0x7f
 8004446:	d8f0      	bhi.n	800442a <_StoreChar+0x92>
 8004448:	69fb      	ldr	r3, [r7, #28]
 800444a:	1c5a      	adds	r2, r3, #1
 800444c:	61fa      	str	r2, [r7, #28]
 800444e:	69ba      	ldr	r2, [r7, #24]
 8004450:	b2d2      	uxtb	r2, r2
 8004452:	701a      	strb	r2, [r3, #0]
 8004454:	69fb      	ldr	r3, [r7, #28]
 8004456:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	221a      	movs	r2, #26
 800445e:	6939      	ldr	r1, [r7, #16]
 8004460:	4618      	mov	r0, r3
 8004462:	f7ff feb1 	bl	80041c8 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4618      	mov	r0, r3
 800446c:	f7ff fdb9 	bl	8003fe2 <_PreparePacket>
 8004470:	4602      	mov	r2, r0
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	1c5a      	adds	r2, r3, #1
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2200      	movs	r2, #0
 8004484:	611a      	str	r2, [r3, #16]
  }
}
 8004486:	bf00      	nop
 8004488:	3728      	adds	r7, #40	; 0x28
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
	...

08004490 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8004490:	b580      	push	{r7, lr}
 8004492:	b08a      	sub	sp, #40	; 0x28
 8004494:	af00      	add	r7, sp, #0
 8004496:	60f8      	str	r0, [r7, #12]
 8004498:	60b9      	str	r1, [r7, #8]
 800449a:	607a      	str	r2, [r7, #4]
 800449c:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 80044a2:	2301      	movs	r3, #1
 80044a4:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 80044a6:	2301      	movs	r3, #1
 80044a8:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80044aa:	e007      	b.n	80044bc <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 80044ac:	6a3a      	ldr	r2, [r7, #32]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80044b4:	623b      	str	r3, [r7, #32]
    Width++;
 80044b6:	69fb      	ldr	r3, [r7, #28]
 80044b8:	3301      	adds	r3, #1
 80044ba:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80044bc:	6a3a      	ldr	r2, [r7, #32]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d2f3      	bcs.n	80044ac <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 80044c4:	683a      	ldr	r2, [r7, #0]
 80044c6:	69fb      	ldr	r3, [r7, #28]
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d901      	bls.n	80044d0 <_PrintUnsigned+0x40>
    Width = NumDigits;
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 80044d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044d2:	f003 0301 	and.w	r3, r3, #1
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d11f      	bne.n	800451a <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 80044da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d01c      	beq.n	800451a <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 80044e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044e2:	f003 0302 	and.w	r3, r3, #2
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d005      	beq.n	80044f6 <_PrintUnsigned+0x66>
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d102      	bne.n	80044f6 <_PrintUnsigned+0x66>
        c = '0';
 80044f0:	2330      	movs	r3, #48	; 0x30
 80044f2:	76fb      	strb	r3, [r7, #27]
 80044f4:	e001      	b.n	80044fa <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 80044f6:	2320      	movs	r3, #32
 80044f8:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80044fa:	e007      	b.n	800450c <_PrintUnsigned+0x7c>
        FieldWidth--;
 80044fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044fe:	3b01      	subs	r3, #1
 8004500:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8004502:	7efb      	ldrb	r3, [r7, #27]
 8004504:	4619      	mov	r1, r3
 8004506:	68f8      	ldr	r0, [r7, #12]
 8004508:	f7ff ff46 	bl	8004398 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800450c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800450e:	2b00      	cmp	r3, #0
 8004510:	d003      	beq.n	800451a <_PrintUnsigned+0x8a>
 8004512:	69fa      	ldr	r2, [r7, #28]
 8004514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004516:	429a      	cmp	r2, r3
 8004518:	d3f0      	bcc.n	80044fc <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	2b01      	cmp	r3, #1
 800451e:	d903      	bls.n	8004528 <_PrintUnsigned+0x98>
      NumDigits--;
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	3b01      	subs	r3, #1
 8004524:	603b      	str	r3, [r7, #0]
 8004526:	e009      	b.n	800453c <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8004528:	68ba      	ldr	r2, [r7, #8]
 800452a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004530:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8004532:	697a      	ldr	r2, [r7, #20]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	429a      	cmp	r2, r3
 8004538:	d200      	bcs.n	800453c <_PrintUnsigned+0xac>
        break;
 800453a:	e005      	b.n	8004548 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 800453c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453e:	687a      	ldr	r2, [r7, #4]
 8004540:	fb02 f303 	mul.w	r3, r2, r3
 8004544:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8004546:	e7e8      	b.n	800451a <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8004548:	68ba      	ldr	r2, [r7, #8]
 800454a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004550:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004556:	fb02 f303 	mul.w	r3, r2, r3
 800455a:	68ba      	ldr	r2, [r7, #8]
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8004560:	4a15      	ldr	r2, [pc, #84]	; (80045b8 <_PrintUnsigned+0x128>)
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	4413      	add	r3, r2
 8004566:	781b      	ldrb	r3, [r3, #0]
 8004568:	4619      	mov	r1, r3
 800456a:	68f8      	ldr	r0, [r7, #12]
 800456c:	f7ff ff14 	bl	8004398 <_StoreChar>
    Digit /= Base;
 8004570:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	fbb2 f3f3 	udiv	r3, r2, r3
 8004578:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 800457a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457c:	2b00      	cmp	r3, #0
 800457e:	d1e3      	bne.n	8004548 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8004580:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004582:	f003 0301 	and.w	r3, r3, #1
 8004586:	2b00      	cmp	r3, #0
 8004588:	d011      	beq.n	80045ae <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 800458a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800458c:	2b00      	cmp	r3, #0
 800458e:	d00e      	beq.n	80045ae <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004590:	e006      	b.n	80045a0 <_PrintUnsigned+0x110>
        FieldWidth--;
 8004592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004594:	3b01      	subs	r3, #1
 8004596:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8004598:	2120      	movs	r1, #32
 800459a:	68f8      	ldr	r0, [r7, #12]
 800459c:	f7ff fefc 	bl	8004398 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80045a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d003      	beq.n	80045ae <_PrintUnsigned+0x11e>
 80045a6:	69fa      	ldr	r2, [r7, #28]
 80045a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d3f1      	bcc.n	8004592 <_PrintUnsigned+0x102>
      }
    }
  }
}
 80045ae:	bf00      	nop
 80045b0:	3728      	adds	r7, #40	; 0x28
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}
 80045b6:	bf00      	nop
 80045b8:	08005a38 	.word	0x08005a38

080045bc <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80045bc:	b580      	push	{r7, lr}
 80045be:	b088      	sub	sp, #32
 80045c0:	af02      	add	r7, sp, #8
 80045c2:	60f8      	str	r0, [r7, #12]
 80045c4:	60b9      	str	r1, [r7, #8]
 80045c6:	607a      	str	r2, [r7, #4]
 80045c8:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	bfb8      	it	lt
 80045d0:	425b      	neglt	r3, r3
 80045d2:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 80045d4:	2301      	movs	r3, #1
 80045d6:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80045d8:	e007      	b.n	80045ea <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	693a      	ldr	r2, [r7, #16]
 80045de:	fb92 f3f3 	sdiv	r3, r2, r3
 80045e2:	613b      	str	r3, [r7, #16]
    Width++;
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	3301      	adds	r3, #1
 80045e8:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	693a      	ldr	r2, [r7, #16]
 80045ee:	429a      	cmp	r2, r3
 80045f0:	daf3      	bge.n	80045da <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 80045f2:	683a      	ldr	r2, [r7, #0]
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	429a      	cmp	r2, r3
 80045f8:	d901      	bls.n	80045fe <_PrintInt+0x42>
    Width = NumDigits;
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 80045fe:	6a3b      	ldr	r3, [r7, #32]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d00a      	beq.n	800461a <_PrintInt+0x5e>
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	2b00      	cmp	r3, #0
 8004608:	db04      	blt.n	8004614 <_PrintInt+0x58>
 800460a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460c:	f003 0304 	and.w	r3, r3, #4
 8004610:	2b00      	cmp	r3, #0
 8004612:	d002      	beq.n	800461a <_PrintInt+0x5e>
    FieldWidth--;
 8004614:	6a3b      	ldr	r3, [r7, #32]
 8004616:	3b01      	subs	r3, #1
 8004618:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 800461a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800461c:	f003 0302 	and.w	r3, r3, #2
 8004620:	2b00      	cmp	r3, #0
 8004622:	d002      	beq.n	800462a <_PrintInt+0x6e>
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d016      	beq.n	8004658 <_PrintInt+0x9c>
 800462a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462c:	f003 0301 	and.w	r3, r3, #1
 8004630:	2b00      	cmp	r3, #0
 8004632:	d111      	bne.n	8004658 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8004634:	6a3b      	ldr	r3, [r7, #32]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d00e      	beq.n	8004658 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800463a:	e006      	b.n	800464a <_PrintInt+0x8e>
        FieldWidth--;
 800463c:	6a3b      	ldr	r3, [r7, #32]
 800463e:	3b01      	subs	r3, #1
 8004640:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8004642:	2120      	movs	r1, #32
 8004644:	68f8      	ldr	r0, [r7, #12]
 8004646:	f7ff fea7 	bl	8004398 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800464a:	6a3b      	ldr	r3, [r7, #32]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d003      	beq.n	8004658 <_PrintInt+0x9c>
 8004650:	697a      	ldr	r2, [r7, #20]
 8004652:	6a3b      	ldr	r3, [r7, #32]
 8004654:	429a      	cmp	r2, r3
 8004656:	d3f1      	bcc.n	800463c <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	2b00      	cmp	r3, #0
 800465c:	da07      	bge.n	800466e <_PrintInt+0xb2>
    v = -v;
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	425b      	negs	r3, r3
 8004662:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8004664:	212d      	movs	r1, #45	; 0x2d
 8004666:	68f8      	ldr	r0, [r7, #12]
 8004668:	f7ff fe96 	bl	8004398 <_StoreChar>
 800466c:	e008      	b.n	8004680 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 800466e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004670:	f003 0304 	and.w	r3, r3, #4
 8004674:	2b00      	cmp	r3, #0
 8004676:	d003      	beq.n	8004680 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8004678:	212b      	movs	r1, #43	; 0x2b
 800467a:	68f8      	ldr	r0, [r7, #12]
 800467c:	f7ff fe8c 	bl	8004398 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8004680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004682:	f003 0302 	and.w	r3, r3, #2
 8004686:	2b00      	cmp	r3, #0
 8004688:	d019      	beq.n	80046be <_PrintInt+0x102>
 800468a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468c:	f003 0301 	and.w	r3, r3, #1
 8004690:	2b00      	cmp	r3, #0
 8004692:	d114      	bne.n	80046be <_PrintInt+0x102>
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d111      	bne.n	80046be <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 800469a:	6a3b      	ldr	r3, [r7, #32]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d00e      	beq.n	80046be <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80046a0:	e006      	b.n	80046b0 <_PrintInt+0xf4>
        FieldWidth--;
 80046a2:	6a3b      	ldr	r3, [r7, #32]
 80046a4:	3b01      	subs	r3, #1
 80046a6:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 80046a8:	2130      	movs	r1, #48	; 0x30
 80046aa:	68f8      	ldr	r0, [r7, #12]
 80046ac:	f7ff fe74 	bl	8004398 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80046b0:	6a3b      	ldr	r3, [r7, #32]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d003      	beq.n	80046be <_PrintInt+0x102>
 80046b6:	697a      	ldr	r2, [r7, #20]
 80046b8:	6a3b      	ldr	r3, [r7, #32]
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d3f1      	bcc.n	80046a2 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 80046be:	68b9      	ldr	r1, [r7, #8]
 80046c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c2:	9301      	str	r3, [sp, #4]
 80046c4:	6a3b      	ldr	r3, [r7, #32]
 80046c6:	9300      	str	r3, [sp, #0]
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	687a      	ldr	r2, [r7, #4]
 80046cc:	68f8      	ldr	r0, [r7, #12]
 80046ce:	f7ff fedf 	bl	8004490 <_PrintUnsigned>
}
 80046d2:	bf00      	nop
 80046d4:	3718      	adds	r7, #24
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
	...

080046dc <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 80046dc:	b580      	push	{r7, lr}
 80046de:	b098      	sub	sp, #96	; 0x60
 80046e0:	af02      	add	r7, sp, #8
 80046e2:	60f8      	str	r0, [r7, #12]
 80046e4:	60b9      	str	r1, [r7, #8]
 80046e6:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80046e8:	f3ef 8311 	mrs	r3, BASEPRI
 80046ec:	f04f 0120 	mov.w	r1, #32
 80046f0:	f381 8811 	msr	BASEPRI, r1
 80046f4:	633b      	str	r3, [r7, #48]	; 0x30
 80046f6:	48b7      	ldr	r0, [pc, #732]	; (80049d4 <_VPrintTarget+0x2f8>)
 80046f8:	f7ff fc73 	bl	8003fe2 <_PreparePacket>
 80046fc:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 80046fe:	4bb5      	ldr	r3, [pc, #724]	; (80049d4 <_VPrintTarget+0x2f8>)
 8004700:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 8004702:	2300      	movs	r3, #0
 8004704:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 8004706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004708:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 800470a:	69fb      	ldr	r3, [r7, #28]
 800470c:	3301      	adds	r3, #1
 800470e:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	781b      	ldrb	r3, [r3, #0]
 8004718:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	3301      	adds	r3, #1
 8004720:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8004722:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004726:	2b00      	cmp	r3, #0
 8004728:	f000 8183 	beq.w	8004a32 <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 800472c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004730:	2b25      	cmp	r3, #37	; 0x25
 8004732:	f040 8170 	bne.w	8004a16 <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8004736:	2300      	movs	r3, #0
 8004738:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 800473a:	2301      	movs	r3, #1
 800473c:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	781b      	ldrb	r3, [r3, #0]
 8004742:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 8004746:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800474a:	3b23      	subs	r3, #35	; 0x23
 800474c:	2b0d      	cmp	r3, #13
 800474e:	d83f      	bhi.n	80047d0 <_VPrintTarget+0xf4>
 8004750:	a201      	add	r2, pc, #4	; (adr r2, 8004758 <_VPrintTarget+0x7c>)
 8004752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004756:	bf00      	nop
 8004758:	080047c1 	.word	0x080047c1
 800475c:	080047d1 	.word	0x080047d1
 8004760:	080047d1 	.word	0x080047d1
 8004764:	080047d1 	.word	0x080047d1
 8004768:	080047d1 	.word	0x080047d1
 800476c:	080047d1 	.word	0x080047d1
 8004770:	080047d1 	.word	0x080047d1
 8004774:	080047d1 	.word	0x080047d1
 8004778:	080047b1 	.word	0x080047b1
 800477c:	080047d1 	.word	0x080047d1
 8004780:	08004791 	.word	0x08004791
 8004784:	080047d1 	.word	0x080047d1
 8004788:	080047d1 	.word	0x080047d1
 800478c:	080047a1 	.word	0x080047a1
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8004790:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004792:	f043 0301 	orr.w	r3, r3, #1
 8004796:	64bb      	str	r3, [r7, #72]	; 0x48
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	3301      	adds	r3, #1
 800479c:	60fb      	str	r3, [r7, #12]
 800479e:	e01a      	b.n	80047d6 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 80047a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047a2:	f043 0302 	orr.w	r3, r3, #2
 80047a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	3301      	adds	r3, #1
 80047ac:	60fb      	str	r3, [r7, #12]
 80047ae:	e012      	b.n	80047d6 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 80047b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047b2:	f043 0304 	orr.w	r3, r3, #4
 80047b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	3301      	adds	r3, #1
 80047bc:	60fb      	str	r3, [r7, #12]
 80047be:	e00a      	b.n	80047d6 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 80047c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047c2:	f043 0308 	orr.w	r3, r3, #8
 80047c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	3301      	adds	r3, #1
 80047cc:	60fb      	str	r3, [r7, #12]
 80047ce:	e002      	b.n	80047d6 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 80047d0:	2300      	movs	r3, #0
 80047d2:	653b      	str	r3, [r7, #80]	; 0x50
 80047d4:	bf00      	nop
        }
      } while (v);
 80047d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d1b0      	bne.n	800473e <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 80047dc:	2300      	movs	r3, #0
 80047de:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	781b      	ldrb	r3, [r3, #0]
 80047e4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 80047e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80047ec:	2b2f      	cmp	r3, #47	; 0x2f
 80047ee:	d912      	bls.n	8004816 <_VPrintTarget+0x13a>
 80047f0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80047f4:	2b39      	cmp	r3, #57	; 0x39
 80047f6:	d80e      	bhi.n	8004816 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	3301      	adds	r3, #1
 80047fc:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 80047fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004800:	4613      	mov	r3, r2
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	4413      	add	r3, r2
 8004806:	005b      	lsls	r3, r3, #1
 8004808:	461a      	mov	r2, r3
 800480a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800480e:	4413      	add	r3, r2
 8004810:	3b30      	subs	r3, #48	; 0x30
 8004812:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8004814:	e7e4      	b.n	80047e0 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8004816:	2300      	movs	r3, #0
 8004818:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	781b      	ldrb	r3, [r3, #0]
 800481e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 8004822:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004826:	2b2e      	cmp	r3, #46	; 0x2e
 8004828:	d11d      	bne.n	8004866 <_VPrintTarget+0x18a>
        sFormat++;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	3301      	adds	r3, #1
 800482e:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	781b      	ldrb	r3, [r3, #0]
 8004834:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8004838:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800483c:	2b2f      	cmp	r3, #47	; 0x2f
 800483e:	d912      	bls.n	8004866 <_VPrintTarget+0x18a>
 8004840:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004844:	2b39      	cmp	r3, #57	; 0x39
 8004846:	d80e      	bhi.n	8004866 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	3301      	adds	r3, #1
 800484c:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 800484e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004850:	4613      	mov	r3, r2
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	4413      	add	r3, r2
 8004856:	005b      	lsls	r3, r3, #1
 8004858:	461a      	mov	r2, r3
 800485a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800485e:	4413      	add	r3, r2
 8004860:	3b30      	subs	r3, #48	; 0x30
 8004862:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8004864:	e7e4      	b.n	8004830 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	781b      	ldrb	r3, [r3, #0]
 800486a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 800486e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004872:	2b6c      	cmp	r3, #108	; 0x6c
 8004874:	d003      	beq.n	800487e <_VPrintTarget+0x1a2>
 8004876:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800487a:	2b68      	cmp	r3, #104	; 0x68
 800487c:	d107      	bne.n	800488e <_VPrintTarget+0x1b2>
          c = *sFormat;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	781b      	ldrb	r3, [r3, #0]
 8004882:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	3301      	adds	r3, #1
 800488a:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 800488c:	e7ef      	b.n	800486e <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 800488e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004892:	2b25      	cmp	r3, #37	; 0x25
 8004894:	f000 80b3 	beq.w	80049fe <_VPrintTarget+0x322>
 8004898:	2b25      	cmp	r3, #37	; 0x25
 800489a:	f2c0 80b7 	blt.w	8004a0c <_VPrintTarget+0x330>
 800489e:	2b78      	cmp	r3, #120	; 0x78
 80048a0:	f300 80b4 	bgt.w	8004a0c <_VPrintTarget+0x330>
 80048a4:	2b58      	cmp	r3, #88	; 0x58
 80048a6:	f2c0 80b1 	blt.w	8004a0c <_VPrintTarget+0x330>
 80048aa:	3b58      	subs	r3, #88	; 0x58
 80048ac:	2b20      	cmp	r3, #32
 80048ae:	f200 80ad 	bhi.w	8004a0c <_VPrintTarget+0x330>
 80048b2:	a201      	add	r2, pc, #4	; (adr r2, 80048b8 <_VPrintTarget+0x1dc>)
 80048b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048b8:	080049af 	.word	0x080049af
 80048bc:	08004a0d 	.word	0x08004a0d
 80048c0:	08004a0d 	.word	0x08004a0d
 80048c4:	08004a0d 	.word	0x08004a0d
 80048c8:	08004a0d 	.word	0x08004a0d
 80048cc:	08004a0d 	.word	0x08004a0d
 80048d0:	08004a0d 	.word	0x08004a0d
 80048d4:	08004a0d 	.word	0x08004a0d
 80048d8:	08004a0d 	.word	0x08004a0d
 80048dc:	08004a0d 	.word	0x08004a0d
 80048e0:	08004a0d 	.word	0x08004a0d
 80048e4:	0800493d 	.word	0x0800493d
 80048e8:	08004963 	.word	0x08004963
 80048ec:	08004a0d 	.word	0x08004a0d
 80048f0:	08004a0d 	.word	0x08004a0d
 80048f4:	08004a0d 	.word	0x08004a0d
 80048f8:	08004a0d 	.word	0x08004a0d
 80048fc:	08004a0d 	.word	0x08004a0d
 8004900:	08004a0d 	.word	0x08004a0d
 8004904:	08004a0d 	.word	0x08004a0d
 8004908:	08004a0d 	.word	0x08004a0d
 800490c:	08004a0d 	.word	0x08004a0d
 8004910:	08004a0d 	.word	0x08004a0d
 8004914:	08004a0d 	.word	0x08004a0d
 8004918:	080049d9 	.word	0x080049d9
 800491c:	08004a0d 	.word	0x08004a0d
 8004920:	08004a0d 	.word	0x08004a0d
 8004924:	08004a0d 	.word	0x08004a0d
 8004928:	08004a0d 	.word	0x08004a0d
 800492c:	08004989 	.word	0x08004989
 8004930:	08004a0d 	.word	0x08004a0d
 8004934:	08004a0d 	.word	0x08004a0d
 8004938:	080049af 	.word	0x080049af
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	1d19      	adds	r1, r3, #4
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	6011      	str	r1, [r2, #0]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 800494a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800494c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 8004950:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8004954:	f107 0314 	add.w	r3, r7, #20
 8004958:	4611      	mov	r1, r2
 800495a:	4618      	mov	r0, r3
 800495c:	f7ff fd1c 	bl	8004398 <_StoreChar>
        break;
 8004960:	e055      	b.n	8004a0e <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	1d19      	adds	r1, r3, #4
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	6011      	str	r1, [r2, #0]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8004970:	f107 0014 	add.w	r0, r7, #20
 8004974:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004976:	9301      	str	r3, [sp, #4]
 8004978:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800497a:	9300      	str	r3, [sp, #0]
 800497c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800497e:	220a      	movs	r2, #10
 8004980:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004982:	f7ff fe1b 	bl	80045bc <_PrintInt>
        break;
 8004986:	e042      	b.n	8004a0e <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	1d19      	adds	r1, r3, #4
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	6011      	str	r1, [r2, #0]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8004996:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004998:	f107 0014 	add.w	r0, r7, #20
 800499c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800499e:	9301      	str	r3, [sp, #4]
 80049a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049a2:	9300      	str	r3, [sp, #0]
 80049a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049a6:	220a      	movs	r2, #10
 80049a8:	f7ff fd72 	bl	8004490 <_PrintUnsigned>
        break;
 80049ac:	e02f      	b.n	8004a0e <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	1d19      	adds	r1, r3, #4
 80049b4:	687a      	ldr	r2, [r7, #4]
 80049b6:	6011      	str	r1, [r2, #0]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 80049bc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80049be:	f107 0014 	add.w	r0, r7, #20
 80049c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049c4:	9301      	str	r3, [sp, #4]
 80049c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049c8:	9300      	str	r3, [sp, #0]
 80049ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049cc:	2210      	movs	r2, #16
 80049ce:	f7ff fd5f 	bl	8004490 <_PrintUnsigned>
        break;
 80049d2:	e01c      	b.n	8004a0e <_VPrintTarget+0x332>
 80049d4:	2001434c 	.word	0x2001434c
      case 'p':
        v = va_arg(*pParamList, int);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	1d19      	adds	r1, r3, #4
 80049de:	687a      	ldr	r2, [r7, #4]
 80049e0:	6011      	str	r1, [r2, #0]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 80049e6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80049e8:	f107 0014 	add.w	r0, r7, #20
 80049ec:	2300      	movs	r3, #0
 80049ee:	9301      	str	r3, [sp, #4]
 80049f0:	2308      	movs	r3, #8
 80049f2:	9300      	str	r3, [sp, #0]
 80049f4:	2308      	movs	r3, #8
 80049f6:	2210      	movs	r2, #16
 80049f8:	f7ff fd4a 	bl	8004490 <_PrintUnsigned>
        break;
 80049fc:	e007      	b.n	8004a0e <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 80049fe:	f107 0314 	add.w	r3, r7, #20
 8004a02:	2125      	movs	r1, #37	; 0x25
 8004a04:	4618      	mov	r0, r3
 8004a06:	f7ff fcc7 	bl	8004398 <_StoreChar>
        break;
 8004a0a:	e000      	b.n	8004a0e <_VPrintTarget+0x332>
      default:
        break;
 8004a0c:	bf00      	nop
      }
      sFormat++;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	3301      	adds	r3, #1
 8004a12:	60fb      	str	r3, [r7, #12]
 8004a14:	e007      	b.n	8004a26 <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 8004a16:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8004a1a:	f107 0314 	add.w	r3, r7, #20
 8004a1e:	4611      	mov	r1, r2
 8004a20:	4618      	mov	r0, r3
 8004a22:	f7ff fcb9 	bl	8004398 <_StoreChar>
    }
  } while (*sFormat);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	781b      	ldrb	r3, [r3, #0]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	f47f ae72 	bne.w	8004714 <_VPrintTarget+0x38>
 8004a30:	e000      	b.n	8004a34 <_VPrintTarget+0x358>
      break;
 8004a32:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8004a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d041      	beq.n	8004abe <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 8004a3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a3c:	69fb      	ldr	r3, [r7, #28]
 8004a3e:	b2d2      	uxtb	r2, r2
 8004a40:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8004a42:	69bb      	ldr	r3, [r7, #24]
 8004a44:	643b      	str	r3, [r7, #64]	; 0x40
 8004a46:	6a3b      	ldr	r3, [r7, #32]
 8004a48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a4a:	e00b      	b.n	8004a64 <_VPrintTarget+0x388>
 8004a4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a4e:	b2da      	uxtb	r2, r3
 8004a50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a52:	1c59      	adds	r1, r3, #1
 8004a54:	6439      	str	r1, [r7, #64]	; 0x40
 8004a56:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004a5a:	b2d2      	uxtb	r2, r2
 8004a5c:	701a      	strb	r2, [r3, #0]
 8004a5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a60:	09db      	lsrs	r3, r3, #7
 8004a62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a66:	2b7f      	cmp	r3, #127	; 0x7f
 8004a68:	d8f0      	bhi.n	8004a4c <_VPrintTarget+0x370>
 8004a6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a6c:	1c5a      	adds	r2, r3, #1
 8004a6e:	643a      	str	r2, [r7, #64]	; 0x40
 8004a70:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004a72:	b2d2      	uxtb	r2, r2
 8004a74:	701a      	strb	r2, [r3, #0]
 8004a76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a78:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8004a7a:	69bb      	ldr	r3, [r7, #24]
 8004a7c:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a7e:	2300      	movs	r3, #0
 8004a80:	637b      	str	r3, [r7, #52]	; 0x34
 8004a82:	e00b      	b.n	8004a9c <_VPrintTarget+0x3c0>
 8004a84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a86:	b2da      	uxtb	r2, r3
 8004a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a8a:	1c59      	adds	r1, r3, #1
 8004a8c:	63b9      	str	r1, [r7, #56]	; 0x38
 8004a8e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004a92:	b2d2      	uxtb	r2, r2
 8004a94:	701a      	strb	r2, [r3, #0]
 8004a96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a98:	09db      	lsrs	r3, r3, #7
 8004a9a:	637b      	str	r3, [r7, #52]	; 0x34
 8004a9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a9e:	2b7f      	cmp	r3, #127	; 0x7f
 8004aa0:	d8f0      	bhi.n	8004a84 <_VPrintTarget+0x3a8>
 8004aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aa4:	1c5a      	adds	r2, r3, #1
 8004aa6:	63ba      	str	r2, [r7, #56]	; 0x38
 8004aa8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004aaa:	b2d2      	uxtb	r2, r2
 8004aac:	701a      	strb	r2, [r3, #0]
 8004aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ab0:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004ab2:	69fb      	ldr	r3, [r7, #28]
 8004ab4:	69b9      	ldr	r1, [r7, #24]
 8004ab6:	221a      	movs	r2, #26
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f7ff fb85 	bl	80041c8 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8004abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac0:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8004ac4:	bf00      	nop
 8004ac6:	3758      	adds	r7, #88	; 0x58
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}

08004acc <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b086      	sub	sp, #24
 8004ad0:	af02      	add	r7, sp, #8
 8004ad2:	60f8      	str	r0, [r7, #12]
 8004ad4:	60b9      	str	r1, [r7, #8]
 8004ad6:	607a      	str	r2, [r7, #4]
 8004ad8:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004ada:	2300      	movs	r3, #0
 8004adc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004ae0:	4917      	ldr	r1, [pc, #92]	; (8004b40 <SEGGER_SYSVIEW_Init+0x74>)
 8004ae2:	4818      	ldr	r0, [pc, #96]	; (8004b44 <SEGGER_SYSVIEW_Init+0x78>)
 8004ae4:	f7ff f93c 	bl	8003d60 <SEGGER_RTT_AllocUpBuffer>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	b2da      	uxtb	r2, r3
 8004aec:	4b16      	ldr	r3, [pc, #88]	; (8004b48 <SEGGER_SYSVIEW_Init+0x7c>)
 8004aee:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8004af0:	4b15      	ldr	r3, [pc, #84]	; (8004b48 <SEGGER_SYSVIEW_Init+0x7c>)
 8004af2:	785a      	ldrb	r2, [r3, #1]
 8004af4:	4b14      	ldr	r3, [pc, #80]	; (8004b48 <SEGGER_SYSVIEW_Init+0x7c>)
 8004af6:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004af8:	4b13      	ldr	r3, [pc, #76]	; (8004b48 <SEGGER_SYSVIEW_Init+0x7c>)
 8004afa:	7e1b      	ldrb	r3, [r3, #24]
 8004afc:	4618      	mov	r0, r3
 8004afe:	2300      	movs	r3, #0
 8004b00:	9300      	str	r3, [sp, #0]
 8004b02:	2308      	movs	r3, #8
 8004b04:	4a11      	ldr	r2, [pc, #68]	; (8004b4c <SEGGER_SYSVIEW_Init+0x80>)
 8004b06:	490f      	ldr	r1, [pc, #60]	; (8004b44 <SEGGER_SYSVIEW_Init+0x78>)
 8004b08:	f7ff f9ae 	bl	8003e68 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8004b0c:	4b0e      	ldr	r3, [pc, #56]	; (8004b48 <SEGGER_SYSVIEW_Init+0x7c>)
 8004b0e:	2200      	movs	r2, #0
 8004b10:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004b12:	4b0f      	ldr	r3, [pc, #60]	; (8004b50 <SEGGER_SYSVIEW_Init+0x84>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a0c      	ldr	r2, [pc, #48]	; (8004b48 <SEGGER_SYSVIEW_Init+0x7c>)
 8004b18:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8004b1a:	4a0b      	ldr	r2, [pc, #44]	; (8004b48 <SEGGER_SYSVIEW_Init+0x7c>)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8004b20:	4a09      	ldr	r2, [pc, #36]	; (8004b48 <SEGGER_SYSVIEW_Init+0x7c>)
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8004b26:	4a08      	ldr	r2, [pc, #32]	; (8004b48 <SEGGER_SYSVIEW_Init+0x7c>)
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8004b2c:	4a06      	ldr	r2, [pc, #24]	; (8004b48 <SEGGER_SYSVIEW_Init+0x7c>)
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8004b32:	4b05      	ldr	r3, [pc, #20]	; (8004b48 <SEGGER_SYSVIEW_Init+0x7c>)
 8004b34:	2200      	movs	r2, #0
 8004b36:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8004b38:	bf00      	nop
 8004b3a:	3710      	adds	r7, #16
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}
 8004b40:	20013314 	.word	0x20013314
 8004b44:	08005a00 	.word	0x08005a00
 8004b48:	2001431c 	.word	0x2001431c
 8004b4c:	20014314 	.word	0x20014314
 8004b50:	e0001004 	.word	0xe0001004

08004b54 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8004b54:	b480      	push	{r7}
 8004b56:	b083      	sub	sp, #12
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8004b5c:	4a04      	ldr	r2, [pc, #16]	; (8004b70 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6113      	str	r3, [r2, #16]
}
 8004b62:	bf00      	nop
 8004b64:	370c      	adds	r7, #12
 8004b66:	46bd      	mov	sp, r7
 8004b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6c:	4770      	bx	lr
 8004b6e:	bf00      	nop
 8004b70:	2001431c 	.word	0x2001431c

08004b74 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b084      	sub	sp, #16
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004b7c:	f3ef 8311 	mrs	r3, BASEPRI
 8004b80:	f04f 0120 	mov.w	r1, #32
 8004b84:	f381 8811 	msr	BASEPRI, r1
 8004b88:	60fb      	str	r3, [r7, #12]
 8004b8a:	4808      	ldr	r0, [pc, #32]	; (8004bac <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8004b8c:	f7ff fa29 	bl	8003fe2 <_PreparePacket>
 8004b90:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	68b9      	ldr	r1, [r7, #8]
 8004b96:	68b8      	ldr	r0, [r7, #8]
 8004b98:	f7ff fb16 	bl	80041c8 <_SendPacket>
  RECORD_END();
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f383 8811 	msr	BASEPRI, r3
}
 8004ba2:	bf00      	nop
 8004ba4:	3710      	adds	r7, #16
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}
 8004baa:	bf00      	nop
 8004bac:	2001434c 	.word	0x2001434c

08004bb0 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b088      	sub	sp, #32
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004bba:	f3ef 8311 	mrs	r3, BASEPRI
 8004bbe:	f04f 0120 	mov.w	r1, #32
 8004bc2:	f381 8811 	msr	BASEPRI, r1
 8004bc6:	617b      	str	r3, [r7, #20]
 8004bc8:	4816      	ldr	r0, [pc, #88]	; (8004c24 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8004bca:	f7ff fa0a 	bl	8003fe2 <_PreparePacket>
 8004bce:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	61fb      	str	r3, [r7, #28]
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	61bb      	str	r3, [r7, #24]
 8004bdc:	e00b      	b.n	8004bf6 <SEGGER_SYSVIEW_RecordU32+0x46>
 8004bde:	69bb      	ldr	r3, [r7, #24]
 8004be0:	b2da      	uxtb	r2, r3
 8004be2:	69fb      	ldr	r3, [r7, #28]
 8004be4:	1c59      	adds	r1, r3, #1
 8004be6:	61f9      	str	r1, [r7, #28]
 8004be8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004bec:	b2d2      	uxtb	r2, r2
 8004bee:	701a      	strb	r2, [r3, #0]
 8004bf0:	69bb      	ldr	r3, [r7, #24]
 8004bf2:	09db      	lsrs	r3, r3, #7
 8004bf4:	61bb      	str	r3, [r7, #24]
 8004bf6:	69bb      	ldr	r3, [r7, #24]
 8004bf8:	2b7f      	cmp	r3, #127	; 0x7f
 8004bfa:	d8f0      	bhi.n	8004bde <SEGGER_SYSVIEW_RecordU32+0x2e>
 8004bfc:	69fb      	ldr	r3, [r7, #28]
 8004bfe:	1c5a      	adds	r2, r3, #1
 8004c00:	61fa      	str	r2, [r7, #28]
 8004c02:	69ba      	ldr	r2, [r7, #24]
 8004c04:	b2d2      	uxtb	r2, r2
 8004c06:	701a      	strb	r2, [r3, #0]
 8004c08:	69fb      	ldr	r3, [r7, #28]
 8004c0a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004c0c:	687a      	ldr	r2, [r7, #4]
 8004c0e:	68f9      	ldr	r1, [r7, #12]
 8004c10:	6938      	ldr	r0, [r7, #16]
 8004c12:	f7ff fad9 	bl	80041c8 <_SendPacket>
  RECORD_END();
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	f383 8811 	msr	BASEPRI, r3
}
 8004c1c:	bf00      	nop
 8004c1e:	3720      	adds	r7, #32
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}
 8004c24:	2001434c 	.word	0x2001434c

08004c28 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b08c      	sub	sp, #48	; 0x30
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	60f8      	str	r0, [r7, #12]
 8004c30:	60b9      	str	r1, [r7, #8]
 8004c32:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004c34:	f3ef 8311 	mrs	r3, BASEPRI
 8004c38:	f04f 0120 	mov.w	r1, #32
 8004c3c:	f381 8811 	msr	BASEPRI, r1
 8004c40:	61fb      	str	r3, [r7, #28]
 8004c42:	4825      	ldr	r0, [pc, #148]	; (8004cd8 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8004c44:	f7ff f9cd 	bl	8003fe2 <_PreparePacket>
 8004c48:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004c4a:	69bb      	ldr	r3, [r7, #24]
 8004c4c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c56:	e00b      	b.n	8004c70 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8004c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c5a:	b2da      	uxtb	r2, r3
 8004c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c5e:	1c59      	adds	r1, r3, #1
 8004c60:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004c62:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004c66:	b2d2      	uxtb	r2, r2
 8004c68:	701a      	strb	r2, [r3, #0]
 8004c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c6c:	09db      	lsrs	r3, r3, #7
 8004c6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c72:	2b7f      	cmp	r3, #127	; 0x7f
 8004c74:	d8f0      	bhi.n	8004c58 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8004c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c78:	1c5a      	adds	r2, r3, #1
 8004c7a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c7e:	b2d2      	uxtb	r2, r2
 8004c80:	701a      	strb	r2, [r3, #0]
 8004c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c84:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	627b      	str	r3, [r7, #36]	; 0x24
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	623b      	str	r3, [r7, #32]
 8004c8e:	e00b      	b.n	8004ca8 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8004c90:	6a3b      	ldr	r3, [r7, #32]
 8004c92:	b2da      	uxtb	r2, r3
 8004c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c96:	1c59      	adds	r1, r3, #1
 8004c98:	6279      	str	r1, [r7, #36]	; 0x24
 8004c9a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004c9e:	b2d2      	uxtb	r2, r2
 8004ca0:	701a      	strb	r2, [r3, #0]
 8004ca2:	6a3b      	ldr	r3, [r7, #32]
 8004ca4:	09db      	lsrs	r3, r3, #7
 8004ca6:	623b      	str	r3, [r7, #32]
 8004ca8:	6a3b      	ldr	r3, [r7, #32]
 8004caa:	2b7f      	cmp	r3, #127	; 0x7f
 8004cac:	d8f0      	bhi.n	8004c90 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8004cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb0:	1c5a      	adds	r2, r3, #1
 8004cb2:	627a      	str	r2, [r7, #36]	; 0x24
 8004cb4:	6a3a      	ldr	r2, [r7, #32]
 8004cb6:	b2d2      	uxtb	r2, r2
 8004cb8:	701a      	strb	r2, [r3, #0]
 8004cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cbc:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004cbe:	68fa      	ldr	r2, [r7, #12]
 8004cc0:	6979      	ldr	r1, [r7, #20]
 8004cc2:	69b8      	ldr	r0, [r7, #24]
 8004cc4:	f7ff fa80 	bl	80041c8 <_SendPacket>
  RECORD_END();
 8004cc8:	69fb      	ldr	r3, [r7, #28]
 8004cca:	f383 8811 	msr	BASEPRI, r3
}
 8004cce:	bf00      	nop
 8004cd0:	3730      	adds	r7, #48	; 0x30
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}
 8004cd6:	bf00      	nop
 8004cd8:	2001434c 	.word	0x2001434c

08004cdc <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b08c      	sub	sp, #48	; 0x30
 8004ce0:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8004ce2:	4b59      	ldr	r3, [pc, #356]	; (8004e48 <SEGGER_SYSVIEW_Start+0x16c>)
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8004ce8:	f3ef 8311 	mrs	r3, BASEPRI
 8004cec:	f04f 0120 	mov.w	r1, #32
 8004cf0:	f381 8811 	msr	BASEPRI, r1
 8004cf4:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8004cf6:	4b54      	ldr	r3, [pc, #336]	; (8004e48 <SEGGER_SYSVIEW_Start+0x16c>)
 8004cf8:	785b      	ldrb	r3, [r3, #1]
 8004cfa:	220a      	movs	r2, #10
 8004cfc:	4953      	ldr	r1, [pc, #332]	; (8004e4c <SEGGER_SYSVIEW_Start+0x170>)
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f7fb fa66 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8004d0a:	f7fe fcfd 	bl	8003708 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8004d0e:	200a      	movs	r0, #10
 8004d10:	f7ff ff30 	bl	8004b74 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004d14:	f3ef 8311 	mrs	r3, BASEPRI
 8004d18:	f04f 0120 	mov.w	r1, #32
 8004d1c:	f381 8811 	msr	BASEPRI, r1
 8004d20:	60bb      	str	r3, [r7, #8]
 8004d22:	484b      	ldr	r0, [pc, #300]	; (8004e50 <SEGGER_SYSVIEW_Start+0x174>)
 8004d24:	f7ff f95d 	bl	8003fe2 <_PreparePacket>
 8004d28:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d32:	4b45      	ldr	r3, [pc, #276]	; (8004e48 <SEGGER_SYSVIEW_Start+0x16c>)
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d38:	e00b      	b.n	8004d52 <SEGGER_SYSVIEW_Start+0x76>
 8004d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d3c:	b2da      	uxtb	r2, r3
 8004d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d40:	1c59      	adds	r1, r3, #1
 8004d42:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004d44:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d48:	b2d2      	uxtb	r2, r2
 8004d4a:	701a      	strb	r2, [r3, #0]
 8004d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d4e:	09db      	lsrs	r3, r3, #7
 8004d50:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d54:	2b7f      	cmp	r3, #127	; 0x7f
 8004d56:	d8f0      	bhi.n	8004d3a <SEGGER_SYSVIEW_Start+0x5e>
 8004d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d5a:	1c5a      	adds	r2, r3, #1
 8004d5c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d60:	b2d2      	uxtb	r2, r2
 8004d62:	701a      	strb	r2, [r3, #0]
 8004d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d66:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	627b      	str	r3, [r7, #36]	; 0x24
 8004d6c:	4b36      	ldr	r3, [pc, #216]	; (8004e48 <SEGGER_SYSVIEW_Start+0x16c>)
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	623b      	str	r3, [r7, #32]
 8004d72:	e00b      	b.n	8004d8c <SEGGER_SYSVIEW_Start+0xb0>
 8004d74:	6a3b      	ldr	r3, [r7, #32]
 8004d76:	b2da      	uxtb	r2, r3
 8004d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d7a:	1c59      	adds	r1, r3, #1
 8004d7c:	6279      	str	r1, [r7, #36]	; 0x24
 8004d7e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d82:	b2d2      	uxtb	r2, r2
 8004d84:	701a      	strb	r2, [r3, #0]
 8004d86:	6a3b      	ldr	r3, [r7, #32]
 8004d88:	09db      	lsrs	r3, r3, #7
 8004d8a:	623b      	str	r3, [r7, #32]
 8004d8c:	6a3b      	ldr	r3, [r7, #32]
 8004d8e:	2b7f      	cmp	r3, #127	; 0x7f
 8004d90:	d8f0      	bhi.n	8004d74 <SEGGER_SYSVIEW_Start+0x98>
 8004d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d94:	1c5a      	adds	r2, r3, #1
 8004d96:	627a      	str	r2, [r7, #36]	; 0x24
 8004d98:	6a3a      	ldr	r2, [r7, #32]
 8004d9a:	b2d2      	uxtb	r2, r2
 8004d9c:	701a      	strb	r2, [r3, #0]
 8004d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	61fb      	str	r3, [r7, #28]
 8004da6:	4b28      	ldr	r3, [pc, #160]	; (8004e48 <SEGGER_SYSVIEW_Start+0x16c>)
 8004da8:	691b      	ldr	r3, [r3, #16]
 8004daa:	61bb      	str	r3, [r7, #24]
 8004dac:	e00b      	b.n	8004dc6 <SEGGER_SYSVIEW_Start+0xea>
 8004dae:	69bb      	ldr	r3, [r7, #24]
 8004db0:	b2da      	uxtb	r2, r3
 8004db2:	69fb      	ldr	r3, [r7, #28]
 8004db4:	1c59      	adds	r1, r3, #1
 8004db6:	61f9      	str	r1, [r7, #28]
 8004db8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004dbc:	b2d2      	uxtb	r2, r2
 8004dbe:	701a      	strb	r2, [r3, #0]
 8004dc0:	69bb      	ldr	r3, [r7, #24]
 8004dc2:	09db      	lsrs	r3, r3, #7
 8004dc4:	61bb      	str	r3, [r7, #24]
 8004dc6:	69bb      	ldr	r3, [r7, #24]
 8004dc8:	2b7f      	cmp	r3, #127	; 0x7f
 8004dca:	d8f0      	bhi.n	8004dae <SEGGER_SYSVIEW_Start+0xd2>
 8004dcc:	69fb      	ldr	r3, [r7, #28]
 8004dce:	1c5a      	adds	r2, r3, #1
 8004dd0:	61fa      	str	r2, [r7, #28]
 8004dd2:	69ba      	ldr	r2, [r7, #24]
 8004dd4:	b2d2      	uxtb	r2, r2
 8004dd6:	701a      	strb	r2, [r3, #0]
 8004dd8:	69fb      	ldr	r3, [r7, #28]
 8004dda:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	617b      	str	r3, [r7, #20]
 8004de0:	2300      	movs	r3, #0
 8004de2:	613b      	str	r3, [r7, #16]
 8004de4:	e00b      	b.n	8004dfe <SEGGER_SYSVIEW_Start+0x122>
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	b2da      	uxtb	r2, r3
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	1c59      	adds	r1, r3, #1
 8004dee:	6179      	str	r1, [r7, #20]
 8004df0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004df4:	b2d2      	uxtb	r2, r2
 8004df6:	701a      	strb	r2, [r3, #0]
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	09db      	lsrs	r3, r3, #7
 8004dfc:	613b      	str	r3, [r7, #16]
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	2b7f      	cmp	r3, #127	; 0x7f
 8004e02:	d8f0      	bhi.n	8004de6 <SEGGER_SYSVIEW_Start+0x10a>
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	1c5a      	adds	r2, r3, #1
 8004e08:	617a      	str	r2, [r7, #20]
 8004e0a:	693a      	ldr	r2, [r7, #16]
 8004e0c:	b2d2      	uxtb	r2, r2
 8004e0e:	701a      	strb	r2, [r3, #0]
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004e14:	2218      	movs	r2, #24
 8004e16:	6839      	ldr	r1, [r7, #0]
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	f7ff f9d5 	bl	80041c8 <_SendPacket>
      RECORD_END();
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004e24:	4b08      	ldr	r3, [pc, #32]	; (8004e48 <SEGGER_SYSVIEW_Start+0x16c>)
 8004e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d002      	beq.n	8004e32 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8004e2c:	4b06      	ldr	r3, [pc, #24]	; (8004e48 <SEGGER_SYSVIEW_Start+0x16c>)
 8004e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e30:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8004e32:	f000 f9eb 	bl	800520c <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8004e36:	f000 f9b1 	bl	800519c <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8004e3a:	f000 fc13 	bl	8005664 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8004e3e:	bf00      	nop
 8004e40:	3730      	adds	r7, #48	; 0x30
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}
 8004e46:	bf00      	nop
 8004e48:	2001431c 	.word	0x2001431c
 8004e4c:	08005a2c 	.word	0x08005a2c
 8004e50:	2001434c 	.word	0x2001434c

08004e54 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b082      	sub	sp, #8
 8004e58:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004e5a:	f3ef 8311 	mrs	r3, BASEPRI
 8004e5e:	f04f 0120 	mov.w	r1, #32
 8004e62:	f381 8811 	msr	BASEPRI, r1
 8004e66:	607b      	str	r3, [r7, #4]
 8004e68:	480b      	ldr	r0, [pc, #44]	; (8004e98 <SEGGER_SYSVIEW_Stop+0x44>)
 8004e6a:	f7ff f8ba 	bl	8003fe2 <_PreparePacket>
 8004e6e:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8004e70:	4b0a      	ldr	r3, [pc, #40]	; (8004e9c <SEGGER_SYSVIEW_Stop+0x48>)
 8004e72:	781b      	ldrb	r3, [r3, #0]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d007      	beq.n	8004e88 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8004e78:	220b      	movs	r2, #11
 8004e7a:	6839      	ldr	r1, [r7, #0]
 8004e7c:	6838      	ldr	r0, [r7, #0]
 8004e7e:	f7ff f9a3 	bl	80041c8 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8004e82:	4b06      	ldr	r3, [pc, #24]	; (8004e9c <SEGGER_SYSVIEW_Stop+0x48>)
 8004e84:	2200      	movs	r2, #0
 8004e86:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	f383 8811 	msr	BASEPRI, r3
}
 8004e8e:	bf00      	nop
 8004e90:	3708      	adds	r7, #8
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}
 8004e96:	bf00      	nop
 8004e98:	2001434c 	.word	0x2001434c
 8004e9c:	2001431c 	.word	0x2001431c

08004ea0 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b08c      	sub	sp, #48	; 0x30
 8004ea4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004ea6:	f3ef 8311 	mrs	r3, BASEPRI
 8004eaa:	f04f 0120 	mov.w	r1, #32
 8004eae:	f381 8811 	msr	BASEPRI, r1
 8004eb2:	60fb      	str	r3, [r7, #12]
 8004eb4:	4845      	ldr	r0, [pc, #276]	; (8004fcc <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8004eb6:	f7ff f894 	bl	8003fe2 <_PreparePacket>
 8004eba:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ec4:	4b42      	ldr	r3, [pc, #264]	; (8004fd0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004eca:	e00b      	b.n	8004ee4 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8004ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ece:	b2da      	uxtb	r2, r3
 8004ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ed2:	1c59      	adds	r1, r3, #1
 8004ed4:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004ed6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004eda:	b2d2      	uxtb	r2, r2
 8004edc:	701a      	strb	r2, [r3, #0]
 8004ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ee0:	09db      	lsrs	r3, r3, #7
 8004ee2:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ee6:	2b7f      	cmp	r3, #127	; 0x7f
 8004ee8:	d8f0      	bhi.n	8004ecc <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8004eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eec:	1c5a      	adds	r2, r3, #1
 8004eee:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ef0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ef2:	b2d2      	uxtb	r2, r2
 8004ef4:	701a      	strb	r2, [r3, #0]
 8004ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ef8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	627b      	str	r3, [r7, #36]	; 0x24
 8004efe:	4b34      	ldr	r3, [pc, #208]	; (8004fd0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	623b      	str	r3, [r7, #32]
 8004f04:	e00b      	b.n	8004f1e <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8004f06:	6a3b      	ldr	r3, [r7, #32]
 8004f08:	b2da      	uxtb	r2, r3
 8004f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0c:	1c59      	adds	r1, r3, #1
 8004f0e:	6279      	str	r1, [r7, #36]	; 0x24
 8004f10:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f14:	b2d2      	uxtb	r2, r2
 8004f16:	701a      	strb	r2, [r3, #0]
 8004f18:	6a3b      	ldr	r3, [r7, #32]
 8004f1a:	09db      	lsrs	r3, r3, #7
 8004f1c:	623b      	str	r3, [r7, #32]
 8004f1e:	6a3b      	ldr	r3, [r7, #32]
 8004f20:	2b7f      	cmp	r3, #127	; 0x7f
 8004f22:	d8f0      	bhi.n	8004f06 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8004f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f26:	1c5a      	adds	r2, r3, #1
 8004f28:	627a      	str	r2, [r7, #36]	; 0x24
 8004f2a:	6a3a      	ldr	r2, [r7, #32]
 8004f2c:	b2d2      	uxtb	r2, r2
 8004f2e:	701a      	strb	r2, [r3, #0]
 8004f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f32:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	61fb      	str	r3, [r7, #28]
 8004f38:	4b25      	ldr	r3, [pc, #148]	; (8004fd0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004f3a:	691b      	ldr	r3, [r3, #16]
 8004f3c:	61bb      	str	r3, [r7, #24]
 8004f3e:	e00b      	b.n	8004f58 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8004f40:	69bb      	ldr	r3, [r7, #24]
 8004f42:	b2da      	uxtb	r2, r3
 8004f44:	69fb      	ldr	r3, [r7, #28]
 8004f46:	1c59      	adds	r1, r3, #1
 8004f48:	61f9      	str	r1, [r7, #28]
 8004f4a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f4e:	b2d2      	uxtb	r2, r2
 8004f50:	701a      	strb	r2, [r3, #0]
 8004f52:	69bb      	ldr	r3, [r7, #24]
 8004f54:	09db      	lsrs	r3, r3, #7
 8004f56:	61bb      	str	r3, [r7, #24]
 8004f58:	69bb      	ldr	r3, [r7, #24]
 8004f5a:	2b7f      	cmp	r3, #127	; 0x7f
 8004f5c:	d8f0      	bhi.n	8004f40 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8004f5e:	69fb      	ldr	r3, [r7, #28]
 8004f60:	1c5a      	adds	r2, r3, #1
 8004f62:	61fa      	str	r2, [r7, #28]
 8004f64:	69ba      	ldr	r2, [r7, #24]
 8004f66:	b2d2      	uxtb	r2, r2
 8004f68:	701a      	strb	r2, [r3, #0]
 8004f6a:	69fb      	ldr	r3, [r7, #28]
 8004f6c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	617b      	str	r3, [r7, #20]
 8004f72:	2300      	movs	r3, #0
 8004f74:	613b      	str	r3, [r7, #16]
 8004f76:	e00b      	b.n	8004f90 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	b2da      	uxtb	r2, r3
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	1c59      	adds	r1, r3, #1
 8004f80:	6179      	str	r1, [r7, #20]
 8004f82:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f86:	b2d2      	uxtb	r2, r2
 8004f88:	701a      	strb	r2, [r3, #0]
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	09db      	lsrs	r3, r3, #7
 8004f8e:	613b      	str	r3, [r7, #16]
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	2b7f      	cmp	r3, #127	; 0x7f
 8004f94:	d8f0      	bhi.n	8004f78 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	1c5a      	adds	r2, r3, #1
 8004f9a:	617a      	str	r2, [r7, #20]
 8004f9c:	693a      	ldr	r2, [r7, #16]
 8004f9e:	b2d2      	uxtb	r2, r2
 8004fa0:	701a      	strb	r2, [r3, #0]
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004fa6:	2218      	movs	r2, #24
 8004fa8:	6879      	ldr	r1, [r7, #4]
 8004faa:	68b8      	ldr	r0, [r7, #8]
 8004fac:	f7ff f90c 	bl	80041c8 <_SendPacket>
  RECORD_END();
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004fb6:	4b06      	ldr	r3, [pc, #24]	; (8004fd0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d002      	beq.n	8004fc4 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8004fbe:	4b04      	ldr	r3, [pc, #16]	; (8004fd0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc2:	4798      	blx	r3
  }
}
 8004fc4:	bf00      	nop
 8004fc6:	3730      	adds	r7, #48	; 0x30
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}
 8004fcc:	2001434c 	.word	0x2001434c
 8004fd0:	2001431c 	.word	0x2001431c

08004fd4 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b092      	sub	sp, #72	; 0x48
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8004fdc:	f3ef 8311 	mrs	r3, BASEPRI
 8004fe0:	f04f 0120 	mov.w	r1, #32
 8004fe4:	f381 8811 	msr	BASEPRI, r1
 8004fe8:	617b      	str	r3, [r7, #20]
 8004fea:	486a      	ldr	r0, [pc, #424]	; (8005194 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8004fec:	f7fe fff9 	bl	8003fe2 <_PreparePacket>
 8004ff0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	647b      	str	r3, [r7, #68]	; 0x44
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	4b66      	ldr	r3, [pc, #408]	; (8005198 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005000:	691b      	ldr	r3, [r3, #16]
 8005002:	1ad3      	subs	r3, r2, r3
 8005004:	643b      	str	r3, [r7, #64]	; 0x40
 8005006:	e00b      	b.n	8005020 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8005008:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800500a:	b2da      	uxtb	r2, r3
 800500c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800500e:	1c59      	adds	r1, r3, #1
 8005010:	6479      	str	r1, [r7, #68]	; 0x44
 8005012:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005016:	b2d2      	uxtb	r2, r2
 8005018:	701a      	strb	r2, [r3, #0]
 800501a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800501c:	09db      	lsrs	r3, r3, #7
 800501e:	643b      	str	r3, [r7, #64]	; 0x40
 8005020:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005022:	2b7f      	cmp	r3, #127	; 0x7f
 8005024:	d8f0      	bhi.n	8005008 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8005026:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005028:	1c5a      	adds	r2, r3, #1
 800502a:	647a      	str	r2, [r7, #68]	; 0x44
 800502c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800502e:	b2d2      	uxtb	r2, r2
 8005030:	701a      	strb	r2, [r3, #0]
 8005032:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005034:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	63fb      	str	r3, [r7, #60]	; 0x3c
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005040:	e00b      	b.n	800505a <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8005042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005044:	b2da      	uxtb	r2, r3
 8005046:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005048:	1c59      	adds	r1, r3, #1
 800504a:	63f9      	str	r1, [r7, #60]	; 0x3c
 800504c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005050:	b2d2      	uxtb	r2, r2
 8005052:	701a      	strb	r2, [r3, #0]
 8005054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005056:	09db      	lsrs	r3, r3, #7
 8005058:	63bb      	str	r3, [r7, #56]	; 0x38
 800505a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800505c:	2b7f      	cmp	r3, #127	; 0x7f
 800505e:	d8f0      	bhi.n	8005042 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8005060:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005062:	1c5a      	adds	r2, r3, #1
 8005064:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005066:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005068:	b2d2      	uxtb	r2, r2
 800506a:	701a      	strb	r2, [r3, #0]
 800506c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800506e:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	2220      	movs	r2, #32
 8005076:	4619      	mov	r1, r3
 8005078:	68f8      	ldr	r0, [r7, #12]
 800507a:	f7fe ff65 	bl	8003f48 <_EncodeStr>
 800507e:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8005080:	2209      	movs	r2, #9
 8005082:	68f9      	ldr	r1, [r7, #12]
 8005084:	6938      	ldr	r0, [r7, #16]
 8005086:	f7ff f89f 	bl	80041c8 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	637b      	str	r3, [r7, #52]	; 0x34
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	4b40      	ldr	r3, [pc, #256]	; (8005198 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005098:	691b      	ldr	r3, [r3, #16]
 800509a:	1ad3      	subs	r3, r2, r3
 800509c:	633b      	str	r3, [r7, #48]	; 0x30
 800509e:	e00b      	b.n	80050b8 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80050a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a2:	b2da      	uxtb	r2, r3
 80050a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050a6:	1c59      	adds	r1, r3, #1
 80050a8:	6379      	str	r1, [r7, #52]	; 0x34
 80050aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80050ae:	b2d2      	uxtb	r2, r2
 80050b0:	701a      	strb	r2, [r3, #0]
 80050b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050b4:	09db      	lsrs	r3, r3, #7
 80050b6:	633b      	str	r3, [r7, #48]	; 0x30
 80050b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ba:	2b7f      	cmp	r3, #127	; 0x7f
 80050bc:	d8f0      	bhi.n	80050a0 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80050be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050c0:	1c5a      	adds	r2, r3, #1
 80050c2:	637a      	str	r2, [r7, #52]	; 0x34
 80050c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050c6:	b2d2      	uxtb	r2, r2
 80050c8:	701a      	strb	r2, [r3, #0]
 80050ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050cc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	68db      	ldr	r3, [r3, #12]
 80050d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80050d8:	e00b      	b.n	80050f2 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80050da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050dc:	b2da      	uxtb	r2, r3
 80050de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050e0:	1c59      	adds	r1, r3, #1
 80050e2:	62f9      	str	r1, [r7, #44]	; 0x2c
 80050e4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80050e8:	b2d2      	uxtb	r2, r2
 80050ea:	701a      	strb	r2, [r3, #0]
 80050ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ee:	09db      	lsrs	r3, r3, #7
 80050f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80050f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050f4:	2b7f      	cmp	r3, #127	; 0x7f
 80050f6:	d8f0      	bhi.n	80050da <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80050f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050fa:	1c5a      	adds	r2, r3, #1
 80050fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80050fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005100:	b2d2      	uxtb	r2, r2
 8005102:	701a      	strb	r2, [r3, #0]
 8005104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005106:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	627b      	str	r3, [r7, #36]	; 0x24
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	691b      	ldr	r3, [r3, #16]
 8005110:	623b      	str	r3, [r7, #32]
 8005112:	e00b      	b.n	800512c <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8005114:	6a3b      	ldr	r3, [r7, #32]
 8005116:	b2da      	uxtb	r2, r3
 8005118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511a:	1c59      	adds	r1, r3, #1
 800511c:	6279      	str	r1, [r7, #36]	; 0x24
 800511e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005122:	b2d2      	uxtb	r2, r2
 8005124:	701a      	strb	r2, [r3, #0]
 8005126:	6a3b      	ldr	r3, [r7, #32]
 8005128:	09db      	lsrs	r3, r3, #7
 800512a:	623b      	str	r3, [r7, #32]
 800512c:	6a3b      	ldr	r3, [r7, #32]
 800512e:	2b7f      	cmp	r3, #127	; 0x7f
 8005130:	d8f0      	bhi.n	8005114 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8005132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005134:	1c5a      	adds	r2, r3, #1
 8005136:	627a      	str	r2, [r7, #36]	; 0x24
 8005138:	6a3a      	ldr	r2, [r7, #32]
 800513a:	b2d2      	uxtb	r2, r2
 800513c:	701a      	strb	r2, [r3, #0]
 800513e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005140:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	61fb      	str	r3, [r7, #28]
 8005146:	2300      	movs	r3, #0
 8005148:	61bb      	str	r3, [r7, #24]
 800514a:	e00b      	b.n	8005164 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 800514c:	69bb      	ldr	r3, [r7, #24]
 800514e:	b2da      	uxtb	r2, r3
 8005150:	69fb      	ldr	r3, [r7, #28]
 8005152:	1c59      	adds	r1, r3, #1
 8005154:	61f9      	str	r1, [r7, #28]
 8005156:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800515a:	b2d2      	uxtb	r2, r2
 800515c:	701a      	strb	r2, [r3, #0]
 800515e:	69bb      	ldr	r3, [r7, #24]
 8005160:	09db      	lsrs	r3, r3, #7
 8005162:	61bb      	str	r3, [r7, #24]
 8005164:	69bb      	ldr	r3, [r7, #24]
 8005166:	2b7f      	cmp	r3, #127	; 0x7f
 8005168:	d8f0      	bhi.n	800514c <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800516a:	69fb      	ldr	r3, [r7, #28]
 800516c:	1c5a      	adds	r2, r3, #1
 800516e:	61fa      	str	r2, [r7, #28]
 8005170:	69ba      	ldr	r2, [r7, #24]
 8005172:	b2d2      	uxtb	r2, r2
 8005174:	701a      	strb	r2, [r3, #0]
 8005176:	69fb      	ldr	r3, [r7, #28]
 8005178:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800517a:	2215      	movs	r2, #21
 800517c:	68f9      	ldr	r1, [r7, #12]
 800517e:	6938      	ldr	r0, [r7, #16]
 8005180:	f7ff f822 	bl	80041c8 <_SendPacket>
  RECORD_END();
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	f383 8811 	msr	BASEPRI, r3
}
 800518a:	bf00      	nop
 800518c:	3748      	adds	r7, #72	; 0x48
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}
 8005192:	bf00      	nop
 8005194:	2001434c 	.word	0x2001434c
 8005198:	2001431c 	.word	0x2001431c

0800519c <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 800519c:	b580      	push	{r7, lr}
 800519e:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80051a0:	4b07      	ldr	r3, [pc, #28]	; (80051c0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80051a2:	6a1b      	ldr	r3, [r3, #32]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d008      	beq.n	80051ba <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80051a8:	4b05      	ldr	r3, [pc, #20]	; (80051c0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80051aa:	6a1b      	ldr	r3, [r3, #32]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d003      	beq.n	80051ba <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80051b2:	4b03      	ldr	r3, [pc, #12]	; (80051c0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80051b4:	6a1b      	ldr	r3, [r3, #32]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	4798      	blx	r3
  }
}
 80051ba:	bf00      	nop
 80051bc:	bd80      	pop	{r7, pc}
 80051be:	bf00      	nop
 80051c0:	2001431c 	.word	0x2001431c

080051c4 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b086      	sub	sp, #24
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80051cc:	f3ef 8311 	mrs	r3, BASEPRI
 80051d0:	f04f 0120 	mov.w	r1, #32
 80051d4:	f381 8811 	msr	BASEPRI, r1
 80051d8:	617b      	str	r3, [r7, #20]
 80051da:	480b      	ldr	r0, [pc, #44]	; (8005208 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80051dc:	f7fe ff01 	bl	8003fe2 <_PreparePacket>
 80051e0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80051e2:	2280      	movs	r2, #128	; 0x80
 80051e4:	6879      	ldr	r1, [r7, #4]
 80051e6:	6938      	ldr	r0, [r7, #16]
 80051e8:	f7fe feae 	bl	8003f48 <_EncodeStr>
 80051ec:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80051ee:	220e      	movs	r2, #14
 80051f0:	68f9      	ldr	r1, [r7, #12]
 80051f2:	6938      	ldr	r0, [r7, #16]
 80051f4:	f7fe ffe8 	bl	80041c8 <_SendPacket>
  RECORD_END();
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	f383 8811 	msr	BASEPRI, r3
}
 80051fe:	bf00      	nop
 8005200:	3718      	adds	r7, #24
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}
 8005206:	bf00      	nop
 8005208:	2001434c 	.word	0x2001434c

0800520c <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800520c:	b590      	push	{r4, r7, lr}
 800520e:	b083      	sub	sp, #12
 8005210:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8005212:	4b15      	ldr	r3, [pc, #84]	; (8005268 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005214:	6a1b      	ldr	r3, [r3, #32]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d01a      	beq.n	8005250 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800521a:	4b13      	ldr	r3, [pc, #76]	; (8005268 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800521c:	6a1b      	ldr	r3, [r3, #32]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d015      	beq.n	8005250 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8005224:	4b10      	ldr	r3, [pc, #64]	; (8005268 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005226:	6a1b      	ldr	r3, [r3, #32]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4798      	blx	r3
 800522c:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005230:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8005232:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005236:	f04f 0200 	mov.w	r2, #0
 800523a:	f04f 0300 	mov.w	r3, #0
 800523e:	000a      	movs	r2, r1
 8005240:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005242:	4613      	mov	r3, r2
 8005244:	461a      	mov	r2, r3
 8005246:	4621      	mov	r1, r4
 8005248:	200d      	movs	r0, #13
 800524a:	f7ff fced 	bl	8004c28 <SEGGER_SYSVIEW_RecordU32x2>
 800524e:	e006      	b.n	800525e <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8005250:	4b06      	ldr	r3, [pc, #24]	; (800526c <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4619      	mov	r1, r3
 8005256:	200c      	movs	r0, #12
 8005258:	f7ff fcaa 	bl	8004bb0 <SEGGER_SYSVIEW_RecordU32>
  }
}
 800525c:	bf00      	nop
 800525e:	bf00      	nop
 8005260:	370c      	adds	r7, #12
 8005262:	46bd      	mov	sp, r7
 8005264:	bd90      	pop	{r4, r7, pc}
 8005266:	bf00      	nop
 8005268:	2001431c 	.word	0x2001431c
 800526c:	e0001004 	.word	0xe0001004

08005270 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8005270:	b580      	push	{r7, lr}
 8005272:	b086      	sub	sp, #24
 8005274:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005276:	f3ef 8311 	mrs	r3, BASEPRI
 800527a:	f04f 0120 	mov.w	r1, #32
 800527e:	f381 8811 	msr	BASEPRI, r1
 8005282:	60fb      	str	r3, [r7, #12]
 8005284:	4819      	ldr	r0, [pc, #100]	; (80052ec <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8005286:	f7fe feac 	bl	8003fe2 <_PreparePacket>
 800528a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8005290:	4b17      	ldr	r3, [pc, #92]	; (80052f0 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005298:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	617b      	str	r3, [r7, #20]
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	613b      	str	r3, [r7, #16]
 80052a2:	e00b      	b.n	80052bc <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	b2da      	uxtb	r2, r3
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	1c59      	adds	r1, r3, #1
 80052ac:	6179      	str	r1, [r7, #20]
 80052ae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80052b2:	b2d2      	uxtb	r2, r2
 80052b4:	701a      	strb	r2, [r3, #0]
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	09db      	lsrs	r3, r3, #7
 80052ba:	613b      	str	r3, [r7, #16]
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	2b7f      	cmp	r3, #127	; 0x7f
 80052c0:	d8f0      	bhi.n	80052a4 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	1c5a      	adds	r2, r3, #1
 80052c6:	617a      	str	r2, [r7, #20]
 80052c8:	693a      	ldr	r2, [r7, #16]
 80052ca:	b2d2      	uxtb	r2, r2
 80052cc:	701a      	strb	r2, [r3, #0]
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80052d2:	2202      	movs	r2, #2
 80052d4:	6879      	ldr	r1, [r7, #4]
 80052d6:	68b8      	ldr	r0, [r7, #8]
 80052d8:	f7fe ff76 	bl	80041c8 <_SendPacket>
  RECORD_END();
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f383 8811 	msr	BASEPRI, r3
}
 80052e2:	bf00      	nop
 80052e4:	3718      	adds	r7, #24
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}
 80052ea:	bf00      	nop
 80052ec:	2001434c 	.word	0x2001434c
 80052f0:	e000ed04 	.word	0xe000ed04

080052f4 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b082      	sub	sp, #8
 80052f8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80052fa:	f3ef 8311 	mrs	r3, BASEPRI
 80052fe:	f04f 0120 	mov.w	r1, #32
 8005302:	f381 8811 	msr	BASEPRI, r1
 8005306:	607b      	str	r3, [r7, #4]
 8005308:	4807      	ldr	r0, [pc, #28]	; (8005328 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800530a:	f7fe fe6a 	bl	8003fe2 <_PreparePacket>
 800530e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8005310:	2203      	movs	r2, #3
 8005312:	6839      	ldr	r1, [r7, #0]
 8005314:	6838      	ldr	r0, [r7, #0]
 8005316:	f7fe ff57 	bl	80041c8 <_SendPacket>
  RECORD_END();
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f383 8811 	msr	BASEPRI, r3
}
 8005320:	bf00      	nop
 8005322:	3708      	adds	r7, #8
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}
 8005328:	2001434c 	.word	0x2001434c

0800532c <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 800532c:	b580      	push	{r7, lr}
 800532e:	b082      	sub	sp, #8
 8005330:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005332:	f3ef 8311 	mrs	r3, BASEPRI
 8005336:	f04f 0120 	mov.w	r1, #32
 800533a:	f381 8811 	msr	BASEPRI, r1
 800533e:	607b      	str	r3, [r7, #4]
 8005340:	4807      	ldr	r0, [pc, #28]	; (8005360 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8005342:	f7fe fe4e 	bl	8003fe2 <_PreparePacket>
 8005346:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8005348:	2212      	movs	r2, #18
 800534a:	6839      	ldr	r1, [r7, #0]
 800534c:	6838      	ldr	r0, [r7, #0]
 800534e:	f7fe ff3b 	bl	80041c8 <_SendPacket>
  RECORD_END();
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f383 8811 	msr	BASEPRI, r3
}
 8005358:	bf00      	nop
 800535a:	3708      	adds	r7, #8
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}
 8005360:	2001434c 	.word	0x2001434c

08005364 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8005364:	b580      	push	{r7, lr}
 8005366:	b082      	sub	sp, #8
 8005368:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800536a:	f3ef 8311 	mrs	r3, BASEPRI
 800536e:	f04f 0120 	mov.w	r1, #32
 8005372:	f381 8811 	msr	BASEPRI, r1
 8005376:	607b      	str	r3, [r7, #4]
 8005378:	4807      	ldr	r0, [pc, #28]	; (8005398 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800537a:	f7fe fe32 	bl	8003fe2 <_PreparePacket>
 800537e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8005380:	2211      	movs	r2, #17
 8005382:	6839      	ldr	r1, [r7, #0]
 8005384:	6838      	ldr	r0, [r7, #0]
 8005386:	f7fe ff1f 	bl	80041c8 <_SendPacket>
  RECORD_END();
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f383 8811 	msr	BASEPRI, r3
}
 8005390:	bf00      	nop
 8005392:	3708      	adds	r7, #8
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}
 8005398:	2001434c 	.word	0x2001434c

0800539c <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800539c:	b580      	push	{r7, lr}
 800539e:	b088      	sub	sp, #32
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80053a4:	f3ef 8311 	mrs	r3, BASEPRI
 80053a8:	f04f 0120 	mov.w	r1, #32
 80053ac:	f381 8811 	msr	BASEPRI, r1
 80053b0:	617b      	str	r3, [r7, #20]
 80053b2:	4819      	ldr	r0, [pc, #100]	; (8005418 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80053b4:	f7fe fe15 	bl	8003fe2 <_PreparePacket>
 80053b8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80053be:	4b17      	ldr	r3, [pc, #92]	; (800541c <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80053c0:	691b      	ldr	r3, [r3, #16]
 80053c2:	687a      	ldr	r2, [r7, #4]
 80053c4:	1ad3      	subs	r3, r2, r3
 80053c6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	61fb      	str	r3, [r7, #28]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	61bb      	str	r3, [r7, #24]
 80053d0:	e00b      	b.n	80053ea <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80053d2:	69bb      	ldr	r3, [r7, #24]
 80053d4:	b2da      	uxtb	r2, r3
 80053d6:	69fb      	ldr	r3, [r7, #28]
 80053d8:	1c59      	adds	r1, r3, #1
 80053da:	61f9      	str	r1, [r7, #28]
 80053dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053e0:	b2d2      	uxtb	r2, r2
 80053e2:	701a      	strb	r2, [r3, #0]
 80053e4:	69bb      	ldr	r3, [r7, #24]
 80053e6:	09db      	lsrs	r3, r3, #7
 80053e8:	61bb      	str	r3, [r7, #24]
 80053ea:	69bb      	ldr	r3, [r7, #24]
 80053ec:	2b7f      	cmp	r3, #127	; 0x7f
 80053ee:	d8f0      	bhi.n	80053d2 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80053f0:	69fb      	ldr	r3, [r7, #28]
 80053f2:	1c5a      	adds	r2, r3, #1
 80053f4:	61fa      	str	r2, [r7, #28]
 80053f6:	69ba      	ldr	r2, [r7, #24]
 80053f8:	b2d2      	uxtb	r2, r2
 80053fa:	701a      	strb	r2, [r3, #0]
 80053fc:	69fb      	ldr	r3, [r7, #28]
 80053fe:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8005400:	2208      	movs	r2, #8
 8005402:	68f9      	ldr	r1, [r7, #12]
 8005404:	6938      	ldr	r0, [r7, #16]
 8005406:	f7fe fedf 	bl	80041c8 <_SendPacket>
  RECORD_END();
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	f383 8811 	msr	BASEPRI, r3
}
 8005410:	bf00      	nop
 8005412:	3720      	adds	r7, #32
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}
 8005418:	2001434c 	.word	0x2001434c
 800541c:	2001431c 	.word	0x2001431c

08005420 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8005420:	b580      	push	{r7, lr}
 8005422:	b088      	sub	sp, #32
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005428:	f3ef 8311 	mrs	r3, BASEPRI
 800542c:	f04f 0120 	mov.w	r1, #32
 8005430:	f381 8811 	msr	BASEPRI, r1
 8005434:	617b      	str	r3, [r7, #20]
 8005436:	4819      	ldr	r0, [pc, #100]	; (800549c <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8005438:	f7fe fdd3 	bl	8003fe2 <_PreparePacket>
 800543c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005442:	4b17      	ldr	r3, [pc, #92]	; (80054a0 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8005444:	691b      	ldr	r3, [r3, #16]
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	1ad3      	subs	r3, r2, r3
 800544a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	61fb      	str	r3, [r7, #28]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	61bb      	str	r3, [r7, #24]
 8005454:	e00b      	b.n	800546e <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8005456:	69bb      	ldr	r3, [r7, #24]
 8005458:	b2da      	uxtb	r2, r3
 800545a:	69fb      	ldr	r3, [r7, #28]
 800545c:	1c59      	adds	r1, r3, #1
 800545e:	61f9      	str	r1, [r7, #28]
 8005460:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005464:	b2d2      	uxtb	r2, r2
 8005466:	701a      	strb	r2, [r3, #0]
 8005468:	69bb      	ldr	r3, [r7, #24]
 800546a:	09db      	lsrs	r3, r3, #7
 800546c:	61bb      	str	r3, [r7, #24]
 800546e:	69bb      	ldr	r3, [r7, #24]
 8005470:	2b7f      	cmp	r3, #127	; 0x7f
 8005472:	d8f0      	bhi.n	8005456 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8005474:	69fb      	ldr	r3, [r7, #28]
 8005476:	1c5a      	adds	r2, r3, #1
 8005478:	61fa      	str	r2, [r7, #28]
 800547a:	69ba      	ldr	r2, [r7, #24]
 800547c:	b2d2      	uxtb	r2, r2
 800547e:	701a      	strb	r2, [r3, #0]
 8005480:	69fb      	ldr	r3, [r7, #28]
 8005482:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8005484:	2204      	movs	r2, #4
 8005486:	68f9      	ldr	r1, [r7, #12]
 8005488:	6938      	ldr	r0, [r7, #16]
 800548a:	f7fe fe9d 	bl	80041c8 <_SendPacket>
  RECORD_END();
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	f383 8811 	msr	BASEPRI, r3
}
 8005494:	bf00      	nop
 8005496:	3720      	adds	r7, #32
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}
 800549c:	2001434c 	.word	0x2001434c
 80054a0:	2001431c 	.word	0x2001431c

080054a4 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b088      	sub	sp, #32
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80054ac:	f3ef 8311 	mrs	r3, BASEPRI
 80054b0:	f04f 0120 	mov.w	r1, #32
 80054b4:	f381 8811 	msr	BASEPRI, r1
 80054b8:	617b      	str	r3, [r7, #20]
 80054ba:	4819      	ldr	r0, [pc, #100]	; (8005520 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80054bc:	f7fe fd91 	bl	8003fe2 <_PreparePacket>
 80054c0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80054c6:	4b17      	ldr	r3, [pc, #92]	; (8005524 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80054c8:	691b      	ldr	r3, [r3, #16]
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	1ad3      	subs	r3, r2, r3
 80054ce:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	61fb      	str	r3, [r7, #28]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	61bb      	str	r3, [r7, #24]
 80054d8:	e00b      	b.n	80054f2 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80054da:	69bb      	ldr	r3, [r7, #24]
 80054dc:	b2da      	uxtb	r2, r3
 80054de:	69fb      	ldr	r3, [r7, #28]
 80054e0:	1c59      	adds	r1, r3, #1
 80054e2:	61f9      	str	r1, [r7, #28]
 80054e4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80054e8:	b2d2      	uxtb	r2, r2
 80054ea:	701a      	strb	r2, [r3, #0]
 80054ec:	69bb      	ldr	r3, [r7, #24]
 80054ee:	09db      	lsrs	r3, r3, #7
 80054f0:	61bb      	str	r3, [r7, #24]
 80054f2:	69bb      	ldr	r3, [r7, #24]
 80054f4:	2b7f      	cmp	r3, #127	; 0x7f
 80054f6:	d8f0      	bhi.n	80054da <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80054f8:	69fb      	ldr	r3, [r7, #28]
 80054fa:	1c5a      	adds	r2, r3, #1
 80054fc:	61fa      	str	r2, [r7, #28]
 80054fe:	69ba      	ldr	r2, [r7, #24]
 8005500:	b2d2      	uxtb	r2, r2
 8005502:	701a      	strb	r2, [r3, #0]
 8005504:	69fb      	ldr	r3, [r7, #28]
 8005506:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8005508:	2206      	movs	r2, #6
 800550a:	68f9      	ldr	r1, [r7, #12]
 800550c:	6938      	ldr	r0, [r7, #16]
 800550e:	f7fe fe5b 	bl	80041c8 <_SendPacket>
  RECORD_END();
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	f383 8811 	msr	BASEPRI, r3
}
 8005518:	bf00      	nop
 800551a:	3720      	adds	r7, #32
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}
 8005520:	2001434c 	.word	0x2001434c
 8005524:	2001431c 	.word	0x2001431c

08005528 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8005528:	b580      	push	{r7, lr}
 800552a:	b08c      	sub	sp, #48	; 0x30
 800552c:	af00      	add	r7, sp, #0
 800552e:	4603      	mov	r3, r0
 8005530:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8005532:	4b3b      	ldr	r3, [pc, #236]	; (8005620 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d06d      	beq.n	8005616 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800553a:	4b39      	ldr	r3, [pc, #228]	; (8005620 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8005540:	2300      	movs	r3, #0
 8005542:	62bb      	str	r3, [r7, #40]	; 0x28
 8005544:	e008      	b.n	8005558 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8005546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005548:	691b      	ldr	r3, [r3, #16]
 800554a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 800554c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800554e:	2b00      	cmp	r3, #0
 8005550:	d007      	beq.n	8005562 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8005552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005554:	3301      	adds	r3, #1
 8005556:	62bb      	str	r3, [r7, #40]	; 0x28
 8005558:	79fb      	ldrb	r3, [r7, #7]
 800555a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800555c:	429a      	cmp	r2, r3
 800555e:	d3f2      	bcc.n	8005546 <SEGGER_SYSVIEW_SendModule+0x1e>
 8005560:	e000      	b.n	8005564 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8005562:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8005564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005566:	2b00      	cmp	r3, #0
 8005568:	d055      	beq.n	8005616 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800556a:	f3ef 8311 	mrs	r3, BASEPRI
 800556e:	f04f 0120 	mov.w	r1, #32
 8005572:	f381 8811 	msr	BASEPRI, r1
 8005576:	617b      	str	r3, [r7, #20]
 8005578:	482a      	ldr	r0, [pc, #168]	; (8005624 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800557a:	f7fe fd32 	bl	8003fe2 <_PreparePacket>
 800557e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	627b      	str	r3, [r7, #36]	; 0x24
 8005588:	79fb      	ldrb	r3, [r7, #7]
 800558a:	623b      	str	r3, [r7, #32]
 800558c:	e00b      	b.n	80055a6 <SEGGER_SYSVIEW_SendModule+0x7e>
 800558e:	6a3b      	ldr	r3, [r7, #32]
 8005590:	b2da      	uxtb	r2, r3
 8005592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005594:	1c59      	adds	r1, r3, #1
 8005596:	6279      	str	r1, [r7, #36]	; 0x24
 8005598:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800559c:	b2d2      	uxtb	r2, r2
 800559e:	701a      	strb	r2, [r3, #0]
 80055a0:	6a3b      	ldr	r3, [r7, #32]
 80055a2:	09db      	lsrs	r3, r3, #7
 80055a4:	623b      	str	r3, [r7, #32]
 80055a6:	6a3b      	ldr	r3, [r7, #32]
 80055a8:	2b7f      	cmp	r3, #127	; 0x7f
 80055aa:	d8f0      	bhi.n	800558e <SEGGER_SYSVIEW_SendModule+0x66>
 80055ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ae:	1c5a      	adds	r2, r3, #1
 80055b0:	627a      	str	r2, [r7, #36]	; 0x24
 80055b2:	6a3a      	ldr	r2, [r7, #32]
 80055b4:	b2d2      	uxtb	r2, r2
 80055b6:	701a      	strb	r2, [r3, #0]
 80055b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ba:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	61fb      	str	r3, [r7, #28]
 80055c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	61bb      	str	r3, [r7, #24]
 80055c6:	e00b      	b.n	80055e0 <SEGGER_SYSVIEW_SendModule+0xb8>
 80055c8:	69bb      	ldr	r3, [r7, #24]
 80055ca:	b2da      	uxtb	r2, r3
 80055cc:	69fb      	ldr	r3, [r7, #28]
 80055ce:	1c59      	adds	r1, r3, #1
 80055d0:	61f9      	str	r1, [r7, #28]
 80055d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80055d6:	b2d2      	uxtb	r2, r2
 80055d8:	701a      	strb	r2, [r3, #0]
 80055da:	69bb      	ldr	r3, [r7, #24]
 80055dc:	09db      	lsrs	r3, r3, #7
 80055de:	61bb      	str	r3, [r7, #24]
 80055e0:	69bb      	ldr	r3, [r7, #24]
 80055e2:	2b7f      	cmp	r3, #127	; 0x7f
 80055e4:	d8f0      	bhi.n	80055c8 <SEGGER_SYSVIEW_SendModule+0xa0>
 80055e6:	69fb      	ldr	r3, [r7, #28]
 80055e8:	1c5a      	adds	r2, r3, #1
 80055ea:	61fa      	str	r2, [r7, #28]
 80055ec:	69ba      	ldr	r2, [r7, #24]
 80055ee:	b2d2      	uxtb	r2, r2
 80055f0:	701a      	strb	r2, [r3, #0]
 80055f2:	69fb      	ldr	r3, [r7, #28]
 80055f4:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80055f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	2280      	movs	r2, #128	; 0x80
 80055fc:	4619      	mov	r1, r3
 80055fe:	68f8      	ldr	r0, [r7, #12]
 8005600:	f7fe fca2 	bl	8003f48 <_EncodeStr>
 8005604:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8005606:	2216      	movs	r2, #22
 8005608:	68f9      	ldr	r1, [r7, #12]
 800560a:	6938      	ldr	r0, [r7, #16]
 800560c:	f7fe fddc 	bl	80041c8 <_SendPacket>
      RECORD_END();
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8005616:	bf00      	nop
 8005618:	3730      	adds	r7, #48	; 0x30
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}
 800561e:	bf00      	nop
 8005620:	20014344 	.word	0x20014344
 8005624:	2001434c 	.word	0x2001434c

08005628 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8005628:	b580      	push	{r7, lr}
 800562a:	b082      	sub	sp, #8
 800562c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800562e:	4b0c      	ldr	r3, [pc, #48]	; (8005660 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d00f      	beq.n	8005656 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8005636:	4b0a      	ldr	r3, [pc, #40]	; (8005660 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	68db      	ldr	r3, [r3, #12]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d002      	beq.n	800564a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	68db      	ldr	r3, [r3, #12]
 8005648:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	691b      	ldr	r3, [r3, #16]
 800564e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d1f2      	bne.n	800563c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8005656:	bf00      	nop
 8005658:	3708      	adds	r7, #8
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}
 800565e:	bf00      	nop
 8005660:	20014344 	.word	0x20014344

08005664 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8005664:	b580      	push	{r7, lr}
 8005666:	b086      	sub	sp, #24
 8005668:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800566a:	f3ef 8311 	mrs	r3, BASEPRI
 800566e:	f04f 0120 	mov.w	r1, #32
 8005672:	f381 8811 	msr	BASEPRI, r1
 8005676:	60fb      	str	r3, [r7, #12]
 8005678:	4817      	ldr	r0, [pc, #92]	; (80056d8 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800567a:	f7fe fcb2 	bl	8003fe2 <_PreparePacket>
 800567e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	617b      	str	r3, [r7, #20]
 8005688:	4b14      	ldr	r3, [pc, #80]	; (80056dc <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800568a:	781b      	ldrb	r3, [r3, #0]
 800568c:	613b      	str	r3, [r7, #16]
 800568e:	e00b      	b.n	80056a8 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	b2da      	uxtb	r2, r3
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	1c59      	adds	r1, r3, #1
 8005698:	6179      	str	r1, [r7, #20]
 800569a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800569e:	b2d2      	uxtb	r2, r2
 80056a0:	701a      	strb	r2, [r3, #0]
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	09db      	lsrs	r3, r3, #7
 80056a6:	613b      	str	r3, [r7, #16]
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	2b7f      	cmp	r3, #127	; 0x7f
 80056ac:	d8f0      	bhi.n	8005690 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	1c5a      	adds	r2, r3, #1
 80056b2:	617a      	str	r2, [r7, #20]
 80056b4:	693a      	ldr	r2, [r7, #16]
 80056b6:	b2d2      	uxtb	r2, r2
 80056b8:	701a      	strb	r2, [r3, #0]
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80056be:	221b      	movs	r2, #27
 80056c0:	6879      	ldr	r1, [r7, #4]
 80056c2:	68b8      	ldr	r0, [r7, #8]
 80056c4:	f7fe fd80 	bl	80041c8 <_SendPacket>
  RECORD_END();
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f383 8811 	msr	BASEPRI, r3
}
 80056ce:	bf00      	nop
 80056d0:	3718      	adds	r7, #24
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}
 80056d6:	bf00      	nop
 80056d8:	2001434c 	.word	0x2001434c
 80056dc:	20014348 	.word	0x20014348

080056e0 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 80056e0:	b40f      	push	{r0, r1, r2, r3}
 80056e2:	b580      	push	{r7, lr}
 80056e4:	b082      	sub	sp, #8
 80056e6:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 80056e8:	f107 0314 	add.w	r3, r7, #20
 80056ec:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 80056ee:	1d3b      	adds	r3, r7, #4
 80056f0:	461a      	mov	r2, r3
 80056f2:	2100      	movs	r1, #0
 80056f4:	6938      	ldr	r0, [r7, #16]
 80056f6:	f7fe fff1 	bl	80046dc <_VPrintTarget>
  va_end(ParamList);
}
 80056fa:	bf00      	nop
 80056fc:	3708      	adds	r7, #8
 80056fe:	46bd      	mov	sp, r7
 8005700:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005704:	b004      	add	sp, #16
 8005706:	4770      	bx	lr

08005708 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8005708:	b580      	push	{r7, lr}
 800570a:	b08a      	sub	sp, #40	; 0x28
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005710:	f3ef 8311 	mrs	r3, BASEPRI
 8005714:	f04f 0120 	mov.w	r1, #32
 8005718:	f381 8811 	msr	BASEPRI, r1
 800571c:	617b      	str	r3, [r7, #20]
 800571e:	4827      	ldr	r0, [pc, #156]	; (80057bc <SEGGER_SYSVIEW_Warn+0xb4>)
 8005720:	f7fe fc5f 	bl	8003fe2 <_PreparePacket>
 8005724:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005726:	2280      	movs	r2, #128	; 0x80
 8005728:	6879      	ldr	r1, [r7, #4]
 800572a:	6938      	ldr	r0, [r7, #16]
 800572c:	f7fe fc0c 	bl	8003f48 <_EncodeStr>
 8005730:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	627b      	str	r3, [r7, #36]	; 0x24
 8005736:	2301      	movs	r3, #1
 8005738:	623b      	str	r3, [r7, #32]
 800573a:	e00b      	b.n	8005754 <SEGGER_SYSVIEW_Warn+0x4c>
 800573c:	6a3b      	ldr	r3, [r7, #32]
 800573e:	b2da      	uxtb	r2, r3
 8005740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005742:	1c59      	adds	r1, r3, #1
 8005744:	6279      	str	r1, [r7, #36]	; 0x24
 8005746:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800574a:	b2d2      	uxtb	r2, r2
 800574c:	701a      	strb	r2, [r3, #0]
 800574e:	6a3b      	ldr	r3, [r7, #32]
 8005750:	09db      	lsrs	r3, r3, #7
 8005752:	623b      	str	r3, [r7, #32]
 8005754:	6a3b      	ldr	r3, [r7, #32]
 8005756:	2b7f      	cmp	r3, #127	; 0x7f
 8005758:	d8f0      	bhi.n	800573c <SEGGER_SYSVIEW_Warn+0x34>
 800575a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800575c:	1c5a      	adds	r2, r3, #1
 800575e:	627a      	str	r2, [r7, #36]	; 0x24
 8005760:	6a3a      	ldr	r2, [r7, #32]
 8005762:	b2d2      	uxtb	r2, r2
 8005764:	701a      	strb	r2, [r3, #0]
 8005766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005768:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	61fb      	str	r3, [r7, #28]
 800576e:	2300      	movs	r3, #0
 8005770:	61bb      	str	r3, [r7, #24]
 8005772:	e00b      	b.n	800578c <SEGGER_SYSVIEW_Warn+0x84>
 8005774:	69bb      	ldr	r3, [r7, #24]
 8005776:	b2da      	uxtb	r2, r3
 8005778:	69fb      	ldr	r3, [r7, #28]
 800577a:	1c59      	adds	r1, r3, #1
 800577c:	61f9      	str	r1, [r7, #28]
 800577e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005782:	b2d2      	uxtb	r2, r2
 8005784:	701a      	strb	r2, [r3, #0]
 8005786:	69bb      	ldr	r3, [r7, #24]
 8005788:	09db      	lsrs	r3, r3, #7
 800578a:	61bb      	str	r3, [r7, #24]
 800578c:	69bb      	ldr	r3, [r7, #24]
 800578e:	2b7f      	cmp	r3, #127	; 0x7f
 8005790:	d8f0      	bhi.n	8005774 <SEGGER_SYSVIEW_Warn+0x6c>
 8005792:	69fb      	ldr	r3, [r7, #28]
 8005794:	1c5a      	adds	r2, r3, #1
 8005796:	61fa      	str	r2, [r7, #28]
 8005798:	69ba      	ldr	r2, [r7, #24]
 800579a:	b2d2      	uxtb	r2, r2
 800579c:	701a      	strb	r2, [r3, #0]
 800579e:	69fb      	ldr	r3, [r7, #28]
 80057a0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80057a2:	221a      	movs	r2, #26
 80057a4:	68f9      	ldr	r1, [r7, #12]
 80057a6:	6938      	ldr	r0, [r7, #16]
 80057a8:	f7fe fd0e 	bl	80041c8 <_SendPacket>
  RECORD_END();
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	f383 8811 	msr	BASEPRI, r3
}
 80057b2:	bf00      	nop
 80057b4:	3728      	adds	r7, #40	; 0x28
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}
 80057ba:	bf00      	nop
 80057bc:	2001434c 	.word	0x2001434c

080057c0 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 80057c0:	b580      	push	{r7, lr}
 80057c2:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80057c4:	4b13      	ldr	r3, [pc, #76]	; (8005814 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80057c6:	7e1b      	ldrb	r3, [r3, #24]
 80057c8:	4619      	mov	r1, r3
 80057ca:	4a13      	ldr	r2, [pc, #76]	; (8005818 <SEGGER_SYSVIEW_IsStarted+0x58>)
 80057cc:	460b      	mov	r3, r1
 80057ce:	005b      	lsls	r3, r3, #1
 80057d0:	440b      	add	r3, r1
 80057d2:	00db      	lsls	r3, r3, #3
 80057d4:	4413      	add	r3, r2
 80057d6:	336c      	adds	r3, #108	; 0x6c
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	4b0e      	ldr	r3, [pc, #56]	; (8005814 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80057dc:	7e1b      	ldrb	r3, [r3, #24]
 80057de:	4618      	mov	r0, r3
 80057e0:	490d      	ldr	r1, [pc, #52]	; (8005818 <SEGGER_SYSVIEW_IsStarted+0x58>)
 80057e2:	4603      	mov	r3, r0
 80057e4:	005b      	lsls	r3, r3, #1
 80057e6:	4403      	add	r3, r0
 80057e8:	00db      	lsls	r3, r3, #3
 80057ea:	440b      	add	r3, r1
 80057ec:	3370      	adds	r3, #112	; 0x70
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	429a      	cmp	r2, r3
 80057f2:	d00b      	beq.n	800580c <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80057f4:	4b07      	ldr	r3, [pc, #28]	; (8005814 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80057f6:	789b      	ldrb	r3, [r3, #2]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d107      	bne.n	800580c <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80057fc:	4b05      	ldr	r3, [pc, #20]	; (8005814 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80057fe:	2201      	movs	r2, #1
 8005800:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005802:	f7fe fbfb 	bl	8003ffc <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005806:	4b03      	ldr	r3, [pc, #12]	; (8005814 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005808:	2200      	movs	r2, #0
 800580a:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 800580c:	4b01      	ldr	r3, [pc, #4]	; (8005814 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800580e:	781b      	ldrb	r3, [r3, #0]
}
 8005810:	4618      	mov	r0, r3
 8005812:	bd80      	pop	{r7, pc}
 8005814:	2001431c 	.word	0x2001431c
 8005818:	20012e5c 	.word	0x20012e5c

0800581c <__libc_init_array>:
 800581c:	b570      	push	{r4, r5, r6, lr}
 800581e:	4d0d      	ldr	r5, [pc, #52]	; (8005854 <__libc_init_array+0x38>)
 8005820:	4c0d      	ldr	r4, [pc, #52]	; (8005858 <__libc_init_array+0x3c>)
 8005822:	1b64      	subs	r4, r4, r5
 8005824:	10a4      	asrs	r4, r4, #2
 8005826:	2600      	movs	r6, #0
 8005828:	42a6      	cmp	r6, r4
 800582a:	d109      	bne.n	8005840 <__libc_init_array+0x24>
 800582c:	4d0b      	ldr	r5, [pc, #44]	; (800585c <__libc_init_array+0x40>)
 800582e:	4c0c      	ldr	r4, [pc, #48]	; (8005860 <__libc_init_array+0x44>)
 8005830:	f000 f83e 	bl	80058b0 <_init>
 8005834:	1b64      	subs	r4, r4, r5
 8005836:	10a4      	asrs	r4, r4, #2
 8005838:	2600      	movs	r6, #0
 800583a:	42a6      	cmp	r6, r4
 800583c:	d105      	bne.n	800584a <__libc_init_array+0x2e>
 800583e:	bd70      	pop	{r4, r5, r6, pc}
 8005840:	f855 3b04 	ldr.w	r3, [r5], #4
 8005844:	4798      	blx	r3
 8005846:	3601      	adds	r6, #1
 8005848:	e7ee      	b.n	8005828 <__libc_init_array+0xc>
 800584a:	f855 3b04 	ldr.w	r3, [r5], #4
 800584e:	4798      	blx	r3
 8005850:	3601      	adds	r6, #1
 8005852:	e7f2      	b.n	800583a <__libc_init_array+0x1e>
 8005854:	08005a50 	.word	0x08005a50
 8005858:	08005a50 	.word	0x08005a50
 800585c:	08005a50 	.word	0x08005a50
 8005860:	08005a54 	.word	0x08005a54

08005864 <memcmp>:
 8005864:	b510      	push	{r4, lr}
 8005866:	3901      	subs	r1, #1
 8005868:	4402      	add	r2, r0
 800586a:	4290      	cmp	r0, r2
 800586c:	d101      	bne.n	8005872 <memcmp+0xe>
 800586e:	2000      	movs	r0, #0
 8005870:	e005      	b.n	800587e <memcmp+0x1a>
 8005872:	7803      	ldrb	r3, [r0, #0]
 8005874:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005878:	42a3      	cmp	r3, r4
 800587a:	d001      	beq.n	8005880 <memcmp+0x1c>
 800587c:	1b18      	subs	r0, r3, r4
 800587e:	bd10      	pop	{r4, pc}
 8005880:	3001      	adds	r0, #1
 8005882:	e7f2      	b.n	800586a <memcmp+0x6>

08005884 <memcpy>:
 8005884:	440a      	add	r2, r1
 8005886:	4291      	cmp	r1, r2
 8005888:	f100 33ff 	add.w	r3, r0, #4294967295
 800588c:	d100      	bne.n	8005890 <memcpy+0xc>
 800588e:	4770      	bx	lr
 8005890:	b510      	push	{r4, lr}
 8005892:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005896:	f803 4f01 	strb.w	r4, [r3, #1]!
 800589a:	4291      	cmp	r1, r2
 800589c:	d1f9      	bne.n	8005892 <memcpy+0xe>
 800589e:	bd10      	pop	{r4, pc}

080058a0 <memset>:
 80058a0:	4402      	add	r2, r0
 80058a2:	4603      	mov	r3, r0
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d100      	bne.n	80058aa <memset+0xa>
 80058a8:	4770      	bx	lr
 80058aa:	f803 1b01 	strb.w	r1, [r3], #1
 80058ae:	e7f9      	b.n	80058a4 <memset+0x4>

080058b0 <_init>:
 80058b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058b2:	bf00      	nop
 80058b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058b6:	bc08      	pop	{r3}
 80058b8:	469e      	mov	lr, r3
 80058ba:	4770      	bx	lr

080058bc <_fini>:
 80058bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058be:	bf00      	nop
 80058c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058c2:	bc08      	pop	{r3}
 80058c4:	469e      	mov	lr, r3
 80058c6:	4770      	bx	lr
